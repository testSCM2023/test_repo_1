/**************************************************************************
 * FILE NAME: S32R294.h                                                   *
 * REVISION:  2.0                                                         *
 *                                                                        *
 * DESCRIPTION:                                                           *
 * This file contains all of the register and bit field definitions for   *
 * the S32R294.                                                           *
 *========================================================================*
 * UPDATE HISTORY                                                         *
 * REV      AUTHOR      DATE       DESCRIPTION OF CHANGE                  *
 * ---   -----------  ---------    ---------------------                  *
 * 1.0     Taru Shree  09-12-18   Initial release based                   *
 *                                on RM rev.1 DraftD                      *
 *                                                                        *
 * 1.1     Taru Shree  10-09-18   Initial release based                   *
 *                                on RM rev.1 DraftE                      *
 *                                                                        *
 * 1.2     Taru Shree  11-06-18   Initial release based                   *
 *                                on RM rev.1 DraftF                      *
 *                                                                        *
 * 1.3     Taru Shree  01-02-19   Initial release based                   *
 *                                on RM rev.1 DraftI                      *
 *                                                                        *
 * 1.4     Taru Shree  02-06-19   Initial release based                   *
 *                                on RM rev.1 DraftJ                      *
 *                                                                        *
 * 1.5     Taru Shree  03-14-19   1)Initial release based                 *
 *                                on RM rev.1 DraftK                      *
 *                                2)Representation of few registers in    *
 *                                following blocks is changed             *
 *                                (w.r.t arrays)-                         *
 *                                Flexray-MB array containing MBCCSR,     *
 *                                        MBCCFR,MBFIDR,MBIDXR.           *
 *                                ETIMER-CH array encompassing COMP1,     *
 *                                       COMP2,CAPT1,CAPT2â€¦FILT.          *
 *                                SIUL2-Individual arrays of-             *
 *                                      IFMCR                             *  
 *                                      MSCR                              *
 *                                      IMCR                              *
 *                                      MPGPDO                            *
 *                                TMU-TRITRATSR array encompassing TRITSR *
 *                                and TRATSR.                             *
 *                                3)All internal blocks are removed.      *
 *                                4)In define statements CMU_x_FC is      *
 *                                changed to CMU_FC_x.                    *
 *                                                                        *
 * 1.6     Taru Shree  05-20-19   1)Initial release based                 *
 *                                on RM rev.1 DraftM.                     *
 *                                2)Representation of few registers in    *
 *                                following blocks is changed             *
 *                                (w.r.t arrays)-                         *
 *                                CRC - CHANNEL array containing CFG,INP, *
 *                                      CSTAT and OUTP registers.         *
 *                                CTU- Individual array of TCR registers. *
 *                                DMA_CRC- CONTROL_REGISTER array         *
 *                                     containing CTL, ICRC and FCRC      *
 *                                     registers.                         *
 *                                FLEXRAY- MB array containing CCSR,CCFR, *
 *                                     FIDR,IDXR registers instead of     *
 *                                     MBCCSR, MBCCFR, MBFIDR and MBIDXR  * 
 *                                     respectively.                      *
 *                               STCU2- LB array containing CTRL, PCS,    *
 *                                      MISRELSW, MISREHSW, MISRRLSW and  *
 *                                      MISRRHSW registers.               *
 *                               STM- CHANNEL array containing CCR, CIR   *
 *                                    and CMP registers.                  *
 *                               INTC- Individual arrays of               *
 *                                     -CRP                               *
 *                                     -IACKR                             *
 *                                     -EOIR                              *
 *                                    CHANNEL array containing            *
 *                                     -MMRC registers                    *
 *                                     -Array of HIPRIC registers         *
 *                                     -Array of LATC registers           *
 *                                     -Array of TIMERC registers         *
 *                               MC_ME- Individual array of PCTL registers*
 *                               3)In PRAMC block macro's names have been *
 *                               changed(IRAM TO DRAM).                   *
 *                               4)RDU block is removed.                  *
 *                               5)In FXOSC block, register names have    *
 *                               changed from FXOSC_CTRL,FXOSC_STAT to    *
 *                               CTRL,STAT respectively.                  *
 *                               6)Module name changed from QuadSPI_AMBA  *
 *                               to QuadSPI_ARDB.                         *
 *                               7)SIUL2-                                 *
 *                               GPDO register- Bitfield name changed     *
 *                               from PDO_A to PDO_N.                     *
 *                               GPDI register- Bitfield name changed     *
 *                               from PDI_A to PDI_N.                     *
 *                                                                        *
 * 1.7     Taru Shree  06-26-19   1)Initial release based                 *
 *                                on RM rev.1 DraftN.                     *
 *                                2)Representation of few registers in    *
 *                                following blocks is changed             *
 *                                (w.r.t arrays)-                         *
 *                                CSI- RX_VC array containing             *
 *                                     RX_PPERRIS_VC, RX_PPERRIE_VC,      * 
 *                                     RX_ERRPOS_VC and RX_NUMPPERR_VC    *
 *                                     -RX array containing               *
 *                                     RX_CBUF_CONFIG,                    *
 *                                     RX_INPLINELEN_CONFIG,              * 
 *                                     RX_LINELEN_CONFIG,                 *
 *                                     RX_NUMLINES_CONFIG,                *
 *                                     RX_CBUF_SRTPTR, RX_CBUF_BUFLEN,    *
 *                                     RX_CBUF_NUMLINE, RX_CBUF_LPDI,     *
 *                                     RX_CBUF_NXTLINE, RX_CBUF_RXLINE,   *
 *                                     RX_CBUF_ERRLEN and RX_CBUF_ERRLINE *
 *                                     registers.                         * 
 *                                SIUL2- Individual arrays of following   *
 *                                       registers                        *
 *                                       -GPDO                            *
 *                                       -GPDI                            *
 *                                       -PGPDO                           *   
 *                                       -PGPDI                           *
 *                                3)MTR_BIST and MTR_MCT blocks are added.*
 *                                4)Tag names are changed in define       *
 *                                statements of CORE_PLL and PERIPH_PLL.  * 
 *                                                                        *
 * 1.8     Taru Shree  11-08-19   1)Initial release based                 *
 *                                on RM rev.1.                            * 
 *                                2)ADC-                                  *
 *                                Module name is changed from SAR_ADC to  *
 *                                ADC.                                    *
 *                                3)AIPS- Numerical suffix of PACR and    *
 *                                OPACR registers is changed to           *
 *                                alphabetical suffix.                    *
 *                                4)AXBS-                                 * 
 *                                CHANNEL array containing PRS and CRS    *
 *                                registers.                              *
 *                                5)CSI-                                  *
 *                                Individual array of RX_LANCS registers. *
 *                                6)CTE-                                  * 
 *                                LUT array containing LSB and MSB        *
 *                                registers.                              *
 *                                7)CTU-                                  *
 *                                -Array name is changed                  *
 *                                 from CLR_C__CLR_B__CLR_A to CLR.       *   
 *                                -Register names are changed from        * 
 *                                 CLR_A, CLR_B and CLR_C  to A, B        *
 *                                 and C respectively.                    *
 *                                -Array name FR is changed to FRr.       *
 *                                8)EIM-                                  *
 *                                Individual arrays of following registers*
 *                                -EICHD_WORD0                            *
 *                                -EICHD_WORD1                            *
 *                                -EICHD_WORD2                            *   
 *                                9)ETIMER- Individual array of DREQ      *
 *                                registers.                              *
 *                                10)FLEXPWM-                             *
 *                                SUB array containing CNT, INIT, CTRL2,  *
 *                                CTRL1, VAL0, VAL1, VAL2, VAL3, VAL4,    *
 *                                OCTRL, OCTRL, STS, INTEN, DMAEN,TCTRL,  *
 *                                DISMAP, DTCNT0, DTCNT1, CAPTCTRLX,      *
 *                                CAPTCMPX, CVAL0, CVAL0CYC, CVAL1 and    *
 *                                CVAL1CYC registers.                     *
 *                                11)FR(Flexray)-                         *                   
 *                                -Alternate group names are changed      * 
 *                                 from TI2CR0_REL_TI2CR0_ABS to TI2CR0.  * 
 *                                 from TI2CR1_REL_TI2CR1_ABS to TI2CR1.  * 
 *                                -Register names are changed             *            
 *                                 from TI2CRx_ABS to ABS.                *          
 *                                 from TI2CRx_REL to REL.                * 
 *                                12)INTC-                                *
 *                                Few register names are changed.         *
 *                                13)MC_ME-                               *
 *                                Individual array of PS registers.       *
 *                                14)PRAMC-                               *
 *                                Few register names are changed.         *
 *                                15)QUADSPI-                             *
 *                                FR register tag is changed from FR to   *
 *                                FRr.                                    *  
 *                                16)SEMA42-                              *                                  
 *                                -Register names are changed             *       
 *                                 from RSTGT_R to R.                     *           
 *                                 from RSTGT_W to W.                     *
 *                                17)SPI-                                 *     
 *                                -Alternate group names are changed      *
 *                                 from CTAR_CTAR_SLAVE to MODE.          *
 *                                 from PUSHR_SLAVE_PUSHR to PUSHR.       *
 *                                -Tag names are changed in define        *
 *                                 statements of SPI_1, SPI_2, SPI_3 and  *
 *                                 SPI_4.                                 * 
 *                                18)Following blocks are removed         *
 *                                -ATPPHY                                 *
 *                                -FBXC                                   * 
 *                                -MTR                                    *
 *                                                                        *
 * 1.9     Taru Shree  02-19-20   1)Initial release based                 *
 *                                on RM rev.2 DraftA.                     * 
 *                                2)ADC-                                  *
 *                                -MCR register- JTRGEN, JEDGE bitfields  *
 *                                 are added.                             *
 *                                -CEOCFR1 register- EOC_CH40, EOC_CH41â€¦  *
 *                                 EOC_CH47 bitfields are removed.        *
 *                                -CIMR1 register- CIM40, CIM41â€¦CIM47     *
 *                                 bitfields are removed.                 *
 *                                -DMAR1 register- DMA40,DMA41â€¦DMA47      *
 *                                 bitfields are removed.                 *
 *                                -PSR1 register- PRES40,PRES41â€¦PRES47    *
 *                                 bitfields are removed.                 *
 *                                -NCMR1 register- CH40,CH41â€¦CH47         * 
 *                                 bitfields are removed.                 *
 *                                -JCMR1 register- CH40,CH41â€¦CH47         *
 *                                 bitfields are removed.                 *
 *                                -CWENR1 register- CWEN40,CWEN41â€¦47      *
 *                                 bitfields are removed.                 *
 *                                -AWORR1 register- AWOR_CH40,AWOR_CH41â€¦  *
 *                                 AWOR_CH47 bitfields are removed.       *
 *                                -ICDR array size is changed from 16 to 8*
 *                                3)MIPICSI-                              *
 *                                -RX_PHYERRIS register- ERRSYNALIGN      *
 *                                 bitfield is removed.                   *
 *                                -RX_PHYERRIE register- ERSYNALIGNIE     *
 *                                 bitfield is removed.                   *
 *                                -DPHY_SKEWCALS and DPHY_SKEWCALIE       *
 *                                 registers are removed.                 *
 *                                -Following registers are added-         *
 *                                 -DPHY_RX_STARTUP_OVERRIDE              *
 *                                 -DPHY_TX_RDWR_TERM_CAL_0               *
 *                                 -DPHY_TX_RDWR_TERM_CAL_1               *
 *                                 -DPHY_CLKOFFSETCAL_OVRRIDE             *
 *                                 -DPHY_CLKOFFSETCAL_OVRRIDEVAL          *
 *                                 -DPHY_CLKCALVAL_COMPS                  *
 *                                 -DPHY_CLKOFFSETCAL_COMPS               *
 *                                 -DPHY_DATALANE_DESKEW_COMPS0           *   
 *                                 -DPHY_DATAL0OFFSETCAL_OVRCNTRL         *
 *                                 -DPHY_DATALOFFSETCAL_OVRVALUE0         *
 *                                 -DPHY_DATALANE_OFFSETCAL_COMPS0        *
 *                                 -DPHY_DATALOFFSETCAL_VALUE0            *
 *                                 -DPHY_DATALANE_DDLTUNE_COMP0           *
 *                                 -DPHY_DATALANE_DDLTUNE_VALUE0          *
 *                                 -DPHY_DATALANE0_DESKEW_VALUE1          *
 *                                 -DPHY_DATALANE0_DESKEW_VALUE2          *
 *                                 -DPHY_DATALANE_DDLTUNE_OVRVALUE0       *
 *                                 -DPHY_DATALANE0_DESKEW_OVRVALUE1       *
 *                                 -DPHY_DATALANE0_DESKEW_OVRVALUE2       *
 *                                 -DPHY_DATALANE_DESKEW_OVRVALUE11       *
 *                                 -DPHY_DATALANE_DESKEW_OVRVALUE21       *
 *                                 -DPHY_DATALANE_DESKEW_COMPS1           *
 *                                 -DPHY_DATALANE_DESKEW_VALUE11          *
 *                                 -DPHY_DATALANE_DESKEW_VALUE21          *
 *                                 -DPHY_DATAL1OFFSETCAL_OVRCNTRL         *
 *                                 -DPHY_DATALOFFSETCAL_OVRVALUE1         *
 *                                 -DPHY_DATALANE_OFFSETCAL_COMPS1        *
 *                                 -DPHY_DATALOFFSETCAL_VALUE1            *
 *                                 -DPHY_DATALANE_DDLTUNE_COMP1           * 
 *                                 -DPHY_DATALANE_DDLTUNE_VALUE           *
 *                                 -DPHY_DATALANE_DDLTUNE_OVRVALUE1       *
 *                                 -DPHY_DATALANE_DESKEW_OVRVALUE12       *
 *                                 -DPHY_DATALANE_DESKEW_OVRVALUE22       *
 *                                 -DPHY_DATALANE_DESKEW_COMPS2           *  
 *                                 -DPHY_DATALANE_DESKEW_VALUE12          *
 *                                 -DPHY_DATALANE_DESKEW_VALUE22          *
 *                                 -DPHY_DATAL2OFFSETCAL_OVRCNTRL         *
 *                                 -DPHY_DATALOFFSETCAL_OVRVALUE2         *
 *                                 -DPHY_DATALANE_OFFSETCAL_COMPS2        *
 *                                 -DPHY_DATALOFFSETCAL_VALUE2            *
 *                                 -DPHY_DATALANE_DDLTUNE_COMP2           * 
 *                                 -DPHY_DATALANE_DDLTUNE_VALUE2          *
 *                                 -DPHY_DATALANE_DDLTUNE_OVRVALUE2       * 
 *                                 -DPHY_DATALANE_DDLTUNE_OVRVALUE3       *
 *                                 -DPHY_DATALANE_DESKEW_OVRVALUE13       *
 *                                 -DPHY_DATALANE_DESKEW_OVRVALUE23       *
 *                                 -DPHY_DATALANE_DESKEW_COMPS3           *   
 *                                 -DPHY_DATALANE_DESKEW_VALUE13          *
 *                                 -DPHY_DATALANE_DESKEW_VALUE23          *
 *                                 -DPHY_DATAL3OFFSETCAL_OVRCNTRL         *
 *                                 -DPHY_DATALOFFSETCAL_OVRVALUE3         *    
 *                                 -DPHY_DATALANE_OFFSETCAL_COMPS3        * 
 *                                 -DPHY_DATALOFFSETCAL_VALUE3            *
 *                                 -DPHY_DATALANE_DDLTUNE_COMP3           *
 *                                 -DPHY_DATALANE_DDLTUNE_VALUE3          *    
 *                                 -DPHY_TX_TERM_CAL_OVR                  *
 *                                 -DPHY_TX_TERM_CAL_0                    *
 *                                 -DPHY_TX_TERM_CAL_1                    *
 *                                 -DPHY_TERMCAL_STAT2                    *
 *                                4)MCB-                                  *
 *                                MISC2 register- OCOTP_TRIM_ERR bitfield *
 *                                is removed.                             *
 *                                5)MC_ME register-                       *
 *                                -IS register- I_ICONF_CU bitfield is    *
 *                                 removed.                               *
 *                                -IM register- M_ICONF_CU bitfield is    *
 *                                 removed.                               *
 *                                6)PMC-                                  *
 *                                -NCSPD_CTL register- NCSPD_ STAT0,      *
 *                                 NCSPD_CTL17, NCSPD_CTL18â€¦NCSPD_CTL31   *
 *                                 bitfields are removed.                 *
 *                                -NCSPD_STAT register- NCSPD_ STAT0,     *
 *                                 NCSPD_ STAT5, NCSPD_ STAT6,            *
 *                                 NCSPD_ STAT7, NCSPD_ STAT8,            *
 *                                 NCSPD_ STAT17, NCSPD_ STAT18â€¦          *
 *                                 NCSPD_ STAT31 bitfields                *
 *                                 are removed.                           *  
 *                                -CSPD_EVENT_CAPTURE register-           *
 *                                 CSPD_EVENT_CAPTURE6,                   *
 *                                 CSPD_EVENT_CAPTURE7â€¦                   *
 *                                 CSPD_EVENT_CAPTURE29 bitfields are     *
 *                                 removed.                               *
 *                                -NCSPD_EVENT_CAPTURE register-          *
 *                                 NCSPD_EVENT_CAPTURE0,                  *
 *                                 NCSPD_EVENT_CAPTURE5...                *
 *                                 NCSPD_EVENT_CAPTURE8,                  *
 *                                 NCSPD_EVENT_CAPTURE17,18â€¦31 bitfields  *
 *                                 are removed.                           *
 *                                -POR_WDOG_EVENT_CAPTURE array size is   *
 *                                 changed from 3 to 2.                   *
 *                                                                        *
 * 2.0     Taru Shree  06-01-20   1)Initial release based                 *
 *                                on RM rev.2 DraftB.                     *   
 *                                2)CAN_FD-                               *
 *                                Message Buffers are added for 8bytes    *
 *                                payload.                                *  
 *                                3)CMU_FC-                               *
 *                                IER register:                           *
 *                                -FHHAIE and FLLAIE bitfields are added. *
 *                                -FHHIE and FLLIE bitfields are removed. *
 *                                4)MIPICSI2-                             *
 *                                -RX_LANCS register:                     *
 *                                 -D0STOP bitfield is renamed as DSTOP.  *
 *                                 -D0ULPA bitfield is renamed as DULPA.  *
 *                                 -D0ULMA bitfield is renamed as DULMA.  *
 *                                -RX_SR register: SOFRST bitfield is     *
 *                                 added.                                 *
 *                                -RX_PPERRIS_VC register is renamed as   *
 *                                 PPERRIS.                               *
 *                                -RX_PPERRIE_VC register is renamed as   *
 *                                 PPERRIE.                               * 
 *                                -RX_ERRPOS_VC register is renamed as    * 
 *                                 ERRPOS.                                *
 *                                -RX_NUMPPERR_VC register is renamed as  *
 *                                 NUMPPERR.                              *
 *                                -RX_SR register: SOFRST bitfield is     *
 *                                 added.                                 *
 *                                -DPHY_TX_RDWR_TERM_CAL_1 register is    *
 *                                 removed.                               *
 *                                5)FBXC block is added.                  *
 *                                6)QuadSPI-                              *
 *                                -MCR register: DIAG bitfield is         *
 *                                 removed.                               *
 *                                -DLLCRA register: DLL_REFCNTR and DLLRES*
 *                                 bitfields are removed.                 *
 *                                -SFB1AD and SFB2AD registers are added. *
 *                                7)STCU2-                                *  
 *                                -RUNSW register: RUNSW_ABORT bitfield   *
 *                                 is added.                              *
 *                                -ERR_STAT register:                     *
 *                                 ABORTSW bitfield is removed.           *
 *                                -LBRMSW0 register is removed.           *
 *                                8)TMU-                                  *
 *                                -TSR register:                          *
 *                                 TB bitfield is added.                  * 
 *                                                                        *
 *========================================================================*
 * Copyright 2013-2016 Freescale Semiconductor, Inc.                      *
 * Copyright 2016-2020 NXP                                                *
 *                                                                        *********
 * NXP Confidential. This software is owned or controlled by NXP and may only be  *
 * used strictly in accordance with the applicable license terms. By expressly    *
 * accepting such terms or by downloading, installing, activating and/or otherwise*
 * using the software, you are agreeing that you have read, and that you agree to *
 * comply with and are bound by, such license terms. If you do not agree to be    * 
 * bound by the applicable license terms, then you may not retain, install,       *
 * activate or otherwise use the software. The production use license in  *********
 * Section 2.3 is expressly granted for this software.                    *
 *                                                                        *
 **************************************************************************/
/*>>>>>>> NOTE! this file is auto-generated please do not edit it! <<<<<<<*/

/**************************************************************************
 * Example register & bit field write:                                    *
 *                                                                        *
 *  <MODULE>.<REGISTER>.B.<BIT> = 1;                                      *
 *  <MODULE>.<REGISTER>.R       = 0x10000000;                             *
 *                                                                        *
 **************************************************************************/

#ifndef _S32R294_H_
#define _S32R294_H_
#include "typedefs.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __MWERKS__
#pragma push
#pragma ANSI_strict off
#endif
#ifdef __ghs__
#pragma ghs nowarning 618
#endif
#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
#endif


/* ============================================================================
   =============================== Module: ADC ================================
   ============================================================================ */

typedef union ADC_MCR_union_tag {      /* Main Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t OWREN:1;                 /* Overwrite enable */
    vuint32_t WLSIDE:1;
    vuint32_t MODE:1;                  /* Normal scan mode select */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t NSTART:1;                /* Normal conversion start */
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t JTRGEN:1;                /* Injection external trigger enable */
    vuint32_t JEDGE:1;                 /* Injection trigger edge selection */
    vuint32_t JSTART:1;                /* Start injection conversion */
    vuint32_t _unused_12:2;            /* Reserved */
    vuint32_t CTUEN:1;                 /* Cross trigger unit enable */
    vuint32_t CTU_MODE:1;              /* Cross trigger unit mode */
    vuint32_t STCL:1;                  /* Self-testing configuration lock */
    vuint32_t CALSTART:1;              /* Calibration start */
    vuint32_t AVGEN:1;                 /* Average enable */
    vuint32_t NRSMPL:2;                /* Number of averaging samples */
    vuint32_t TSAMP:2;                 /* Sample period of calibration conversions */
    vuint32_t ADCLKSE:1;               /* Analog clock frequency select */
    vuint32_t ABORTCHAIN:1;            /* Abort conversion chain */
    vuint32_t ABORT:1;                 /* Abort conversion */
    vuint32_t ACKO:1;                  /* Auto-Clock-Off mode enable */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t _unused_28:3;            /* Reserved */
    vuint32_t PWDN:1;                  /* Power-down enable */
  } B;
} ADC_MCR_tag;

typedef union ADC_MSR_union_tag {      /* Main Status Register */
  vuint32_t R;
  struct {
    vuint32_t CALIBRTD:1;              /* Calibration status */
    vuint32_t CALFAIL:1;               /* Calibration failed */
    vuint32_t CALBUSY:1;               /* Calibration busy */
    vuint32_t _unused_3:4;             /* Reserved */
    vuint32_t NSTART:1;                /* Normal conversion status */
    vuint32_t JABORT:1;                /* Injected conversion abort status */
    vuint32_t _unused_9:2;             /* Reserved */
    vuint32_t JSTART:1;                /* Injected conversion status */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t SELF_TEST_S:1;
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t CTUSTART:1;              /* CTUSTART is used to show that a CTU conversion is in process. */
    vuint32_t CHADDR:7;                /* Channel address */
    vuint32_t _unused_23:3;            /* Reserved */
    vuint32_t ACKO:1;                  /* Auto-Clock-Off enable */
    vuint32_t _unused_27:2;            /* Reserved */
    vuint32_t ADCSTATUS:3;             /* ADC status */
  } B;
} ADC_MSR_tag;

typedef union ADC_ISR_union_tag {      /* Interrupt Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:27;            /* Reserved */
    vuint32_t EOCTU:1;                 /* End of CTU conversion */
    vuint32_t JEOC:1;                  /* Injected channel end of conversion */
    vuint32_t JECH:1;                  /* Injected end of conversion chain */
    vuint32_t EOC:1;                   /* End of channel conversion */
    vuint32_t ECH:1;                   /* End of conversion chain */
  } B;
} ADC_ISR_tag;

typedef union ADC_CEOCFR0_union_tag {  /* Channel Pending Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t EOC_CH7:1;
    vuint32_t EOC_CH6:1;
    vuint32_t EOC_CH5:1;
    vuint32_t EOC_CH4:1;
    vuint32_t EOC_CH3:1;
    vuint32_t EOC_CH2:1;
    vuint32_t EOC_CH1:1;
    vuint32_t EOC_CH0:1;               /* EOC_CH0 */
  } B;
} ADC_CEOCFR0_tag;

typedef union ADC_CEOCFR1_union_tag {  /* Channel Pending Register 1 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;             /* Reserved */
    vuint32_t _unused_8:8;             /* Reserved */
    vuint32_t _unused_16:8;            /* Reserved */
    vuint32_t EOC_CH39:1;
    vuint32_t EOC_CH38:1;
    vuint32_t EOC_CH37:1;
    vuint32_t EOC_CH36:1;
    vuint32_t EOC_CH35:1;
    vuint32_t EOC_CH34:1;
    vuint32_t EOC_CH33:1;
    vuint32_t EOC_CH32:1;
  } B;
} ADC_CEOCFR1_tag;

typedef union ADC_IMR_union_tag {      /* Interrupt Mask Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:27;            /* Reserved */
    vuint32_t MSKEOCTU:1;              /* End of CTU conversion interrupt mask */
    vuint32_t MSKJEOC:1;               /* End of injected conversion interrupt mask */
    vuint32_t MSKJECH:1;               /* End of injected chain conversion interrupt mask */
    vuint32_t MSKEOC:1;                /* End of conversion interrupt mask */
    vuint32_t MSKECH:1;                /* End of chain conversion interrupt mask */
  } B;
} ADC_IMR_tag;

typedef union ADC_CIMR0_union_tag {    /* Channel Interrupt Mask Register 0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t CIM7:1;
    vuint32_t CIM6:1;
    vuint32_t CIM5:1;
    vuint32_t CIM4:1;
    vuint32_t CIM3:1;
    vuint32_t CIM2:1;
    vuint32_t CIM1:1;
    vuint32_t CIM0:1;
  } B;
} ADC_CIMR0_tag;

typedef union ADC_CIMR1_union_tag {    /* Channel Interrupt Mask Register 1 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;             /* Reserved */
    vuint32_t _unused_8:8;             /* Reserved */
    vuint32_t _unused_16:8;            /* Reserved */
    vuint32_t CIM39:1;
    vuint32_t CIM38:1;
    vuint32_t CIM37:1;
    vuint32_t CIM36:1;
    vuint32_t CIM35:1;
    vuint32_t CIM34:1;
    vuint32_t CIM33:1;
    vuint32_t CIM32:1;
  } B;
} ADC_CIMR1_tag;

typedef union ADC_WTISR_union_tag {    /* Watchdog Threshold Interrupt Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved */
    vuint32_t _unused_2:2;             /* Reserved */
    vuint32_t _unused_4:2;             /* Reserved */
    vuint32_t _unused_6:2;             /* Reserved */
    vuint32_t _unused_8:2;             /* Reserved */
    vuint32_t _unused_10:2;            /* Reserved */
    vuint32_t _unused_12:2;            /* Reserved */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t WDG7H:1;
    vuint32_t WDG7L:1;
    vuint32_t WDG6H:1;
    vuint32_t WDG6L:1;
    vuint32_t WDG5H:1;
    vuint32_t WDG5L:1;
    vuint32_t WDG4H:1;
    vuint32_t WDG4L:1;
    vuint32_t WDG3H:1;
    vuint32_t WDG3L:1;
    vuint32_t WDG2H:1;
    vuint32_t WDG2L:1;
    vuint32_t WDG1H:1;
    vuint32_t WDG1L:1;
    vuint32_t WDG0H:1;
    vuint32_t WDG0L:1;
  } B;
} ADC_WTISR_tag;

typedef union ADC_WTIMR_union_tag {    /* Watchdog Threshold Interrupt Mask Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved */
    vuint32_t _unused_2:2;             /* Reserved */
    vuint32_t _unused_4:2;             /* Reserved */
    vuint32_t _unused_6:2;             /* Reserved */
    vuint32_t _unused_8:2;             /* Reserved */
    vuint32_t _unused_10:2;            /* Reserved */
    vuint32_t _unused_12:2;            /* Reserved */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t MSKWDG7H:1;
    vuint32_t MSKWDG7L:1;
    vuint32_t MSKWDG6H:1;
    vuint32_t MSKWDG6L:1;
    vuint32_t MSKWDG5H:1;
    vuint32_t MSKWDG5L:1;
    vuint32_t MSKWDG4H:1;
    vuint32_t MSKWDG4L:1;
    vuint32_t MSKWDG3H:1;
    vuint32_t MSKWDG3L:1;
    vuint32_t MSKWDG2H:1;
    vuint32_t MSKWDG2L:1;
    vuint32_t MSKWDG1H:1;
    vuint32_t MSKWDG1L:1;
    vuint32_t MSKWDG0H:1;
    vuint32_t MSKWDG0L:1;
  } B;
} ADC_WTIMR_tag;

typedef union ADC_DMAE_union_tag {     /* DMAE Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:30;            /* Reserved */
    vuint32_t DCLR:1;
    vuint32_t DMAEN:1;
  } B;
} ADC_DMAE_tag;

typedef union ADC_DMAR0_union_tag {    /* DMA Register 0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t DMA7:1;
    vuint32_t DMA6:1;
    vuint32_t DMA5:1;
    vuint32_t DMA4:1;
    vuint32_t DMA3:1;
    vuint32_t DMA2:1;
    vuint32_t DMA1:1;
    vuint32_t DMA0:1;
  } B;
} ADC_DMAR0_tag;

typedef union ADC_DMAR1_union_tag {    /* DMA Register 1 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;             /* Reserved */
    vuint32_t _unused_8:8;             /* Reserved */
    vuint32_t _unused_16:8;            /* Reserved */
    vuint32_t DMA39:1;
    vuint32_t DMA38:1;
    vuint32_t DMA37:1;
    vuint32_t DMA36:1;
    vuint32_t DMA35:1;
    vuint32_t DMA34:1;
    vuint32_t DMA33:1;
    vuint32_t DMA32:1;
  } B;
} ADC_DMAR1_tag;

typedef union ADC_THRHLR0_union_tag {  /* Analog Watchdog Threshold Register 0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;             /* Reserved */
    vuint32_t THRH:12;                 /* THRH */
    vuint32_t _unused_16:4;            /* Reserved */
    vuint32_t THRL:12;
  } B;
} ADC_THRHLR0_tag;

typedef union ADC_THRHLR1_union_tag {  /* Analog Watchdog Threshold Register 1 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;             /* Reserved */
    vuint32_t THRH:12;
    vuint32_t _unused_16:4;            /* Reserved */
    vuint32_t THRL:12;
  } B;
} ADC_THRHLR1_tag;

typedef union ADC_THRHLR2_union_tag {  /* Analog Watchdog Threshold Register 2 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;             /* Reserved */
    vuint32_t THRH:12;
    vuint32_t _unused_16:4;            /* Reserved */
    vuint32_t THRL:12;
  } B;
} ADC_THRHLR2_tag;

typedef union ADC_THRHLR3_union_tag {  /* Analog Watchdog Threshold Register 2 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;             /* Reserved */
    vuint32_t THRH:12;
    vuint32_t _unused_16:4;            /* Reserved */
    vuint32_t THRL:12;
  } B;
} ADC_THRHLR3_tag;

typedef union ADC_PSCR_union_tag {     /* Presampling Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:25;            /* Reserved */
    vuint32_t _unused_25:2;            /* Reserved */
    vuint32_t PREVAL1:2;               /* Internal presampling voltage selection. */
    vuint32_t PREVAL0:2;               /* Internal presampling voltage selection. */
    vuint32_t PRECONV:1;
  } B;
} ADC_PSCR_tag;

typedef union ADC_PSR0_union_tag {     /* Presampling Register 0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t PRES7:1;
    vuint32_t PRES6:1;
    vuint32_t PRES5:1;
    vuint32_t PRES4:1;
    vuint32_t PRES3:1;
    vuint32_t PRES2:1;
    vuint32_t PRES1:1;
    vuint32_t PRES0:1;
  } B;
} ADC_PSR0_tag;

typedef union ADC_PSR1_union_tag {     /* Presampling Register 1 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;             /* Reserved */
    vuint32_t _unused_8:8;             /* Reserved */
    vuint32_t _unused_16:8;            /* Reserved */
    vuint32_t PRES39:1;
    vuint32_t PRES38:1;
    vuint32_t PRES37:1;
    vuint32_t PRES36:1;
    vuint32_t PRES35:1;
    vuint32_t PRES34:1;
    vuint32_t PRES33:1;
    vuint32_t PRES32:1;
  } B;
} ADC_PSR1_tag;

typedef union ADC_CTR0_union_tag {     /* Conversion Timing Register 0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t INPSAMP:8;               /* Sampling phase duration */
  } B;
} ADC_CTR0_tag;

typedef union ADC_CTR1_union_tag {     /* Conversion Timing Register 1 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t INPSAMP:8;               /* Sampling phase duration */
  } B;
} ADC_CTR1_tag;

typedef union ADC_NCMR0_union_tag {    /* Normal Conversion Mask Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t CH7:1;
    vuint32_t CH6:1;
    vuint32_t CH5:1;
    vuint32_t CH4:1;
    vuint32_t CH3:1;
    vuint32_t CH2:1;
    vuint32_t CH1:1;
    vuint32_t CH0:1;
  } B;
} ADC_NCMR0_tag;

typedef union ADC_NCMR1_union_tag {    /* Normal Conversion Mask Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;             /* Reserved */
    vuint32_t _unused_8:8;             /* Reserved */
    vuint32_t _unused_16:8;            /* Reserved */
    vuint32_t CH39:1;
    vuint32_t CH38:1;
    vuint32_t CH37:1;
    vuint32_t CH36:1;
    vuint32_t CH35:1;
    vuint32_t CH34:1;
    vuint32_t CH33:1;
    vuint32_t CH32:1;
  } B;
} ADC_NCMR1_tag;

typedef union ADC_JCMR0_union_tag {    /* Injected Conversion Mask Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t CH7:1;
    vuint32_t CH6:1;
    vuint32_t CH5:1;
    vuint32_t CH4:1;
    vuint32_t CH3:1;
    vuint32_t CH2:1;
    vuint32_t CH1:1;
    vuint32_t CH0:1;
  } B;
} ADC_JCMR0_tag;

typedef union ADC_JCMR1_union_tag {    /* Injected Conversion Mask Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;             /* Reserved */
    vuint32_t _unused_8:8;             /* Reserved */
    vuint32_t _unused_16:8;            /* Reserved */
    vuint32_t CH39:1;
    vuint32_t CH38:1;
    vuint32_t CH37:1;
    vuint32_t CH36:1;
    vuint32_t CH35:1;
    vuint32_t CH34:1;
    vuint32_t CH33:1;
    vuint32_t CH32:1;
  } B;
} ADC_JCMR1_tag;

typedef union ADC_USROFSGN_union_tag { /* User OFFSET and Gain Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:6;             /* Reserved */
    vuint32_t GAINUSER:10;             /* User defined gain value */
    vuint32_t _unused_16:8;            /* Reserved */
    vuint32_t OFFSUSER:8;              /* User defined offset */
  } B;
} ADC_USROFSGN_tag;

typedef union ADC_PDEDR_union_tag {    /* Power Down Exit Delay Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t PDED:8;
  } B;
} ADC_PDEDR_tag;

typedef union ADC_PCDR_union_tag {     /* Precision Channel n Data Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;            /* Reserved */
    vuint32_t VALID:1;                 /* Conversion data valid */
    vuint32_t OVERW:1;                 /* Data overwrite */
    vuint32_t RESULT:2;
    vuint32_t _unused_16:4;            /* Reserved */
    vuint32_t CDATA:12;
  } B;
} ADC_PCDR_tag;

typedef union ADC_ICDR_union_tag {     /* Internal Channel n Data Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;            /* Reserved */
    vuint32_t VALID:1;                 /* Conversion data valid */
    vuint32_t OVERW:1;                 /* Data overwrite */
    vuint32_t RESULT:2;
    vuint32_t _unused_16:4;            /* Reserved */
    vuint32_t CDATA:12;
  } B;
} ADC_ICDR_tag;

typedef union ADC_THRHLR4_union_tag {  /* Analog Watchdog Threshold Register 4 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;             /* Reserved */
    vuint32_t THRH:12;
    vuint32_t _unused_16:4;            /* Reserved */
    vuint32_t THRL:12;
  } B;
} ADC_THRHLR4_tag;

typedef union ADC_THRHLR5_union_tag {  /* Analog Watchdog Threshold Register 5 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;             /* Reserved */
    vuint32_t THRH:12;
    vuint32_t _unused_16:4;            /* Reserved */
    vuint32_t THRL:12;
  } B;
} ADC_THRHLR5_tag;

typedef union ADC_THRHLR6_union_tag {  /* Analog Watchdog Threshold Register 6 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;             /* Reserved */
    vuint32_t THRH:12;
    vuint32_t _unused_16:4;            /* Reserved */
    vuint32_t THRL:12;
  } B;
} ADC_THRHLR6_tag;

typedef union ADC_THRHLR7_union_tag {  /* Analog Watchdog Threshold Register 7 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;             /* Reserved */
    vuint32_t THRH:12;
    vuint32_t _unused_16:4;            /* Reserved */
    vuint32_t THRL:12;
  } B;
} ADC_THRHLR7_tag;

typedef union ADC_CWSELR0_union_tag {  /* Channel Watchdog Select Register 0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t WSEL_CH7:3;
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t WSEL_CH6:3;
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t WSEL_CH5:3;
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t WSEL_CH4:3;
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t WSEL_CH3:3;
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t WSEL_CH2:3;
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t WSEL_CH1:3;
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t WSEL_CH0:3;
  } B;
} ADC_CWSELR0_tag;

typedef union ADC_CWSELR4_union_tag {  /* Channel Watchdog Select Register 4 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t WSEL_CH39:3;
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t WSEL_CH38:3;
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t WSEL_CH37:3;
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t WSEL_CH36:3;
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t WSEL_CH35:3;
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t WSEL_CH34:3;
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t WSEL_CH33:3;
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t WSEL_CH32:3;
  } B;
} ADC_CWSELR4_tag;

typedef union ADC_CWENR0_union_tag {   /* Channel Watchdog Enable Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t CWEN7:1;
    vuint32_t CWEN6:1;
    vuint32_t CWEN5:1;
    vuint32_t CWEN4:1;
    vuint32_t CWEN3:1;
    vuint32_t CWEN2:1;
    vuint32_t CWEN1:1;
    vuint32_t CWEN0:1;
  } B;
} ADC_CWENR0_tag;

typedef union ADC_CWENR1_union_tag {   /* Channel Watchdog Enable Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;             /* Reserved */
    vuint32_t _unused_8:8;             /* Reserved */
    vuint32_t _unused_16:8;            /* Reserved */
    vuint32_t CWEN39:1;
    vuint32_t CWEN38:1;
    vuint32_t CWEN37:1;
    vuint32_t CWEN36:1;
    vuint32_t CWEN35:1;
    vuint32_t CWEN34:1;
    vuint32_t CWEN33:1;
    vuint32_t CWEN32:1;
  } B;
} ADC_CWENR1_tag;

typedef union ADC_AWORR0_union_tag {   /* Analog Watchdog Out of Range Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t AWOR_CH7:1;
    vuint32_t AWOR_CH6:1;
    vuint32_t AWOR_CH5:1;
    vuint32_t AWOR_CH4:1;
    vuint32_t AWOR_CH3:1;
    vuint32_t AWOR_CH2:1;
    vuint32_t AWOR_CH1:1;
    vuint32_t AWOR_CH0:1;
  } B;
} ADC_AWORR0_tag;

typedef union ADC_AWORR1_union_tag {   /* Analog Watchdog Out of Range Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;             /* Reserved */
    vuint32_t _unused_8:8;             /* Reserved */
    vuint32_t _unused_16:8;            /* Reserved */
    vuint32_t AWOR_CH39:1;
    vuint32_t AWOR_CH38:1;
    vuint32_t AWOR_CH37:1;
    vuint32_t AWOR_CH36:1;
    vuint32_t AWOR_CH35:1;
    vuint32_t AWOR_CH34:1;
    vuint32_t AWOR_CH33:1;
    vuint32_t AWOR_CH32:1;
  } B;
} ADC_AWORR1_tag;

typedef union ADC_STCR1_union_tag {    /* Self-Test Configuration Register 1 */
  vuint32_t R;
  struct {
    vuint32_t INPSAMP_C:8;
    vuint32_t _unused_8:8;             /* Reserved */
    vuint32_t INPSAMP_S:8;
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} ADC_STCR1_tag;

typedef union ADC_STCR2_union_tag {    /* Self-Test Configuration Register 2 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;             /* Reserved */
    vuint32_t MSKWDSERR:1;             /* Watchdog sequence error interrupt mask */
    vuint32_t SERR:1;                  /* Error fault injection field (write-only). */
    vuint32_t MSKWDTERR:1;             /* Watchdog timer error interrupt mask */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t MSKST_EOC:1;             /* Self-Test EOC interrupt mask */
    vuint32_t _unused_9:4;             /* Reserved */
    vuint32_t MSKWDG_EOA_C:1;          /* End of algorithm C interrupt mask */
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t MSKWDG_EOA_S:1;          /* End of algorithm S interrupt mask */
    vuint32_t MSKERR_C:1;              /* Error on algorithm C channel interrupt mask */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t MSKERR_S2:1;             /* Error on algorithm S2 channel interrupt mask */
    vuint32_t MSKERR_S1:1;             /* Error on algorithm S1 channel interrupt mask */
    vuint32_t MSKERR_S0:1;             /* Error on algorithm S0 channel interrupt mask */
    vuint32_t _unused_21:3;            /* Reserved */
    vuint32_t EN:1;                    /* Self-testing channel enable */
    vuint32_t _unused_25:2;            /* Reserved */
    vuint32_t FMA_WDSERR:1;            /* Fault mapping for watchdog sequence error */
    vuint32_t FMA_WDTERR:1;            /* Fault mapping for watchdog timer error */
    vuint32_t FMA_C:1;                 /* Fault mapping for algorithm C */
    vuint32_t _unused_30:1;            /* Reserved */
    vuint32_t FMA_S:1;                 /* Fault mapping for BGAP algorithm */
  } B;
} ADC_STCR2_tag;

typedef union ADC_STCR3_union_tag {    /* Self-Test Configuration Register 3 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:22;            /* Reserved */
    vuint32_t ALG:2;
    vuint32_t _unused_24:3;            /* Reserved */
    vuint32_t MSTEP:5;
  } B;
} ADC_STCR3_tag;

typedef union ADC_STBRR_union_tag {    /* Self-Test Baud Rate Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:13;            /* Reserved */
    vuint32_t WDT:3;
    vuint32_t _unused_16:8;            /* Reserved */
    vuint32_t BR:8;                    /* Algorithm baud rate */
  } B;
} ADC_STBRR_tag;

typedef union ADC_STSR1_union_tag {    /* Self-Test Status Register 1 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;             /* Reserved */
    vuint32_t WDSERR:1;                /* Watchdog sequence errors */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t WDTERR:1;                /* Watchdog timer error */
    vuint32_t OVERWR:1;                /* Overwrite error */
    vuint32_t ST_EOC:1;                /* Self-test EOC */
    vuint32_t _unused_9:4;             /* Reserved */
    vuint32_t WDG_EOA_C:1;
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t WDG_EOA_S:1;
    vuint32_t ERR_C:1;                 /* Algorithm C error */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t ERR_S2:1;
    vuint32_t ERR_S1:1;
    vuint32_t ERR_S0:1;
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t STEP_C:5;                /* Algorithm C step number error */
    vuint32_t _unused_27:5;            /* Reserved */
  } B;
} ADC_STSR1_tag;

typedef union ADC_STSR2_union_tag {    /* Self-Test Status Register 2 */
  vuint32_t R;
  struct {
    vuint32_t OVFL:1;
    vuint32_t _unused_1:3;             /* Reserved */
    vuint32_t DATA1:12;
    vuint32_t _unused_16:4;            /* Reserved */
    vuint32_t DATA0:12;
  } B;
} ADC_STSR2_tag;

typedef union ADC_STSR3_union_tag {    /* Self-Test Status Register 3 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;             /* Reserved */
    vuint32_t DATA1:12;
    vuint32_t _unused_16:4;            /* Reserved */
    vuint32_t DATA0:12;
  } B;
} ADC_STSR3_tag;

typedef union ADC_STSR4_union_tag {    /* Self-Test Status Register 4 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;             /* Reserved */
    vuint32_t DATA1:12;                /* DATA1 */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} ADC_STSR4_tag;

typedef union ADC_STDR1_union_tag {    /* Self-Test Data Register 1 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;            /* Reserved */
    vuint32_t VALID:1;                 /* Valid data */
    vuint32_t OWERWR:1;                /* Overwrite data */
    vuint32_t _unused_14:6;            /* Reserved */
    vuint32_t TCDATA:12;               /* Test channel converted data */
  } B;
} ADC_STDR1_tag;

typedef union ADC_STDR2_union_tag {    /* Self-Test Data Register 2 */
  vuint32_t R;
  struct {
    vuint32_t FDATA:12;                /* Fractional data */
    vuint32_t VALID:1;                 /* Valid data */
    vuint32_t OVERWR:1;                /* Overwrite data */
    vuint32_t _unused_14:6;            /* Reserved */
    vuint32_t IDATA:12;                /* Integer data */
  } B;
} ADC_STDR2_tag;

typedef union ADC_STAW0R_union_tag {   /* Self-Test Analog Watchdog Register */
  vuint32_t R;
  struct {
    vuint32_t AWDE:1;
    vuint32_t WDTE:1;                  /* Watchdog timer enable (related to the Algorithm S) */
    vuint32_t _unused_2:2;             /* Reserved */
    vuint32_t THRH:12;                 /* High threshold value for Algorithm S step0 */
    vuint32_t _unused_16:4;            /* Reserved */
    vuint32_t THRL:12;                 /* Low threshold value for Algorithm S step0 */
  } B;
} ADC_STAW0R_tag;

typedef union ADC_STAW1AR_union_tag {  /* Self-Test Analog Watchdog Register */
  vuint32_t R;
  struct {
    vuint32_t AWDE:1;
    vuint32_t _unused_1:3;             /* Reserved */
    vuint32_t THRH:12;
    vuint32_t _unused_16:4;            /* Reserved */
    vuint32_t THRL:12;
  } B;
} ADC_STAW1AR_tag;

typedef union ADC_STAW1BR_union_tag {  /* Self-Test Analog Watchdog Register 1B */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;             /* Reserved */
    vuint32_t THRH:12;
    vuint32_t _unused_16:4;            /* Reserved */
    vuint32_t THRL:12;
  } B;
} ADC_STAW1BR_tag;

typedef union ADC_STAW2R_union_tag {   /* Self-Test Analog Watchdog Register 2 */
  vuint32_t R;
  struct {
    vuint32_t AWDE:1;
    vuint32_t _unused_1:19;            /* Reserved */
    vuint32_t THRL:12;                 /* Threshold level low */
  } B;
} ADC_STAW2R_tag;

typedef union ADC_STAW3R_union_tag {   /* Self-Test Analog Watchdog Register 3 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:32;            /* Reserved */
  } B;
} ADC_STAW3R_tag;

typedef union ADC_STAW4R_union_tag {   /* Self-Test Analog Watchdog Register 4 */
  vuint32_t R;
  struct {
    vuint32_t AWDE:1;                  /* Analog watchdog enable (related to Algorithm C) */
    vuint32_t WDTE:1;                  /* Watchdog timer enable (related to Algorithm C). */
    vuint32_t _unused_2:2;             /* Reserved */
    vuint32_t THRH:12;                 /* High threshold value for step0 of Algorithm C. */
    vuint32_t _unused_16:4;            /* Reserved */
    vuint32_t THRL:12;                 /* Low threshold value for step0 of Algorithm C. */
  } B;
} ADC_STAW4R_tag;

typedef union ADC_STAW5R_union_tag {   /* Self-Test Analog Watchdog Register 5 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;             /* Reserved */
    vuint32_t THRH:12;                 /* High threshold value for step N of Algorithm C (N = 1 to CS-1). */
    vuint32_t _unused_16:4;            /* Reserved */
    vuint32_t THRL:12;                 /* Low threshold value for step0 of Algorithm C. */
  } B;
} ADC_STAW5R_tag;

typedef union ADC_CALSTAT_union_tag {  /* Calibration Status register */
  vuint32_t R;
  struct {
    vuint32_t TEST_RESULT:16;          /* TEST_RESULT */
    vuint32_t _unused_16:2;            /* Reserved */
    vuint32_t STAT_14:1;               /* Status of calibration step 14 */
    vuint32_t STAT_13:1;               /* Status of calibration step 13 */
    vuint32_t STAT_12:1;               /* Status of Calibration step 12 */
    vuint32_t STAT_11:1;               /* Status of calibration step 11 */
    vuint32_t STAT_10:1;               /* Status of calibration step 10 */
    vuint32_t STAT_9:1;                /* Status of calibration step 9 */
    vuint32_t STAT_8:1;                /* Status of calibration step 8 */
    vuint32_t STAT_7:1;                /* Status of calibration step 7 */
    vuint32_t STAT_6:1;                /* Status of calibration step 6 */
    vuint32_t STAT_5:1;                /* Status of calibration step 5 */
    vuint32_t STAT_4:1;                /* Status of calibration step 4 */
    vuint32_t STAT_3:1;                /* Status of calibration step 3 */
    vuint32_t STAT_2:1;                /* Status of calibration step 2 */
    vuint32_t STAT_1:1;                /* Status of calibration step 1 */
  } B;
} ADC_CALSTAT_tag;

struct ADC_tag {
  ADC_MCR_tag MCR;                     /* Main Configuration Register */
  ADC_MSR_tag MSR;                     /* Main Status Register */
  uint8_t ADC_reserved0[8];
  ADC_ISR_tag ISR;                     /* Interrupt Status Register */
  ADC_CEOCFR0_tag CEOCFR0;             /* Channel Pending Register */
  ADC_CEOCFR1_tag CEOCFR1;             /* Channel Pending Register 1 */
  uint8_t ADC_reserved1[4];
  ADC_IMR_tag IMR;                     /* Interrupt Mask Register */
  ADC_CIMR0_tag CIMR0;                 /* Channel Interrupt Mask Register 0 */
  ADC_CIMR1_tag CIMR1;                 /* Channel Interrupt Mask Register 1 */
  uint8_t ADC_reserved2[4];
  ADC_WTISR_tag WTISR;                 /* Watchdog Threshold Interrupt Status Register */
  ADC_WTIMR_tag WTIMR;                 /* Watchdog Threshold Interrupt Mask Register */
  uint8_t ADC_reserved3[8];
  ADC_DMAE_tag DMAE;                   /* DMAE Register */
  ADC_DMAR0_tag DMAR0;                 /* DMA Register 0 */
  ADC_DMAR1_tag DMAR1;                 /* DMA Register 1 */
  uint8_t ADC_reserved4[20];
  ADC_THRHLR0_tag THRHLR0;             /* Analog Watchdog Threshold Register 0 */
  ADC_THRHLR1_tag THRHLR1;             /* Analog Watchdog Threshold Register 1 */
  ADC_THRHLR2_tag THRHLR2;             /* Analog Watchdog Threshold Register 2 */
  ADC_THRHLR3_tag THRHLR3;             /* Analog Watchdog Threshold Register 2 */
  uint8_t ADC_reserved5[16];
  ADC_PSCR_tag PSCR;                   /* Presampling Control Register */
  ADC_PSR0_tag PSR0;                   /* Presampling Register 0 */
  ADC_PSR1_tag PSR1;                   /* Presampling Register 1 */
  uint8_t ADC_reserved6[8];
  ADC_CTR0_tag CTR0;                   /* Conversion Timing Register 0 */
  ADC_CTR1_tag CTR1;                   /* Conversion Timing Register 1 */
  uint8_t ADC_reserved7[8];
  ADC_NCMR0_tag NCMR0;                 /* Normal Conversion Mask Register */
  ADC_NCMR1_tag NCMR1;                 /* Normal Conversion Mask Register */
  uint8_t ADC_reserved8[8];
  ADC_JCMR0_tag JCMR0;                 /* Injected Conversion Mask Register */
  ADC_JCMR1_tag JCMR1;                 /* Injected Conversion Mask Register */
  uint8_t ADC_reserved9[4];
  ADC_USROFSGN_tag USROFSGN;           /* User OFFSET and Gain Register */
  uint8_t ADC_reserved10[4];
  ADC_PDEDR_tag PDEDR;                 /* Power Down Exit Delay Register */
  uint8_t ADC_reserved11[52];
  ADC_PCDR_tag PCDR[8];                /* Precision Channel n Data Register */
  uint8_t ADC_reserved12[96];
  ADC_ICDR_tag ICDR[8];                /* Internal Channel n Data Register */
  uint8_t ADC_reserved13[224];
  ADC_THRHLR4_tag THRHLR4;             /* Analog Watchdog Threshold Register 4 */
  ADC_THRHLR5_tag THRHLR5;             /* Analog Watchdog Threshold Register 5 */
  ADC_THRHLR6_tag THRHLR6;             /* Analog Watchdog Threshold Register 6 */
  ADC_THRHLR7_tag THRHLR7;             /* Analog Watchdog Threshold Register 7 */
  uint8_t ADC_reserved14[32];
  ADC_CWSELR0_tag CWSELR0;             /* Channel Watchdog Select Register 0 */
  uint8_t ADC_reserved15[12];
  ADC_CWSELR4_tag CWSELR4;             /* Channel Watchdog Select Register 4 */
  uint8_t ADC_reserved16[28];
  ADC_CWENR0_tag CWENR0;               /* Channel Watchdog Enable Register */
  ADC_CWENR1_tag CWENR1;               /* Channel Watchdog Enable Register */
  uint8_t ADC_reserved17[8];
  ADC_AWORR0_tag AWORR0;               /* Analog Watchdog Out of Range Register */
  ADC_AWORR1_tag AWORR1;               /* Analog Watchdog Out of Range Register */
  uint8_t ADC_reserved18[72];
  ADC_STCR1_tag STCR1;                 /* Self-Test Configuration Register 1 */
  ADC_STCR2_tag STCR2;                 /* Self-Test Configuration Register 2 */
  ADC_STCR3_tag STCR3;                 /* Self-Test Configuration Register 3 */
  ADC_STBRR_tag STBRR;                 /* Self-Test Baud Rate Register */
  ADC_STSR1_tag STSR1;                 /* Self-Test Status Register 1 */
  ADC_STSR2_tag STSR2;                 /* Self-Test Status Register 2 */
  ADC_STSR3_tag STSR3;                 /* Self-Test Status Register 3 */
  ADC_STSR4_tag STSR4;                 /* Self-Test Status Register 4 */
  uint8_t ADC_reserved19[16];
  ADC_STDR1_tag STDR1;                 /* Self-Test Data Register 1 */
  ADC_STDR2_tag STDR2;                 /* Self-Test Data Register 2 */
  uint8_t ADC_reserved20[8];
  ADC_STAW0R_tag STAW0R;               /* Self-Test Analog Watchdog Register */
  ADC_STAW1AR_tag STAW1AR;             /* Self-Test Analog Watchdog Register */
  ADC_STAW1BR_tag STAW1BR;             /* Self-Test Analog Watchdog Register 1B */
  ADC_STAW2R_tag STAW2R;               /* Self-Test Analog Watchdog Register 2 */
  ADC_STAW3R_tag STAW3R;               /* Self-Test Analog Watchdog Register 3 */
  ADC_STAW4R_tag STAW4R;               /* Self-Test Analog Watchdog Register 4 */
  ADC_STAW5R_tag STAW5R;               /* Self-Test Analog Watchdog Register 5 */
  ADC_CALSTAT_tag CALSTAT;             /* Calibration Status register */
};


/* ============================================================================
   =============================== Module: AIPS ===============================
   ============================================================================ */

typedef union AIPS_MPRA_union_tag {    /* Master Privilege A */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t MTR0:1;                  /* Master 0 Trusted For Read */
    vuint32_t MTW0:1;                  /* Master 0 Trusted For Writes */
    vuint32_t MPL0:1;                  /* Master 0 Privilege Level */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t MTR1:1;                  /* Master 1 Trusted For Read */
    vuint32_t MTW1:1;                  /* Master 1 Trusted For Writes */
    vuint32_t MPL1:1;                  /* Master 1 Privilege Level */
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t MTR2:1;                  /* Master 2 Trusted For Read */
    vuint32_t MTW2:1;                  /* Master 2 Trusted For Writes */
    vuint32_t MPL2:1;                  /* Master 2 Privilege Level */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t MTR3:1;                  /* Master 3 Trusted For Read */
    vuint32_t MTW3:1;                  /* Master 3 Trusted For Writes */
    vuint32_t MPL3:1;                  /* Master 3 Privilege Level */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t MTR4:1;                  /* Master 4 Trusted For Read */
    vuint32_t MTW4:1;                  /* Master 4 Trusted For Writes */
    vuint32_t MPL4:1;                  /* Master 4 Privilege Level */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t MTR5:1;                  /* Master 5 Trusted For Read */
    vuint32_t MTW5:1;                  /* Master 5 Trusted For Writes */
    vuint32_t MPL5:1;                  /* Master 5 Privilege Level */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t MTR6:1;                  /* Master 6 Trusted For Read */
    vuint32_t MTW6:1;                  /* Master 6 Trusted For Writes */
    vuint32_t MPL6:1;                  /* Master 6 Privilege Level */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t MTR7:1;                  /* Master 7 Trusted For Read */
    vuint32_t MTW7:1;                  /* Master 7 Trusted For Writes */
    vuint32_t MPL7:1;                  /* Master 7 Privilege Level */
  } B;
} AIPS_MPRA_tag;

typedef union AIPS_MPRB_union_tag {    /* Master Privilege B */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t MTR8:1;                  /* Master 8 Trusted For Read */
    vuint32_t MTW8:1;                  /* Master 8 Trusted For Writes */
    vuint32_t MPL8:1;                  /* Master 8 Privilege Level */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t MTR9:1;                  /* Master 9 Trusted For Read */
    vuint32_t MTW9:1;                  /* Master 9 Trusted For Writes */
    vuint32_t MPL9:1;                  /* Master 9 Privilege Level */
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t MTR10:1;                 /* Master 10 Trusted For Read */
    vuint32_t MTW10:1;                 /* Master 10 Trusted For Writes */
    vuint32_t MPL10:1;                 /* Master 10 Privilege Level */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t MTR11:1;                 /* Master 11 Trusted For Read */
    vuint32_t MTW11:1;                 /* Master 11 Trusted For Writes */
    vuint32_t MPL11:1;                 /* Master 11 Privilege Level */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t MTR12:1;                 /* Master 12 Trusted For Read */
    vuint32_t MTW12:1;                 /* Master 12 Trusted For Writes */
    vuint32_t MPL12:1;                 /* Master 12 Privilege Level */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t MTR13:1;                 /* Master 13 Trusted For Read */
    vuint32_t MTW13:1;                 /* Master 13 Trusted For Writes */
    vuint32_t MPL13:1;                 /* Master 13 Privilege Level */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t MTR14:1;                 /* Master 14 Trusted For Read */
    vuint32_t MTW14:1;                 /* Master 14 Trusted For Writes */
    vuint32_t MPL14:1;                 /* Master 14 Privilege Level */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t MTR15:1;                 /* Master 15 Trusted For Read */
    vuint32_t MTW15:1;                 /* Master 15 Trusted For Writes */
    vuint32_t MPL15:1;                 /* Master 15 Privilege Level */
  } B;
} AIPS_MPRB_tag;

typedef union AIPS_PACR_union_tag {    /* Peripheral Access Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t SP0:1;                   /* Supervisor Protect */
    vuint32_t WP0:1;                   /* Write Protect */
    vuint32_t TP0:1;                   /* Trusted Protect */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t SP1:1;                   /* Supervisor Protect */
    vuint32_t WP1:1;                   /* Write Protect */
    vuint32_t TP1:1;                   /* Trusted Protect */
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t SP2:1;                   /* Supervisor Protect */
    vuint32_t WP2:1;                   /* Write Protect */
    vuint32_t TP2:1;                   /* Trusted Protect */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t SP3:1;                   /* Supervisor Protect */
    vuint32_t WP3:1;                   /* Write Protect */
    vuint32_t TP3:1;                   /* Trusted Protect */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t SP4:1;                   /* Supervisor Protect */
    vuint32_t WP4:1;                   /* Write Protect */
    vuint32_t TP4:1;                   /* Trusted Protect */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t SP5:1;                   /* Supervisor Protect */
    vuint32_t WP5:1;                   /* Write Protect */
    vuint32_t TP5:1;                   /* Trusted Protect */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t SP6:1;                   /* Supervisor Protect */
    vuint32_t WP6:1;                   /* Write Protect */
    vuint32_t TP6:1;                   /* Trusted Protect */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t SP7:1;                   /* Supervisor Protect */
    vuint32_t WP7:1;                   /* Write Protect */
    vuint32_t TP7:1;                   /* Trusted Protect */
  } B;
} AIPS_PACR_tag;

typedef union AIPS_OPACR_union_tag {   /* Off-Platform Peripheral Access Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t SP0:1;                   /* Supervisor Protect */
    vuint32_t WP0:1;                   /* Write Protect */
    vuint32_t TP0:1;                   /* Trusted Protect */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t SP1:1;                   /* Supervisor Protect */
    vuint32_t WP1:1;                   /* Write Protect */
    vuint32_t TP1:1;                   /* Trusted Protect */
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t SP2:1;                   /* Supervisor Protect */
    vuint32_t WP2:1;                   /* Write Protect */
    vuint32_t TP2:1;                   /* Trusted Protect */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t SP3:1;                   /* Supervisor Protect */
    vuint32_t WP3:1;                   /* Write Protect */
    vuint32_t TP3:1;                   /* Trusted Protect */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t SP4:1;                   /* Supervisor Protect */
    vuint32_t WP4:1;                   /* Write Protect */
    vuint32_t TP4:1;                   /* Trusted Protect */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t SP5:1;                   /* Supervisor Protect */
    vuint32_t WP5:1;                   /* Write Protect */
    vuint32_t TP5:1;                   /* Trusted Protect */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t SP6:1;                   /* Supervisor Protect */
    vuint32_t WP6:1;                   /* Write Protect */
    vuint32_t TP6:1;                   /* Trusted Protect */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t SP7:1;                   /* Supervisor Protect */
    vuint32_t WP7:1;                   /* Write Protect */
    vuint32_t TP7:1;                   /* Trusted Protect */
  } B;
} AIPS_OPACR_tag;

struct AIPS_tag {
  AIPS_MPRA_tag MPRA;                  /* Master Privilege A */
  AIPS_MPRB_tag MPRB;                  /* Master Privilege B */
  uint8_t AIPS_reserved0[248];
  AIPS_PACR_tag PACR[8];               /* Peripheral Access Control */
  uint8_t AIPS_reserved1[32];
  AIPS_OPACR_tag OPACR[32];            /* Off-Platform Peripheral Access Control */
};


/* ============================================================================
   =============================== Module: AXBS ===============================
   ============================================================================ */

typedef union AXBS_PORT_PRS_union_tag { /* Priority Slave Registers */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t M7:3;                    /* Master 7 priority */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t M6:3;                    /* Master 6 priority */
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t M5:3;                    /* Master 5 priority */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t M4:3;                    /* Master 4 priority */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t M3:3;                    /* Master 3 priority */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t M2:3;                    /* Master 2 priority */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t M1:3;                    /* Master 1 priority */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t M0:3;                    /* Master 0 priority */
  } B;
} AXBS_PORT_PRS_tag;

typedef union AXBS_PORT_CRS_union_tag { /* Control Register */
  vuint32_t R;
  struct {
    vuint32_t RO:1;                    /* Read Only */
    vuint32_t HLP:1;                   /* Halt Low Priority */
    vuint32_t _unused_2:6;             /* Reserved */
    vuint32_t HPE7:1;                  /* HPE7 */
    vuint32_t HPE6:1;                  /* HPE6 */
    vuint32_t HPE5:1;                  /* HPE5 */
    vuint32_t HPE4:1;                  /* HPE4 */
    vuint32_t HPE3:1;                  /* HPE3 */
    vuint32_t HPE2:1;                  /* HPE2 */
    vuint32_t HPE1:1;                  /* HPE1 */
    vuint32_t HPE0:1;                  /* HPE0 */
    vuint32_t _unused_16:6;            /* Reserved */
    vuint32_t ARB:2;                   /* Arbitration Mode */
    vuint32_t _unused_24:2;            /* Reserved */
    vuint32_t PCTL:2;                  /* Parking Control */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t PARK:3;                  /* Park */
  } B;
} AXBS_PORT_CRS_tag;

typedef struct AXBS_PORT_struct_tag {
  AXBS_PORT_PRS_tag PRS;               /* Priority Slave Registers */
  uint8_t PORT_reserved0[12];
  AXBS_PORT_CRS_tag CRS;               /* Control Register */
  uint8_t PORT_reserved1[236];
} AXBS_PORT_tag;

typedef union AXBS_MGPCR0_union_tag {  /* Master General Purpose Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:29;            /* Reserved */
    vuint32_t AULB:3;                  /* Arbitrates On Undefined Length Bursts */
  } B;
} AXBS_MGPCR0_tag;

typedef union AXBS_MGPCR1_union_tag {  /* Master General Purpose Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:29;            /* Reserved */
    vuint32_t AULB:3;                  /* Arbitrates On Undefined Length Bursts */
  } B;
} AXBS_MGPCR1_tag;

typedef union AXBS_MGPCR2_union_tag {  /* Master General Purpose Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:29;            /* Reserved */
    vuint32_t AULB:3;                  /* Arbitrates On Undefined Length Bursts */
  } B;
} AXBS_MGPCR2_tag;

typedef union AXBS_MGPCR3_union_tag {  /* Master General Purpose Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:29;            /* Reserved */
    vuint32_t AULB:3;                  /* Arbitrates On Undefined Length Bursts */
  } B;
} AXBS_MGPCR3_tag;

typedef union AXBS_MGPCR4_union_tag {  /* Master General Purpose Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:29;            /* Reserved */
    vuint32_t AULB:3;                  /* Arbitrates On Undefined Length Bursts */
  } B;
} AXBS_MGPCR4_tag;

typedef union AXBS_MGPCR5_union_tag {  /* Master General Purpose Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:29;            /* Reserved */
    vuint32_t AULB:3;                  /* Arbitrates On Undefined Length Bursts */
  } B;
} AXBS_MGPCR5_tag;

typedef union AXBS_MGPCR6_union_tag {  /* Master General Purpose Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:29;            /* Reserved */
    vuint32_t AULB:3;                  /* Arbitrates On Undefined Length Bursts */
  } B;
} AXBS_MGPCR6_tag;

typedef union AXBS_MGPCR7_union_tag {  /* Master General Purpose Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:29;            /* Reserved */
    vuint32_t AULB:3;                  /* Arbitrates On Undefined Length Bursts */
  } B;
} AXBS_MGPCR7_tag;

struct AXBS_tag {
  AXBS_PORT_tag PORT[8];
  AXBS_MGPCR0_tag MGPCR0;              /* Master General Purpose Control Register */
  uint8_t AXBS_reserved0[252];
  AXBS_MGPCR1_tag MGPCR1;              /* Master General Purpose Control Register */
  uint8_t AXBS_reserved1[252];
  AXBS_MGPCR2_tag MGPCR2;              /* Master General Purpose Control Register */
  uint8_t AXBS_reserved2[252];
  AXBS_MGPCR3_tag MGPCR3;              /* Master General Purpose Control Register */
  uint8_t AXBS_reserved3[252];
  AXBS_MGPCR4_tag MGPCR4;              /* Master General Purpose Control Register */
  uint8_t AXBS_reserved4[252];
  AXBS_MGPCR5_tag MGPCR5;              /* Master General Purpose Control Register */
  uint8_t AXBS_reserved5[252];
  AXBS_MGPCR6_tag MGPCR6;              /* Master General Purpose Control Register */
  uint8_t AXBS_reserved6[252];
  AXBS_MGPCR7_tag MGPCR7;              /* Master General Purpose Control Register */
};


/* ============================================================================
   =============================== Module: CAN_FD =============================
   ============================================================================ */

typedef union CAN_FD_MCR_union_tag {   /* Module Configuration register */
  vuint32_t R;
  struct {
    vuint32_t MDIS:1;                  /* Module Disable */
    vuint32_t FRZ:1;                   /* Freeze Enable */
    vuint32_t RFEN:1;                  /* Rx FIFO Enable */
    vuint32_t HALT:1;                  /* Halt FlexCAN */
    vuint32_t NOTRDY:1;                /* FlexCAN Not Ready */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t SOFTRST:1;               /* Soft Reset */
    vuint32_t FRZACK:1;                /* Freeze Mode Acknowledge */
    vuint32_t SUPV:1;                  /* Supervisor Mode */
    vuint32_t _unused_9:1;             /* Reserved */
    vuint32_t WRNEN:1;                 /* Warning Interrupt Enable */
    vuint32_t LPMACK:1;                /* Low-Power Mode Acknowledge */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t SRXDIS:1;                /* Self Reception Disable */
    vuint32_t IRMQ:1;                  /* Individual Rx Masking And Queue Enable */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t LPRIOEN:1;               /* Local Priority Enable */
    vuint32_t AEN:1;                   /* Abort Enable */
    vuint32_t FDEN:1;                  /* CAN FD operation enable */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t IDAM:2;                  /* ID Acceptance Mode */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t MAXMB:7;                 /* Number Of The Last Message Buffer */
  } B;
} CAN_FD_MCR_tag;

typedef union CAN_FD_CTRL1_union_tag { /* Control 1 register */
  vuint32_t R;
  struct {
    vuint32_t PRESDIV:8;               /* Prescaler Division Factor */
    vuint32_t RJW:2;                   /* Resync Jump Width */
    vuint32_t PSEG1:3;                 /* Phase Segment 1 */
    vuint32_t PSEG2:3;                 /* Phase Segment 2 */
    vuint32_t BOFFMSK:1;               /* Bus Off Interrupt Mask */
    vuint32_t ERRMSK:1;                /* Error Interrupt Mask */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t LPB:1;                   /* Loop Back Mode */
    vuint32_t TWRNMSK:1;               /* Tx Warning Interrupt Mask */
    vuint32_t RWRNMSK:1;               /* Rx Warning Interrupt Mask */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t SMP:1;                   /* CAN Bit Sampling */
    vuint32_t BOFFREC:1;               /* Bus Off Recovery */
    vuint32_t TSYN:1;                  /* Timer Sync */
    vuint32_t LBUF:1;                  /* Lowest Buffer Transmitted First */
    vuint32_t LOM:1;                   /* Listen-Only Mode */
    vuint32_t PROPSEG:3;               /* Propagation Segment */
  } B;
} CAN_FD_CTRL1_tag;

typedef union CAN_FD_TIMER_union_tag { /* Free Running Timer */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t TIMER:16;                /* Timer Value */
  } B;
} CAN_FD_TIMER_tag;

typedef union CAN_FD_RXMGMASK_union_tag { /* Rx Mailboxes Global Mask register */
  vuint32_t R;
  struct {
    vuint32_t MG:32;                   /* Rx Mailboxes Global Mask Bits */
  } B;
} CAN_FD_RXMGMASK_tag;

typedef union CAN_FD_RX14MASK_union_tag { /* Rx 14 Mask register */
  vuint32_t R;
  struct {
    vuint32_t RX14M:32;                /* Rx Buffer 14 Mask Bits */
  } B;
} CAN_FD_RX14MASK_tag;

typedef union CAN_FD_RX15MASK_union_tag { /* Rx 15 Mask register */
  vuint32_t R;
  struct {
    vuint32_t RX15M:32;                /* Rx Buffer 15 Mask Bits */
  } B;
} CAN_FD_RX15MASK_tag;

typedef union CAN_FD_ECR_union_tag {   /* Error Counter */
  vuint32_t R;
  struct {
    vuint32_t RXERRCNT_FAST:8;         /* Receive Error Counter for fast bits */
    vuint32_t TXERRCNT_FAST:8;         /* Transmit Error Counter for fast bits */
    vuint32_t RXERRCNT:8;              /* Receive Error Counter */
    vuint32_t TXERRCNT:8;              /* Transmit Error Counter */
  } B;
} CAN_FD_ECR_tag;

typedef union CAN_FD_ESR1_union_tag {  /* Error and Status 1 register */
  vuint32_t R;
  struct {
    vuint32_t BIT1ERR_FAST:1;          /* Bit1 Error in the Data Phase of CAN FD frames with the BRS bit set */
    vuint32_t BIT0ERR_FAST:1;          /* Bit0 Error in the Data Phase of CAN FD frames with the BRS bit set */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t CRCERR_FAST:1;           /* Cyclic Redundancy Check Error in the CRC field of CAN FD frames with the BRS bit set */
    vuint32_t FRMERR_FAST:1;           /* Form Error in the Data Phase of CAN FD frames with the BRS bit set */
    vuint32_t STFERR_FAST:1;           /* Stuffing Error in the Data Phase of CAN FD frames with the BRS bit set */
    vuint32_t _unused_6:4;             /* Reserved */
    vuint32_t ERROVR:1;                /* Error Overrun */
    vuint32_t ERRINT_FAST:1;           /* Error interrupt for errors detected in Data Phase of CAN FD frames with BRS bit set */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t SYNCH:1;                 /* CAN Synchronization Status */
    vuint32_t TWRNINT:1;               /* Tx Warning Interrupt Flag */
    vuint32_t RWRNINT:1;               /* Rx Warning Interrupt Flag */
    vuint32_t BIT1ERR:1;               /* Bit1 Error */
    vuint32_t BIT0ERR:1;               /* Bit0 Error */
    vuint32_t ACKERR:1;                /* Acknowledge Error */
    vuint32_t CRCERR:1;                /* Cyclic Redundancy Check Error */
    vuint32_t FRMERR:1;                /* Form Error */
    vuint32_t STFERR:1;                /* Stuffing Error */
    vuint32_t TXWRN:1;                 /* TX Error Warning */
    vuint32_t RXWRN:1;                 /* Rx Error Warning */
    vuint32_t IDLE:1;                  /* IDLE */
    vuint32_t TX:1;                    /* FlexCAN In Transmission */
    vuint32_t FLTCONF:2;               /* Fault Confinement State */
    vuint32_t RX:1;                    /* FlexCAN In Reception */
    vuint32_t BOFFINT:1;               /* Bus Off Interrupt */
    vuint32_t ERRINT:1;                /* Error Interrupt */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} CAN_FD_ESR1_tag;

typedef union CAN_FD_IMASK2_union_tag { /* Interrupt Masks 2 register */
  vuint32_t R;
  struct {
    vuint32_t BUF63TO32M:32;           /* Buffer MBi Mask */
  } B;
} CAN_FD_IMASK2_tag;

typedef union CAN_FD_IMASK1_union_tag { /* Interrupt Masks 1 register */
  vuint32_t R;
  struct {
    vuint32_t BUF31TO0M:32;            /* Buffer MBi Mask */
  } B;
} CAN_FD_IMASK1_tag;

typedef union CAN_FD_IFLAG2_union_tag { /* Interrupt Flags 2 register */
  vuint32_t R;
  struct {
    vuint32_t BUF63TO32I:32;           /* Buffer MBi Interrupt */
  } B;
} CAN_FD_IFLAG2_tag;

typedef union CAN_FD_IFLAG1_union_tag { /* Interrupt Flags 1 register */
  vuint32_t R;
  struct {
    vuint32_t BUF31TO8I:24;            /* Buffer MBi Interrupt */
    vuint32_t BUF7I:1;                 /* Buffer MB7 Interrupt Or Rx FIFO Overflow */
    vuint32_t BUF6I:1;                 /* Buffer MB6 Interrupt Or Rx FIFO Warning */
    vuint32_t BUF5I:1;                 /* Buffer MB5 Interrupt Or Frames available in Rx FIFO */
    vuint32_t BUF4TO1I:4;              /* Buffer MBi Interrupt Or Reserved */
    vuint32_t BUF0I:1;                 /* Buffer MB0 Interrupt Or Clear FIFO bit */
  } B;
} CAN_FD_IFLAG1_tag;

typedef union CAN_FD_CTRL2_union_tag { /* Control 2 register */
  vuint32_t R;
  struct {
    vuint32_t ERRMSK_FAST:1;           /* Error Interrupt Mask for errors detected in the data phase of fast CAN FD frames */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t ECRWRE:1;                /* Error-correction Configuration Register Write Enable */
    vuint32_t WRMFRZ:1;                /* Write-Access To Memory In Freeze Mode */
    vuint32_t RFFN:4;                  /* Number Of Rx FIFO Filters */
    vuint32_t TASD:5;                  /* Tx Arbitration Start Delay */
    vuint32_t MRP:1;                   /* Mailboxes Reception Priority */
    vuint32_t RRS:1;                   /* Remote Request Storing */
    vuint32_t EACEN:1;                 /* Entire Frame Arbitration Field Comparison Enable For Rx Mailboxes */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t PREXCEN:1;               /* Protocol Exception Enable */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t ISOCANFDEN:1;            /* ISO CAN FD Enable */
    vuint32_t EDFLTDIS:1;              /* Edge Filter Disable */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t MBTSBASE:2;              /* Message Buffer Time Stamp Base */
    vuint32_t TSTAMPCAP:2;             /* Time Stamp Capture Point */
    vuint32_t _unused_26:6;            /* Reserved */
  } B;
} CAN_FD_CTRL2_tag;

typedef union CAN_FD_ESR2_union_tag {  /* Error and Status 2 register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:9;             /* Reserved */
    vuint32_t LPTM:7;                  /* Lowest Priority Tx Mailbox */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t VPS:1;                   /* Valid Priority Status */
    vuint32_t IMB:1;                   /* Inactive Mailbox */
    vuint32_t _unused_19:13;           /* Reserved */
  } B;
} CAN_FD_ESR2_tag;

typedef union CAN_FD_CRCR_union_tag {  /* CRC register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:9;             /* Reserved */
    vuint32_t MBCRC:7;                 /* CRC Mailbox */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t TXCRC:15;                /* Transmitted CRC value */
  } B;
} CAN_FD_CRCR_tag;

typedef union CAN_FD_RXFGMASK_union_tag { /* Rx FIFO Global Mask register */
  vuint32_t R;
  struct {
    vuint32_t FGM:32;                  /* Rx FIFO Global Mask Bits */
  } B;
} CAN_FD_RXFGMASK_tag;

typedef union CAN_FD_RXFIR_union_tag { /* Rx FIFO Information register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:23;            /* Reserved */
    vuint32_t IDHIT:9;                 /* Identifier Acceptance Filter Hit Indicator */
  } B;
} CAN_FD_RXFIR_tag;

typedef union CAN_FD_CBT_union_tag {   /* CAN Bit Timing register */
  vuint32_t R;
  struct {
    vuint32_t BTF:1;                   /* Bit Timing Format Enable */
    vuint32_t EPRESDIV:10;             /* Extended Prescaler Division Factor */
    vuint32_t ERJW:5;                  /* Extended Resync Jump Width */
    vuint32_t EPROPSEG:6;              /* Extended Propagation Segment */
    vuint32_t EPSEG1:5;                /* Extended Phase Segment 1 */
    vuint32_t EPSEG2:5;                /* Extended Phase Segment 2 */
  } B;
} CAN_FD_CBT_tag;

typedef union CAN_FD_IMASK3_union_tag { /* Interrupt Masks 3 register */
  vuint32_t R;
  struct {
    vuint32_t BUF95TO64M:32;           /* Buffer MBi Mask */
  } B;
} CAN_FD_IMASK3_tag;

typedef union CAN_FD_IFLAG3_union_tag { /* Interrupt Flags 3 register */
  vuint32_t R;
  struct {
    vuint32_t BUF95TO64:32;            /* Buffer MBi Interrupt */
  } B;
} CAN_FD_IFLAG3_tag;

typedef union CAN_FD_MB_CS_union_tag {/* Message Buffer 0 CS Register */
    vuint32_t R;
    struct {
	  vuint32_t EDL:1;                  /* Extended Data Length */
	  vuint32_t BRS:1;                  /* Bit Rate Switch */
	  vuint32_t ESI:1;                  /* Error State Indicator */
      vuint32_t _unused_3:1;
      vuint32_t CODE:4;                  /* Message Buffer Code */
      vuint32_t _unused_8:1;
      vuint32_t SRR:1;                   /* Substitute Remote Request. Contains a fixed recessive bit. */
      vuint32_t IDE:1;                   /* ID Extended. One/zero for extended/standard format frame. */
      vuint32_t RTR:1;                   /* Remote Transmission Request. One/zero for remote/data frame. */
      vuint32_t DLC:4;                   /* Length of the data to be stored/transmitted. */
      vuint32_t TIMESTAMP:16;            /* Free-Running Counter Time stamp. This 16-bit field is a copy of the Free-Running Timer, captured for Tx and Rx frames at the time when the beginning of the Identifier field appears on the CAN bus. */
    } B;
} CAN_FD_MB_CS_tag;

typedef union CAN_FD_MB_ID_union_tag {    /* Message Buffer 0 ID Register */
    vuint32_t R;
    struct {
      vuint32_t PRIO:3;                  /* Local Priority */
      vuint32_t ID_STD:11;               /* Frame Identifier Standard */
      vuint32_t ID_EXT:18;               /* Frame Identifier Extended */
    } B;
} CAN_FD_MB_ID_tag;

typedef union CAN_FD_MB_DATA_union_tag {
    vuint8_t B[8];
    vuint16_t H[4];
    vuint32_t W[2];
} CAN_FD_MB_DATA_tag;

typedef struct CAN_FD_MB_struct_tag {
   CAN_FD_MB_CS_tag CS;                    /* Message Buffer 0 CS Register */
   CAN_FD_MB_ID_tag ID;                    /* Message Buffer 0 ID Register */
   CAN_FD_MB_DATA_tag DATA;
} CAN_FD_MB_tag;

typedef union CAN_FD_RXIMR_union_tag { /* Rx Individual Mask registers */
  vuint32_t R;
  struct {
    vuint32_t MI:32;                   /* Individual Mask Bits */
  } B;
} CAN_FD_RXIMR_tag;

typedef union CAN_FD_MECR_union_tag {  /* Memory Error Control register */
  vuint32_t R;
  struct {
    vuint32_t ECRWRDIS:1;              /* Error Configuration Register Write Disable */
    vuint32_t _unused_1:11;            /* Reserved */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t HAERRIE:1;               /* Host Access Error Injection Enable */
    vuint32_t FAERRIE:1;               /* FlexCAN Access Error Injection Enable */
    vuint32_t EXTERRIE:1;              /* Extended Error Injection Enable */
    vuint32_t _unused_19:3;            /* Reserved */
    vuint32_t RERRDIS:1;               /* Error Report Disable */
    vuint32_t ECCDIS:1;                /* Error Correction Disable */
    vuint32_t NCEFAFRZ:1;              /* Non-Correctable Errors In FlexCAN Access Put Device In Freeze Mode */
    vuint32_t _unused_25:7;            /* Reserved */
  } B;
} CAN_FD_MECR_tag;

typedef union CAN_FD_ERRIAR_union_tag { /* Error Injection Address register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:18;            /* Reserved */
    vuint32_t INJADDR_H:12;            /* Error Injection Address High */
    vuint32_t INJADDR_L:2;             /* Error Injection Address Low */
  } B;
} CAN_FD_ERRIAR_tag;

typedef union CAN_FD_ERRIDPR_union_tag { /* Error Injection Data Pattern register */
  vuint32_t R;
  struct {
    vuint32_t DFLIP:32;                /* Data flip pattern */
  } B;
} CAN_FD_ERRIDPR_tag;

typedef union CAN_FD_ERRIPPR_union_tag { /* Error Injection Parity Pattern register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;             /* Reserved */
    vuint32_t PFLIP3:5;                /* Parity Flip Pattern For Byte 3 (most significant) */
    vuint32_t _unused_8:3;             /* Reserved */
    vuint32_t PFLIP2:5;                /* Parity Flip Pattern For Byte 2 */
    vuint32_t _unused_16:3;            /* Reserved */
    vuint32_t PFLIP1:5;                /* Parity Flip Pattern For Byte 1 */
    vuint32_t _unused_24:3;            /* Reserved */
    vuint32_t PFLIP0:5;                /* Parity Flip Pattern For Byte 0 (Least Significant) */
  } B;
} CAN_FD_ERRIPPR_tag;

typedef union CAN_FD_RERRAR_union_tag { /* Error Report Address register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:7;             /* Reserved */
    vuint32_t NCE:1;                   /* Non-Correctable Error */
    vuint32_t _unused_8:5;             /* Reserved */
    vuint32_t SAID:3;                  /* SAID */
    vuint32_t _unused_16:2;            /* Reserved */
    vuint32_t ERRADDR:14;              /* Address Where Error Detected */
  } B;
} CAN_FD_RERRAR_tag;

typedef union CAN_FD_RERRDR_union_tag { /* Error Report Data register */
  vuint32_t R;
  struct {
    vuint32_t RDATA:32;                /* Raw data word read from memory with error */
  } B;
} CAN_FD_RERRDR_tag;

typedef union CAN_FD_RERRSYNR_union_tag { /* Error Report Syndrome register */
  vuint32_t R;
  struct {
    vuint32_t BE3:1;                   /* Byte Enabled For Byte 3 (most significant) */
    vuint32_t _unused_1:2;             /* Reserved */
    vuint32_t SYND3:5;                 /* Error Syndrome For Byte 3 (most significant) */
    vuint32_t BE2:1;                   /* Byte Enabled For Byte 2 */
    vuint32_t _unused_9:2;             /* Reserved */
    vuint32_t SYND2:5;                 /* Error Syndrome For Byte 2 */
    vuint32_t BE1:1;                   /* Byte Enabled For Byte 1 */
    vuint32_t _unused_17:2;            /* Reserved */
    vuint32_t SYND1:5;                 /* Error Syndrome for Byte 1 */
    vuint32_t BE0:1;                   /* Byte Enabled For Byte 0 (least significant) */
    vuint32_t _unused_25:2;            /* Reserved */
    vuint32_t SYND0:5;                 /* Error Syndrome For Byte 0 (least significant) */
  } B;
} CAN_FD_RERRSYNR_tag;

typedef union CAN_FD_ERRSR_union_tag { /* Error Status register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;            /* Reserved */
    vuint32_t HANCEIF:1;               /* Host Access With Non-Correctable Error Interrupt Flag */
    vuint32_t FANCEIF:1;               /* FlexCAN Access With Non-Correctable Error Interrupt Flag */
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t CEIF:1;                  /* Correctable Error Interrupt Flag */
    vuint32_t _unused_16:12;           /* Reserved */
    vuint32_t HANCEIOF:1;              /* Host Access With Non-Correctable Error Interrupt Overrun Flag */
    vuint32_t FANCEIOF:1;              /* FlexCAN Access With Non-Correctable Error Interrupt Overrun Flag */
    vuint32_t _unused_30:1;            /* Reserved */
    vuint32_t CEIOF:1;                 /* Correctable Error Interrupt Overrun Flag */
  } B;
} CAN_FD_ERRSR_tag;

typedef union CAN_FD_FDCTRL_union_tag { /* CAN FD Control register */
  vuint32_t R;
  struct {
    vuint32_t FDRATE:1;                /* Bit Rate Switch Enable */
    vuint32_t _unused_1:4;             /* Reserved */
    vuint32_t _unused_5:2;             /* Reserved */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t MBDSR2:2;                /* Message Buffer Data Size for Region 2 */
    vuint32_t _unused_10:1;            /* Reserved */
    vuint32_t MBDSR1:2;                /* Message Buffer Data Size for Region 1 */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t MBDSR0:2;                /* Message Buffer Data Size for Region 0 */
    vuint32_t TDCEN:1;                 /* Transceiver Delay Compensation Enable */
    vuint32_t TDCFAIL:1;               /* Transceiver Delay Compensation Fail */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t TDCOFF:5;                /* Transceiver Delay Compensation Offset */
    vuint32_t _unused_24:2;            /* Reserved */
    vuint32_t TDCVAL:6;                /* Transceiver Delay Compensation Value */
  } B;
} CAN_FD_FDCTRL_tag;

typedef union CAN_FD_FDCBT_union_tag { /* CAN FD Bit Timing register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved */
    vuint32_t FPRESDIV:10;             /* Fast Prescaler Division Factor */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t FRJW:3;                  /* Fast Resync Jump Width */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t FPROPSEG:5;              /* Fast Propagation Segment */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t FPSEG1:3;                /* Fast Phase Segment 1 */
    vuint32_t _unused_27:2;            /* Reserved */
    vuint32_t FPSEG2:3;                /* Fast Phase Segment 2 */
  } B;
} CAN_FD_FDCBT_tag;

typedef union CAN_FD_FDCRC_union_tag { /* CAN FD CRC register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t FD_MBCRC:7;              /* CRC Mailbox Number for FD_TXCRC */
    vuint32_t _unused_8:3;             /* Reserved */
    vuint32_t FD_TXCRC:21;             /* Extended Transmitted CRC value */
  } B;
} CAN_FD_FDCRC_tag;

typedef union CAN_FD_HR_TIME_STAMP_union_tag { /* High Resolution Time Stamp */
  vuint32_t R;
  struct {
    vuint32_t TS:32;                   /* High Resolution Time Stamp */
  } B;
} CAN_FD_HR_TIME_STAMP_tag;

struct CAN_FD_tag {
  CAN_FD_MCR_tag MCR;                  /* Module Configuration register */
  CAN_FD_CTRL1_tag CTRL1;              /* Control 1 register */
  CAN_FD_TIMER_tag TIMER;              /* Free Running Timer */
  uint8_t CAN_FD_reserved0[4];
  CAN_FD_RXMGMASK_tag RXMGMASK;        /* Rx Mailboxes Global Mask register */
  CAN_FD_RX14MASK_tag RX14MASK;        /* Rx 14 Mask register */
  CAN_FD_RX15MASK_tag RX15MASK;        /* Rx 15 Mask register */
  CAN_FD_ECR_tag ECR;                  /* Error Counter */
  CAN_FD_ESR1_tag ESR1;                /* Error and Status 1 register */
  CAN_FD_IMASK2_tag IMASK2;            /* Interrupt Masks 2 register */
  CAN_FD_IMASK1_tag IMASK1;            /* Interrupt Masks 1 register */
  CAN_FD_IFLAG2_tag IFLAG2;            /* Interrupt Flags 2 register */
  CAN_FD_IFLAG1_tag IFLAG1;            /* Interrupt Flags 1 register */
  CAN_FD_CTRL2_tag CTRL2;              /* Control 2 register */
  CAN_FD_ESR2_tag ESR2;                /* Error and Status 2 register */
  uint8_t CAN_FD_reserved1[8];
  CAN_FD_CRCR_tag CRCR;                /* CRC register */
  CAN_FD_RXFGMASK_tag RXFGMASK;        /* Rx FIFO Global Mask register */
  CAN_FD_RXFIR_tag RXFIR;              /* Rx FIFO Information register */
  CAN_FD_CBT_tag CBT;                  /* CAN Bit Timing register */
  uint8_t CAN_FD_reserved2[24];
  CAN_FD_IMASK3_tag IMASK3;            /* Interrupt Masks 3 register */
  uint8_t CAN_FD_reserved3[4];
  CAN_FD_IFLAG3_tag IFLAG3;            /* Interrupt Flags 3 register */
  uint8_t CAN_FD_reserved4[8];
  CAN_FD_MB_tag MB[96];
  uint8_t CAN_FD_reserved5[1920];
  CAN_FD_RXIMR_tag RXIMR[96];          /* Rx Individual Mask registers */
  uint8_t CAN_FD_reserved6[224];
  CAN_FD_MECR_tag MECR;                /* Memory Error Control register */
  CAN_FD_ERRIAR_tag ERRIAR;            /* Error Injection Address register */
  CAN_FD_ERRIDPR_tag ERRIDPR;          /* Error Injection Data Pattern register */
  CAN_FD_ERRIPPR_tag ERRIPPR;          /* Error Injection Parity Pattern register */
  CAN_FD_RERRAR_tag RERRAR;            /* Error Report Address register */
  CAN_FD_RERRDR_tag RERRDR;            /* Error Report Data register */
  CAN_FD_RERRSYNR_tag RERRSYNR;        /* Error Report Syndrome register */
  CAN_FD_ERRSR_tag ERRSR;              /* Error Status register */
  uint8_t CAN_FD_reserved7[256];
  CAN_FD_FDCTRL_tag FDCTRL;            /* CAN FD Control register */
  CAN_FD_FDCBT_tag FDCBT;              /* CAN FD Bit Timing register */
  CAN_FD_FDCRC_tag FDCRC;              /* CAN FD CRC register */
  uint8_t CAN_FD_reserved8[36];
  CAN_FD_HR_TIME_STAMP_tag HR_TIME_STAMP[96]; /* High Resolution Time Stamp */
};


/* ============================================================================
   =============================== Module: CMU_FC =============================
   ============================================================================ */

typedef union CMU_FC_GCR_union_tag {   /* Global Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;
    vuint32_t FCE:1;                   /* Frequency Check Enable */
  } B;
} CMU_FC_GCR_tag;

typedef union CMU_FC_RCCR_union_tag {  /* Reference Count Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t REF_CNT:16;              /* Reference clock count */
  } B;
} CMU_FC_RCCR_tag;

typedef union CMU_FC_HTCR_union_tag {  /* High Threshold Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;
    vuint32_t HFREF:24;                /* High frequency reference threshold */
  } B;
} CMU_FC_HTCR_tag;

typedef union CMU_FC_LTCR_union_tag {  /* Low Threshold Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;
    vuint32_t LFREF:24;                /* Low Frequency Reference Threshold */
  } B;
} CMU_FC_LTCR_tag;

typedef union CMU_FC_SR_union_tag {    /* Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:27;
    vuint32_t RS:1;                    /* Run Status */
    vuint32_t STATE:2;                 /* Module State */
    vuint32_t FHH:1;                   /* Frequency higher than high frequency reference threshold event status */
    vuint32_t FLL:1;                   /* Frequency lower than low frequency reference threshold event status */
  } B;
} CMU_FC_SR_tag;

typedef union CMU_FC_IER_union_tag {   /* Interrupt Enable Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:28;
    vuint32_t FHHAIE:1;                /* Frequency Higher than High Frequency Reference Threshold Asynchronous Interrupt Enable */
    vuint32_t FLLAIE:1;                /* Frequency Lower than Low Frequency Reference Threshold Asynchronous Interrupt Enable */
    vuint32_t _unused_30:1;
    vuint32_t _unused_31:1;
  } B;
} CMU_FC_IER_tag;

struct CMU_FC_tag {
  CMU_FC_GCR_tag GCR;                  /* Global Configuration Register */
  CMU_FC_RCCR_tag RCCR;                /* Reference Count Configuration Register */
  CMU_FC_HTCR_tag HTCR;                /* High Threshold Configuration Register */
  CMU_FC_LTCR_tag LTCR;                /* Low Threshold Configuration Register */
  CMU_FC_SR_tag SR;                    /* Status Register */
  CMU_FC_IER_tag IER;                  /* Interrupt Enable Register */
};


/* ============================================================================
   =============================== Module: CMU_FM =============================
   ============================================================================ */

typedef union CMU_FM_GCR_union_tag {   /* Global Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t FME:1;                   /* Frequency Meter Enable */
  } B;
} CMU_FM_GCR_tag;

typedef union CMU_FM_RCCR_union_tag {  /* Reference Count Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t REF_CNT:16;              /* Reference Clock Count */
  } B;
} CMU_FM_RCCR_tag;

typedef union CMU_FM_SR_union_tag {    /* Status Register */
  vuint32_t R;
  struct {
    vuint32_t MET_CNT:24;              /* Meter Clock Count */
    vuint32_t _unused_24:3;            /* Reserved */
    vuint32_t RS:1;                    /* Run Status */
    vuint32_t STATE:2;                 /* Module State */
    vuint32_t FMTO:1;                  /* Frequency Meter Time Out */
    vuint32_t FMC:1;                   /* Frequency Meter Operation Complete */
  } B;
} CMU_FM_SR_tag;

struct CMU_FM_tag {
  CMU_FM_GCR_tag GCR;                  /* Global Configuration Register */
  CMU_FM_RCCR_tag RCCR;                /* Reference Count Configuration Register */
  CMU_FM_SR_tag SR;                    /* Status Register */
};


/* ============================================================================
   =============================== Module: CORE_PLL ===========================
   ============================================================================ */

typedef union CORE_PLL_PLLCR_union_tag { /* PLL Control Register */
  vuint32_t R;
  struct {
    vuint32_t PLLPD:1;                 /* PLL power down */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} CORE_PLL_PLLCR_tag;

typedef union CORE_PLL_PLLSR_union_tag { /* PLL Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:21;
    vuint32_t _unused_21:3;
    vuint32_t _unused_24:4;
    vuint32_t LOL:1;                   /* Loss-Of-Lock flag */
    vuint32_t LOCK:1;                  /* Lock status */
    vuint32_t _unused_30:2;
  } B;
} CORE_PLL_PLLSR_tag;

typedef union CORE_PLL_PLLDV_union_tag { /* PLL Divider */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;
    vuint32_t _unused_1:6;
    vuint32_t _unused_7:3;
    vuint32_t _unused_10:6;
    vuint32_t _unused_16:1;
    vuint32_t RDIV:3;                  /* Input clock predivider */
    vuint32_t _unused_20:4;
    vuint32_t MFI:8;                   /* Integer portion of loop divider. */
  } B;
} CORE_PLL_PLLDV_tag;

typedef union CORE_PLL_PLLFM_union_tag { /* PLL Frequency Modulation */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;
    vuint32_t SSCGBYP:1;               /* Frequency modulation (spread spectrum clock generation) bypass */
    vuint32_t SPREADCTL:1;             /* Modulation type selection */
    vuint32_t _unused_3:3;
    vuint32_t STEPSIZE:10;             /* Frequency modulation step size */
    vuint32_t _unused_16:5;
    vuint32_t STEPNO:11;               /* Number of steps of modulation period/frequency modulation */
  } B;
} CORE_PLL_PLLFM_tag;

typedef union CORE_PLL_PLLFD_union_tag { /* PLL Fractional Divider */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;
    vuint32_t SDMEN:1;                 /* Fractional mode enable */
    vuint32_t _unused_2:1;
    vuint32_t _unused_3:1;
    vuint32_t _unused_4:6;
    vuint32_t _unused_10:4;
    vuint32_t _unused_14:1;
    vuint32_t _unused_15:1;
    vuint32_t _unused_16:1;
    vuint32_t MFN:15;                  /* Numerator of fractional loop division factor */
  } B;
} CORE_PLL_PLLFD_tag;

typedef union CORE_PLL_PLLCLKMUX_union_tag { /* PLL Clock Multiplexer */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;
    vuint32_t REFCLKSEL:1;             /* Reference clock select */
  } B;
} CORE_PLL_PLLCLKMUX_tag;

typedef union CORE_PLL_PLLODIV_union_tag { /* PLL Output Divider */
  vuint32_t R;
  struct {
    vuint32_t DE:1;                    /* Divider enable */
    vuint32_t _unused_1:7;
    vuint32_t DIV:8;                   /* Division value */
    vuint32_t _unused_16:14;
    vuint32_t _unused_30:2;            /* Reserved */
  } B;
} CORE_PLL_PLLODIV_tag;

struct CORE_PLL_tag {
  CORE_PLL_PLLCR_tag PLLCR;            /* PLL Control Register */
  CORE_PLL_PLLSR_tag PLLSR;            /* PLL Status Register */
  CORE_PLL_PLLDV_tag PLLDV;            /* PLL Divider */
  CORE_PLL_PLLFM_tag PLLFM;            /* PLL Frequency Modulation */
  CORE_PLL_PLLFD_tag PLLFD;            /* PLL Fractional Divider */
  uint8_t CORE_PLL_reserved0[12];
  CORE_PLL_PLLCLKMUX_tag PLLCLKMUX;    /* PLL Clock Multiplexer */
  uint8_t CORE_PLL_reserved1[92];
  CORE_PLL_PLLODIV_tag PLLODIV[2];     /* PLL Output Divider */
};


/* ============================================================================
   =============================== Module: CRC ================================
   ============================================================================ */

typedef union CRC_CHANNEL_CFG_union_tag { /* Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;             /* Reserved */
    vuint32_t _unused_8:18;            /* Reserved */
    vuint32_t SWAP_BYTEWISE:1;         /* Swap CRC_INP byte-wise */
    vuint32_t SWAP_BITWISE:1;          /* Swap CRC_INP bit-wise */
    vuint32_t POLYG:2;                 /* Polynomial selection */
    vuint32_t SWAP:1;                  /* Swap selection */
    vuint32_t INV:1;                   /* Inversion selection */
  } B;
} CRC_CHANNEL_CFG_tag;

typedef union CRC_CHANNEL_INP_union_tag { /* Input Register */
  vuint32_t R;
  struct {
    vuint32_t INP:32;                  /* Input data for the CRC computation */
  } B;
} CRC_CHANNEL_INP_tag;

typedef union CRC_CHANNEL_CSTAT_union_tag { /* Current Status Register */
  vuint32_t R;
  struct {
    vuint32_t CSTAT:32;                /* CRC signature status */
  } B;
} CRC_CHANNEL_CSTAT_tag;

typedef union CRC_CHANNEL_OUTP_union_tag { /* Output Register */
  vuint32_t R;
  struct {
    vuint32_t OUTP:32;                 /* Final CRC signature */
  } B;
} CRC_CHANNEL_OUTP_tag;

typedef struct CRC_CHANNEL_struct_tag {
  CRC_CHANNEL_CFG_tag CFG;             /* Configuration Register */
  CRC_CHANNEL_INP_tag INP;             /* Input Register */
  CRC_CHANNEL_CSTAT_tag CSTAT;         /* Current Status Register */
  CRC_CHANNEL_OUTP_tag OUTP;           /* Output Register */
} CRC_CHANNEL_tag;

struct CRC_tag {
  CRC_CHANNEL_tag CHANNEL[3];
};


/* ============================================================================
   =============================== Module: CSI ================================
   ============================================================================ */

typedef union CSI_DPHY_RSTCFG_union_tag { /* DPHY Reset Configuration */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:30;            /* Reserved */
    vuint32_t RSTZ:1;                  /* This field puts the digital portion of DPHY under reset. */
    vuint32_t SHUTDWNZ:1;              /* This field puts the entire DPHY under reset. */
  } B;
} CSI_DPHY_RSTCFG_tag;

typedef union CSI_DPHY_CLEAR_union_tag { /* DPHY Clear */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t CLRREG:1;                /* This field is used for clearing the DPHY register space before any configuration is performed. */
  } B;
} CSI_DPHY_CLEAR_tag;

typedef union CSI_DPHY_FREQCFG_union_tag { /* DPHY Frequency Configuration */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:17;            /* Reserved */
    vuint32_t CLKFREQRNG:8;            /* This field allows configuring the system clock frequency configuration preset. */
    vuint32_t HSFREQRNG:7;             /* This field allows selection of operating frequency range for the DPHY. */
  } B;
} CSI_DPHY_FREQCFG_tag;

typedef union CSI_RX_RXNULANE_union_tag { /* Receive Number of Lanes Configuration */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:28;            /* Reserved */
    vuint32_t RXNULANE:4;              /* Number of data lanes enabled for high-speed MIPICSI2 data reception */
  } B;
} CSI_RX_RXNULANE_tag;

typedef union CSI_RX_RXENABLE_union_tag { /* Receive Enable Configuration */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:23;            /* Reserved */
    vuint32_t CFG_FLUSH_CNT:4;         /* This field is used to program the FIFO flush count in different speeds of operation in the receive controller. It should be programmed before enabling the DPHY lanes. */
    vuint32_t CFG_DATA_LANE_EN:4;      /* Enables the PHY Data Lanes */
    vuint32_t CFG_CLK_LANE_EN:1;       /* Enables the PHY Clock Lane */
  } B;
} CSI_RX_RXENABLE_tag;

typedef union CSI_RX_RXLANESWAP_union_tag { /* Receive Lane Swap Configuration */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t O_CFG_LANE3_SEL:2;       /* Selects the PPI interface lane that is used as lane 3 by the RX core. Normally, lane 3 PPI is used as lane 3 by the RX core. If this input is present, then lane swapping can be done by selecting a different PPI data lane to be used as lane 3. This should be programmed before enabling the DPHY lanes. */
    vuint32_t O_CFG_LANE2_SEL:2;       /* Selects the PPI interface lane that is used as lane 2 by the RX core. Normally, lane 2 PPI is used as lane 2 by the RX core. If this input is present, then lane swapping can be performed by selecting a different PPI data lane to be used as lane 2. This should be programmed before enabling the DPHY lanes. */
    vuint32_t O_CFG_LANE1_SEL:2;       /* Selects the PPI interface lane that is used as lane 1 by the RX core. Normally, lane 1 PPI is used as lane 1 by the RX core. If this input is present, then lane swapping can be performed by selecting a different PPI data lane to be used as lane 1. This should be programmed before enabling the DPHY lanes. */
    vuint32_t O_CFG_LANE0_SEL:2;       /* Selects the PPI interface lane that is used as lane 0 by the RX core. Normally, lane 0 PPI is used as lane 0 by the RX core. If this input is present, then lane swapping can be performed by selecting a different PPI data lane to be used as lane 0. This should be programmed before enabling the DPHY lanes. */
  } B;
} CSI_RX_RXLANESWAP_tag;

typedef union CSI_RX_CLKCS_union_tag { /* Clock Configuration Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:27;            /* Reserved */
    vuint32_t CULPMA:1;                /* Clock Lane ULPS Mark Active State */
    vuint32_t CULPSA:1;                /* Clock Lane ULPS Active */
    vuint32_t CSTOP:1;                 /* Clock Lane Stop State */
    vuint32_t ULPSC:1;                 /* Clock Lane ULPS */
    vuint32_t HSRA:1;                  /* High-Speed Clock Receive Active */
  } B;
} CSI_RX_CLKCS_tag;

typedef union CSI_RX_LANCS_union_tag { /* D-PHY Lane 0 Configuration Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:26;            /* Reserved */
    vuint32_t DULMA:1;                 /* Data Lane ULPS Mark Active */
    vuint32_t DULPA:1;                 /* Data Lane ULPS Active */
    vuint32_t DSTOP:1;                 /* Data Lane Stop State */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t RXACTH:1;                /* D-PHY Data Lane 0 RX Active High-Speed Data */
    vuint32_t RXVALH:1;                /* Data Lane 0 RX Valid High Speed */
  } B;
} CSI_RX_LANCS_tag;

typedef union CSI_RX_SR_union_tag {    /* Soft Reset Config */
  vuint32_t R;
  struct {
    vuint32_t SOFRST:1;                /* Software Reset */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} CSI_RX_SR_tag;

typedef union CSI_RX_VCENABLE_union_tag { /* Receive Virtual Channel Enable Configuration */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:28;            /* Reserved */
    vuint32_t VC3EN:1;                 /* Enable Reception of Data Corresponding to Virtual Channel 3 */
    vuint32_t VC2EN:1;                 /* Enable Reception of Data Corresponding to Virtual Channel 2 */
    vuint32_t VC1EN:1;                 /* Enable Reception of Data Corresponding to Virtual Channel 1 */
    vuint32_t VC0EN:1;                 /* Enable Reception of Data Corresponding to Virtual Channel 0 */
  } B;
} CSI_RX_VCENABLE_tag;

typedef union CSI_RX_DATAIDR_union_tag { /* Receive Data ID Report */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t VCID:2;                  /* Virtual channel ID being received currently over MIPICSI2 data lanes */
    vuint32_t DATAID:6;                /* Data ID of MIPICSI2 Data */
  } B;
} CSI_RX_DATAIDR_tag;

typedef union CSI_RX_INVIDR_union_tag { /* Receive Invalid Data ID Report */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t VCID:2;                  /* Virtual channel ID being received currently over MIPICSI2 data lanes */
    vuint32_t DATAID:6;                /* Data ID of MIPICSI2 Data */
  } B;
} CSI_RX_INVIDR_tag;

typedef union CSI_RX_GNSPR_VC_union_tag { /* Receive Generic Short Packet Report */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:10;            /* Reserved */
    vuint32_t DATA:16;                 /* Data content of the generic short packet being received for processing by the application */
    vuint32_t DATAID:6;                /* Data ID of the generic short packet being received currently */
  } B;
} CSI_RX_GNSPR_VC_tag;

typedef union CSI_RX_NUMPKTS_VC_union_tag { /* Receive Number of Packets for VC */
  vuint32_t R;
  struct {
    vuint32_t LONGPKTS:16;             /* Number of Long Packets Received */
    vuint32_t SHORTPKTS:16;            /* Number of Short Packets Received */
  } B;
} CSI_RX_NUMPKTS_VC_tag;

typedef union CSI_RX_VCINTRS_union_tag { /* Receive VC Data Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t GNSP3:1;                 /* Generic Short Packet Received on Virtual Channel 3 */
    vuint32_t FE3:1;                   /* Frame End on Virtual Channel 3 */
    vuint32_t FS3:1;                   /* Frame Start on Virtual Channel 3 */
    vuint32_t GNSP2:1;                 /* Generic Short Packet Received on Virtual Channel 2 */
    vuint32_t FE2:1;                   /* Frame End on Virtual Channel 2 */
    vuint32_t FS2:1;                   /* Frame Start on Virtual Channel 2 */
    vuint32_t GNSP1:1;                 /* Generic Short Packet Received on Virtual Channel 1 */
    vuint32_t FE1:1;                   /* Frame End on Virtual Channel 1 */
    vuint32_t FS1:1;                   /* Frame Start on Virtual Channel 1 */
    vuint32_t GNSP0:1;                 /* Generic Short Packet Received on Virtual Channel 0 */
    vuint32_t FE0:1;                   /* Frame End on Virtual Channel 0 */
    vuint32_t FS0:1;                   /* Frame Start on Virtual Channel 0 */
  } B;
} CSI_RX_VCINTRS_tag;

typedef union CSI_RX_VCINTRE_union_tag { /* Receive Data VC Event Interrupt Enable */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t GNSPIE3:1;               /* Generic Short Packet Received on Virtual Channel 3 Interrupt Enable */
    vuint32_t FEIE3:1;                 /* Frame End on Virtual Channel 3 Interrupt Enable */
    vuint32_t FSIE3:1;                 /* Frame Start on Virtual Channel 3 Interrupt Enable */
    vuint32_t GNSPIE2:1;               /* Generic Short Packet Received on Virtual Channel 2 Interrupt Enable */
    vuint32_t FEIE2:1;                 /* Frame End on Virtual Channel 2 Interrupt Enable */
    vuint32_t FSIE2:1;                 /* Frame Start on Virtual Channel 2 Interrupt Enable */
    vuint32_t GNSPIE1:1;               /* Generic Short Packet Received on Virtual Channel 1 Interrupt Enable */
    vuint32_t FEIE1:1;                 /* Frame End on Virtual Channel 1 Interrupt Enable */
    vuint32_t FSIE1:1;                 /* Frame Start on Virtual Channel 1 Interrupt Enable */
    vuint32_t GNSPIE0:1;               /* Generic Short Packet Received on Virtual Channel 0 Interrupt Enable */
    vuint32_t FEIE0:1;                 /* Frame End on Virtual Channel 0 Interrupt Enable */
    vuint32_t FSIE0:1;                 /* Frame Start on Virtual Channel 0 Interrupt Enable */
  } B;
} CSI_RX_VCINTRE_tag;

typedef union CSI_CONTROLLER_STATUS_REGISTER_union_tag { /* Controller Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:26;            /* Reserved */
    vuint32_t ECC_RECEIVED:6;          /* This field reports the ECC value received at the controller end. */
  } B;
} CSI_CONTROLLER_STATUS_REGISTER_tag;

typedef union CSI_CRC_REGISTER_union_tag { /* CRC */
  vuint32_t R;
  struct {
    vuint32_t PAYLOAD_CRC_CALCULATED:16; /* CRC calculated by the controller on the incoming packet. */
    vuint32_t PAYLOAD_CRC_RECEIVED:16; /* CRC received by the controller along with the packet. */
  } B;
} CSI_CRC_REGISTER_tag;

typedef union CSI_CONTROLLER_ERR_STATUS_REGISTER_union_tag { /* Controller Error Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:29;            /* Reserved */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t FIFO_OVERFLOW_ERROR:1;   /* This field indicates overflow of the internal FIFO in the controller . */
    vuint32_t EXIT_HS_ERROR:1;         /* Asserted at the end of the packet by the controller to indicate that the PHY has stopped high speed transmission before the number of required bytes have been received. */
  } B;
} CSI_CONTROLLER_ERR_STATUS_REGISTER_tag;

typedef union CSI_CONTROLLER_ERR_IE_union_tag { /* Controller Interrupt Enable */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:30;            /* Reserved */
    vuint32_t HS_EXIT_ERRIE:1;         /* Enables the interrupt for the High speed exit error reporting to the system. */
    vuint32_t FIFO_OVERFLOW_ERRIE:1;   /* Enables the interrupt for the FIFO overflow error reporting to the system. */
  } B;
} CSI_CONTROLLER_ERR_IE_tag;

typedef union CSI_RX_VC_PPERRIS_union_tag { /* Receive Data Protocol and Packet Error Interrupt Status for VC0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:26;            /* Reserved */
    vuint32_t INVIDERR:1;              /* Invalid ID Detected in Received Data Stream */
    vuint32_t CRCERR:1;                /* CRC Error in Received Data Stream */
    vuint32_t ERFDAT:1;                /* Error in Data in Received Data Stream */
    vuint32_t ERFSYN:1;                /* Frame Synchronization Error in Received Data Stream */
    vuint32_t ECCTWO:1;                /* 2-Bit ECC Error in Received Packet Header */
    vuint32_t ECCONE:1;                /* 1-Bit ECC Error in Received Packet Header */
  } B;
} CSI_RX_VC_PPERRIS_tag;

typedef union CSI_RX_VC_PPERRIE_union_tag { /* Receive Data Protocol and Packet Error Interrupt Enable for VC0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:26;            /* Reserved */
    vuint32_t INVIDERRIE:1;            /* Invalid ID Interrupt Enable */
    vuint32_t CRCERRIE:1;              /* CRC Error Interrupt Enable */
    vuint32_t ERFDATIE:1;              /* Frame Data Error Interrupt Enable */
    vuint32_t ERFSYNIE:1;              /* Frame Synchronization Error Interrupt Enable */
    vuint32_t ECCTWOIE:1;              /* ECC 2-Bit Error Interrupt Enable */
    vuint32_t ECCONEIE:1;              /* ECC 1-Bit Error Interrupt Enable */
  } B;
} CSI_RX_VC_PPERRIE_tag;

typedef union CSI_RX_VC_ERRPOS_union_tag { /* Receive ECC 1-Bit Error Position for VC0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:27;            /* Reserved */
    vuint32_t ERRPOS:5;                /* Error Position */
  } B;
} CSI_RX_VC_ERRPOS_tag;

typedef union CSI_RX_VC_NUMPPERR_union_tag { /* Receive Packets Number of Protocol Errors for VC0 */
  vuint32_t R;
  struct {
    vuint32_t NUMECCERR:16;            /* Number of ECC 2-Bit Errors */
    vuint32_t NUMCRCERR:16;            /* Number of CRC Errors */
  } B;
} CSI_RX_VC_NUMPPERR_tag;

typedef struct CSI_RX_VC_struct_tag {
  CSI_RX_VC_PPERRIS_tag PPERRIS;       /* Receive Data Protocol and Packet Error Interrupt Status for VC0 */
  CSI_RX_VC_PPERRIE_tag PPERRIE;       /* Receive Data Protocol and Packet Error Interrupt Enable for VC0 */
  CSI_RX_VC_ERRPOS_tag ERRPOS;         /* Receive ECC 1-Bit Error Position for VC0 */
  CSI_RX_VC_NUMPPERR_tag NUMPPERR;     /* Receive Packets Number of Protocol Errors for VC0 */
} CSI_RX_VC_tag;

typedef union CSI_RX_PHYERRIS_union_tag { /* Receive Data PHY Level Error Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:11;            /* Reserved */
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t ERCTRL3:1;               /* Control Command Error on Lane 3 */
    vuint32_t ERSYES3:1;               /* Synchronization Error in Escape Mode on Lane 3 */
    vuint32_t ERRESC3:1;               /* Escape Mode Entry Error on Lane 3 */
    vuint32_t NOSYN3:1;                /* Multi-Bit Error in Synchronization Pattern Detected on Lane 3 */
    vuint32_t ERRSY3:1;                /* Error in Synchronization Pattern Detected on Lane 3 */
    vuint32_t ERCTRL2:1;               /* Control Command Error on Lane 2 */
    vuint32_t ERSYES2:1;               /* Synchronization Error in Escape Mode on Lane 2 */
    vuint32_t ERRESC2:1;               /* Escape Mode Entry Error on Lane 2 */
    vuint32_t NOSYN2:1;                /* Multi-Bit Error in Synchronization Pattern Detected on Lane 2 */
    vuint32_t ERRSY2:1;                /* Error in Synchronization Pattern Detected on Lane 2 */
    vuint32_t ERCTRL1:1;               /* Control Command Error on Lane 1 */
    vuint32_t ERSYES1:1;               /* Synchronization Error in Escape Mode on Lane 1 */
    vuint32_t ERRESC1:1;               /* Escape Mode Entry Error on Lane 1 */
    vuint32_t NOSYN1:1;                /* Multi-Bit Error in Synchronization Pattern Detected on Lane 1 */
    vuint32_t ERRSY1:1;                /* Error in Synchronization Pattern Detected on Lane 1 */
    vuint32_t ERCTRL0:1;               /* Control Command Error on Lane 0 */
    vuint32_t ERSYES0:1;               /* Synchronization Error in Escape Mode on Lane 0 */
    vuint32_t ERRESC0:1;               /* Escape Mode Entry Error on Lane 0 */
    vuint32_t NOSYN0:1;                /* Multi-Bit Error in Synchronization Pattern Detected on Lane 0 */
    vuint32_t ERRSY0:1;                /* Error in Synchronization Pattern Detected on Lane 0 */
  } B;
} CSI_RX_PHYERRIS_tag;

typedef union CSI_RX_PHYERRIE_union_tag { /* Receive Data PHY Level Error Interrupt Enable */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:11;            /* Reserved */
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t ERCTRLIE3:1;             /* Control Command Error on Lane 3 Interrupt Enabled */
    vuint32_t ERSYESIE3:1;             /* Synchronization Error in Escape Mode on Lane 3 Interrupt Enabled */
    vuint32_t ERRESCIE3:1;             /* Escape Mode Entry Error on Lane 3 Interrupt Enabled */
    vuint32_t NOSYNIE3:1;              /* Multi-Bit Error in Synchronization Pattern on Lane 3 Interrupt Enabled */
    vuint32_t ERRSYIE3:1;              /* Error in Synchronization Pattern on Lane 3 Interrupt Enabled */
    vuint32_t ERCTRLIE2:1;             /* Control Command Error on Lane 2 Interrupt Enabled */
    vuint32_t ERSYESIE2:1;             /* Synchronization Error in Escape Mode on Lane 2 Interrupt Enabled */
    vuint32_t ERRESCIE2:1;             /* Escape Mode Entry Error on Lane 2 Interrupt Enabled */
    vuint32_t NOSYNIE2:1;              /* Multi-Bit Error in Synchronization Pattern on Lane 2 Interrupt Enabled */
    vuint32_t ERRSYIE2:1;              /* Error in Synchronization Pattern on Lane 2 Interrupt Enabled */
    vuint32_t ERCTRLIE1:1;             /* Control Command Error on Lane 1 Interrupt Enabled */
    vuint32_t ERSYESIE1:1;             /* Synchronization Error in Escape Mode on Lane 1 Interrupt Enabled */
    vuint32_t ERRESCIE1:1;             /* Escape Mode Entry Error on Lane 1 Interrupt Enabled */
    vuint32_t NOSYNIE1:1;              /* Multi-Bit Error in Synchronization Pattern on Lane 1 Interrupt Enabled */
    vuint32_t ERRSYIE1:1;              /* Error in Synchronization Pattern on Lane 1 Interrupt Enabled */
    vuint32_t ERCTRLIE0:1;             /* Control Command Error on Lane 0 Interrupt Enabled */
    vuint32_t ERSYESIE0:1;             /* Synchronization Error in Escape Mode on Lane 0 Interrupt Enabled */
    vuint32_t ERRESCIE0:1;             /* Escape Mode Entry Error on Lane 0 Interrupt Enabled */
    vuint32_t NOSYNIE0:1;              /* Multi-Bit Error in Synchronization Pattern on Lane 0 Interrupt Enabled */
    vuint32_t ERRSYIE0:1;              /* Error in Synchronization Pattern on Lane 0 Interrupt Enabled */
  } B;
} CSI_RX_PHYERRIE_tag;

typedef union CSI_RX_STAT_CONFIG_union_tag { /* Receive Data Statistical Computation Configuration */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:28;            /* Reserved */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t _unused_29:2;            /* Reserved */
    vuint32_t STATEN:1;                /* This field enables statistical computation on incoming raw data. If the value of the field is 1, the statistics data is written into memory, otherwise the statistics data is dropped and only ADC channel data is written into memory. */
  } B;
} CSI_RX_STAT_CONFIG_tag;

typedef union CSI_RX_CBUF_CONFIG_union_tag { /* Receive Data Circular Buffer Configuration */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:21;            /* Reserved */
    vuint32_t FIFTHCH_ENABLE:1;        /* Fifth channel data capture enabled for the buffer */
    vuint32_t VCID:2;                  /* This field indicates the virtual channel, the content of which is to be received in the circular buffer. */
    vuint32_t DATAID:6;                /* This field indicates the data type to be received in the circular buffer. */
    vuint32_t _unused_30:1;            /* Reserved */
    vuint32_t TRACE:1;                 /* This field indicates whether the data being written over the current buffer is a traceable AXI transaction. */
  } B;
} CSI_RX_CBUF_CONFIG_tag;

typedef union CSI_RX_INPLINELEN_CONFIG_union_tag { /* Receive Data Input Line Length Configuration */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t INPLINELEN:16;           /* Expected length of the incoming MIPI packet, in bytes */
  } B;
} CSI_RX_INPLINELEN_CONFIG_tag;

typedef union CSI_RX_LINELEN_CONFIG_union_tag { /* Receive Data Line Length Configuration */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t LINELEN:16;              /* Expected length of the packet, in bytes, to be received */
  } B;
} CSI_RX_LINELEN_CONFIG_tag;

typedef union CSI_RX_NUMLINES_CONFIG_union_tag { /* Receive Data Expected Number of Lines Configuration */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t NUMLINES:16;             /* Number of Lines */
  } B;
} CSI_RX_NUMLINES_CONFIG_tag;

typedef union CSI_RX_CBUF_SRTPTR_union_tag { /* Receive Data Circular Buffer Start Pointer */
  vuint32_t R;
  struct {
    vuint32_t STRPTR:28;               /* Start address offset of the circular buffer for MIPICSI2 receive data */
    vuint32_t _unused_28:4;            /* Reserved */
  } B;
} CSI_RX_CBUF_SRTPTR_tag;

typedef union CSI_RX_CBUF_BUFLEN_union_tag { /* Receive Data Circular Buffer Length */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t BUFLEN:16;               /* 16-byte aligned length for each line written in the circular buffer for MIPICSI2 data */
  } B;
} CSI_RX_CBUF_BUFLEN_tag;

typedef union CSI_RX_CBUF_NUMLINE_union_tag { /* Receive Data Circular Buffer Number of Lines */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t _unused_2:14;            /* Reserved */
    vuint32_t NUMLINES:16;             /* Number of lines in the circular buffer for MIPICSI2 received data */
  } B;
} CSI_RX_CBUF_NUMLINE_tag;

typedef union CSI_RX_CBUF_LPDI_union_tag { /* Receive Data Circular Buffer Lines Done Generation */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t _unused_1:23;            /* Reserved */
    vuint32_t NUMLINES:8;              /* Number of lines captured in the circular buffer after which done trigger is generated. */
  } B;
} CSI_RX_CBUF_LPDI_tag;

typedef union CSI_RX_CBUF_NXTLINE_union_tag { /* Receive Data Circular Buffer Next Row Indication */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t NXTLINE:16;              /* Row number in the circular buffer where next line of MIPICSI2 received data is to be written */
  } B;
} CSI_RX_CBUF_NXTLINE_tag;

typedef union CSI_RX_CBUF_RXLINE_union_tag { /* Receive Data Circular Buffer Total Lines Received Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t TOTLINES:16;             /* Total Number of Lines */
  } B;
} CSI_RX_CBUF_RXLINE_tag;

typedef union CSI_RX_CBUF_ERRLEN_union_tag { /* Receive Data Circular Buffer Error Line Length Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t ERRLEN:16;               /* Length of first line in bytes, the length of which is different from the one configured for the circular buffer for MIPICSI2 received data */
  } B;
} CSI_RX_CBUF_ERRLEN_tag;

typedef union CSI_RX_CBUF_ERRLINE_union_tag { /* Receive Data Circular Buffer Line Number for Incorrect Length Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t ERRLINE:16;              /* Line number of first line, the length of which is different from the one configured for the circular buffer for MIPICSI2 received data */
  } B;
} CSI_RX_CBUF_ERRLINE_tag;

typedef struct CSI_RX_struct_tag {
  CSI_RX_CBUF_CONFIG_tag CBUF_CONFIG;  /* Receive Data Circular Buffer Configuration */
  CSI_RX_INPLINELEN_CONFIG_tag INPLINELEN_CONFIG; /* Receive Data Input Line Length Configuration */
  CSI_RX_LINELEN_CONFIG_tag LINELEN_CONFIG; /* Receive Data Line Length Configuration */
  CSI_RX_NUMLINES_CONFIG_tag NUMLINES_CONFIG; /* Receive Data Expected Number of Lines Configuration */
  CSI_RX_CBUF_SRTPTR_tag CBUF_SRTPTR;  /* Receive Data Circular Buffer Start Pointer */
  CSI_RX_CBUF_BUFLEN_tag CBUF_BUFLEN;  /* Receive Data Circular Buffer Length */
  CSI_RX_CBUF_NUMLINE_tag CBUF_NUMLINE; /* Receive Data Circular Buffer Number of Lines */
  CSI_RX_CBUF_LPDI_tag CBUF_LPDI;      /* Receive Data Circular Buffer Lines Done Generation */
  CSI_RX_CBUF_NXTLINE_tag CBUF_NXTLINE; /* Receive Data Circular Buffer Next Row Indication */
  CSI_RX_CBUF_RXLINE_tag CBUF_RXLINE;  /* Receive Data Circular Buffer Total Lines Received Status */
  CSI_RX_CBUF_ERRLEN_tag CBUF_ERRLEN;  /* Receive Data Circular Buffer Error Line Length Status */
  CSI_RX_CBUF_ERRLINE_tag CBUF_ERRLINE; /* Receive Data Circular Buffer Line Number for Incorrect Length Status */
} CSI_RX_tag;

typedef union CSI_CBUF_INTRS_union_tag { /* Receive Data Circular Buffer Error Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;             /* Reserved */
    vuint32_t LINCNTERR11:1;           /* Line Count Error Indication for Circular Buffer 11 */
    vuint32_t LINLENERR11:1;           /* Line Length Error Indication for Circular Buffer 11 */
    vuint32_t LINCNTERR10:1;           /* Line Count Error Indication for Circular Buffer 10 */
    vuint32_t LINLENERR10:1;           /* Line Length Error Indication for Circular Buffer 10 */
    vuint32_t LINCNTERR9:1;            /* Line Count Error Indication for Circular Buffer 9 */
    vuint32_t LINLENERR9:1;            /* Line Length Error Indication for Circular Buffer 9 */
    vuint32_t LINCNTERR8:1;            /* Line Count Error Indication for Circular Buffer 8 */
    vuint32_t LINLENERR8:1;            /* Line Length Error Indication for Circular Buffer 8 */
    vuint32_t LINCNTERR7:1;            /* Line Count Error Indication for Circular Buffer 7 */
    vuint32_t LINLENERR7:1;            /* Line Length Error Indication for Circular Buffer 7 */
    vuint32_t LINCNTERR6:1;            /* Line Count Error Indication for Circular Buffer 6 */
    vuint32_t LINLENERR6:1;            /* Line Length Error Indication for Circular Buffer 6 */
    vuint32_t LINCNTERR5:1;            /* Line Count Error Indication for Circular Buffer 5 */
    vuint32_t LINLENERR5:1;            /* Line Length Error Indication for Circular Buffer 5 */
    vuint32_t LINCNTERR4:1;            /* Line Count Error Indication for Circular Buffer 4 */
    vuint32_t LINLENERR4:1;            /* Line Length Error Indication for Circular Buffer 4 */
    vuint32_t LINCNTERR3:1;            /* Line Count Error Indication for Circular Buffer 3 */
    vuint32_t LINLENERR3:1;            /* Line Length Error Indication for Circular Buffer 3 */
    vuint32_t LINCNTERR2:1;            /* Line Count Error Indication for Circular Buffer 2 */
    vuint32_t LINLENERR2:1;            /* Line Length Error Indication for Circular Buffer 2 */
    vuint32_t LINCNTERR1:1;            /* Line Count Error Indication for Circular Buffer 1 */
    vuint32_t LINLENERR1:1;            /* Line Length Error Indication for Circular Buffer 1 */
    vuint32_t LINCNTERR0:1;            /* Line Count Error Indication for Circular Buffer 0 */
    vuint32_t LINLENERR0:1;            /* Line Length Error Indication for Circular Buffer 0 */
  } B;
} CSI_CBUF_INTRS_tag;

typedef union CSI_CBUF_INTRE_union_tag { /* Receive Circular Buffer Error Interrupt Enable */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;             /* Reserved */
    vuint32_t LINCNTIE11:1;            /* Line Count Error on Circular Buffer 11 Interrupt Enable */
    vuint32_t LINLENIE11:1;            /* Line Length Error on Circular Buffer 11 Interrupt Enable */
    vuint32_t LINCNTIE10:1;            /* Line Count Error on Circular Buffer 10 Interrupt Enable */
    vuint32_t LINLENIE10:1;            /* Line Length Error on Circular Buffer 10 Interrupt Enable */
    vuint32_t LINCNTIE9:1;             /* Line Count Error on Circular Buffer 9 Interrupt Enable */
    vuint32_t LINLENIE9:1;             /* Line Length Error on Circular Buffer 9 Interrupt Enable */
    vuint32_t LINCNTIE8:1;             /* Line Count Error on Circular Buffer 8 Interrupt Enable */
    vuint32_t LINLENIE8:1;             /* Line Length Error on Circular Buffer 8 Interrupt Enable */
    vuint32_t LINCNTIE7:1;             /* Line Count Error on Circular Buffer 7 Interrupt Enable */
    vuint32_t LINLENIE7:1;             /* Line Length Error on Circular Buffer 7 Interrupt Enable */
    vuint32_t LINCNTIE6:1;             /* Line Count Error on Circular Buffer 6 Interrupt Enable */
    vuint32_t LINLENIE6:1;             /* Line Length Error on Circular Buffer 6 Interrupt Enable */
    vuint32_t LINCNTIE5:1;             /* Line Count Error on Circular Buffer 5 Interrupt Enable */
    vuint32_t LINLENIE5:1;             /* Line Length Error on Circular Buffer 5 Interrupt Enable */
    vuint32_t LINCNTIE4:1;             /* Line Count Error on Circular Buffer 4 Interrupt Enable */
    vuint32_t LINLENIE4:1;             /* Line Length Error on Circular Buffer 4 Interrupt Enable */
    vuint32_t LINCNTIE3:1;             /* Line Count Error on Circular Buffer 3 Interrupt Enable */
    vuint32_t LINLENIE3:1;             /* Line Length Error on Circular Buffer 3 Interrupt Enable */
    vuint32_t LINCNTIE2:1;             /* Line Count Error on Circular Buffer 2 Interrupt Enable */
    vuint32_t LINLENIE2:1;             /* Line Length Error on Circular Buffer 2 Interrupt Enable */
    vuint32_t LINCNTIE1:1;             /* Line Count Error on Circular Buffer 1 Interrupt Enable */
    vuint32_t LINLENIE1:1;             /* Line Length Error on Circular Buffer 1 Interrupt Enable */
    vuint32_t LINCNTIE0:1;             /* Line Count Error on Circular Buffer 0 Interrupt Enable */
    vuint32_t LINLENIE0:1;             /* Line Length Error on Circular Buffer 0 Interrupt Enable */
  } B;
} CSI_CBUF_INTRE_tag;

typedef union CSI_RX_DROPDATAR_union_tag { /* Received Drop Data Type and VC Report */
  vuint32_t R;
  struct {
    vuint32_t DROPVCID3:2;             /* VCID Dropped */
    vuint32_t DROPDATAID3:6;           /* Data ID Dropped */
    vuint32_t DROPVCID2:2;             /* VCID Dropped */
    vuint32_t DROPDATAID2:6;           /* Data ID Dropped */
    vuint32_t DROPVCID1:2;             /* VCID Dropped */
    vuint32_t DROPDATAID1:6;           /* Data ID Dropped */
    vuint32_t DROPVCID0:2;             /* VCID Dropped */
    vuint32_t DROPDATAID0:6;           /* Data ID Dropped */
  } B;
} CSI_RX_DROPDATAR_tag;

typedef union CSI_RX_CBUF_OUTCFG_union_tag { /* Receive Data Channel Output Configuration */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:22;            /* Reserved */
    vuint32_t FLIP_BIT_AUX:1;          /* Defines the signed or unsigned nature of auxiliary channel data */
    vuint32_t BYTE_ORDER_LSB_FIRST:1;  /* Byte order of incoming RAW16 data */
    vuint32_t SWAPRAWDATA:1;           /* Swap the data for RAW8 incoming data to align as RAW 16 data in memory. */
    vuint32_t FLIP_BIT:1;              /* Defines the signed or unsigned nature of data that is received for the ADC channel data. If FLIP_BIT=1, only toggle value of the statistics part is relevant, and the rest can be ignored. Alternatively, statistics can be disabled with flip enabled. */
    vuint32_t OUTPUT_MODE:2;           /* This field is used to configure the output data format in SRAM for the received channel data. */
    vuint32_t DROP_RATE:2;             /* Configures the number of samples of fifth channel that needs to be dropped */
    vuint32_t CALIB_ON:1;              /* Enables the fifth channel */
    vuint32_t DATA_MODE:1;             /* Defines the type of data. This field selects whether the data is real or complex. */
  } B;
} CSI_RX_CBUF_OUTCFG_tag;

typedef union CSI_RX_CBUF_CHNLENBL_union_tag { /* Receive Data Channel Enable/Disable Configuration */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t CHH_ENBL:1;              /* Enable Reception of Channel H Content */
    vuint32_t CHG_ENBL:1;              /* Enable Reception of Channel G Content */
    vuint32_t CHF_ENBL:1;              /* Enable Reception of Channel F Content */
    vuint32_t CHE_ENBL:1;              /* Enable Reception of Channel E Content */
    vuint32_t CHD_ENBL:1;              /* Enable Reception of Channel D Content */
    vuint32_t CHC_ENBL:1;              /* Enable Reception of Channel C Content */
    vuint32_t CHB_ENBL:1;              /* Enable Reception of Channel B Content */
    vuint32_t CHA_ENBL:1;              /* Enable Reception of Channel A Content */
  } B;
} CSI_RX_CBUF_CHNLENBL_tag;

typedef union CSI_RX_CBUF0_CHNLOFFSET0_0_union_tag { /* Receive Data Channel Offset Compensation Configuration */
  vuint32_t R;
  struct {
    vuint32_t CHB_DC:15;               /* Channel B Offset Compensation Value */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t CHA_DC:15;               /* Channel A Offset Compensation Value */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} CSI_RX_CBUF0_CHNLOFFSET0_0_tag;

typedef union CSI_RX_CBUF0_CHNLOFFSET1_0_union_tag { /* Receive Data Channel Offset Compensation Configuration */
  vuint32_t R;
  struct {
    vuint32_t CHD_DC:15;               /* Channel D Offset Compensation Value */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t CHC_DC:15;               /* Channel C Offset Compensation Value */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} CSI_RX_CBUF0_CHNLOFFSET1_0_tag;

typedef union CSI_RX_CBUF0_CHNLOFFSET2_0_union_tag { /* Receive Data Channel Offset Compensation Configuration */
  vuint32_t R;
  struct {
    vuint32_t CHF_DC:15;               /* Channel F Offset Compensation Value */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t CHE_DC:15;               /* Channel E Offset Compensation Value */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} CSI_RX_CBUF0_CHNLOFFSET2_0_tag;

typedef union CSI_RX_CBUF0_CHNLOFFSET3_0_union_tag { /* Receive Data Channel Offset Compensation Configuration */
  vuint32_t R;
  struct {
    vuint32_t CHH_DC:15;               /* Channel H Offset Compensation Value */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t CHG_DC:15;               /* Channel G Offset Compensation Value */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} CSI_RX_CBUF0_CHNLOFFSET3_0_tag;

typedef union CSI_RX_CBUF1_CHNLOFFSET0_1_union_tag { /* Receive Data Channel Offset Compensation Configuration */
  vuint32_t R;
  struct {
    vuint32_t CHB_DC:15;               /* Channel B Offset Compensation Value */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t CHA_DC:15;               /* Channel A Offset Compensation Value */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} CSI_RX_CBUF1_CHNLOFFSET0_1_tag;

typedef union CSI_RX_CBUF1_CHNLOFFSET1_1_union_tag { /* Receive Data Channel Offset Compensation Configuration */
  vuint32_t R;
  struct {
    vuint32_t CHD_DC:15;               /* Channel D Offset Compensation Value */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t CHC_DC:15;               /* Channel C Offset Compensation Value */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} CSI_RX_CBUF1_CHNLOFFSET1_1_tag;

typedef union CSI_RX_CBUF1_CHNLOFFSET2_1_union_tag { /* Receive Data Channel Offset Compensation Configuration */
  vuint32_t R;
  struct {
    vuint32_t CHF_DC:15;               /* Channel F Offset Compensation Value */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t CHE_DC:15;               /* Channel E Offset Compensation Value */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} CSI_RX_CBUF1_CHNLOFFSET2_1_tag;

typedef union CSI_RX_CBUF1_CHNLOFFSET3_1_union_tag { /* Receive Data Channel Offset Compensation Configuration */
  vuint32_t R;
  struct {
    vuint32_t CHH_DC:15;               /* Channel H Offset Compensation Value */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t CHG_DC:15;               /* Channel G Offset Compensation Value */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} CSI_RX_CBUF1_CHNLOFFSET3_1_tag;

typedef union CSI_RX_CBUF2_CHNLOFFSET0_2_union_tag { /* Receive Data Channel Offset Compensation Configuration */
  vuint32_t R;
  struct {
    vuint32_t CHB_DC:15;               /* Channel B Offset Compensation Value */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t CHA_DC:15;               /* Channel A Offset Compensation Value */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} CSI_RX_CBUF2_CHNLOFFSET0_2_tag;

typedef union CSI_RX_CBUF2_CHNLOFFSET1_2_union_tag { /* Receive Data Channel Offset Compensation Configuration */
  vuint32_t R;
  struct {
    vuint32_t CHD_DC:15;               /* Channel D Offset Compensation Value */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t CHC_DC:15;               /* Channel C Offset Compensation Value */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} CSI_RX_CBUF2_CHNLOFFSET1_2_tag;

typedef union CSI_RX_CBUF2_CHNLOFFSET2_2_union_tag { /* Receive Data Channel Offset Compensation Configuration */
  vuint32_t R;
  struct {
    vuint32_t CHF_DC:15;               /* Channel F Offset Compensation Value */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t CHE_DC:15;               /* Channel E Offset Compensation Value */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} CSI_RX_CBUF2_CHNLOFFSET2_2_tag;

typedef union CSI_RX_CBUF2_CHNLOFFSET3_2_union_tag { /* Receive Data Channel Offset Compensation Configuration */
  vuint32_t R;
  struct {
    vuint32_t CHH_DC:15;               /* Channel H Offset Compensation Value */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t CHG_DC:15;               /* Channel G Offset Compensation Value */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} CSI_RX_CBUF2_CHNLOFFSET3_2_tag;

typedef union CSI_RX_CBUF3_CHNLOFFSET0_3_union_tag { /* Receive Data Channel Offset Compensation Configuration */
  vuint32_t R;
  struct {
    vuint32_t CHB_DC:15;               /* Channel B Offset Compensation Value */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t CHA_DC:15;               /* Channel A Offset Compensation Value */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} CSI_RX_CBUF3_CHNLOFFSET0_3_tag;

typedef union CSI_RX_CBUF3_CHNLOFFSET1_3_union_tag { /* Receive Data Channel Offset Compensation Configuration */
  vuint32_t R;
  struct {
    vuint32_t CHD_DC:15;               /* Channel D Offset Compensation Value */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t CHC_DC:15;               /* Channel C Offset Compensation Value */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} CSI_RX_CBUF3_CHNLOFFSET1_3_tag;

typedef union CSI_RX_CBUF3_CHNLOFFSET2_3_union_tag { /* Receive Data Channel Offset Compensation Configuration */
  vuint32_t R;
  struct {
    vuint32_t CHF_DC:15;               /* Channel F Offset Compensation Value */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t CHE_DC:15;               /* Channel E Offset Compensation Value */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} CSI_RX_CBUF3_CHNLOFFSET2_3_tag;

typedef union CSI_RX_CBUF3_CHNLOFFSET3_3_union_tag { /* Receive Data Channel Offset Compensation Configuration */
  vuint32_t R;
  struct {
    vuint32_t CHH_DC:15;               /* Channel H Offset Compensation Value */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t CHG_DC:15;               /* Channel G Offset Compensation Value */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} CSI_RX_CBUF3_CHNLOFFSET3_3_tag;

typedef union CSI_RX_CHNL_INTRS_union_tag { /* Receive Data Channel Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:29;            /* Reserved */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t BUFFOVF:1;               /* Internal Buffer Overflow Indication */
    vuint32_t LINEDONE:1;              /* Long Packet Complete Indication */
  } B;
} CSI_RX_CHNL_INTRS_tag;

typedef union CSI_RX_CHNL_INTRE_union_tag { /* Receive Channel Interrupt Enable */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:29;            /* Reserved */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t BUFFOVFIE:1;             /* Internal Buffer Overflow Indication Interrupt Enable */
    vuint32_t LINEDONEIE:1;            /* Long Packet Complete Indication Interrupt Enable */
  } B;
} CSI_RX_CHNL_INTRE_tag;

typedef union CSI_WR_CHNL_INTRS_union_tag { /* AXI Write Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:30;            /* Reserved */
    vuint32_t BUFFOVFAXI:1;            /* When the number of outstanding transactions has reached eight for AXI master write side and a new burst request is needed, then this is set. It represents a latency in the AXI write channel response. */
    vuint32_t ERRRESP:1;               /* Error Response on the AXI Write Channel */
  } B;
} CSI_WR_CHNL_INTRS_tag;

typedef union CSI_WR_CHNL_INTRE_union_tag { /* AXI Write Channel Interrupt Enable */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:30;            /* Reserved */
    vuint32_t BUFFOVFAXIIE:1;          /* Internal Buffer Overflow Indication Interrupt Enable */
    vuint32_t ERRRESPIE:1;             /* Error Response on the AXI Write Response Channel Interrupt Enable */
  } B;
} CSI_WR_CHNL_INTRE_tag;

typedef union CSI_TURNCFG_union_tag {  /* Turnaround Request Configuration */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:11;            /* Reserved */
    vuint32_t _unused_11:16;           /* Reserved */
    vuint32_t FORCERXMODE4:1;          /* Force Receive Mode on Data Lane */
    vuint32_t FORCERXMODE3:1;          /* Force Receive Mode on Data Lane */
    vuint32_t FORCERXMODE2:1;          /* Force Receive Mode on Data Lane */
    vuint32_t FORCERXMODE1:1;          /* Force Receive Mode on Data Lane */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} CSI_TURNCFG_tag;

typedef union CSI_TRIGGER_GPIO1_union_tag { /* GPIO1 Pad Event Trigger Control */
  vuint32_t R;
  struct {
    vuint32_t TRIGGERONTAMS_LANE3:1;   /* Turnaround Completion from Master to Slave Direction on Lane Event Enable */
    vuint32_t TRIGGERONTASM_LANE3:1;   /* Turnaround Completion from Slave to Master Direction on Lane Event Enable */
    vuint32_t TRIGGERONPKTID_VC3:2;    /* Trigger to be generated on specific packet and frame identifiers */
    vuint32_t TRIGGERONPKT_VC3:2;      /* Trigger to be generated on which packet type for each VC */
    vuint32_t TRIGGERONERR_VC3:2;      /* Trigger to be generated on which error for each VC */
    vuint32_t TRIGGERONTAMS_LANE2:1;   /* Turnaround Completion from Master to Slave Direction on Lane Event Enable */
    vuint32_t TRIGGERONTASM_LANE2:1;   /* Turnaround Completion from Slave to Master Direction on Lane Event Enable */
    vuint32_t TRIGGERONPKTID_VC2:2;    /* Trigger to be generated on specific packet and frame identifiers */
    vuint32_t TRIGGERONPKT_VC2:2;      /* Trigger to be generated on which packet type for each VC */
    vuint32_t TRIGGERONERR_VC2:2;      /* Trigger to be generated on which error for each VC */
    vuint32_t TRIGGERONTAMS_LANE1:1;   /* Turnaround Completion from Master to Slave Direction on Lane Event Enable */
    vuint32_t TRIGGERONTASM_LANE1:1;   /* Turnaround Completion from Slave to Master Direction on Lane Event Enable */
    vuint32_t TRIGGERONPKTID_VC1:2;    /* Trigger to be generated on specific packet and frame identifiers */
    vuint32_t TRIGGERONPKT_VC1:2;      /* Trigger to be generated on which packet type for each VC */
    vuint32_t TRIGGERONERR_VC1:2;      /* Trigger to be generated on which error for each VC */
    vuint32_t TRIGGERONTAMS_LANE0:1;   /* Turnaround Completion from Master to Slave Direction on Lane Event Enable */
    vuint32_t TRIGGERONTASM_LANE0:1;   /* Turnaround Completion from Slave to Master Direction on Lane Event Enable */
    vuint32_t TRIGGERONPKTID_VC0:2;    /* Trigger to be generated on specific packet and frame identifiers */
    vuint32_t TRIGGERONPKT_VC0:2;      /* Trigger to be generated on which packet type for each VC */
    vuint32_t TRIGGERONERR_VC0:2;      /* Trigger to be generated on which error for each VC */
  } B;
} CSI_TRIGGER_GPIO1_tag;

typedef union CSI_TRIGGER_SDMA1_union_tag { /* SDMA1 Pad Event Trigger Control */
  vuint32_t R;
  struct {
    vuint32_t TRIGGERONTAMS_LANE3:1;   /* Turnaround Completion from Master to Slave Direction on Lane Event Enable */
    vuint32_t TRIGGERONTASM_LANE3:1;   /* Turnaround Completion from Slave to Master Direction on Lane Event Enable */
    vuint32_t TRIGGERONPKTID_VC3:2;    /* Trigger to be generated on specific packet and frame identifiers */
    vuint32_t TRIGGERONPKT_VC3:2;      /* Trigger to be generated on which packet type for each VC */
    vuint32_t TRIGGERONERR_VC3:2;      /* Trigger to be generated on which error for each VC */
    vuint32_t TRIGGERONTAMS_LANE2:1;   /* Turnaround Completion from Master to Slave Direction on Lane Event Enable */
    vuint32_t TRIGGERONTASM_LANE2:1;   /* Turnaround Completion from Slave to Master Direction on Lane Event Enable */
    vuint32_t TRIGGERONPKTID_VC2:2;    /* Trigger to be generated on specific packet and frame identifiers */
    vuint32_t TRIGGERONPKT_VC2:2;      /* Trigger to be generated on which packet type for each VC */
    vuint32_t TRIGGERONERR_VC2:2;      /* Trigger to be generated on which error for each VC */
    vuint32_t TRIGGERONTAMS_LANE1:1;   /* Turnaround Completion from Master to Slave Direction on Lane Event Enable */
    vuint32_t TRIGGERONTASM_LANE1:1;   /* Turnaround Completion from Slave to Master Direction on Lane Event Enable */
    vuint32_t TRIGGERONPKTID_VC1:2;    /* Trigger to be generated on specific packet and frame identifiers */
    vuint32_t TRIGGERONPKT_VC1:2;      /* Trigger to be generated on which packet type for each VC */
    vuint32_t TRIGGERONERR_VC1:2;      /* Trigger to be generated on which error for each VC */
    vuint32_t TRIGGERONTAMS_LANE0:1;   /* Turnaround Completion from Master to Slave Direction on Lane Event Enable */
    vuint32_t TRIGGERONTASM_LANE0:1;   /* Turnaround Completion from Slave to Master Direction on Lane Event Enable */
    vuint32_t TRIGGERONPKTID_VC0:2;    /* Trigger to be generated on specific packet and frame identifiers */
    vuint32_t TRIGGERONPKT_VC0:2;      /* Trigger to be generated on which packet type for each VC */
    vuint32_t TRIGGERONERR_VC0:2;      /* Trigger to be generated on which error for each VC */
  } B;
} CSI_TRIGGER_SDMA1_tag;

typedef union CSI_TRIGGEREN_GPIO_union_tag { /* GPIO Pad Event Trigger Enable Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;             /* Reserved */
    vuint32_t GPIO2_TRIGGERONPKTIDEN_VC3:1; /* Enable Trigger Generation on Specific Packet and Frame Identifiers */
    vuint32_t GPIO2_TRIGGERONPKTEN_VC3:1; /* Enable Trigger Generation on Specific Packet Type for each VC */
    vuint32_t GPIO2_TRIGGERONERR_VC3:1; /* Enable Trigger Generation on Errors for each VC */
    vuint32_t GPIO2_TRIGGERONPKTIDEN_VC2:1; /* Enable Trigger Generation on Specific Packet and Frame Identifiers */
    vuint32_t GPIO2_TRIGGERONPKTEN_VC2:1; /* Enable Trigger Generation on Specific Packet Type for each VC */
    vuint32_t GPIO2_TRIGGERONERR_VC2:1; /* Enable Trigger Generation on Errors for each VC */
    vuint32_t GPIO2_TRIGGERONPKTIDEN_VC1:1; /* Enable Trigger Generation on Specific Packet and Frame Identifiers */
    vuint32_t GPIO2_TRIGGERONPKTEN_VC1:1; /* Enable Trigger Generation on Specific Packet Type for each VC */
    vuint32_t GPIO2_TRIGGERONERR_VC1:1; /* Enable Trigger Generation on Errors for each VC */
    vuint32_t GPIO2_TRIGGERONPKTIDEN_VC0:1; /* Enable Trigger Generation on Specific Packet and Frame Identifiers */
    vuint32_t GPIO2_TRIGGERONPKTEN_VC0:1; /* Enable Trigger Generation on Specific Packet Type for each VC */
    vuint32_t GPIO2_TRIGGERONERR_VC0:1; /* Enable Trigger Generation on Errors for each VC */
    vuint32_t GPIO1_TRIGGERONPKTIDEN_VC3:1; /* Enable Trigger Generation on Specific Packet and Frame Identifiers */
    vuint32_t GPIO1_TRIGGERONPKTEN_VC3:1; /* Enable Trigger Generation on Specific Packet Type for each VC */
    vuint32_t GPIO1_TRIGGERONERR_VC3:1; /* Enable Trigger Generation on Errors for each VC */
    vuint32_t GPIO1_TRIGGERONPKTIDEN_VC2:1; /* Enable Trigger Generation on Specific Packet and Frame Identifiers */
    vuint32_t GPIO1_TRIGGERONPKTEN_VC2:1; /* Enable Trigger Generation on Specific Packet Type for each VC */
    vuint32_t GPIO1_TRIGGERONERR_VC2:1; /* Enable Trigger Generation on Errors for each VC */
    vuint32_t GPIO1_TRIGGERONPKTIDEN_VC1:1; /* Enable Trigger Generation on Specific Packet and Frame Identifiers */
    vuint32_t GPIO1_TRIGGERONPKTEN_VC1:1; /* Enable Trigger Generation on Specific Packet Type for each VC */
    vuint32_t GPIO1_TRIGGERONERR_VC1:1; /* Enable Trigger Generation on Errors for each VC */
    vuint32_t GPIO1_TRIGGERONPKTIDEN_VC0:1; /* Enable Trigger Generation on Specific Packet and Frame Identifiers */
    vuint32_t GPIO1_TRIGGERONPKTEN_VC0:1; /* Enable Trigger Generation on Specific Packet Type for each VC */
    vuint32_t GPIO1_TRIGGERONERR_VC0:1; /* Enable Trigger Generation on Errors for each VC */
  } B;
} CSI_TRIGGEREN_GPIO_tag;

typedef union CSI_TRIGGEREN_SDMA_union_tag { /* SDMA Pad Event Trigger Enable Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;             /* Reserved */
    vuint32_t SDMA2_TRIGGERONPKTIDEN_VC3:1; /* Enable Trigger Generation on Specific Packet and Frame Identifiers */
    vuint32_t SDMA2_TRIGGERONPKTEN_VC3:1; /* Enable Trigger Generation on Specific Packet Type for each VC */
    vuint32_t SDMA2_TRIGGERONERR_VC3:1; /* Enable Trigger Generation on Errors for each VC */
    vuint32_t SDMA2_TRIGGERONPKTIDEN_VC2:1; /* Enable Trigger Generation on Specific Packet and Frame Identifiers */
    vuint32_t SDMA2_TRIGGERONPKTEN_VC2:1; /* Enable Trigger Generation on Specific Packet Type for each VC */
    vuint32_t SDMA2_TRIGGERONERR_VC2:1; /* Enable Trigger Generation on Errors for each VC */
    vuint32_t SDMA2_TRIGGERONPKTIDEN_VC1:1; /* Enable Trigger Generation on Specific Packet and Frame Identifiers */
    vuint32_t SDMA2_TRIGGERONPKTEN_VC1:1; /* Enable Trigger Generation on Specific Packet Type for each VC */
    vuint32_t SDMA2_TRIGGERONERR_VC1:1; /* Enable Trigger Generation on Errors for each VC */
    vuint32_t SDMA2_TRIGGERONPKTIDEN_VC0:1; /* Enable Trigger Generation on Specific Packet and Frame Identifiers */
    vuint32_t SDMA2_TRIGGERONPKTEN_VC0:1; /* Enable Trigger Generation on Specific Packet Type for each VC */
    vuint32_t SDMA2_TRIGGERONERR_VC0:1; /* Enable Trigger Generation on Errors for each VC */
    vuint32_t SDMA1_TRIGGERONPKTIDEN_VC3:1; /* Enable Trigger Generation on Specific Packet and Frame Identifiers */
    vuint32_t SDMA1_TRIGGERONPKTEN_VC3:1; /* Enable Trigger Generation on Specific Packet Type for each VC */
    vuint32_t SDMA1_TRIGGERONERR_VC3:1; /* Enable Trigger Generation on Errors for each VC */
    vuint32_t SDMA1_TRIGGERONPKTIDEN_VC2:1; /* Enable Trigger Generation on Specific Packet and Frame Identifiers */
    vuint32_t SDMA1_TRIGGERONPKTEN_VC2:1; /* Enable Trigger Generation on Specific Packet Type for each VC */
    vuint32_t SDMA1_TRIGGERONERR_VC2:1; /* Enable Trigger Generation on Errors for each VC */
    vuint32_t SDMA1_TRIGGERONPKTIDEN_VC1:1; /* Enable Trigger Generation on Specific Packet and Frame Identifiers */
    vuint32_t SDMA1_TRIGGERONPKTEN_VC1:1; /* Enable Trigger Generation on Specific Packet Type for each VC */
    vuint32_t SDMA1_TRIGGERONERR_VC1:1; /* Enable Trigger Generation on Errors for each VC */
    vuint32_t SDMA1_TRIGGERONPKTIDEN_VC0:1; /* Enable Trigger Generation on Specific Packet and Frame Identifiers */
    vuint32_t SDMA1_TRIGGERONPKTEN_VC0:1; /* Enable Trigger Generation on Specific Packet Type for each VC */
    vuint32_t SDMA1_TRIGGERONERR_VC0:1; /* Enable Trigger Generation on Errors for each VC */
  } B;
} CSI_TRIGGEREN_SDMA_tag;

typedef union CSI_DPHY_CALTYPE_CNTRL_union_tag { /* System Configuration */
  vuint8_t R;
  struct {
    vuint8_t _unused_0:1;              /* Reserved */
    vuint8_t _unused_1:1;              /* Reserved */
    vuint8_t CMP_POLARITY_RW:1;        /* Comparator polarity */
    vuint8_t NOEXT_BURNIN_RES_CAL_RW:1; /* Selection between type of calibration */
    vuint8_t _unused_4:1;              /* Reserved */
    vuint8_t _unused_5:3;              /* Reserved */
  } B;
} CSI_DPHY_CALTYPE_CNTRL_tag;

typedef union CSI_DPHY_SKEWCAL_CNTRL_union_tag { /* System Configuration */
  vuint8_t R;
  struct {
    vuint8_t TCLK_MISS_DIV2_OVR_EN_RW:1; /* Use divider by 2 on Tclk-miss detection circuit override. */
    vuint8_t TCLK_MISS_DIV2_OVR_RW:1;  /* Use divider by 2 on Tclk-miss detection circuit override. */
    vuint8_t DESKEW_POLARITY_RW:1;     /* Deskew Calibration Pattern Control (only used in backwards compatibility) */
    vuint8_t DESKEW_LATENCY_RW__1__0__:2; /* Number of cycles */
    vuint8_t _unused_5:1;              /* Reserved */
    vuint8_t SKEW_MUX_SEL_RW:1;        /* Selects between auto mode and manual selection of de-skew calibration mechanism */
    vuint8_t SKEW_MUX_RUN_RW:1;        /* Selects the type of deskew calibration mode to run (internal or burst based). For 1.5 Gbit/s or 2.0 Gbit/s, 0 is for backwards compatibility (requires skew_mux_sel_rw = 1'b1). */
  } B;
} CSI_DPHY_SKEWCAL_CNTRL_tag;

typedef union CSI_DPHY_RX_STARTUP_OVERRIDE_union_tag { /* System Startup Observability */
  vuint8_t R;
  struct {
    vuint8_t RX_RXHS_COMPATIBILITY_MODE_OVR_EN_RW:1; /* Compatibility Mode Override Enable */
    vuint8_t BYPASS_SKEW_MACHINE_RW:1; /* Bypass Of Deskew Machine */
    vuint8_t SKEW_BACK_COMP_EN_OVR_RW:1; /* Deskew Backwards Compatibility Override Enable Value */
    vuint8_t SKEW_BACK_COMP_EN_OVR_EN_RW:1; /* Deskew Back Comparator Override Enable Control */
    vuint8_t BYPASS_DDLTUNNING_MACHINE_RW:1; /* Bypass DDL Tunning Machine */
    vuint8_t BYPASS_OFFSET_MACHINE_RW:1; /* Bypass Offset Machine Bit */
    vuint8_t _unused_6:1;              /* Reserved */
    vuint8_t CLK_EN_LANES_BYPASS_RW:1; /* Clock Enable Lanes Bypass */
  } B;
} CSI_DPHY_RX_STARTUP_OVERRIDE_tag;

typedef union CSI_DPHY_DDLOSCFREQ_CFG1_union_tag { /* System Startup Override */
  vuint8_t R;
  struct {
    vuint8_t DDL_OSC_FREQ_TARGET_OVR_RW__7__0__:8; /* DDL oscillation frequency override value (main) */
  } B;
} CSI_DPHY_DDLOSCFREQ_CFG1_tag;

typedef union CSI_DPHY_DDLOSCFREQ_CFG2_union_tag { /* System Startup Override */
  vuint8_t R;
  struct {
    vuint8_t _unused_0:4;              /* Reserved */
    vuint8_t DDL_OSC_FREQ_TARGET_OVR_RW__11__8__:4; /* DDL oscillation frequency override value (main) */
  } B;
} CSI_DPHY_DDLOSCFREQ_CFG2_tag;

typedef union CSI_DPHY_DDLOSCFREQ_OVREN_union_tag { /* System Startup Override */
  vuint8_t R;
  struct {
    vuint8_t COUNTER_FOR_DES_EN_CONFIG_IF_RW__3__0__:4; /* Override value of the counter used to meet the minimum and maximum clock lane settle time */
    vuint8_t RX_RXHS_GMODE_IF_OVR_RW__1__0__:2; /* RX HS g-mode override value */
    vuint8_t RX_RXHS_GMODE_IF_OVR_EN_RW:1; /* RX HS g-mode override enable control */
    vuint8_t DDL_OSC_FREQ_TARGET_OVR_EN_RW:1; /* DDL oscillation frequency override enable */
  } B;
} CSI_DPHY_DDLOSCFREQ_OVREN_tag;

typedef union CSI_DPHY_RX_TERM_CAL_0_union_tag { /* Termination Calibration Observability */
  vuint8_t R;
  struct {
    vuint8_t _unused_0:2;              /* Reserved */
    vuint8_t CB_CAL_REPL__3__0__:4;    /* Termination lower section replica setting (volatile) */
    vuint8_t _unused_6:1;              /* Reserved (volatile) */
    vuint8_t _unused_7:1;              /* Reserved (volatile) */
  } B;
} CSI_DPHY_RX_TERM_CAL_0_tag;

typedef union CSI_DPHY_RX_TERM_CAL_1_union_tag { /* Termination Calibration Observability */
  vuint8_t R;
  struct {
    vuint8_t RESCAL_DONE:1;            /* Lower section termination calibration algorithm done (volatile) */
    vuint8_t _unused_1:1;              /* Reserved */
    vuint8_t RESCAL_EN:1;              /* Lower section termination calibration algorithm enable (volatile) */
    vuint8_t _unused_3:1;              /* Reserved (volatile) */
    vuint8_t _unused_4:4;              /* Reserved (volatile) */
  } B;
} CSI_DPHY_RX_TERM_CAL_1_tag;

typedef union CSI_DPHY_CLOCK_LANE_CNTRL_union_tag { /* Clock Lane Control */
  vuint8_t R;
  struct {
    vuint8_t RXCLK_RXHS_PULL_LONG_CHANNEL_IF_RW:1; /* RX high-speed pull long channel */
    vuint8_t RXCLK_RXHS_INT_CLK_SEL_RW:1; /* RX high-speed internal clock selection */
    vuint8_t RXCLK_RXHS_FEED_INT_CLK_OVR_EN_RW:1; /* RX high-speed source data override enable control */
    vuint8_t RXCLK_RXHS_FEED_INT_CLK_OVR_RW:1; /* RX high-speed source data override */
    vuint8_t RXCLK_RXHS_DDR_CLK_EN_IF_RW:1; /* RX high-speed DDR clock enable bit */
    vuint8_t RXCLK_RXHS_CLK_TO_LONG_CHANNEL_IF_RW:1; /* RX high-speed clock to long channel bits */
    vuint8_t _unused_6:1;              /* Reserved */
    vuint8_t _unused_7:1;              /* Reserved (not used) */
  } B;
} CSI_DPHY_CLOCK_LANE_CNTRL_tag;

typedef union CSI_DPHY_CLKOFFSETCAL_OVRRIDE_union_tag { /* Clock Lane Offset Cancellation Control */
  vuint8_t R;
  struct {
    vuint8_t _unused_0:3;              /* Reserved */
    vuint8_t RXCLK_START_CALIBRATION_OVR_RW:1; /* Controls override of clock lane digital offset start calibration */
    vuint8_t RXCLK_START_CALIBRATION_OVR_EN_RW:1; /* Enables override of clock lane digital offset start calibration */
    vuint8_t RXCLK_RXHS_START_CALIBRATION_OVR_RW:1; /* Enables override of clock lane analog offset start calibration */
    vuint8_t RXCLK_RXHS_START_CALIBRATION_OVR_EN_RW:1; /* Controls override of clock lane analog offset start calibration */
    vuint8_t RXCLK_RXHS_CLK_OFFSET_CAL_OVR_EN_RW:1; /* Enables override of RX high-speed clock offset calibration */
  } B;
} CSI_DPHY_CLKOFFSETCAL_OVRRIDE_tag;

typedef union CSI_DPHY_CLKOFFSETCAL_OVRRIDEVAL_union_tag { /* Clock Lane Offset Cancellation Control 2 */
  vuint8_t R;
  struct {
    vuint8_t _unused_0:1;              /* Reserved */
    vuint8_t RXCLK_RXHS_CLK_OFFSET_CAL_OVR_RW__6__0__:7; /* RX HS Clock Offset Calibration Override Control */
  } B;
} CSI_DPHY_CLKOFFSETCAL_OVRRIDEVAL_tag;

typedef union CSI_DPHY_CLKCALVAL_COMPS_union_tag { /* Clock Lane Offset Cancellation Observability 3 */
  vuint8_t R;
  struct {
    vuint8_t _unused_0:1;              /* Reserved */
    vuint8_t RXCLK_RXHS_CLK_OFFSET_CAL__6__0__:7; /* Clock Lane Offset Calibration Setting (Volatile) */
  } B;
} CSI_DPHY_CLKCALVAL_COMPS_tag;

typedef union CSI_DPHY_CLKOFFSETCAL_COMPS_union_tag { /* Clock Lane Offset Cancellation Observability */
  vuint8_t R;
  struct {
    vuint8_t _unused_0:2;              /* Reserved */
    vuint8_t RXCLK_RXHS_CLK_M_CAL:1;   /* Clock Lane Offset Calibration m-line Comparator Output (Volatile) */
    vuint8_t RXCLK_ERRCAL__3__0__:4;   /* Clock Lane Offset Calibration Error (Volatile) */
    vuint8_t RXCLK_CALDONE:1;          /* Clock Lane Offset Calibration Done (Volatile) */
  } B;
} CSI_DPHY_CLKOFFSETCAL_COMPS_tag;

typedef union CSI_DPHY_RX_LPRXPON_LANE0_union_tag { /* Lane 0 Low Power Receive Control */
  vuint8_t R;
  struct {
    vuint8_t _unused_0:3;              /* Reserved */
    vuint8_t LPRXPONULP_LANE0_RW:1;    /* LP RX ULP power-on */
    vuint8_t LPRXPONULP_BYPASS_LANE0_RW:1; /* LP RX ULP power-on bypass override */
    vuint8_t LPRXPONLP_LANE0_RW:1;     /* LP RX LP power-on */
    vuint8_t LPRXPONLP_BYPASS_LANE0_RW:1; /* LP RX LP power-on bypass override */
    vuint8_t LPRXPONCD_LANE0_RW:1;     /* LP RX contention detector power-on */
  } B;
} CSI_DPHY_RX_LPRXPON_LANE0_tag;

typedef union CSI_DPHY_DATALANE_DESKEW_COMPS0_union_tag { /* Lane 0 Observability */
  vuint8_t R;
  struct {
    vuint8_t _unused_0:3;              /* Reserved */
    vuint8_t RX0_DESKEWCALFAILED_IF:1; /* Deskew Calibration Failed Signal (Volatile) */
    vuint8_t RX0_DESKEWCALDONE_IF:1;   /* Deskew Calibration Done (Volatile) */
    vuint8_t LSRXCLK_LANE0:1;          /* Low-Speed Clock(Volatile) */
    vuint8_t LPRXDOUTULP_LANE0__1__0__:2; /* LP-RX ULP Receiver Outputs (Volatile) */
  } B;
} CSI_DPHY_DATALANE_DESKEW_COMPS0_tag;

typedef union CSI_DPHY_DATAL0OFFSETCAL_OVRCNTRL_union_tag { /* Lane 0 Offset Compensation Control */
  vuint8_t R;
  struct {
    vuint8_t RX0_RXHS_DATA_OFFSET_CAL_EN_OVR_EN_RW:1; /* Data Offset Calibration Override Enable Control */
    vuint8_t RX0_CAL_DONE_OVR_RW:1;    /* Calibration Done Override Enable Control */
    vuint8_t RX0_CAL_DONE_OVR_EN_RW:1; /* Calibration Done Override Enable Control */
    vuint8_t RX0_START_CALIBRATION_OVR_RW:1; /* RX Start Calibration */
    vuint8_t RX0_START_CALIBRATION_OVR_EN_RW:1; /* RX Start Calibration */
    vuint8_t RX0_RXHS_DATA_OFFSET_CAL_OVR_EN_RW:1; /* Offset Calibration Setting Override */
    vuint8_t _unused_6:2;              /* Reserved */
  } B;
} CSI_DPHY_DATAL0OFFSETCAL_OVRCNTRL_tag;

typedef union CSI_DPHY_DATALOFFSETCAL_OVRVALUE0_union_tag { /* Lane 0 Offset Compensation Control */
  vuint8_t R;
  struct {
    vuint8_t RX0_RXHS_DATA_OFFSET_CAL_OVR_RW__6__0__:7; /* Offset Calibration Setting Override Enable */
    vuint8_t RX0_RXHS_DATA_OFFSET_CAL_EN_OVR_RW:1; /* Data Offset Calibration Override Enable Control */
  } B;
} CSI_DPHY_DATALOFFSETCAL_OVRVALUE0_tag;

typedef union CSI_DPHY_DATALANE_OFFSETCAL_COMPS0_union_tag { /* Lane Offset Compensation Observability */
  vuint8_t R;
  struct {
    vuint8_t _unused_0:5;              /* Reserved */
    vuint8_t RX0_CAL_ERROR:1;          /* Offset Calibration Algorithm Error (Volatile) */
    vuint8_t RX0_CAL_DONE:1;           /* Offset Calibration Algorithm Done (Volatile) */
    vuint8_t RX0_START_CALIBRATION:1;  /* Offset Calibration Algorithm Start (Volatile) */
  } B;
} CSI_DPHY_DATALANE_OFFSETCAL_COMPS0_tag;

typedef union CSI_DPHY_DATALOFFSETCAL_VALUE0_union_tag { /* Lane Offset Compensation Observability */
  vuint8_t R;
  struct {
    vuint8_t RX0_RXHS_DATA_OFFSET_CAL_EN:1; /* Offset calibration algorithm enable (volatile) */
    vuint8_t RX0_RXHS_DATA_OFFSET_CAL__6__0__:7; /* Offset calibration algorithm setting chosen (volatile) */
  } B;
} CSI_DPHY_DATALOFFSETCAL_VALUE0_tag;

typedef union CSI_DPHY_DATALANE_DDLTUNE_COMP0_union_tag { /* Lane DDL Tune Observability */
  vuint8_t R;
  struct {
    vuint8_t _unused_0:4;              /* Reserved */
    vuint8_t RX0_DDL_START_CALIBRATION_IF:1; /* DDL Tune Digital Algorithm Start (Volatile) */
    vuint8_t RX0_DDL_FINISHED_IF:1;    /* DDL Tune Done Indication (Volatile) */
    vuint8_t RX0_DDL_ERROR_FLAG_IF:1;  /* DDL Tune Error (Volatile) */
    vuint8_t DDL_TUNE_EN_LANE0_IF:1;   /* DDL Tune Analog Circuitry Enable Indication (Volatile) */
  } B;
} CSI_DPHY_DATALANE_DDLTUNE_COMP0_tag;

typedef union CSI_DPHY_DATALANE_DDLTUNE_VALUE0_union_tag { /* Lane 0 DDL Tune Observability */
  vuint8_t R;
  struct {
    vuint8_t _unused_0:2;              /* Reserved */
    vuint8_t RX0_RXHS_DDL_PHASE_CHANGE_P_IF:1; /* RX HS DDL Phase Change (Volatile) */
    vuint8_t RX0_RXHS_DDL_TUNE_IF__4__0__:5; /* RX HS DDL Tunning Setting (Volatile) */
  } B;
} CSI_DPHY_DATALANE_DDLTUNE_VALUE0_tag;

typedef union CSI_DPHY_DATALANE0_DESKEW_VALUE1_union_tag { /* Lane 0 DDL Tune Observability */
  vuint8_t R;
  struct {
    vuint8_t RESERVED_0:3;             /* Reserved field */
    vuint8_t RX0_RXHS_DDL_PHASE_CLK_IF__4__0__:5; /* Clock DDL Setting Chosen (volatile) */
  } B;
} CSI_DPHY_DATALANE0_DESKEW_VALUE1_tag;

typedef union CSI_DPHY_DATALANE0_DESKEW_VALUE2_union_tag { /* Lane 0 DDL Tune Observability */
  vuint8_t R;
  struct {
    vuint8_t RESERVED_0:4;             /* Reserved field */
    vuint8_t RX0_RXHS_DDL_PHASE_DATA_IF__3__0__:4; /* Data DDL Setting Chosen (Volatile) */
  } B;
} CSI_DPHY_DATALANE0_DESKEW_VALUE2_tag;

typedef union CSI_DPHY_DATALANE_DDLTUNE_OVRVALUE0_union_tag { /* Lane 0 DDL Tune Control */
  vuint8_t R;
  struct {
    vuint8_t RX0_RXHS_DDL_PHASE_CHANGE_P_OVR_RW:1; /* RX HS DDL Phase Changed Override Control */
    vuint8_t RX0_RXHS_DDL_PHASE_CHANGE_P_OVR_EN_RW:1; /* RX HS DDL Phase Changed Override Control */
    vuint8_t RX0_RXHS_DDL_TUNE_OVR_EN_RW:1; /* RX HS DDL Tune Override Enable Control */
    vuint8_t RX0_RXHS_DDL_TUNE_OVR_RW__4__0__:5; /* RX HS DDL Tune Override for Lane 0 */
  } B;
} CSI_DPHY_DATALANE_DDLTUNE_OVRVALUE0_tag;

typedef union CSI_DPHY_DATALANE0_DESKEW_OVRVALUE1_union_tag { /* Lane 0 DDL Tune Control */
  vuint8_t R;
  struct {
    vuint8_t RESERVED_0:2;             /* Reserved field */
    vuint8_t RX0_RXHS_DDL_PHASE_CLK_OVR_EN_RW:1; /* RX HS DDL Phase Clock Override Control */
    vuint8_t RX0_RXHS_DDL_PHASE_CLK_OVR_RW__4__0__:5; /* RX HS DDL Phase Clock Override */
  } B;
} CSI_DPHY_DATALANE0_DESKEW_OVRVALUE1_tag;

typedef union CSI_DPHY_DATALANE0_DESKEW_OVRVALUE2_union_tag { /* Lane 0 DDL Tune Control */
  vuint8_t R;
  struct {
    vuint8_t RESERVED_0:3;             /* Reserved field */
    vuint8_t RX0_RXHS_DDL_PHASE_DATA_OVR_EN_RW:1; /* Override Enable for DDL Phase Data */
    vuint8_t RX0_RXHS_DDL_PHASE_DATA_OVR_RW__3__0__:4; /* RX HS DDL Phase Data Override */
  } B;
} CSI_DPHY_DATALANE0_DESKEW_OVRVALUE2_tag;

typedef union CSI_DPHY_DATALANE_DESKEW_OVRVALUE11_union_tag { /* Lane 1 Control */
  vuint8_t R;
  struct {
    vuint8_t RX1_RXHS_DDL_PHASE_CLK_OVR_EN_RW:1; /* RX HS DDL Phase Data Override Control */
    vuint8_t RX1_RXHS_DDL_PHASE_CLK_OVR_RW__4__0__:5; /* RX HS DDL Phase Clock Override */
    vuint8_t RX1_RXHS_DDL_PHASE_CHANGE_P_OVR_EN_RW:1; /* RX HS DDL Phase Changed Override Control */
    vuint8_t RX1_RXHS_DDL_PHASE_CHANGE_P_OVR_RW:1; /* RX HS DDL Phase Changed Override Control */
  } B;
} CSI_DPHY_DATALANE_DESKEW_OVRVALUE11_tag;

typedef union CSI_DPHY_DATALANE_DESKEW_OVRVALUE21_union_tag { /* Lane 1 Control */
  vuint8_t R;
  struct {
    vuint8_t RESERVED_0:3;             /* Reserved field */
    vuint8_t RX1_RXHS_DDL_PHASE_DATA_OVR_EN_RW:1; /* Override Enable for DDL Phase Data */
    vuint8_t RX1_RXHS_DDL_PHASE_DATA_OVR_RW__3__0__:4; /* RX HS DDL phase clock override */
  } B;
} CSI_DPHY_DATALANE_DESKEW_OVRVALUE21_tag;

typedef union CSI_DPHY_DATALANE_DESKEW_COMPS1_union_tag { /* Lane 0 Observability */
  vuint8_t R;
  struct {
    vuint8_t _unused_0:3;              /* Reserved */
    vuint8_t RX0_DESKEWCALFAILED_IF:1; /* Deskew Calibration Failed Signal (Volatile) */
    vuint8_t RX0_DESKEWCALDONE_IF:1;   /* Deskew Calibration Done (Volatile) */
    vuint8_t LSRXCLK_LANE0:1;          /* Low-Speed Clock(Volatile) */
    vuint8_t LPRXDOUTULP_LANE0__1__0__:2; /* LP-RX ULP Receiver Outputs (Volatile) */
  } B;
} CSI_DPHY_DATALANE_DESKEW_COMPS1_tag;

typedef union CSI_DPHY_DATALANE_DESKEW_VALUE11_union_tag { /* Lane 1 Observability */
  vuint8_t R;
  struct {
    vuint8_t RESERVED_0:1;             /* Reserved field */
    vuint8_t RX1_RXHS_DDL_PHASE_CLK_IF__4__0__:5; /* Clock DDL Setting Chosen (Volatile) */
    vuint8_t RX1_RXHS_DDL_PHASE_CHANGE_P_IF:1; /* DDL Setting Change Latch Pulse (Volatile) */
    vuint8_t RX1_PM_START:1;           /* Pattern Matcher Start Flag Observation (Volatile) */
  } B;
} CSI_DPHY_DATALANE_DESKEW_VALUE11_tag;

typedef union CSI_DPHY_DATALANE_DESKEW_VALUE21_union_tag { /* Lane 1 Observability */
  vuint8_t R;
  struct {
    vuint8_t RESERVED_0:4;             /* Reserved field */
    vuint8_t RX1_RXHS_DDL_PHASE_DATA_IF__3__0__:4; /* Data DDl Setting Chosen (Volatile) */
  } B;
} CSI_DPHY_DATALANE_DESKEW_VALUE21_tag;

typedef union CSI_DPHY_DATAL1OFFSETCAL_OVRCNTRL_union_tag { /* Lane 1 Offset Compensation Control */
  vuint8_t R;
  struct {
    vuint8_t RX1_RXHS_DATA_OFFSET_CAL_EN_OVR_EN_RW:1; /* Data Offset Calibration Override Enable Control */
    vuint8_t RX1_CAL_DONE_OVR_RW:1;    /* Calibration Done Override Enable Control */
    vuint8_t RX1_CAL_DONE_OVR_EN_RW:1; /* Calibration Done Override Enable Control */
    vuint8_t RX1_START_CALIBRATION_OVR_RW:1; /* RX Start Calibration */
    vuint8_t RX1_START_CALIBRATION_OVR_EN_RW:1; /* RX Start Calibration */
    vuint8_t RX1_RXHS_DATA_OFFSET_CAL_OVR_EN_RW:1; /* Offset Calibration Setting Override */
    vuint8_t _unused_6:2;              /* Reserved */
  } B;
} CSI_DPHY_DATAL1OFFSETCAL_OVRCNTRL_tag;

typedef union CSI_DPHY_DATALOFFSETCAL_OVRVALUE1_union_tag { /* Lane 0 Offset Compensation Control */
  vuint8_t R;
  struct {
    vuint8_t RX0_RXHS_DATA_OFFSET_CAL_OVR_RW__6__0__:7; /* Offset Calibration Setting Override Enable */
    vuint8_t RX0_RXHS_DATA_OFFSET_CAL_EN_OVR_RW:1; /* Data Offset Calibration Override Enable Control */
  } B;
} CSI_DPHY_DATALOFFSETCAL_OVRVALUE1_tag;

typedef union CSI_DPHY_DATALANE_OFFSETCAL_COMPS1_union_tag { /* Lane Offset Compensation Observability */
  vuint8_t R;
  struct {
    vuint8_t _unused_0:5;              /* Reserved */
    vuint8_t RX0_CAL_ERROR:1;          /* Offset Calibration Algorithm Error (Volatile) */
    vuint8_t RX0_CAL_DONE:1;           /* Offset Calibration Algorithm Done (Volatile) */
    vuint8_t RX0_START_CALIBRATION:1;  /* Offset Calibration Algorithm Start (Volatile) */
  } B;
} CSI_DPHY_DATALANE_OFFSETCAL_COMPS1_tag;

typedef union CSI_DPHY_DATALOFFSETCAL_VALUE1_union_tag { /* Lane Offset Compensation Observability */
  vuint8_t R;
  struct {
    vuint8_t RX0_RXHS_DATA_OFFSET_CAL_EN:1; /* Offset calibration algorithm enable (volatile) */
    vuint8_t RX0_RXHS_DATA_OFFSET_CAL__6__0__:7; /* Offset calibration algorithm setting chosen (volatile) */
  } B;
} CSI_DPHY_DATALOFFSETCAL_VALUE1_tag;

typedef union CSI_DPHY_DATALANE_DDLTUNE_COMP1_union_tag { /* Lane DDL Tune Observability */
  vuint8_t R;
  struct {
    vuint8_t _unused_0:4;              /* Reserved */
    vuint8_t RX0_DDL_START_CALIBRATION_IF:1; /* DDL Tune Digital Algorithm Start (Volatile) */
    vuint8_t RX0_DDL_FINISHED_IF:1;    /* DDL Tune Done Indication (Volatile) */
    vuint8_t RX0_DDL_ERROR_FLAG_IF:1;  /* DDL Tune Error (Volatile) */
    vuint8_t DDL_TUNE_EN_LANE0_IF:1;   /* DDL Tune Analog Circuitry Enable Indication (Volatile) */
  } B;
} CSI_DPHY_DATALANE_DDLTUNE_COMP1_tag;

typedef union CSI_DPHY_DATALANE_DDLTUNE_VALUE1_union_tag { /* Lane 0 DDL Tune Observability */
  vuint8_t R;
  struct {
    vuint8_t _unused_0:2;              /* Reserved */
    vuint8_t RX0_RXHS_DDL_PHASE_CHANGE_P_IF:1; /* RX HS DDL Phase Change (Volatile) */
    vuint8_t RX0_RXHS_DDL_TUNE_IF__4__0__:5; /* RX HS DDL Tunning Setting (Volatile) */
  } B;
} CSI_DPHY_DATALANE_DDLTUNE_VALUE1_tag;

typedef union CSI_DPHY_DATALANE_DDLTUNE_OVRVALUE1_union_tag { /* Lane 0 DDL Tune Control */
  vuint8_t R;
  struct {
    vuint8_t RESERVED_0:2;             /* Reserved field */
    vuint8_t RX0_RXHS_DDL_TUNE_OVR_EN_RW:1; /* RX HS DDL Tune Override Enable Control */
    vuint8_t RX0_RXHS_DDL_TUNE_OVR_RW__4__0__:5; /* RX HS DDL Tune Override for Lane 0 */
  } B;
} CSI_DPHY_DATALANE_DDLTUNE_OVRVALUE1_tag;

typedef union CSI_DPHY_DATALANE_DESKEW_OVRVALUE12_union_tag { /* Lane 1 Control */
  vuint8_t R;
  struct {
    vuint8_t RX1_RXHS_DDL_PHASE_CLK_OVR_EN_RW:1; /* RX HS DDL Phase Data Override Control */
    vuint8_t RX1_RXHS_DDL_PHASE_CLK_OVR_RW__4__0__:5; /* RX HS DDL Phase Clock Override */
    vuint8_t RX1_RXHS_DDL_PHASE_CHANGE_P_OVR_EN_RW:1; /* RX HS DDL Phase Changed Override Control */
    vuint8_t RX1_RXHS_DDL_PHASE_CHANGE_P_OVR_RW:1; /* RX HS DDL Phase Changed Override Control */
  } B;
} CSI_DPHY_DATALANE_DESKEW_OVRVALUE12_tag;

typedef union CSI_DPHY_DATALANE_DESKEW_OVRVALUE22_union_tag { /* Lane 1 Control */
  vuint8_t R;
  struct {
    vuint8_t RESERVED_0:3;             /* Reserved field */
    vuint8_t RX1_RXHS_DDL_PHASE_DATA_OVR_EN_RW:1; /* Override Enable for DDL Phase Data */
    vuint8_t RX1_RXHS_DDL_PHASE_DATA_OVR_RW__3__0__:4; /* RX HS DDL phase clock override */
  } B;
} CSI_DPHY_DATALANE_DESKEW_OVRVALUE22_tag;

typedef union CSI_DPHY_DATALANE_DESKEW_COMPS2_union_tag { /* Lane 0 Observability */
  vuint8_t R;
  struct {
    vuint8_t _unused_0:3;              /* Reserved */
    vuint8_t RX0_DESKEWCALFAILED_IF:1; /* Deskew Calibration Failed Signal (Volatile) */
    vuint8_t RX0_DESKEWCALDONE_IF:1;   /* Deskew Calibration Done (Volatile) */
    vuint8_t LSRXCLK_LANE0:1;          /* Low-Speed Clock(Volatile) */
    vuint8_t LPRXDOUTULP_LANE0__1__0__:2; /* LP-RX ULP Receiver Outputs (Volatile) */
  } B;
} CSI_DPHY_DATALANE_DESKEW_COMPS2_tag;

typedef union CSI_DPHY_DATALANE_DESKEW_VALUE12_union_tag { /* Lane 1 Observability */
  vuint8_t R;
  struct {
    vuint8_t RESERVED_0:1;             /* Reserved field */
    vuint8_t RX1_RXHS_DDL_PHASE_CLK_IF__4__0__:5; /* Clock DDL Setting Chosen (Volatile) */
    vuint8_t RX1_RXHS_DDL_PHASE_CHANGE_P_IF:1; /* DDL Setting Change Latch Pulse (Volatile) */
    vuint8_t RX1_PM_START:1;           /* Pattern Matcher Start Flag Observation (Volatile) */
  } B;
} CSI_DPHY_DATALANE_DESKEW_VALUE12_tag;

typedef union CSI_DPHY_DATALANE_DESKEW_VALUE22_union_tag { /* Lane 1 Observability */
  vuint8_t R;
  struct {
    vuint8_t RESERVED_0:4;             /* Reserved field */
    vuint8_t RX1_RXHS_DDL_PHASE_DATA_IF__3__0__:4; /* Data DDl Setting Chosen (Volatile) */
  } B;
} CSI_DPHY_DATALANE_DESKEW_VALUE22_tag;

typedef union CSI_DPHY_DATAL2OFFSETCAL_OVRCNTRL_union_tag { /* Lane 1 Offset Compensation Control */
  vuint8_t R;
  struct {
    vuint8_t RX2_RXHS_DATA_OFFSET_CAL_EN_OVR_EN_RW:1; /* Data Offset Calibration Override Enable Control */
    vuint8_t RX2_CAL_DONE_OVR_RW:1;    /* Calibration Done Override Enable Control */
    vuint8_t RX2_CAL_DONE_OVR_EN_RW:1; /* Calibration Done Override Enable Control */
    vuint8_t RX2_START_CALIBRATION_OVR_RW:1; /* RX Start Calibration */
    vuint8_t RX2_START_CALIBRATION_OVR_EN_RW:1; /* RX Start Calibration */
    vuint8_t RX2_RXHS_DATA_OFFSET_CAL_OVR_EN_RW:1; /* Offset Calibration Setting Override */
    vuint8_t _unused_6:2;              /* Reserved */
  } B;
} CSI_DPHY_DATAL2OFFSETCAL_OVRCNTRL_tag;

typedef union CSI_DPHY_DATALOFFSETCAL_OVRVALUE2_union_tag { /* Lane 0 Offset Compensation Control */
  vuint8_t R;
  struct {
    vuint8_t RX0_RXHS_DATA_OFFSET_CAL_OVR_RW__6__0__:7; /* Offset Calibration Setting Override Enable */
    vuint8_t RX0_RXHS_DATA_OFFSET_CAL_EN_OVR_RW:1; /* Data Offset Calibration Override Enable Control */
  } B;
} CSI_DPHY_DATALOFFSETCAL_OVRVALUE2_tag;

typedef union CSI_DPHY_DATALANE_OFFSETCAL_COMPS2_union_tag { /* Lane Offset Compensation Observability */
  vuint8_t R;
  struct {
    vuint8_t _unused_0:5;              /* Reserved */
    vuint8_t RX0_CAL_ERROR:1;          /* Offset Calibration Algorithm Error (Volatile) */
    vuint8_t RX0_CAL_DONE:1;           /* Offset Calibration Algorithm Done (Volatile) */
    vuint8_t RX0_START_CALIBRATION:1;  /* Offset Calibration Algorithm Start (Volatile) */
  } B;
} CSI_DPHY_DATALANE_OFFSETCAL_COMPS2_tag;

typedef union CSI_DPHY_DATALOFFSETCAL_VALUE2_union_tag { /* Lane Offset Compensation Observability */
  vuint8_t R;
  struct {
    vuint8_t RX0_RXHS_DATA_OFFSET_CAL_EN:1; /* Offset calibration algorithm enable (volatile) */
    vuint8_t RX0_RXHS_DATA_OFFSET_CAL__6__0__:7; /* Offset calibration algorithm setting chosen (volatile) */
  } B;
} CSI_DPHY_DATALOFFSETCAL_VALUE2_tag;

typedef union CSI_DPHY_DATALANE_DDLTUNE_COMP2_union_tag { /* Lane DDL Tune Observability */
  vuint8_t R;
  struct {
    vuint8_t _unused_0:4;              /* Reserved */
    vuint8_t RX0_DDL_START_CALIBRATION_IF:1; /* DDL Tune Digital Algorithm Start (Volatile) */
    vuint8_t RX0_DDL_FINISHED_IF:1;    /* DDL Tune Done Indication (Volatile) */
    vuint8_t RX0_DDL_ERROR_FLAG_IF:1;  /* DDL Tune Error (Volatile) */
    vuint8_t DDL_TUNE_EN_LANE0_IF:1;   /* DDL Tune Analog Circuitry Enable Indication (Volatile) */
  } B;
} CSI_DPHY_DATALANE_DDLTUNE_COMP2_tag;

typedef union CSI_DPHY_DATALANE_DDLTUNE_VALUE2_union_tag { /* Lane 0 DDL Tune Observability */
  vuint8_t R;
  struct {
    vuint8_t _unused_0:2;              /* Reserved */
    vuint8_t RX0_RXHS_DDL_PHASE_CHANGE_P_IF:1; /* RX HS DDL Phase Change (Volatile) */
    vuint8_t RX0_RXHS_DDL_TUNE_IF__4__0__:5; /* RX HS DDL Tunning Setting (Volatile) */
  } B;
} CSI_DPHY_DATALANE_DDLTUNE_VALUE2_tag;

typedef union CSI_DPHY_DATALANE_DDLTUNE_OVRVALUE2_union_tag { /* Lane 0 DDL Tune Control */
  vuint8_t R;
  struct {
    vuint8_t RESERVED_0:2;             /* Reserved field */
    vuint8_t RX0_RXHS_DDL_TUNE_OVR_EN_RW:1; /* RX HS DDL Tune Override Enable Control */
    vuint8_t RX0_RXHS_DDL_TUNE_OVR_RW__4__0__:5; /* RX HS DDL Tune Override for Lane 0 */
  } B;
} CSI_DPHY_DATALANE_DDLTUNE_OVRVALUE2_tag;

typedef union CSI_DPHY_DATALANE_DDLTUNE_OVRVALUE3_union_tag { /* Lane 0 DDL Tune Control */
  vuint8_t R;
  struct {
    vuint8_t RESERVED_0:2;             /* Reserved field */
    vuint8_t RX0_RXHS_DDL_TUNE_OVR_EN_RW:1; /* RX HS DDL Tune Override Enable Control */
    vuint8_t RX0_RXHS_DDL_TUNE_OVR_RW__4:1; /* RX HS DDL Tune Override for Lane 0 */
    vuint8_t RESERVED_1:3;             /* Reserved field */
    vuint8_t RX0_RXHS_DDL_TUNE_OVR_RW__4__0__:1; /* RX HS DDL Tune Override for Lane 0 */
  } B;
} CSI_DPHY_DATALANE_DDLTUNE_OVRVALUE3_tag;

typedef union CSI_DPHY_DATALANE_DESKEW_OVRVALUE13_union_tag { /* Lane 1 Control */
  vuint8_t R;
  struct {
    vuint8_t RX1_RXHS_DDL_PHASE_CLK_OVR_EN_RW:1; /* RX HS DDL Phase Data Override Control */
    vuint8_t RX1_RXHS_DDL_PHASE_CLK_OVR_RW__4__0__:5; /* RX HS DDL Phase Clock Override */
    vuint8_t RX1_RXHS_DDL_PHASE_CHANGE_P_OVR_EN_RW:1; /* RX HS DDL Phase Changed Override Control */
    vuint8_t RX1_RXHS_DDL_PHASE_CHANGE_P_OVR_RW:1; /* RX HS DDL Phase Changed Override Control */
  } B;
} CSI_DPHY_DATALANE_DESKEW_OVRVALUE13_tag;

typedef union CSI_DPHY_DATALANE_DESKEW_OVRVALUE23_union_tag { /* Lane 1 Control */
  vuint8_t R;
  struct {
    vuint8_t RESERVED_0:3;             /* Reserved field */
    vuint8_t RX1_RXHS_DDL_PHASE_DATA_OVR_EN_RW:1; /* Override Enable for DDL Phase Data */
    vuint8_t RX1_RXHS_DDL_PHASE_DATA_OVR_RW__3__0__:4; /* RX HS DDL phase clock override */
  } B;
} CSI_DPHY_DATALANE_DESKEW_OVRVALUE23_tag;

typedef union CSI_DPHY_DATALANE_DESKEW_COMPS3_union_tag { /* Lane 0 Observability */
  vuint8_t R;
  struct {
    vuint8_t _unused_0:3;              /* Reserved */
    vuint8_t RX0_DESKEWCALFAILED_IF:1; /* Deskew Calibration Failed Signal (Volatile) */
    vuint8_t RX0_DESKEWCALDONE_IF:1;   /* Deskew Calibration Done (Volatile) */
    vuint8_t LSRXCLK_LANE0:1;          /* Low-Speed Clock(Volatile) */
    vuint8_t LPRXDOUTULP_LANE0__1__0__:2; /* LP-RX ULP Receiver Outputs (Volatile) */
  } B;
} CSI_DPHY_DATALANE_DESKEW_COMPS3_tag;

typedef union CSI_DPHY_DATALANE_DESKEW_VALUE13_union_tag { /* Lane 1 Observability */
  vuint8_t R;
  struct {
    vuint8_t RESERVED_0:1;             /* Reserved field */
    vuint8_t RX1_RXHS_DDL_PHASE_CLK_IF__4__0__:5; /* Clock DDL Setting Chosen (Volatile) */
    vuint8_t RX1_RXHS_DDL_PHASE_CHANGE_P_IF:1; /* DDL Setting Change Latch Pulse (Volatile) */
    vuint8_t RX1_PM_START:1;           /* Pattern Matcher Start Flag Observation (Volatile) */
  } B;
} CSI_DPHY_DATALANE_DESKEW_VALUE13_tag;

typedef union CSI_DPHY_DATALANE_DESKEW_VALUE23_union_tag { /* Lane 1 Observability */
  vuint8_t R;
  struct {
    vuint8_t RESERVED_0:4;             /* Reserved field */
    vuint8_t RX1_RXHS_DDL_PHASE_DATA_IF__3__0__:4; /* Data DDl Setting Chosen (Volatile) */
  } B;
} CSI_DPHY_DATALANE_DESKEW_VALUE23_tag;

typedef union CSI_DPHY_DATAL3OFFSETCAL_OVRCNTRL_union_tag { /* Lane 1 Offset Compensation Control */
  vuint8_t R;
  struct {
    vuint8_t RX3_RXHS_DATA_OFFSET_CAL_EN_OVR_EN_RW:1; /* Data Offset Calibration Override Enable Control */
    vuint8_t RX3_CAL_DONE_OVR_RW:1;    /* Calibration Done Override Enable Control */
    vuint8_t RX3_CAL_DONE_OVR_EN_RW:1; /* Calibration Done Override Enable Control */
    vuint8_t RX3_START_CALIBRATION_OVR_RW:1; /* RX Start Calibration */
    vuint8_t RX3_START_CALIBRATION_OVR_EN_RW:1; /* RX Start Calibration */
    vuint8_t RX3_RXHS_DATA_OFFSET_CAL_OVR_EN_RW:1; /* Offset Calibration Setting Override */
    vuint8_t _unused_6:2;              /* Reserved */
  } B;
} CSI_DPHY_DATAL3OFFSETCAL_OVRCNTRL_tag;

typedef union CSI_DPHY_DATALOFFSETCAL_OVRVALUE3_union_tag { /* Lane 0 Offset Compensation Control */
  vuint8_t R;
  struct {
    vuint8_t RX0_RXHS_DATA_OFFSET_CAL_OVR_RW__6__0__:7; /* Offset Calibration Setting Override Enable */
    vuint8_t RX0_RXHS_DATA_OFFSET_CAL_EN_OVR_RW:1; /* Data Offset Calibration Override Enable Control */
  } B;
} CSI_DPHY_DATALOFFSETCAL_OVRVALUE3_tag;

typedef union CSI_DPHY_DATALANE_OFFSETCAL_COMPS3_union_tag { /* Lane Offset Compensation Observability */
  vuint8_t R;
  struct {
    vuint8_t _unused_0:5;              /* Reserved */
    vuint8_t RX0_CAL_ERROR:1;          /* Offset Calibration Algorithm Error (Volatile) */
    vuint8_t RX0_CAL_DONE:1;           /* Offset Calibration Algorithm Done (Volatile) */
    vuint8_t RX0_START_CALIBRATION:1;  /* Offset Calibration Algorithm Start (Volatile) */
  } B;
} CSI_DPHY_DATALANE_OFFSETCAL_COMPS3_tag;

typedef union CSI_DPHY_DATALOFFSETCAL_VALUE3_union_tag { /* Lane Offset Compensation Observability */
  vuint8_t R;
  struct {
    vuint8_t RX0_RXHS_DATA_OFFSET_CAL_EN:1; /* Offset calibration algorithm enable (volatile) */
    vuint8_t RX0_RXHS_DATA_OFFSET_CAL__6__0__:7; /* Offset calibration algorithm setting chosen (volatile) */
  } B;
} CSI_DPHY_DATALOFFSETCAL_VALUE3_tag;

typedef union CSI_DPHY_DATALANE_DDLTUNE_COMP3_union_tag { /* Lane DDL Tune Observability */
  vuint8_t R;
  struct {
    vuint8_t _unused_0:4;              /* Reserved */
    vuint8_t RX0_DDL_START_CALIBRATION_IF:1; /* DDL Tune Digital Algorithm Start (Volatile) */
    vuint8_t RX0_DDL_FINISHED_IF:1;    /* DDL Tune Done Indication (Volatile) */
    vuint8_t RX0_DDL_ERROR_FLAG_IF:1;  /* DDL Tune Error (Volatile) */
    vuint8_t DDL_TUNE_EN_LANE0_IF:1;   /* DDL Tune Analog Circuitry Enable Indication (Volatile) */
  } B;
} CSI_DPHY_DATALANE_DDLTUNE_COMP3_tag;

typedef union CSI_DPHY_DATALANE_DDLTUNE_VALUE3_union_tag { /* Lane 0 DDL Tune Observability */
  vuint8_t R;
  struct {
    vuint8_t _unused_0:2;              /* Reserved */
    vuint8_t RX0_RXHS_DDL_PHASE_CHANGE_P_IF:1; /* RX HS DDL Phase Change (Volatile) */
    vuint8_t RX0_RXHS_DDL_TUNE_IF__4__0__:5; /* RX HS DDL Tunning Setting (Volatile) */
  } B;
} CSI_DPHY_DATALANE_DDLTUNE_VALUE3_tag;

typedef union CSI_DPHY_PLL_VREF_CONFIG_union_tag { /* PLL control */
  vuint8_t R;
  struct {
    vuint8_t PLL_MPLL_PROG_RW__7__0__:8;
  } B;
} CSI_DPHY_PLL_VREF_CONFIG_tag;

typedef union CSI_DPHY_CB_VBE_SEL_union_tag { /* Common Block Control */
  vuint8_t R;
  struct {
    vuint8_t _unused_0:1;              /* Reserved */
    vuint8_t CB_SEL_VREFCD_LPRX_RW__1__0__:2; /* LPRX Contention Detector Voltage Reference Selection */
    vuint8_t CB_SEL_V400_PROG_RW__2__0__:3; /* Select Value Of cb_v400 */
    vuint8_t CB_SEL_CHOP_CLK_RW:1;     /* Select Bandgap Clock Source */
    vuint8_t CB_CHOP_CLK_EN_RW:1;      /* Bandgap Chop Clock Enable */
  } B;
} CSI_DPHY_CB_VBE_SEL_tag;

typedef union CSI_DPHY_ATB_CB_ATB_VBE_SEL_union_tag { /* Common Block Control */
  vuint8_t R;
  struct {
    vuint8_t _unused_0:1;              /* Reserved */
    vuint8_t CB_ATB_VBE_SEL_RW:1;      /* VBE Selection To Analog Test Bus (ATB) */
    vuint8_t TXLP_PROG_RW_2_0:3;       /* LP-TX programmability */
    vuint8_t CB_SEL_VREFLPTX_PROG_RW:1; /* LP-TX Voltage Reference Selection */
    vuint8_t CB_SEL_VREF_LPRX_RW_1_0:2; /* LP-RX Contention Detector Voltage Reference Selection */
  } B;
} CSI_DPHY_ATB_CB_ATB_VBE_SEL_tag;

typedef union CSI_DPHY_TX_RDWR_TERM_CAL_0_union_tag { /* Termination Calibration Control */
  vuint8_t R;
  struct {
    vuint8_t CB_CAL_REPL_OVR_RW__3__0__:4; /* Enables override of the calibration word for termination lower section */
    vuint8_t CB_CAL_EN_UP_OVR_RW:1;    /* Enables override of the upper section termination calibration algorithm */
    vuint8_t CB_CAL_EN_UP_OVR_EN_RW:1; /* Enables override of the upper section termination calibration algorithm */
    vuint8_t CB_CAL_EN_OVR_RW:1;       /* Allows you to override the lower part termination control */
    vuint8_t CB_CAL_EN_OVR_EN_RW:1;    /* Allow you to override the lower part termination control */
  } B;
} CSI_DPHY_TX_RDWR_TERM_CAL_0_tag;

typedef union CSI_DPHY_TX_TERM_CAL_OVR_union_tag { /* Termination Calibration Control */
  vuint8_t R;
  struct {
    vuint8_t CB_EN_45_OHM_RW:1;        /* Selection For 45 ohm Termination Impedance */
    vuint8_t CB_CAL_REPL_UP_OVR_EN_RW:1; /* Upper Section Termination Replica Setting Override Enable */
    vuint8_t CB_CAL_REPL_UP_OVR_RW__3__0__:4; /* Upper Section Termination Replica Setting Override */
    vuint8_t CB_CAL_REPL_UP_BYPASS_RW:1; /* Upper Section Of Termination Replica Calibration Bypass */
    vuint8_t CB_CAL_REPL_OVR_EN_RW:1;  /* Calibration Word For Termination Lower Section replica Override Enable */
  } B;
} CSI_DPHY_TX_TERM_CAL_OVR_tag;

typedef union CSI_DPHY_TX_TERM_CAL_0_union_tag { /* Termination Calibration Observability */
  vuint8_t R;
  struct {
    vuint8_t _unused_0:1;              /* Reserved */
    vuint8_t CB_SEL_UP_1ST:1;          /* Boosts voltage selection for the upper section of TX replica to be probed on ATB bus (volatile) */
    vuint8_t CB_CAL_REPL__3__0__:4;    /* Termination Lower Section Replica Setting (Volatile) */
    vuint8_t CB_CAL_EN_UP:1;           /* Termination Upper Section Analog Circuitry Enable (Volatile) */
    vuint8_t CB_CAL_EN:1;              /* Termination Lower Section Analog Circuitry Enable (Volatile) */
  } B;
} CSI_DPHY_TX_TERM_CAL_0_tag;

typedef union CSI_DPHY_TX_TERM_CAL_1_union_tag { /* Termination Calibration Observability */
  vuint8_t R;
  struct {
    vuint8_t RESCAL_DONE:1;            /* Lower Section Termination Calibration Algorithm Done (Volatile) */
    vuint8_t RESCAL_UP_EN:1;           /* Upper Section Termination Calibration Algorithm Enable (Volatile) */
    vuint8_t RESCAL_EN:1;              /* Lower Section Termination Calibration Algorithm Enable (Volatile) */
    vuint8_t CB_COMP_OUT:1;            /* Analog Comparator Output (Volatile) */
    vuint8_t CB_CAL_REPL_UP__3__0__:4; /* Termination Upper Section Replica Setting (Volatile) */
  } B;
} CSI_DPHY_TX_TERM_CAL_1_tag;

typedef union CSI_DPHY_TERMCAL_STAT2_union_tag { /* Termination Calibration Observability */
  vuint8_t R;
  struct {
    vuint8_t _unused_0:5;              /* Reserved */
    vuint8_t RESCAL_UP_ERROR:1;        /* Termination Upper Section Calibration Algorithm Error (Volatile) */
    vuint8_t RESCAL_UP_DONE:1;         /* Termination Upper Section Calibration Algorithm Done (Volatile) */
    vuint8_t RESCAL_ERROR:1;           /* Termination Lower Section Calibration Algorithm Error (Volatile) */
  } B;
} CSI_DPHY_TERMCAL_STAT2_tag;

typedef union CSI_DPHY_CLKLANE_POLCFG_union_tag { /* Clock Lane Control */
  vuint8_t R;
  struct {
    vuint8_t _unused_0:7;              /* Reserved */
    vuint8_t POLARITY_CLKLANE_RW:1;    /* Clock Lane DP/DN Swap - Active High */
  } B;
} CSI_DPHY_CLKLANE_POLCFG_tag;

typedef union CSI_DPHY_ATB_DATA_LANE1_union_tag { /* Lane 1 Control */
  vuint8_t R;
  struct {
    vuint8_t HSTXBITREV_LANE1_RW:1;    /* Allows inverting serialization order in lane 1 (MSB -> LSB) */
    vuint8_t BINTPON_LANE1_RW:1;       /* Bias Block Power-On */
    vuint8_t BINTPON_BYPASS_LANE1_RW:1; /* Bias Block Power-On Bypass Override */
    vuint8_t ATB_SEL_LANE1_RW_3_0:4;   /* Analog Test Bus Signals Selection */
    vuint8_t ATB_LPTX1200_ON_LANE1_RW:1; /* Select to probe in analog test bus LP transmitter voltage reference */
  } B;
} CSI_DPHY_ATB_DATA_LANE1_tag;

typedef union CSI_DPHY_ATB_DATA_LANE2_union_tag { /* Lane 2 Control */
  vuint8_t R;
  struct {
    vuint8_t HSTXBITREV_LANE2_RW:1;    /* Allows inverting serialization order in lane 2 (MSB -> LSB) */
    vuint8_t BINTPON_LANE2_RW:1;       /* Bias Block Power-On */
    vuint8_t BINTPON_BYPASS_LANE2_RW:1; /* Bias Block Power-On Bypass Override */
    vuint8_t ATB_SEL_LANE2_RW_3_0:4;   /* Analog Test Bus Signals Selection */
    vuint8_t ATB_LPTX1200_ON_LANE2_RW:1; /* Selection to probe in analog test bus LP transmitter voltage reference */
  } B;
} CSI_DPHY_ATB_DATA_LANE2_tag;

typedef union CSI_DPHY_ATB_DATA_LANE3_union_tag { /* Lane 3 Control */
  vuint8_t R;
  struct {
    vuint8_t HSTXBITREV_LANE3_RW:1;    /* Allows inverting serialization order in lane 3 (MSB -> LSB) */
    vuint8_t BINTPON_LANE3_RW:1;       /* Bias Block Power-On */
    vuint8_t BINTPON_BYPASS_LANE3_RW:1; /* Bias Block Power-On Bypass Override */
    vuint8_t ATB_SEL_LANE3_RW_3_0:4;   /* Analog Test Bus Signals Selection */
    vuint8_t ATB_LPTX1200_ON_LANE3_RW:1; /* Selection to probe in analog test bus LP transmitter voltage reference */
  } B;
} CSI_DPHY_ATB_DATA_LANE3_tag;

struct CSI_tag {
  CSI_DPHY_RSTCFG_tag DPHY_RSTCFG;     /* DPHY Reset Configuration */
  uint8_t CSI_reserved0[4];
  CSI_DPHY_CLEAR_tag DPHY_CLEAR;       /* DPHY Clear */
  CSI_DPHY_FREQCFG_tag DPHY_FREQCFG;   /* DPHY Frequency Configuration */
  uint8_t CSI_reserved1[8];
  CSI_RX_RXNULANE_tag RX_RXNULANE;     /* Receive Number of Lanes Configuration */
  CSI_RX_RXENABLE_tag RX_RXENABLE;     /* Receive Enable Configuration */
  CSI_RX_RXLANESWAP_tag RX_RXLANESWAP; /* Receive Lane Swap Configuration */
  CSI_RX_CLKCS_tag RX_CLKCS;           /* Clock Configuration Status */
  CSI_RX_LANCS_tag RX_LANCS[4];        /* D-PHY Lane 0 Configuration Status */
  CSI_RX_SR_tag RX_SR;                 /* Soft Reset Config */
  CSI_RX_VCENABLE_tag RX_VCENABLE;     /* Receive Virtual Channel Enable Configuration */
  CSI_RX_DATAIDR_tag RX_DATAIDR;       /* Receive Data ID Report */
  uint8_t CSI_reserved2[8];
  CSI_RX_INVIDR_tag RX_INVIDR;         /* Receive Invalid Data ID Report */
  CSI_RX_GNSPR_VC_tag RX_GNSPR_VC[4];  /* Receive Generic Short Packet Report */
  CSI_RX_NUMPKTS_VC_tag RX_NUMPKTS_VC[4]; /* Receive Number of Packets for VC */
  CSI_RX_VCINTRS_tag RX_VCINTRS;       /* Receive VC Data Interrupt Status */
  CSI_RX_VCINTRE_tag RX_VCINTRE;       /* Receive Data VC Event Interrupt Enable */
  uint8_t CSI_reserved3[24];
  CSI_CONTROLLER_STATUS_REGISTER_tag CONTROLLER_STATUS_REGISTER; /* Controller Status */
  CSI_CRC_REGISTER_tag CRC_REGISTER;   /* CRC */
  CSI_CONTROLLER_ERR_STATUS_REGISTER_tag CONTROLLER_ERR_STATUS_REGISTER; /* Controller Error Status */
  CSI_CONTROLLER_ERR_IE_tag CONTROLLER_ERR_IE; /* Controller Interrupt Enable */
  CSI_RX_VC_tag RX_VC[4];
  uint8_t CSI_reserved4[4];
  CSI_RX_PHYERRIS_tag RX_PHYERRIS;     /* Receive Data PHY Level Error Interrupt Status */
  CSI_RX_PHYERRIE_tag RX_PHYERRIE;     /* Receive Data PHY Level Error Interrupt Enable */
  uint8_t CSI_reserved5[16];
  CSI_RX_STAT_CONFIG_tag RX_STAT_CONFIG; /* Receive Data Statistical Computation Configuration */
  CSI_RX_tag RX[12];
  uint8_t CSI_reserved6[192];
  CSI_CBUF_INTRS_tag CBUF_INTRS;       /* Receive Data Circular Buffer Error Interrupt Status */
  CSI_CBUF_INTRE_tag CBUF_INTRE;       /* Receive Circular Buffer Error Interrupt Enable */
  uint8_t CSI_reserved7[8];
  CSI_RX_DROPDATAR_tag RX_DROPDATAR[4]; /* Received Drop Data Type and VC Report */
  CSI_RX_CBUF_OUTCFG_tag RX_CBUF_OUTCFG[4]; /* Receive Data Channel Output Configuration */
  CSI_RX_CBUF_CHNLENBL_tag RX_CBUF_CHNLENBL[4]; /* Receive Data Channel Enable/Disable Configuration */
  CSI_RX_CBUF0_CHNLOFFSET0_0_tag RX_CBUF0_CHNLOFFSET0_0; /* Receive Data Channel Offset Compensation Configuration */
  CSI_RX_CBUF0_CHNLOFFSET1_0_tag RX_CBUF0_CHNLOFFSET1_0; /* Receive Data Channel Offset Compensation Configuration */
  CSI_RX_CBUF0_CHNLOFFSET2_0_tag RX_CBUF0_CHNLOFFSET2_0; /* Receive Data Channel Offset Compensation Configuration */
  CSI_RX_CBUF0_CHNLOFFSET3_0_tag RX_CBUF0_CHNLOFFSET3_0; /* Receive Data Channel Offset Compensation Configuration */
  CSI_RX_CBUF1_CHNLOFFSET0_1_tag RX_CBUF1_CHNLOFFSET0_1; /* Receive Data Channel Offset Compensation Configuration */
  CSI_RX_CBUF1_CHNLOFFSET1_1_tag RX_CBUF1_CHNLOFFSET1_1; /* Receive Data Channel Offset Compensation Configuration */
  CSI_RX_CBUF1_CHNLOFFSET2_1_tag RX_CBUF1_CHNLOFFSET2_1; /* Receive Data Channel Offset Compensation Configuration */
  CSI_RX_CBUF1_CHNLOFFSET3_1_tag RX_CBUF1_CHNLOFFSET3_1; /* Receive Data Channel Offset Compensation Configuration */
  CSI_RX_CBUF2_CHNLOFFSET0_2_tag RX_CBUF2_CHNLOFFSET0_2; /* Receive Data Channel Offset Compensation Configuration */
  CSI_RX_CBUF2_CHNLOFFSET1_2_tag RX_CBUF2_CHNLOFFSET1_2; /* Receive Data Channel Offset Compensation Configuration */
  CSI_RX_CBUF2_CHNLOFFSET2_2_tag RX_CBUF2_CHNLOFFSET2_2; /* Receive Data Channel Offset Compensation Configuration */
  CSI_RX_CBUF2_CHNLOFFSET3_2_tag RX_CBUF2_CHNLOFFSET3_2; /* Receive Data Channel Offset Compensation Configuration */
  CSI_RX_CBUF3_CHNLOFFSET0_3_tag RX_CBUF3_CHNLOFFSET0_3; /* Receive Data Channel Offset Compensation Configuration */
  CSI_RX_CBUF3_CHNLOFFSET1_3_tag RX_CBUF3_CHNLOFFSET1_3; /* Receive Data Channel Offset Compensation Configuration */
  CSI_RX_CBUF3_CHNLOFFSET2_3_tag RX_CBUF3_CHNLOFFSET2_3; /* Receive Data Channel Offset Compensation Configuration */
  CSI_RX_CBUF3_CHNLOFFSET3_3_tag RX_CBUF3_CHNLOFFSET3_3; /* Receive Data Channel Offset Compensation Configuration */
  uint8_t CSI_reserved8[16];
  CSI_RX_CHNL_INTRS_tag RX_CHNL_INTRS; /* Receive Data Channel Status */
  CSI_RX_CHNL_INTRE_tag RX_CHNL_INTRE; /* Receive Channel Interrupt Enable */
  CSI_WR_CHNL_INTRS_tag WR_CHNL_INTRS; /* AXI Write Channel Interrupt Status */
  CSI_WR_CHNL_INTRE_tag WR_CHNL_INTRE; /* AXI Write Channel Interrupt Enable */
  uint8_t CSI_reserved9[228];
  CSI_TURNCFG_tag TURNCFG;             /* Turnaround Request Configuration */
  uint8_t CSI_reserved10[16];
  CSI_TRIGGER_GPIO1_tag TRIGGER_GPIO1; /* GPIO1 Pad Event Trigger Control */
  uint8_t CSI_reserved11[4];
  CSI_TRIGGER_SDMA1_tag TRIGGER_SDMA1; /* SDMA1 Pad Event Trigger Control */
  uint8_t CSI_reserved12[4];
  CSI_TRIGGEREN_GPIO_tag TRIGGEREN_GPIO; /* GPIO Pad Event Trigger Enable Control */
  CSI_TRIGGEREN_SDMA_tag TRIGGEREN_SDMA; /* SDMA Pad Event Trigger Enable Control */
  uint8_t CSI_reserved13[88];
  CSI_DPHY_CALTYPE_CNTRL_tag DPHY_CALTYPE_CNTRL; /* System Configuration */
  uint8_t CSI_reserved14[3];
  CSI_DPHY_SKEWCAL_CNTRL_tag DPHY_SKEWCAL_CNTRL; /* System Configuration */
  uint8_t CSI_reserved15[215];
  CSI_DPHY_RX_STARTUP_OVERRIDE_tag DPHY_RX_STARTUP_OVERRIDE; /* System Startup Observability */
  uint8_t CSI_reserved16[1];
  CSI_DPHY_DDLOSCFREQ_CFG1_tag DPHY_DDLOSCFREQ_CFG1; /* System Startup Override */
  CSI_DPHY_DDLOSCFREQ_CFG2_tag DPHY_DDLOSCFREQ_CFG2; /* System Startup Override */
  CSI_DPHY_DDLOSCFREQ_OVREN_tag DPHY_DDLOSCFREQ_OVREN; /* System Startup Override */
  uint8_t CSI_reserved17[315];
  CSI_DPHY_RX_TERM_CAL_0_tag DPHY_RX_TERM_CAL_0; /* Termination Calibration Observability */
  CSI_DPHY_RX_TERM_CAL_1_tag DPHY_RX_TERM_CAL_1; /* Termination Calibration Observability */
  uint8_t CSI_reserved18[229];
  CSI_DPHY_CLOCK_LANE_CNTRL_tag DPHY_CLOCK_LANE_CNTRL; /* Clock Lane Control */
  uint8_t CSI_reserved19[115];
  CSI_DPHY_CLKOFFSETCAL_OVRRIDE_tag DPHY_CLKOFFSETCAL_OVRRIDE; /* Clock Lane Offset Cancellation Control */
  CSI_DPHY_CLKOFFSETCAL_OVRRIDEVAL_tag DPHY_CLKOFFSETCAL_OVRRIDEVAL; /* Clock Lane Offset Cancellation Control 2 */
  uint8_t CSI_reserved20[31];
  CSI_DPHY_CLKCALVAL_COMPS_tag DPHY_CLKCALVAL_COMPS; /* Clock Lane Offset Cancellation Observability 3 */
  CSI_DPHY_CLKOFFSETCAL_COMPS_tag DPHY_CLKOFFSETCAL_COMPS; /* Clock Lane Offset Cancellation Observability */
  uint8_t CSI_reserved21[359];
  CSI_DPHY_RX_LPRXPON_LANE0_tag DPHY_RX_LPRXPON_LANE0; /* Lane 0 Low Power Receive Control */
  uint8_t CSI_reserved22[41];
  CSI_DPHY_DATALANE_DESKEW_COMPS0_tag DPHY_DATALANE_DESKEW_COMPS0; /* Lane 0 Observability */
  uint8_t CSI_reserved23[75];
  CSI_DPHY_DATAL0OFFSETCAL_OVRCNTRL_tag DPHY_DATAL0OFFSETCAL_OVRCNTRL; /* Lane 0 Offset Compensation Control */
  CSI_DPHY_DATALOFFSETCAL_OVRVALUE0_tag DPHY_DATALOFFSETCAL_OVRVALUE0; /* Lane 0 Offset Compensation Control */
  uint8_t CSI_reserved24[34];
  CSI_DPHY_DATALANE_OFFSETCAL_COMPS0_tag DPHY_DATALANE_OFFSETCAL_COMPS0; /* Lane Offset Compensation Observability */
  uint8_t CSI_reserved25[1];
  CSI_DPHY_DATALOFFSETCAL_VALUE0_tag DPHY_DATALOFFSETCAL_VALUE0; /* Lane Offset Compensation Observability */
  uint8_t CSI_reserved26[62];
  CSI_DPHY_DATALANE_DDLTUNE_COMP0_tag DPHY_DATALANE_DDLTUNE_COMP0; /* Lane DDL Tune Observability */
  uint8_t CSI_reserved27[4];
  CSI_DPHY_DATALANE_DDLTUNE_VALUE0_tag DPHY_DATALANE_DDLTUNE_VALUE0; /* Lane 0 DDL Tune Observability */
  CSI_DPHY_DATALANE0_DESKEW_VALUE1_tag DPHY_DATALANE0_DESKEW_VALUE1; /* Lane 0 DDL Tune Observability */
  CSI_DPHY_DATALANE0_DESKEW_VALUE2_tag DPHY_DATALANE0_DESKEW_VALUE2; /* Lane 0 DDL Tune Observability */
  uint8_t CSI_reserved28[31];
  CSI_DPHY_DATALANE_DDLTUNE_OVRVALUE0_tag DPHY_DATALANE_DDLTUNE_OVRVALUE0; /* Lane 0 DDL Tune Control */
  CSI_DPHY_DATALANE0_DESKEW_OVRVALUE1_tag DPHY_DATALANE0_DESKEW_OVRVALUE1; /* Lane 0 DDL Tune Control */
  CSI_DPHY_DATALANE0_DESKEW_OVRVALUE2_tag DPHY_DATALANE0_DESKEW_OVRVALUE2; /* Lane 0 DDL Tune Control */
  uint8_t CSI_reserved29[257];
  CSI_DPHY_DATALANE_DESKEW_OVRVALUE11_tag DPHY_DATALANE_DESKEW_OVRVALUE11; /* Lane 1 Control */
  CSI_DPHY_DATALANE_DESKEW_OVRVALUE21_tag DPHY_DATALANE_DESKEW_OVRVALUE21; /* Lane 1 Control */
  uint8_t CSI_reserved30[34];
  CSI_DPHY_DATALANE_DESKEW_COMPS1_tag DPHY_DATALANE_DESKEW_COMPS1; /* Lane 0 Observability */
  uint8_t CSI_reserved31[4];
  CSI_DPHY_DATALANE_DESKEW_VALUE11_tag DPHY_DATALANE_DESKEW_VALUE11; /* Lane 1 Observability */
  CSI_DPHY_DATALANE_DESKEW_VALUE21_tag DPHY_DATALANE_DESKEW_VALUE21; /* Lane 1 Observability */
  uint8_t CSI_reserved32[69];
  CSI_DPHY_DATAL1OFFSETCAL_OVRCNTRL_tag DPHY_DATAL1OFFSETCAL_OVRCNTRL; /* Lane 1 Offset Compensation Control */
  CSI_DPHY_DATALOFFSETCAL_OVRVALUE1_tag DPHY_DATALOFFSETCAL_OVRVALUE1; /* Lane 0 Offset Compensation Control */
  uint8_t CSI_reserved33[34];
  CSI_DPHY_DATALANE_OFFSETCAL_COMPS1_tag DPHY_DATALANE_OFFSETCAL_COMPS1; /* Lane Offset Compensation Observability */
  uint8_t CSI_reserved34[1];
  CSI_DPHY_DATALOFFSETCAL_VALUE1_tag DPHY_DATALOFFSETCAL_VALUE1; /* Lane Offset Compensation Observability */
  uint8_t CSI_reserved35[62];
  CSI_DPHY_DATALANE_DDLTUNE_COMP1_tag DPHY_DATALANE_DDLTUNE_COMP1; /* Lane DDL Tune Observability */
  uint8_t CSI_reserved36[4];
  CSI_DPHY_DATALANE_DDLTUNE_VALUE1_tag DPHY_DATALANE_DDLTUNE_VALUE1; /* Lane 0 DDL Tune Observability */
  uint8_t CSI_reserved37[33];
  CSI_DPHY_DATALANE_DDLTUNE_OVRVALUE1_tag DPHY_DATALANE_DDLTUNE_OVRVALUE1; /* Lane 0 DDL Tune Control */
  uint8_t CSI_reserved38[259];
  CSI_DPHY_DATALANE_DESKEW_OVRVALUE12_tag DPHY_DATALANE_DESKEW_OVRVALUE12; /* Lane 1 Control */
  CSI_DPHY_DATALANE_DESKEW_OVRVALUE22_tag DPHY_DATALANE_DESKEW_OVRVALUE22; /* Lane 1 Control */
  uint8_t CSI_reserved39[34];
  CSI_DPHY_DATALANE_DESKEW_COMPS2_tag DPHY_DATALANE_DESKEW_COMPS2; /* Lane 0 Observability */
  uint8_t CSI_reserved40[4];
  CSI_DPHY_DATALANE_DESKEW_VALUE12_tag DPHY_DATALANE_DESKEW_VALUE12; /* Lane 1 Observability */
  CSI_DPHY_DATALANE_DESKEW_VALUE22_tag DPHY_DATALANE_DESKEW_VALUE22; /* Lane 1 Observability */
  uint8_t CSI_reserved41[69];
  CSI_DPHY_DATAL2OFFSETCAL_OVRCNTRL_tag DPHY_DATAL2OFFSETCAL_OVRCNTRL; /* Lane 1 Offset Compensation Control */
  CSI_DPHY_DATALOFFSETCAL_OVRVALUE2_tag DPHY_DATALOFFSETCAL_OVRVALUE2; /* Lane 0 Offset Compensation Control */
  uint8_t CSI_reserved42[34];
  CSI_DPHY_DATALANE_OFFSETCAL_COMPS2_tag DPHY_DATALANE_OFFSETCAL_COMPS2; /* Lane Offset Compensation Observability */
  uint8_t CSI_reserved43[1];
  CSI_DPHY_DATALOFFSETCAL_VALUE2_tag DPHY_DATALOFFSETCAL_VALUE2; /* Lane Offset Compensation Observability */
  uint8_t CSI_reserved44[62];
  CSI_DPHY_DATALANE_DDLTUNE_COMP2_tag DPHY_DATALANE_DDLTUNE_COMP2; /* Lane DDL Tune Observability */
  uint8_t CSI_reserved45[4];
  CSI_DPHY_DATALANE_DDLTUNE_VALUE2_tag DPHY_DATALANE_DDLTUNE_VALUE2; /* Lane 0 DDL Tune Observability */
  uint8_t CSI_reserved46[33];
  CSI_DPHY_DATALANE_DDLTUNE_OVRVALUE2_tag DPHY_DATALANE_DDLTUNE_OVRVALUE2; /* Lane 0 DDL Tune Control */
  uint8_t CSI_reserved47[255];
  CSI_DPHY_DATALANE_DDLTUNE_OVRVALUE3_tag DPHY_DATALANE_DDLTUNE_OVRVALUE3; /* Lane 0 DDL Tune Control */
  uint8_t CSI_reserved48[3];
  CSI_DPHY_DATALANE_DESKEW_OVRVALUE13_tag DPHY_DATALANE_DESKEW_OVRVALUE13; /* Lane 1 Control */
  CSI_DPHY_DATALANE_DESKEW_OVRVALUE23_tag DPHY_DATALANE_DESKEW_OVRVALUE23; /* Lane 1 Control */
  uint8_t CSI_reserved49[34];
  CSI_DPHY_DATALANE_DESKEW_COMPS3_tag DPHY_DATALANE_DESKEW_COMPS3; /* Lane 0 Observability */
  uint8_t CSI_reserved50[4];
  CSI_DPHY_DATALANE_DESKEW_VALUE13_tag DPHY_DATALANE_DESKEW_VALUE13; /* Lane 1 Observability */
  CSI_DPHY_DATALANE_DESKEW_VALUE23_tag DPHY_DATALANE_DESKEW_VALUE23; /* Lane 1 Observability */
  uint8_t CSI_reserved51[69];
  CSI_DPHY_DATAL3OFFSETCAL_OVRCNTRL_tag DPHY_DATAL3OFFSETCAL_OVRCNTRL; /* Lane 1 Offset Compensation Control */
  CSI_DPHY_DATALOFFSETCAL_OVRVALUE3_tag DPHY_DATALOFFSETCAL_OVRVALUE3; /* Lane 0 Offset Compensation Control */
  uint8_t CSI_reserved52[34];
  CSI_DPHY_DATALANE_OFFSETCAL_COMPS3_tag DPHY_DATALANE_OFFSETCAL_COMPS3; /* Lane Offset Compensation Observability */
  uint8_t CSI_reserved53[1];
  CSI_DPHY_DATALOFFSETCAL_VALUE3_tag DPHY_DATALOFFSETCAL_VALUE3; /* Lane Offset Compensation Observability */
  uint8_t CSI_reserved54[62];
  CSI_DPHY_DATALANE_DDLTUNE_COMP3_tag DPHY_DATALANE_DDLTUNE_COMP3; /* Lane DDL Tune Observability */
  uint8_t CSI_reserved55[4];
  CSI_DPHY_DATALANE_DDLTUNE_VALUE3_tag DPHY_DATALANE_DDLTUNE_VALUE3; /* Lane 0 DDL Tune Observability */
  uint8_t CSI_reserved56[640];
  CSI_DPHY_PLL_VREF_CONFIG_tag DPHY_PLL_VREF_CONFIG; /* PLL control */
  uint8_t CSI_reserved57[63];
  CSI_DPHY_CB_VBE_SEL_tag DPHY_CB_VBE_SEL; /* Common Block Control */
  CSI_DPHY_ATB_CB_ATB_VBE_SEL_tag DPHY_ATB_CB_ATB_VBE_SEL; /* Common Block Control */
  uint8_t CSI_reserved58[93];
  CSI_DPHY_TX_RDWR_TERM_CAL_0_tag DPHY_TX_RDWR_TERM_CAL_0; /* Termination Calibration Control */
  CSI_DPHY_TX_TERM_CAL_OVR_tag DPHY_TX_TERM_CAL_OVR; /* Termination Calibration Control */
  uint8_t CSI_reserved59[21];
  CSI_DPHY_TX_TERM_CAL_0_tag DPHY_TX_TERM_CAL_0; /* Termination Calibration Observability */
  CSI_DPHY_TX_TERM_CAL_1_tag DPHY_TX_TERM_CAL_1; /* Termination Calibration Observability */
  CSI_DPHY_TERMCAL_STAT2_tag DPHY_TERMCAL_STAT2; /* Termination Calibration Observability */
  uint8_t CSI_reserved60[228];
  CSI_DPHY_CLKLANE_POLCFG_tag DPHY_CLKLANE_POLCFG; /* Clock Lane Control */
  uint8_t CSI_reserved61[1017];
  CSI_DPHY_ATB_DATA_LANE1_tag DPHY_ATB_DATA_LANE1; /* Lane 1 Control */
  uint8_t CSI_reserved62[511];
  CSI_DPHY_ATB_DATA_LANE2_tag DPHY_ATB_DATA_LANE2; /* Lane 2 Control */
  uint8_t CSI_reserved63[511];
  CSI_DPHY_ATB_DATA_LANE3_tag DPHY_ATB_DATA_LANE3; /* Lane 3 Control */
};


/* ============================================================================
   =============================== Module: CTE ================================
   ============================================================================ */

typedef union CTE_CNTRL_union_tag {    /* Control 0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;
    vuint32_t RFS_PGEN:1;              /* Internal SW RFS Pulse Trigger */
    vuint32_t CTE_RST:1;               /* CTE Synchronous Reset */
    vuint32_t MA_SL_ST:1;              /* Master/Slave Select */
    vuint32_t EDMA_CTL:2;              /* eDMA Trigger Control */
    vuint32_t OPMOD_SL:2;              /* CTE FSM Operation Mode Select */
    vuint32_t RCS_DLY:4;               /* Radar Chirp Synchronization Delay Control */
    vuint32_t RFS_DLY:4;               /* Radar Frame Synchronization Delay Control */
    vuint32_t REP_CNT:16;              /* TT Repetition Counter */
  } B;
} CTE_CNTRL_tag;

typedef union CTE_CNTRL1_union_tag {   /* Control 1 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t CKSM_RST:1;              /* Checksum Reset */
    vuint32_t CHKSM_MD:1;              /* Checksum Mode */
    vuint32_t CTE_EN:1;                /* CTE Enable */
    vuint32_t TIMEMODE:1;              /* Time Mode Type */
    vuint32_t _unused_8:2;             /* Reserved */
    vuint32_t CLKDIV_4:3;              /* Fourth Clock Divider */
    vuint32_t CLKDIV_3:3;              /* Third Clock Divider */
    vuint32_t _unused_16:2;            /* Reserved */
    vuint32_t CLKDIV_2:3;              /* Second Clock Divider */
    vuint32_t CLKDIV_1:3;              /* First Clock Divider */
    vuint32_t _unused_24:2;            /* Reserved */
    vuint32_t CTECK_DV:6;              /* CTE Clock Divider */
  } B;
} CTE_CNTRL1_tag;

typedef union CTE_LUT_LSB_union_tag {  /* TT 0 (LSB) */
  vuint32_t R;
  struct {
    vuint32_t SPT_EVT:4;               /* SPT Event */
    vuint32_t _unused_4:6;             /* Reserved */
    vuint32_t _unused_10:4;
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t TIME_0:16;               /* Time Instance */
  } B;
} CTE_LUT_LSB_tag;

typedef union CTE_LUT_MSB_union_tag {  /* TT 0 (MSB) */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:7;
    vuint32_t _unused_7:1;
    vuint32_t _unused_8:1;
    vuint32_t ETIME_AUX_1:1;           /* Timer Auxiliary Clock 1 */
    vuint32_t ETIME_AUX_0:1;           /* Timer Auxiliary Clock 0 */
    vuint32_t ACQ_WIN:1;               /* CTE Acquisition Window */
    vuint32_t RFS_DEF:2;               /* RFS Definition */
    vuint32_t RCS_DEF:2;               /* RCS Definition */
    vuint32_t CTE_TYP7:2;              /* CTE Pulse 7 */
    vuint32_t CTE_TYP6:2;              /* CTE Pulse 6 */
    vuint32_t CTE_TYP5:2;              /* CTE Pulse 5 */
    vuint32_t CTE_TYP4:2;              /* CTE Pulse 4 */
    vuint32_t CTE_TYP3:2;              /* CTE Pulse 3 */
    vuint32_t CTE_TYP2:2;              /* CTE Pulse 2 */
    vuint32_t CTE_TYP1:2;              /* CTE Pulse 1 */
    vuint32_t CTE_TYP0:2;              /* CTE Pulse 0 */
  } B;
} CTE_LUT_MSB_tag;

typedef struct CTE_LUT_struct_tag {
  CTE_LUT_LSB_tag LSB[32];             /* TT 0 (LSB) */
  CTE_LUT_MSB_tag MSB[32];             /* TT 0 (MSB) */
} CTE_LUT_tag;

typedef union CTE_SIGTYPE0_union_tag { /* Signal Type Register 0 */
  vuint32_t R;
  struct {
    vuint32_t CTE_TYP7:2;              /* CTE pulse type */
    vuint32_t CTE_TYP6:2;              /* CTE pulse type */
    vuint32_t CTE_TYP5:2;              /* CTE pulse type */
    vuint32_t CTE_TYP4:2;              /* CTE pulse type */
    vuint32_t CTE_TYP3:2;              /* CTE pulse type */
    vuint32_t CTE_TYP2:2;              /* CTE pulse type */
    vuint32_t CTE_TYP1:2;              /* CTE pulse type */
    vuint32_t CTE_TYP0:2;              /* CTE pulse type */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t SPT_EVT:4;               /* SPT event type */
    vuint32_t PH_INVT:1;               /* Phase invert type */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t _unused_23:1;            /* This field is reserved. */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t _unused_26:1;            /* Reserved */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t _unused_30:2;            /* Reserved */
  } B;
} CTE_SIGTYPE0_tag;

typedef union CTE_SIGTYPE1_union_tag { /* Signal Type 1 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:23;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:1;
    vuint32_t _unused_25:2;
    vuint32_t ACQ_WIN:1;               /* Acquisition Window Type */
    vuint32_t RFS:2;                   /* Radar Frame Synchronization */
    vuint32_t RCS:2;                   /* Radar Chirp Synchronization */
  } B;
} CTE_SIGTYPE1_tag;

typedef union CTE_INTEN_union_tag {    /* Interrupt Enable */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:22;
    vuint32_t LST_EXEN:1;              /* Last Table Execution Enable */
    vuint32_t EDMA_TEN:1;              /* eDMA Trigger Interrupt Enable */
    vuint32_t RFS_EN:1;                /* RFS Interrupt Enable (Rising Edge) */
    vuint32_t RCS_EN:1;                /* RCS Interrupt Enable (Rising Edge) */
    vuint32_t _unused_26:1;
    vuint32_t AC_WD_EN:1;              /* Acquisition Window (rising) */
    vuint32_t TT1_EDEN:1;              /* TT 1 End (Rising) */
    vuint32_t TT0_EDEN:1;              /* TT 0 End (Rising) */
    vuint32_t TT1_STEN:1;              /* TT 1 Start (Rising) */
    vuint32_t TT0_STEN:1;              /* TT 0 Start (Rising) */
  } B;
} CTE_INTEN_tag;

typedef union CTE_INTSTAT_union_tag {  /* Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:22;
    vuint32_t LAST_EXC:1;              /* Last Execution */
    vuint32_t EDMA_TRG:1;              /* eDMA Trigger */
    vuint32_t RFS:1;                   /* Radar Frame Synchronization */
    vuint32_t RCS:1;                   /* Radar Chirp Synchronization */
    vuint32_t _unused_26:1;
    vuint32_t ACQ_WIN:1;               /* Acquisition Window (Rising) */
    vuint32_t TT1_END:1;               /* TT1 End */
    vuint32_t TT0_END:1;               /* TT0 End */
    vuint32_t TT1_STRT:1;              /* TT1 Start */
    vuint32_t TT0_STRT:1;              /* TT0 Start */
  } B;
} CTE_INTSTAT_tag;

typedef union CTE_CKSM_LSB_union_tag { /* LUT Checksum LSB */
  vuint32_t R;
  struct {
    vuint32_t CHKS_LSB:32;             /* Checksum Result LSB */
  } B;
} CTE_CKSM_LSB_tag;

typedef union CTE_CKSM_MSB_union_tag { /* LUT Checksum LSB */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:23;
    vuint32_t _unused_23:1;
    vuint32_t CHKS_MSB:8;              /* Checksum Result LSB */
  } B;
} CTE_CKSM_MSB_tag;

typedef union CTE_DBG_REG_union_tag {  /* Debug */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:27;
    vuint32_t FSM_ST:2;                /* OPMOD FSM State */
    vuint32_t SLV_ALGN:1;              /* RFS/RCS Align Status */
    vuint32_t CONT_ERR:1;              /* TT Contention Error */
    vuint32_t LUT_SEL:1;               /* TT Select */
  } B;
} CTE_DBG_REG_tag;

typedef union CTE_LUT_DUR_union_tag {  /* TT0 Execution Duration */
  vuint32_t R;
  struct {
    vuint32_t TT0_DUR:32;              /* TT0 Duration */
  } B;
} CTE_LUT_DUR_tag;

typedef union CTE_LUT_DUR1_union_tag { /* TT1 Execution Duration */
  vuint32_t R;
  struct {
    vuint32_t TT1_DUR:32;              /* TT1 Duration */
  } B;
} CTE_LUT_DUR1_tag;

typedef union CTE_CLKSEL_union_tag {   /* Clock Select */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;
    vuint32_t CLK_SEL9:2;              /* Clock Select for RFS */
    vuint32_t CLK_SEL8:2;              /* Clock Select for RCS */
    vuint32_t CLK_SEL7:2;              /* Clock Select for CTEP7 */
    vuint32_t CLK_SEL6:2;              /* Clock Select for CTEP6 */
    vuint32_t CLK_SEL5:2;              /* Clock Select for CTEP5 */
    vuint32_t CLK_SEL4:2;              /* Clock Select for CTEP4 */
    vuint32_t CLK_SEL3:2;              /* Clock Select for CTEP3 */
    vuint32_t CLK_SEL2:2;              /* Clock Select for CTEP2 */
    vuint32_t CLK_SEL1:2;              /* Clock Select for CTEP1 */
    vuint32_t CLK_SEL0:2;              /* Clock Select for CTEP0 */
  } B;
} CTE_CLKSEL_tag;

struct CTE_tag {
  CTE_CNTRL_tag CNTRL;                 /* Control 0 */
  CTE_CNTRL1_tag CNTRL1;               /* Control 1 */
  CTE_LUT_tag LUT[2];
  CTE_SIGTYPE0_tag SIGTYPE0[2];        /* Signal Type Register 0 */
  CTE_SIGTYPE1_tag SIGTYPE1[2];        /* Signal Type 1 */
  uint8_t CTE_reserved0[8];
  CTE_INTEN_tag INTEN;                 /* Interrupt Enable */
  CTE_INTSTAT_tag INTSTAT;             /* Interrupt Status */
  uint8_t CTE_reserved1[72];
  CTE_CKSM_LSB_tag CKSM_LSB;           /* LUT Checksum LSB */
  CTE_CKSM_MSB_tag CKSM_MSB;           /* LUT Checksum LSB */
  CTE_DBG_REG_tag DBG_REG;             /* Debug */
  CTE_LUT_DUR_tag LUT_DUR;             /* TT0 Execution Duration */
  CTE_LUT_DUR1_tag LUT_DUR1;           /* TT1 Execution Duration */
  CTE_CLKSEL_tag CLKSEL;               /* Clock Select */
};


/* ============================================================================
   =============================== Module: CTU ================================
   ============================================================================ */

typedef union CTU_TGSISR_union_tag {   /* Trigger Generator Subunit Input Selection Register */
  vuint32_t R;
  struct {
    vuint32_t I15_FE:1;                /* Input 15 Falling Edge Enable. */
    vuint32_t I15_RE:1;                /* Input 15 Rising Edge Enable. */
    vuint32_t I14_FE:1;                /* Input 14 Falling Edge Enable. */
    vuint32_t I14_RE:1;                /* Input 14 Rising Edge Enable. */
    vuint32_t I13_FE:1;                /* Input 13 Falling Edge Enable. */
    vuint32_t I13_RE:1;                /* Input 13 Rising Edge Enable. */
    vuint32_t I12_FE:1;                /* Input 12 Falling Edge Enable. */
    vuint32_t I12_RE:1;                /* Input 12 Rising Edge Enable. */
    vuint32_t I11_FE:1;                /* Input 11 Falling Edge Enable. */
    vuint32_t I11_RE:1;                /* Input 11 Rising Edge Enable. */
    vuint32_t I10_FE:1;                /* Input 10 Falling Edge Enable. */
    vuint32_t I10_RE:1;                /* Input 10 Rising Edge Enable. */
    vuint32_t I9_FE:1;                 /* Input 9 Falling Edge Enable. */
    vuint32_t I9_RE:1;                 /* Input 9 Rising Edge Enable. */
    vuint32_t I8_FE:1;                 /* Input 8 Falling Edge Enable. */
    vuint32_t I8_RE:1;                 /* Input 8 Rising Edge Enable. */
    vuint32_t I7_FE:1;                 /* Input 7 Falling Edge Enable. */
    vuint32_t I7_RE:1;                 /* Input 7 Rising Edge Enable. */
    vuint32_t I6_FE:1;                 /* Input 6 Falling Edge Enable. */
    vuint32_t I6_RE:1;                 /* Input 6 Rising Edge Enable. */
    vuint32_t I5_FE:1;                 /* Input 5 Falling Edge Enable. */
    vuint32_t I5_RE:1;                 /* Input 5 Rising Edge Enable. */
    vuint32_t I4_FE:1;                 /* Input 4 Falling Edge Enable. */
    vuint32_t I4_RE:1;                 /* Input 4 Rising Edge Enable. */
    vuint32_t I3_FE:1;                 /* Input 3 Falling Edge Enable. */
    vuint32_t I3_RE:1;                 /* Input 3 Rising edge Enable */
    vuint32_t I2_FE:1;                 /* Input 2 Falling Edge Enable. */
    vuint32_t I2_RE:1;                 /* Input 2 Rising Edge Enable. */
    vuint32_t I1_FE:1;                 /* Input 1 Falling Edge Enable. */
    vuint32_t I1_RE:1;                 /* Input 1 Rising edge Enable */
    vuint32_t I0_FE:1;                 /* Input 0 Falling Edge Enable. */
    vuint32_t I0_RE:1;                 /* Input 0 Rising Edge Enable. */
  } B;
} CTU_TGSISR_tag;

typedef union CTU_TGSCR_union_tag {    /* Trigger Generator Subunit Control Register */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:7;             /* Reserved */
    vuint16_t ET_TM:1;
    vuint16_t PRES:2;
    vuint16_t MRS_SM:5;
    vuint16_t TGS_M:1;                 /* Trigger Generator Subunit Mode */
  } B;
} CTU_TGSCR_tag;

typedef union CTU_TCR_union_tag {      /* Trigger Compare Register */
  vuint16_t R;
  struct {
    vuint16_t TCRV:16;                 /* Trigger Compare Register Value */
  } B;
} CTU_TCR_tag;

typedef union CTU_TGSCCR_union_tag {   /* TGS Counter Compare Register */
  vuint16_t R;
  struct {
    vuint16_t TGSCCV:16;
  } B;
} CTU_TGSCCR_tag;

typedef union CTU_TGSCRR_union_tag {   /* TGS Counter Reload Register */
  vuint16_t R;
  struct {
    vuint16_t TGSCRV:16;               /* TGSCRV */
  } B;
} CTU_TGSCRR_tag;

typedef union CTU_CLCR1_union_tag {    /* Commands List Control Register 1 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;             /* Reserved */
    vuint32_t T3_INDEX:5;
    vuint32_t _unused_8:3;             /* Reserved */
    vuint32_t T2_INDEX:5;
    vuint32_t _unused_16:3;            /* Reserved */
    vuint32_t T1_INDEX:5;
    vuint32_t _unused_24:3;            /* Reserved */
    vuint32_t T0_INDEX:5;
  } B;
} CTU_CLCR1_tag;

typedef union CTU_CLCR2_union_tag {    /* Commands List Control Register 2 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;             /* Reserved */
    vuint32_t T7_INDEX:5;              /* T7_INDEX */
    vuint32_t _unused_8:3;             /* Reserved */
    vuint32_t T6_INDEX:5;
    vuint32_t _unused_16:3;            /* Reserved */
    vuint32_t T5_INDEX:5;
    vuint32_t _unused_24:3;            /* Reserved */
    vuint32_t T4_INDEX:5;
  } B;
} CTU_CLCR2_tag;

typedef union CTU_THCR1_union_tag {    /* Trigger Handler Control Register 1 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t T3_E:1;
    vuint32_t T3_ETE:1;
    vuint32_t _unused_3:1;             /* Reserved. */
    vuint32_t T3_T3E:1;
    vuint32_t T3_T2E:1;
    vuint32_t _unused_6:1;             /* Reserved. */
    vuint32_t T3_ADCE:1;
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t T2_E:1;
    vuint32_t T2_ETE:1;
    vuint32_t _unused_11:1;            /* Reserved. */
    vuint32_t T2_T3E:1;
    vuint32_t T2_T2E:1;
    vuint32_t _unused_14:1;            /* Reserved. */
    vuint32_t T2_ADCE:1;
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t T1_E:1;
    vuint32_t T1_ETE:1;
    vuint32_t _unused_19:1;            /* Reserved. */
    vuint32_t T1_T3E:1;
    vuint32_t T1_T2E:1;
    vuint32_t _unused_22:1;            /* Reserved. */
    vuint32_t T1_ADCE:1;
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t T0_E:1;
    vuint32_t T0_ETE:1;
    vuint32_t _unused_27:1;            /* Reserved. */
    vuint32_t T0_T3E:1;
    vuint32_t T0_T2E:1;
    vuint32_t _unused_30:1;            /* Reserved. */
    vuint32_t T0_ADCE:1;
  } B;
} CTU_THCR1_tag;

typedef union CTU_THCR2_union_tag {    /* Trigger Handler Control Register 2 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t T7_E:1;
    vuint32_t T7_ETE:1;
    vuint32_t T7_T4E:1;
    vuint32_t T7_T3E:1;
    vuint32_t T7_T2E:1;
    vuint32_t _unused_6:1;             /* Reserved. */
    vuint32_t T7_ADCE:1;
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t T6_E:1;
    vuint32_t T6_ETE:1;
    vuint32_t _unused_11:1;            /* Reserved. */
    vuint32_t T6_T3E:1;
    vuint32_t T6_T2E:1;
    vuint32_t _unused_14:1;            /* Reserved. */
    vuint32_t T6_ADCE:1;
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t T5_E:1;
    vuint32_t T5_ETE:1;
    vuint32_t _unused_19:1;            /* Reserved. */
    vuint32_t T5_T3E:1;
    vuint32_t T5_T2E:1;
    vuint32_t _unused_22:1;            /* Reserved. */
    vuint32_t T5_ADCE:1;
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t T4_E:1;
    vuint32_t T4_ETE:1;
    vuint32_t _unused_27:1;            /* Reserved. */
    vuint32_t T4_T3E:1;
    vuint32_t T4_T2E:1;
    vuint32_t _unused_30:1;            /* Reserved. */
    vuint32_t T4_ADCE:1;
  } B;
} CTU_THCR2_tag;

typedef union CTU_CLR_A_union_tag {    /* Commands List Register A for ADC single-conversion mode commands */
  vuint16_t R;
  struct {
    vuint16_t CIR:1;
    vuint16_t LC:1;                    /* Last Command bit */
    vuint16_t CMS:1;
    vuint16_t FIFO:3;                  /* FIFO used for ADC Port A / Port B. */
    vuint16_t ST0:1;                   /* ST0 */
    vuint16_t _unused_7:3;             /* Reserved */
    vuint16_t SU:1;                    /* ADC Port A / Port B selection. */
    vuint16_t _unused_11:1;            /* Reserved */
    vuint16_t CH:4;                    /* ADC Port channel number. */
  } B;
} CTU_CLR_A_tag;

typedef union CTU_CLR_B_union_tag {    /* Command List Register B for ADC dual-conversion mode commands */
  vuint16_t R;
  struct {
    vuint16_t CIR:1;
    vuint16_t LC:1;                    /* Last Command Bit */
    vuint16_t CMS:1;                   /* Conversion Mode Selection */
    vuint16_t FIFO:3;                  /* FIFO used for ADC Port A / Port B. */
    vuint16_t ST0:1;                   /* Sel-Test Mode Control 0 */
    vuint16_t CH_B:4;                  /* ADC Port B Channel Number */
    vuint16_t _unused_11:1;            /* Reserved */
    vuint16_t CH_A:4;                  /* ADC Port A Channel Number */
  } B;
} CTU_CLR_B_tag;

typedef union CTU_CLR_C_union_tag {    /* Command List Register C for self-test commands */
  vuint16_t R;
  struct {
    vuint16_t CIR:1;
    vuint16_t LC:1;
    vuint16_t ST1:1;
    vuint16_t ST_CMS:1;
    vuint16_t ST_SU:1;
    vuint16_t _unused_5:1;             /* Reserved */
    vuint16_t ST0:1;
    vuint16_t ALG:2;                   /* Algorithm scheduled */
    vuint16_t BSIZE:7;                 /* Burst size of the algorithm iteration */
  } B;
} CTU_CLR_C_tag;

typedef union CTU_CLR_union_tag {
  CTU_CLR_A_tag A;                     /* Commands List Register A for ADC single-conversion mode commands */
  CTU_CLR_B_tag B;                     /* Command List Register B for ADC dual-conversion mode commands */
  CTU_CLR_C_tag C;                     /* Command List Register C for self-test commands */
} CTU_CLR_tag;

typedef union CTU_FDCR_union_tag {     /* FIFO DMA Control Register */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:4;             /* Reserved */
    vuint16_t _unused_4:1;             /* Reserved */
    vuint16_t _unused_5:1;             /* Reserved */
    vuint16_t _unused_6:1;             /* Reserved */
    vuint16_t _unused_7:1;             /* Reserved */
    vuint16_t _unused_8:4;             /* Reserved */
    vuint16_t DE3:1;
    vuint16_t DE2:1;
    vuint16_t DE1:1;
    vuint16_t DE0:1;
  } B;
} CTU_FDCR_tag;

typedef union CTU_FCR_union_tag {      /* FIFO Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t OR_EN3:1;
    vuint32_t OF_EN3:1;
    vuint32_t EMPTY_EN3:1;
    vuint32_t FULL_EN3:1;
    vuint32_t OR_EN2:1;
    vuint32_t OF_EN2:1;
    vuint32_t EMPTY_EN2:1;
    vuint32_t FULL_EN2:1;
    vuint32_t OR_EN1:1;
    vuint32_t OF_EN1:1;
    vuint32_t EMPTY_EN1:1;
    vuint32_t FULL_EN1:1;
    vuint32_t OR_EN0:1;
    vuint32_t OF_EN0:1;
    vuint32_t EMPTY_EN0:1;
    vuint32_t FULL_EN0:1;
  } B;
} CTU_FCR_tag;

typedef union CTU_FTH_union_tag {      /* FIFO Threshold Register */
  vuint32_t R;
  struct {
    vuint32_t TH3:8;
    vuint32_t TH2:8;
    vuint32_t TH1:8;
    vuint32_t TH0:8;
  } B;
} CTU_FTH_tag;

typedef union CTU_FST_union_tag {      /* FIFO Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t OR3:1;
    vuint32_t OF3:1;
    vuint32_t EMP3:1;
    vuint32_t FULL3:1;
    vuint32_t OR2:1;
    vuint32_t OF2:1;
    vuint32_t EMP2:1;
    vuint32_t FULL2:1;
    vuint32_t OR1:1;
    vuint32_t OF1:1;
    vuint32_t EMP1:1;
    vuint32_t FULL1:1;                 /* FULL1 */
    vuint32_t OR0:1;
    vuint32_t OF0:1;
    vuint32_t EMP0:1;
    vuint32_t FULL0:1;
  } B;
} CTU_FST_tag;

typedef union CTU_FR_union_tag {       /* FIFO Right Aligned Data Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:11;            /* Reserved */
    vuint32_t ADC:1;                   /* This bit indicates from which ADC Port the value in the DATA field corresponds to. */
    vuint32_t N_CH:4;
    vuint32_t _unused_16:4;            /* Reserved */
    vuint32_t DATA:12;
  } B;
} CTU_FR_tag;

typedef union CTU_FL_union_tag {       /* FIFO Signed Left Aligned Data Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:11;            /* Reserved */
    vuint32_t ADC:1;                   /* This bit indicates from which ADC Port the value in the DATA field corresponds to. */
    vuint32_t N_CH:4;
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t LA_DATA:12;              /* LA_DATA */
    vuint32_t _unused_29:3;            /* Reserved */
  } B;
} CTU_FL_tag;

typedef union CTU_EFR_union_tag {      /* Error Flag Register */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:2;             /* Reserved */
    vuint16_t LIST_BE:1;
    vuint16_t CS:1;
    vuint16_t ET_OE:1;
    vuint16_t ERRCMP:1;
    vuint16_t _unused_6:1;             /* Reserved */
    vuint16_t T3_OE:1;
    vuint16_t T2_OE:1;
    vuint16_t _unused_9:1;             /* Reserved */
    vuint16_t ADC_OE:1;
    vuint16_t TGS_OSM:1;
    vuint16_t MRS_O:1;
    vuint16_t ICE:1;
    vuint16_t SM_TO:1;
    vuint16_t MRS_RE:1;
  } B;
} CTU_EFR_tag;

typedef union CTU_IFR_union_tag {      /* Interrupt Flag Register */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:4;             /* Reserved */
    vuint16_t SERR_B:1;
    vuint16_t SERR_A:1;
    vuint16_t ADC_I:1;
    vuint16_t T7_I:1;
    vuint16_t T6_I:1;
    vuint16_t T5_I:1;
    vuint16_t T4_I:1;
    vuint16_t T3_I:1;
    vuint16_t T2_I:1;
    vuint16_t T1_I:1;
    vuint16_t T0_I:1;
    vuint16_t MRS_I:1;
  } B;
} CTU_IFR_tag;

typedef union CTU_IR_union_tag {       /* Interrupt/DMA Register */
  vuint16_t R;
  struct {
    vuint16_t T7_IE:1;                 /* Trigger 7 Interrupt Enable */
    vuint16_t T6_IE:1;                 /* Trigger 6 Interrupt Enable */
    vuint16_t T5_IE:1;                 /* Trigger 5 Interrupt Enable */
    vuint16_t T4_IE:1;                 /* Trigger 4 Interrupt Enable */
    vuint16_t T3_IE:1;                 /* Trigger 3 Interrupt Enable */
    vuint16_t T2_IE:1;                 /* Trigger 2 Interrupt Enable */
    vuint16_t T1_IE:1;                 /* Trigger 1 Interrupt Enable */
    vuint16_t T0_IE:1;                 /* Trigger 0 Interrupt Enable */
    vuint16_t _unused_8:2;             /* Reserved */
    vuint16_t SAF_CNT_B_EN:1;          /* Enable the ADC Port B counter to check the conversion time. */
    vuint16_t SAF_CNT_A_EN:1;          /* Enable the ADC Port A counter to check the conversion time. */
    vuint16_t DMA_DE:1;
    vuint16_t MRS_DMAE:1;
    vuint16_t MRS_IE:1;
    vuint16_t IEE:1;
  } B;
} CTU_IR_tag;

typedef union CTU_COTR_union_tag {     /* Control ON Time Register */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:8;             /* Reserved */
    vuint16_t COTGT:8;                 /* COTGT */
  } B;
} CTU_COTR_tag;

typedef union CTU_CR_union_tag {       /* Control Register */
  vuint16_t R;
  struct {
    vuint16_t T7_SG:1;
    vuint16_t T6_SG:1;
    vuint16_t T5_SG:1;
    vuint16_t T4_SG:1;
    vuint16_t T3_SG:1;
    vuint16_t T2_SG:1;
    vuint16_t T1_SG:1;
    vuint16_t T0_SG:1;
    vuint16_t CTU_ADC_R:1;
    vuint16_t CTU_ODIS:1;
    vuint16_t DFE:1;
    vuint16_t CGRE:1;
    vuint16_t FGRE:1;
    vuint16_t MRS_SG:1;
    vuint16_t GRE:1;
    vuint16_t TGSISR_RE:1;
  } B;
} CTU_CR_tag;

typedef union CTU_DFR_union_tag {      /* Digital Filter Register */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:8;             /* Reserved */
    vuint16_t FILTER_N:8;
  } B;
} CTU_DFR_tag;

typedef union CTU_EXPAR_union_tag {    /* Expected Value A Register */
  vuint16_t R;
  struct {
    vuint16_t EXPA:16;                 /* This value is the expected number of system clock cycles needed by ADC Port A to complete a conversion. */
  } B;
} CTU_EXPAR_tag;

typedef union CTU_EXPBR_union_tag {    /* Expected Value B Register */
  vuint16_t R;
  struct {
    vuint16_t EXPB:16;                 /* This value is the expected number of system clock cycles needed by ADC Port B to complete a conversion. */
  } B;
} CTU_EXPBR_tag;

typedef union CTU_CNTRNGR_union_tag {  /* Counter Range Register */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:8;             /* Reserved */
    vuint16_t CNTRNG:8;                /* CNTRNG */
  } B;
} CTU_CNTRNGR_tag;

typedef union CTU_LISTCSR_union_tag {  /* List Control/Status Register */
  vuint32_t R;
  struct {
    vuint32_t LIST1_BLK:1;
    vuint32_t _unused_1:2;             /* Reserved */
    vuint32_t LIST1_ADDR:5;
    vuint32_t LIST0_BLK:1;
    vuint32_t _unused_9:2;             /* Reserved */
    vuint32_t LIST0_ADDR:5;            /* List Address 0. Indicates the command address being executed when LIST_BE flag in EFR register was set. */
    vuint32_t _unused_16:15;           /* Reserved */
    vuint32_t PAR_LIST:1;
  } B;
} CTU_LISTCSR_tag;

struct CTU_tag {
  CTU_TGSISR_tag TGSISR;               /* Trigger Generator Subunit Input Selection Register */
  CTU_TGSCR_tag TGSCR;                 /* Trigger Generator Subunit Control Register */
  CTU_TCR_tag TCR[8];                  /* Trigger Compare Register */
  CTU_TGSCCR_tag TGSCCR;               /* TGS Counter Compare Register */
  CTU_TGSCRR_tag TGSCRR;               /* TGS Counter Reload Register */
  uint8_t CTU_reserved0[2];
  CTU_CLCR1_tag CLCR1;                 /* Commands List Control Register 1 */
  CTU_CLCR2_tag CLCR2;                 /* Commands List Control Register 2 */
  CTU_THCR1_tag THCR1;                 /* Trigger Handler Control Register 1 */
  CTU_THCR2_tag THCR2;                 /* Trigger Handler Control Register 2 */
  CTU_CLR_tag CLR[24];
  uint8_t CTU_reserved1[16];
  CTU_FDCR_tag FDCR;                   /* FIFO DMA Control Register */
  uint8_t CTU_reserved2[2];
  CTU_FCR_tag FCR;                     /* FIFO Control Register */
  CTU_FTH_tag FTH;                     /* FIFO Threshold Register */
  uint8_t CTU_reserved3[4];
  CTU_FST_tag FST;                     /* FIFO Status Register */
  CTU_FR_tag FRr[4];                   /* FIFO Right Aligned Data Register */
  uint8_t CTU_reserved4[16];
  CTU_FL_tag FL[4];                    /* FIFO Signed Left Aligned Data Register */
  uint8_t CTU_reserved5[16];
  CTU_EFR_tag EFR;                     /* Error Flag Register */
  CTU_IFR_tag IFR;                     /* Interrupt Flag Register */
  CTU_IR_tag IR;                       /* Interrupt/DMA Register */
  CTU_COTR_tag COTR;                   /* Control ON Time Register */
  CTU_CR_tag CR;                       /* Control Register */
  CTU_DFR_tag DFR;                     /* Digital Filter Register */
  CTU_EXPAR_tag EXPAR;                 /* Expected Value A Register */
  CTU_EXPBR_tag EXPBR;                 /* Expected Value B Register */
  CTU_CNTRNGR_tag CNTRNGR;             /* Counter Range Register */
  uint8_t CTU_reserved6[2];
  CTU_LISTCSR_tag LISTCSR;             /* List Control/Status Register */
};


/* ============================================================================
   =============================== Module: DFS ================================
   ============================================================================ */

typedef union DFS_PORTSR_union_tag {   /* Port Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:26;
    vuint32_t PORTSTAT:6;              /* Port status */
  } B;
} DFS_PORTSR_tag;

typedef union DFS_PORTLOLSR_union_tag { /* Port Loss of Lock Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:26;
    vuint32_t LOLF5:1;                 /* Loss of lock flag */
    vuint32_t LOLF4:1;                 /* Loss of lock flag */
    vuint32_t LOLF3:1;                 /* Loss of lock flag */
    vuint32_t LOLF2:1;                 /* Loss of lock flag */
    vuint32_t LOLF1:1;                 /* Loss of lock flag */
    vuint32_t LOLF0:1;                 /* Loss of lock flag */
  } B;
} DFS_PORTLOLSR_tag;

typedef union DFS_PORTRESET_union_tag { /* Port Reset */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:26;
    vuint32_t RESET5:1;
    vuint32_t RESET4:1;
    vuint32_t RESET3:1;
    vuint32_t RESET2:1;
    vuint32_t RESET1:1;
    vuint32_t RESET0:1;
  } B;
} DFS_PORTRESET_tag;

typedef union DFS_CTL_union_tag {      /* Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:30;
    vuint32_t DFS_RESET:1;
    vuint32_t _unused_31:1;
  } B;
} DFS_CTL_tag;

typedef union DFS_DVPORT_union_tag {   /* Divider for Port 0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t MFI:8;
    vuint32_t _unused_24:2;            /* Reserved */
    vuint32_t MFN:6;
  } B;
} DFS_DVPORT_tag;

struct DFS_tag {
  uint8_t DFS_reserved0[12];
  DFS_PORTSR_tag PORTSR;               /* Port Status Register */
  DFS_PORTLOLSR_tag PORTLOLSR;         /* Port Loss of Lock Status */
  DFS_PORTRESET_tag PORTRESET;         /* Port Reset */
  DFS_CTL_tag CTL;                     /* Control */
  DFS_DVPORT_tag DVPORT[6];            /* Divider for Port 0 */
};


/* ============================================================================
   =============================== Module: DMAMUX =============================
   ============================================================================ */

typedef union DMAMUX_CHCFG_union_tag { /* Channel Configuration register */
  vuint8_t R;
  struct {
    vuint8_t ENBL:1;                   /* DMA Channel Enable */
    vuint8_t TRIG:1;                   /* DMA Channel Trigger Enable */
    vuint8_t SOURCE:6;                 /* DMA Channel Source (Slot) */
  } B;
} DMAMUX_CHCFG_tag;

struct DMAMUX_tag {
  DMAMUX_CHCFG_tag CHCFG[16];          /* Channel Configuration register */
};


/* ============================================================================
   =============================== Module: DMA_CRC ============================
   ============================================================================ */

typedef union DMA_CRC_GEC_union_tag {  /* Global Enable CRC Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t SWAP_BYTE:1;             /* Swap Byte */
    vuint32_t _unused_25:5;            /* Reserved */
    vuint32_t SWAP_BIT:1;              /* Swap Bit */
    vuint32_t GBL_EN:1;                /* Global Enable bit */
  } B;
} DMA_CRC_GEC_tag;

typedef union DMA_CRC_CONTROL_REGISTER_CTL_union_tag { /* CRC Control Register */
  vuint32_t R;
  struct {
    vuint32_t EN:1;                    /* CRC Logic */
    vuint32_t _unused_1:12;            /* Reserved */
    vuint32_t MODE:3;                  /* CRC Mode */
    vuint32_t INIT_SEL:1;              /* Initial values of the CRC */
    vuint32_t _unused_17:3;            /* Reserved */
    vuint32_t POLY_SEL:4;              /* Polynomial Select */
    vuint32_t _unused_24:2;            /* Reserved */
    vuint32_t CH_SEL:6;                /* Channel Select */
  } B;
} DMA_CRC_CONTROL_REGISTER_CTL_tag;

typedef union DMA_CRC_CONTROL_REGISTER_ICRC_union_tag { /* Initial CRC Value Register */
  vuint32_t R;
  struct {
    vuint32_t INI_CRC_VAL:32;          /* Initial CRC Value */
  } B;
} DMA_CRC_CONTROL_REGISTER_ICRC_tag;

typedef union DMA_CRC_CONTROL_REGISTER_FCRC_union_tag { /* Final CRC Value Register */
  vuint32_t R;
  struct {
    vuint32_t CHKSUM_VAL:32;           /* Final CRC Value */
  } B;
} DMA_CRC_CONTROL_REGISTER_FCRC_tag;

typedef struct DMA_CRC_CONTROL_REGISTER_struct_tag {
  DMA_CRC_CONTROL_REGISTER_CTL_tag CTL; /* CRC Control Register */
  DMA_CRC_CONTROL_REGISTER_ICRC_tag ICRC; /* Initial CRC Value Register */
  DMA_CRC_CONTROL_REGISTER_FCRC_tag FCRC; /* Final CRC Value Register */
  uint8_t CONTROL_REGISTER_reserved0[4];
} DMA_CRC_CONTROL_REGISTER_tag;

struct DMA_CRC_tag {
  DMA_CRC_GEC_tag GEC;                 /* Global Enable CRC Register */
  uint8_t DMA_CRC_reserved0[12];
  DMA_CRC_CONTROL_REGISTER_tag CONTROL_REGISTER[8];
};


/* ============================================================================
   =============================== Module: DTS ================================
   ============================================================================ */

typedef union DTS_ENABLE_union_tag {   /* Output Enable Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:30;            /* Reserved */
    vuint32_t EN_B:1;                  /* Enable B */
    vuint32_t EN:1;                    /* Enable */
  } B;
} DTS_ENABLE_tag;

typedef union DTS_STARTUP_union_tag {  /* Startup Register */
  vuint32_t R;
  struct {
    vuint32_t AD:32;                   /* Application Dependent */
  } B;
} DTS_STARTUP_tag;

typedef union DTS_SEMAPHORE_union_tag { /* Semaphore Register */
  vuint32_t R;
  struct {
    vuint32_t ST:32;                   /* Semaphore Trigger */
  } B;
} DTS_SEMAPHORE_tag;

typedef union DTS_SEMAPHORE_B_union_tag { /* Semaphore Extension */
  vuint32_t R;
  struct {
    vuint32_t ST_B:32;                 /* Semaphore Trigger Extension */
  } B;
} DTS_SEMAPHORE_B_tag;

struct DTS_tag {
  DTS_ENABLE_tag ENABLE;               /* Output Enable Register */
  DTS_STARTUP_tag STARTUP;             /* Startup Register */
  DTS_SEMAPHORE_tag SEMAPHORE;         /* Semaphore Register */
  DTS_SEMAPHORE_B_tag SEMAPHORE_B;     /* Semaphore Extension */
};


/* ============================================================================
   =============================== Module: EIM ================================
   ============================================================================ */

typedef union EIM_EIMCR_union_tag {    /* Error Injection Module Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t GEIEN:1;                 /* Global Error Injection Enable */
  } B;
} EIM_EIMCR_tag;

typedef union EIM_EICHEN_union_tag {   /* Error Injection Channel Enable register */
  vuint32_t R;
  struct {
    vuint32_t EICH0EN:1;               /* Error Injection Channel 0 Enable */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t _unused_9:1;             /* Reserved */
    vuint32_t _unused_10:1;            /* Reserved */
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t _unused_26:1;            /* Reserved */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t _unused_30:1;            /* Reserved */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} EIM_EICHEN_tag;

typedef union EIM_EICHD_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t CHKBIT_MASK:8;           /* Checkbit Mask */
    vuint32_t _unused_8:24;
  } B;
} EIM_EICHD_WORD0_tag;

typedef union EIM_EICHD_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3 */
  } B;
} EIM_EICHD_WORD1_tag;

typedef union EIM_EICHD_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD_WORD2_tag;

struct EIM_tag {
  EIM_EIMCR_tag EIMCR;                 /* Error Injection Module Configuration Register */
  EIM_EICHEN_tag EICHEN;               /* Error Injection Channel Enable register */
  uint8_t EIM_reserved0[248];
  EIM_EICHD_WORD0_tag EICHD_WORD0[1];  /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD_WORD1_tag EICHD_WORD1[1];  /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD_WORD2_tag EICHD_WORD2[1];  /* Error Injection Channel Descriptor n, Word2 */
};


/* ============================================================================
   =============================== Module: ENET ===============================
   ============================================================================ */

typedef union ENET_EIR_union_tag {     /* Interrupt Event Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t BABR:1;                  /* Babbling Receive Error */
    vuint32_t BABT:1;                  /* Babbling Transmit Error */
    vuint32_t GRA:1;                   /* Graceful Stop Complete */
    vuint32_t TXF:1;                   /* Transmit Frame Interrupt */
    vuint32_t TXB:1;                   /* Transmit Buffer Interrupt */
    vuint32_t RXF:1;                   /* Receive Frame Interrupt */
    vuint32_t RXB:1;                   /* Receive Buffer Interrupt */
    vuint32_t MII:1;                   /* MII Interrupt. */
    vuint32_t EBERR:1;                 /* Ethernet Bus Error */
    vuint32_t LC:1;                    /* Late Collision */
    vuint32_t RL:1;                    /* Collision Retry Limit */
    vuint32_t UN:1;                    /* Transmit FIFO Underrun */
    vuint32_t PLR:1;                   /* Payload Receive Error */
    vuint32_t WAKEUP:1;                /* Node Wakeup Request Indication */
    vuint32_t TS_AVAIL:1;              /* Transmit Timestamp Available */
    vuint32_t TS_TIMER:1;              /* Timestamp Timer */
    vuint32_t _unused_17:2;            /* Reserved */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t _unused_20:3;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} ENET_EIR_tag;

typedef union ENET_EIMR_union_tag {    /* Interrupt Mask Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t BABR:1;                  /* BABR Interrupt Mask */
    vuint32_t BABT:1;                  /* BABT Interrupt Mask */
    vuint32_t GRA:1;                   /* GRA Interrupt Mask */
    vuint32_t TXF:1;                   /* TXF Interrupt Mask */
    vuint32_t TXB:1;                   /* TXB Interrupt Mask */
    vuint32_t RXF:1;                   /* RXF Interrupt Mask */
    vuint32_t RXB:1;                   /* RXB Interrupt Mask */
    vuint32_t MII:1;                   /* MII Interrupt Mask */
    vuint32_t EBERR:1;                 /* EBERR Interrupt Mask */
    vuint32_t LC:1;                    /* LC Interrupt Mask */
    vuint32_t RL:1;                    /* RL Interrupt Mask */
    vuint32_t UN:1;                    /* UN Interrupt Mask */
    vuint32_t PLR:1;                   /* PLR Interrupt Mask */
    vuint32_t WAKEUP:1;                /* WAKEUP Interrupt Mask */
    vuint32_t TS_AVAIL:1;              /* TS_AVAIL Interrupt Mask */
    vuint32_t TS_TIMER:1;              /* TS_TIMER Interrupt Mask */
    vuint32_t _unused_17:2;            /* Reserved */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t _unused_20:3;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} ENET_EIMR_tag;

typedef union ENET_RDAR_union_tag {    /* Receive Descriptor Active Register - Ring 0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:7;             /* Reserved */
    vuint32_t RDAR:1;                  /* Receive Descriptor Active */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ENET_RDAR_tag;

typedef union ENET_TDAR_union_tag {    /* Transmit Descriptor Active Register - Ring 0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:7;             /* Reserved */
    vuint32_t TDAR:1;                  /* Transmit Descriptor Active */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ENET_TDAR_tag;

typedef union ENET_ECR_union_tag {     /* Ethernet Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:14;            /* Reserved */
    vuint32_t _unused_14:6;            /* Reserved */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t DBSWP:1;                 /* Descriptor Byte Swapping Enable */
    vuint32_t STOPEN:1;                /* STOPEN Signal Control */
    vuint32_t DBGEN:1;                 /* Debug Enable */
    vuint32_t SPEED:1;                 /* SPEED */
    vuint32_t EN1588:1;                /* EN1588 Enable */
    vuint32_t SLEEP:1;                 /* Sleep Mode Enable */
    vuint32_t MAGICEN:1;               /* Magic Packet Detection Enable */
    vuint32_t ETHEREN:1;               /* Ethernet Enable */
    vuint32_t RESET:1;                 /* Ethernet MAC Reset */
  } B;
} ENET_ECR_tag;

typedef union ENET_MMFR_union_tag {    /* MII Management Frame Register */
  vuint32_t R;
  struct {
    vuint32_t ST:2;                    /* Start Of Frame Delimiter */
    vuint32_t OP:2;                    /* Operation Code */
    vuint32_t PA:5;                    /* PHY Address */
    vuint32_t RA:5;                    /* Register Address */
    vuint32_t TA:2;                    /* Turn Around */
    vuint32_t DATA:16;                 /* Management Frame Data */
  } B;
} ENET_MMFR_tag;

typedef union ENET_MSCR_union_tag {    /* MII Speed Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:21;            /* Reserved */
    vuint32_t HOLDTIME:3;              /* Hold time On MDIO Output */
    vuint32_t DIS_PRE:1;               /* Disable Preamble */
    vuint32_t MII_SPEED:6;             /* MII Speed */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} ENET_MSCR_tag;

typedef union ENET_MIBC_union_tag {    /* MIB Control Register */
  vuint32_t R;
  struct {
    vuint32_t MIB_DIS:1;               /* Disable MIB Logic */
    vuint32_t MIB_IDLE:1;              /* MIB Idle */
    vuint32_t MIB_CLEAR:1;             /* MIB Clear */
    vuint32_t _unused_3:29;            /* Reserved */
  } B;
} ENET_MIBC_tag;

typedef union ENET_RCR_union_tag {     /* Receive Control Register */
  vuint32_t R;
  struct {
    vuint32_t GRS:1;                   /* Graceful Receive Stopped */
    vuint32_t NLC:1;                   /* Payload Length Check Disable */
    vuint32_t MAX_FL:14;               /* Maximum Frame Length */
    vuint32_t CFEN:1;                  /* MAC Control Frame Enable */
    vuint32_t CRCFWD:1;                /* Terminate/Forward Received CRC */
    vuint32_t PAUFWD:1;                /* Terminate/Forward Pause Frames */
    vuint32_t PADEN:1;                 /* Enable Frame Padding Remove On Receive */
    vuint32_t _unused_20:2;            /* Reserved */
    vuint32_t RMII_10T:1;              /* RMII_10T */
    vuint32_t RMII_MODE:1;             /* RMII Mode Enable */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t RGMII_EN:1;              /* RGMII Mode Enable */
    vuint32_t FCE:1;                   /* Flow Control Enable */
    vuint32_t BC_REJ:1;                /* Broadcast Frame Reject */
    vuint32_t PROM:1;                  /* Promiscuous Mode */
    vuint32_t MII_MODE:1;              /* Media Independent Interface Mode */
    vuint32_t DRT:1;                   /* Disable Receive On Transmit */
    vuint32_t LOOP:1;                  /* Internal Loopback */
  } B;
} ENET_RCR_tag;

typedef union ENET_TCR_union_tag {     /* Transmit Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:21;            /* Reserved */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t CRCFWD:1;                /* Forward Frame From Application With CRC */
    vuint32_t ADDINS:1;                /* Set MAC Address On Transmit */
    vuint32_t ADDSEL:3;                /* Source MAC Address Select On Transmit */
    vuint32_t RFC_PAUSE:1;             /* Receive Frame Control Pause */
    vuint32_t TFC_PAUSE:1;             /* Transmit Frame Control Pause */
    vuint32_t FDEN:1;                  /* Full-Duplex Enable */
    vuint32_t _unused_30:1;            /* Reserved */
    vuint32_t GTS:1;                   /* Graceful Transmit Stop */
  } B;
} ENET_TCR_tag;

typedef union ENET_PALR_union_tag {    /* Physical Address Lower Register */
  vuint32_t R;
  struct {
    vuint32_t PADDR1:32;               /* Pause Address */
  } B;
} ENET_PALR_tag;

typedef union ENET_PAUR_union_tag {    /* Physical Address Upper Register */
  vuint32_t R;
  struct {
    vuint32_t PADDR2:16;               /* PADDR2 */
    vuint32_t TYPE:16;                 /* Type Field In PAUSE Frames */
  } B;
} ENET_PAUR_tag;

typedef union ENET_OPD_union_tag {     /* Opcode/Pause Duration Register */
  vuint32_t R;
  struct {
    vuint32_t OPCODE:16;               /* Opcode Field In PAUSE Frames */
    vuint32_t PAUSE_DUR:16;            /* Pause Duration */
  } B;
} ENET_OPD_tag;

typedef union ENET_TXIC_union_tag {    /* Transmit Interrupt Coalescing Register */
  vuint32_t R;
  struct {
    vuint32_t ICEN:1;                  /* Interrupt Coalescing Enable */
    vuint32_t ICCS:1;                  /* Interrupt Coalescing Timer Clock Source Select */
    vuint32_t _unused_2:2;             /* This field must be set to 0. */
    vuint32_t ICFT:8;                  /* Interrupt coalescing frame count threshold */
    vuint32_t _unused_12:4;            /* This field must be set to 0. */
    vuint32_t ICTT:16;                 /* Interrupt coalescing timer threshold */
  } B;
} ENET_TXIC_tag;

typedef union ENET_RXIC_union_tag {    /* Receive Interrupt Coalescing Register */
  vuint32_t R;
  struct {
    vuint32_t ICEN:1;                  /* Interrupt Coalescing Enable */
    vuint32_t ICCS:1;                  /* Interrupt Coalescing Timer Clock Source Select */
    vuint32_t _unused_2:2;             /* This field must be set to 0. */
    vuint32_t ICFT:8;                  /* Interrupt coalescing frame count threshold */
    vuint32_t _unused_12:4;            /* This field must be set to 0. */
    vuint32_t ICTT:16;                 /* Interrupt coalescing timer threshold */
  } B;
} ENET_RXIC_tag;

typedef union ENET_IAUR_union_tag {    /* Descriptor Individual Upper Address Register */
  vuint32_t R;
  struct {
    vuint32_t IADDR1:32;               /* IADDR1 */
  } B;
} ENET_IAUR_tag;

typedef union ENET_IALR_union_tag {    /* Descriptor Individual Lower Address Register */
  vuint32_t R;
  struct {
    vuint32_t IADDR2:32;               /* IADDR2 */
  } B;
} ENET_IALR_tag;

typedef union ENET_GAUR_union_tag {    /* Descriptor Group Upper Address Register */
  vuint32_t R;
  struct {
    vuint32_t GADDR1:32;               /* GADDR1 */
  } B;
} ENET_GAUR_tag;

typedef union ENET_GALR_union_tag {    /* Descriptor Group Lower Address Register */
  vuint32_t R;
  struct {
    vuint32_t GADDR2:32;               /* GADDR2 */
  } B;
} ENET_GALR_tag;

typedef union ENET_TFWR_union_tag {    /* Transmit FIFO Watermark Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:23;            /* Reserved */
    vuint32_t STRFWD:1;                /* Store And Forward Enable */
    vuint32_t _unused_24:2;            /* Reserved */
    vuint32_t TFWR:6;                  /* Transmit FIFO Write */
  } B;
} ENET_TFWR_tag;

typedef union ENET_RDSR_union_tag {    /* Receive Descriptor Ring 0 Start Register */
  vuint32_t R;
  struct {
    vuint32_t R_DES_START:29;          /* R_DES_START */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t _unused_30:2;            /* Reserved */
  } B;
} ENET_RDSR_tag;

typedef union ENET_TDSR_union_tag {    /* Transmit Buffer Descriptor Ring 0 Start Register */
  vuint32_t R;
  struct {
    vuint32_t X_DES_START:29;          /* X_DES_START */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t _unused_30:2;            /* Reserved */
  } B;
} ENET_TDSR_tag;

typedef union ENET_MRBR_union_tag {    /* Maximum Receive Buffer Size Register - Ring 0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:18;            /* Reserved */
    vuint32_t R_BUF_SIZE:10;           /* R_BUF_SIZE */
    vuint32_t _unused_28:4;            /* This field, which is always zero, is the four least-significant bits of the maximum receive buffer size. */
  } B;
} ENET_MRBR_tag;

typedef union ENET_RSFL_union_tag {    /* Receive FIFO Section Full Threshold */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:23;            /* Reserved */
    vuint32_t RX_SECTION_FULL:9;       /* Value Of Receive FIFO Section Full Threshold */
  } B;
} ENET_RSFL_tag;

typedef union ENET_RSEM_union_tag {    /* Receive FIFO Section Empty Threshold */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:11;            /* Reserved */
    vuint32_t STAT_SECTION_EMPTY:5;    /* RX Status FIFO Section Empty Threshold */
    vuint32_t _unused_16:7;            /* Reserved */
    vuint32_t RX_SECTION_EMPTY:9;      /* Value Of The Receive FIFO Section Empty Threshold */
  } B;
} ENET_RSEM_tag;

typedef union ENET_RAEM_union_tag {    /* Receive FIFO Almost Empty Threshold */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:23;            /* Reserved */
    vuint32_t RX_ALMOST_EMPTY:9;       /* Value Of The Receive FIFO Almost Empty Threshold */
  } B;
} ENET_RAEM_tag;

typedef union ENET_RAFL_union_tag {    /* Receive FIFO Almost Full Threshold */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:23;            /* Reserved */
    vuint32_t RX_ALMOST_FULL:9;        /* Value Of The Receive FIFO Almost Full Threshold */
  } B;
} ENET_RAFL_tag;

typedef union ENET_TSEM_union_tag {    /* Transmit FIFO Section Empty Threshold */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:23;            /* Reserved */
    vuint32_t TX_SECTION_EMPTY:9;      /* Value Of The Transmit FIFO Section Empty Threshold */
  } B;
} ENET_TSEM_tag;

typedef union ENET_TAEM_union_tag {    /* Transmit FIFO Almost Empty Threshold */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:23;            /* Reserved */
    vuint32_t TX_ALMOST_EMPTY:9;       /* Value of Transmit FIFO Almost Empty Threshold */
  } B;
} ENET_TAEM_tag;

typedef union ENET_TAFL_union_tag {    /* Transmit FIFO Almost Full Threshold */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:23;            /* Reserved */
    vuint32_t TX_ALMOST_FULL:9;        /* Value Of The Transmit FIFO Almost Full Threshold */
  } B;
} ENET_TAFL_tag;

typedef union ENET_TIPG_union_tag {    /* Transmit Inter-Packet Gap */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:27;            /* Reserved */
    vuint32_t IPG:5;                   /* Transmit Inter-Packet Gap */
  } B;
} ENET_TIPG_tag;

typedef union ENET_FTRL_union_tag {    /* Frame Truncation Length */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:18;            /* Reserved */
    vuint32_t TRUNC_FL:14;             /* Frame Truncation Length */
  } B;
} ENET_FTRL_tag;

typedef union ENET_TACC_union_tag {    /* Transmit Accelerator Function Configuration */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:27;            /* Reserved */
    vuint32_t PROCHK:1;                /* PROCHK */
    vuint32_t IPCHK:1;                 /* IPCHK */
    vuint32_t _unused_29:2;            /* Reserved */
    vuint32_t SHIFT16:1;               /* TX FIFO Shift-16 */
  } B;
} ENET_TACC_tag;

typedef union ENET_RACC_union_tag {    /* Receive Accelerator Function Configuration */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t SHIFT16:1;               /* RX FIFO Shift-16 */
    vuint32_t LINEDIS:1;               /* Enable Discard Of Frames With MAC Layer Errors */
    vuint32_t _unused_26:3;            /* Reserved */
    vuint32_t PRODIS:1;                /* Enable Discard Of Frames With Wrong Protocol Checksum */
    vuint32_t IPDIS:1;                 /* Enable Discard Of Frames With Wrong IPv4 Header Checksum */
    vuint32_t PADREM:1;                /* Enable Padding Removal For Short IP Frames */
  } B;
} ENET_RACC_tag;

typedef union ENET_RMON_T_DROP_union_tag { /* Reserved Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:32;            /* This read-only field always has the value 0. */
  } B;
} ENET_RMON_T_DROP_tag;

typedef union ENET_RMON_T_PACKETS_union_tag { /* Tx Packet Count Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t TXPKTS:16;               /* Packet count */
  } B;
} ENET_RMON_T_PACKETS_tag;

typedef union ENET_RMON_T_BC_PKT_union_tag { /* Tx Broadcast Packets Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t TXPKTS:16;               /* Broadcast packets */
  } B;
} ENET_RMON_T_BC_PKT_tag;

typedef union ENET_RMON_T_MC_PKT_union_tag { /* Tx Multicast Packets Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t TXPKTS:16;               /* Multicast packets */
  } B;
} ENET_RMON_T_MC_PKT_tag;

typedef union ENET_RMON_T_CRC_ALIGN_union_tag { /* Tx Packets with CRC/Align Error Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t TXPKTS:16;               /* Packets with CRC/align error */
  } B;
} ENET_RMON_T_CRC_ALIGN_tag;

typedef union ENET_RMON_T_UNDERSIZE_union_tag { /* Tx Packets Less Than Bytes and Good CRC Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t TXPKTS:16;               /* Number of transmit packets less than 64 bytes with good CRC */
  } B;
} ENET_RMON_T_UNDERSIZE_tag;

typedef union ENET_RMON_T_OVERSIZE_union_tag { /* Tx Packets GT MAX_FL bytes and Good CRC Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t TXPKTS:16;               /* Number of transmit packets greater than MAX_FL bytes with good CRC */
  } B;
} ENET_RMON_T_OVERSIZE_tag;

typedef union ENET_RMON_T_FRAG_union_tag { /* Tx Packets Less Than 64 Bytes and Bad CRC Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t TXPKTS:16;               /* Number of packets less than 64 bytes with bad CRC */
  } B;
} ENET_RMON_T_FRAG_tag;

typedef union ENET_RMON_T_JAB_union_tag { /* Tx Packets Greater Than MAX_FL bytes and Bad CRC Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t TXPKTS:16;               /* Number of transmit packets greater than MAX_FL bytes and bad CRC */
  } B;
} ENET_RMON_T_JAB_tag;

typedef union ENET_RMON_T_COL_union_tag { /* Tx Collision Count Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t TXPKTS:16;               /* Number of transmit collisions */
  } B;
} ENET_RMON_T_COL_tag;

typedef union ENET_RMON_T_P64_union_tag { /* Tx 64-Byte Packets Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t TXPKTS:16;               /* Number of 64-byte transmit packets */
  } B;
} ENET_RMON_T_P64_tag;

typedef union ENET_RMON_T_P65TO127_union_tag { /* Tx 65- to 127-byte Packets Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t TXPKTS:16;               /* Number of 65- to 127-byte transmit packets */
  } B;
} ENET_RMON_T_P65TO127_tag;

typedef union ENET_RMON_T_P128TO255_union_tag { /* Tx 128- to 255-byte Packets Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t TXPKTS:16;               /* Number of 128- to 255-byte transmit packets */
  } B;
} ENET_RMON_T_P128TO255_tag;

typedef union ENET_RMON_T_P256TO511_union_tag { /* Tx 256- to 511-byte Packets Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t TXPKTS:16;               /* Number of 256- to 511-byte transmit packets */
  } B;
} ENET_RMON_T_P256TO511_tag;

typedef union ENET_RMON_T_P512TO1023_union_tag { /* Tx 512- to 1023-byte Packets Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t TXPKTS:16;               /* Number of 512- to 1023-byte transmit packets */
  } B;
} ENET_RMON_T_P512TO1023_tag;

typedef union ENET_RMON_T_P1024TO2047_union_tag { /* Tx 1024- to 2047-byte Packets Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t TXPKTS:16;               /* Number of 1024- to 2047-byte transmit packets */
  } B;
} ENET_RMON_T_P1024TO2047_tag;

typedef union ENET_RMON_T_P_GTE2048_union_tag { /* Tx Packets Greater Than 2048 Bytes Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t TXPKTS:16;               /* Number of transmit packets greater than 2048 bytes */
  } B;
} ENET_RMON_T_P_GTE2048_tag;

typedef union ENET_RMON_T_OCTETS_union_tag { /* Tx Octets Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t TXOCTS:32;               /* Number of transmit octets */
  } B;
} ENET_RMON_T_OCTETS_tag;

typedef union ENET_IEEE_T_DROP_union_tag { /* Reserved Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:32;            /* This read-only field always has the value 0. */
  } B;
} ENET_IEEE_T_DROP_tag;

typedef union ENET_IEEE_T_FRAME_OK_union_tag { /* Frames Transmitted OK Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t COUNT:16;                /* Number of frames transmitted OK */
  } B;
} ENET_IEEE_T_FRAME_OK_tag;

typedef union ENET_IEEE_T_1COL_union_tag { /* Frames Transmitted with Single Collision Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t COUNT:16;                /* Number of frames transmitted with one collision */
  } B;
} ENET_IEEE_T_1COL_tag;

typedef union ENET_IEEE_T_MCOL_union_tag { /* Frames Transmitted with Multiple Collisions Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t COUNT:16;                /* Number of frames transmitted with multiple collisions */
  } B;
} ENET_IEEE_T_MCOL_tag;

typedef union ENET_IEEE_T_DEF_union_tag { /* Frames Transmitted after Deferral Delay Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t COUNT:16;                /* Number of frames transmitted with deferral delay */
  } B;
} ENET_IEEE_T_DEF_tag;

typedef union ENET_IEEE_T_LCOL_union_tag { /* Frames Transmitted with Late Collision Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t COUNT:16;                /* Number of frames transmitted with late collision */
  } B;
} ENET_IEEE_T_LCOL_tag;

typedef union ENET_IEEE_T_EXCOL_union_tag { /* Frames Transmitted with Excessive Collisions Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t COUNT:16;                /* Number of frames transmitted with excessive collisions */
  } B;
} ENET_IEEE_T_EXCOL_tag;

typedef union ENET_IEEE_T_MACERR_union_tag { /* Frames Transmitted with Tx FIFO Underrun Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t COUNT:16;                /* Number of frames transmitted with transmit FIFO underrun */
  } B;
} ENET_IEEE_T_MACERR_tag;

typedef union ENET_IEEE_T_CSERR_union_tag { /* Frames Transmitted with Carrier Sense Error Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t COUNT:16;                /* Number of frames transmitted with carrier sense error */
  } B;
} ENET_IEEE_T_CSERR_tag;

typedef union ENET_IEEE_T_SQE_union_tag { /* Reserved Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t COUNT:16;                /* COUNT */
  } B;
} ENET_IEEE_T_SQE_tag;

typedef union ENET_IEEE_T_FDXFC_union_tag { /* Flow Control Pause Frames Transmitted Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t COUNT:16;                /* Number of flow-control pause frames transmitted */
  } B;
} ENET_IEEE_T_FDXFC_tag;

typedef union ENET_IEEE_T_OCTETS_OK_union_tag { /* Octet Count for Frames Transmitted w/o Error Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:32;                /* Octet count for frames transmitted without error Counts total octets (includes header and FCS fields). */
  } B;
} ENET_IEEE_T_OCTETS_OK_tag;

typedef union ENET_RMON_R_PACKETS_union_tag { /* Rx Packet Count Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t COUNT:16;                /* Number of packets received */
  } B;
} ENET_RMON_R_PACKETS_tag;

typedef union ENET_RMON_R_BC_PKT_union_tag { /* Rx Broadcast Packets Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t COUNT:16;                /* Number of receive broadcast packets */
  } B;
} ENET_RMON_R_BC_PKT_tag;

typedef union ENET_RMON_R_MC_PKT_union_tag { /* Rx Multicast Packets Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t COUNT:16;                /* Number of receive multicast packets */
  } B;
} ENET_RMON_R_MC_PKT_tag;

typedef union ENET_RMON_R_CRC_ALIGN_union_tag { /* Rx Packets with CRC/Align Error Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t COUNT:16;                /* Number of receive packets with CRC or align error */
  } B;
} ENET_RMON_R_CRC_ALIGN_tag;

typedef union ENET_RMON_R_UNDERSIZE_union_tag { /* Rx Packets with Less Than 64 Bytes and Good CRC Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t COUNT:16;                /* Number of receive packets with less than 64 bytes and good CRC */
  } B;
} ENET_RMON_R_UNDERSIZE_tag;

typedef union ENET_RMON_R_OVERSIZE_union_tag { /* Rx Packets Greater Than MAX_FL and Good CRC Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t COUNT:16;                /* Number of receive packets greater than MAX_FL and good CRC */
  } B;
} ENET_RMON_R_OVERSIZE_tag;

typedef union ENET_RMON_R_FRAG_union_tag { /* Rx Packets Less Than 64 Bytes and Bad CRC Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t COUNT:16;                /* Number of receive packets with less than 64 bytes and bad CRC */
  } B;
} ENET_RMON_R_FRAG_tag;

typedef union ENET_RMON_R_JAB_union_tag { /* Rx Packets Greater Than MAX_FL Bytes and Bad CRC Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t COUNT:16;                /* Number of receive packets greater than MAX_FL and bad CRC */
  } B;
} ENET_RMON_R_JAB_tag;

typedef union ENET_RMON_R_RESVD_0_union_tag { /* Reserved Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} ENET_RMON_R_RESVD_0_tag;

typedef union ENET_RMON_R_P64_union_tag { /* Rx 64-Byte Packets Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t COUNT:16;                /* Number of 64-byte receive packets */
  } B;
} ENET_RMON_R_P64_tag;

typedef union ENET_RMON_R_P65TO127_union_tag { /* Rx 65- to 127-Byte Packets Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t COUNT:16;                /* Number of 65- to 127-byte recieve packets */
  } B;
} ENET_RMON_R_P65TO127_tag;

typedef union ENET_RMON_R_P128TO255_union_tag { /* Rx 128- to 255-Byte Packets Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t COUNT:16;                /* Number of 128- to 255-byte recieve packets */
  } B;
} ENET_RMON_R_P128TO255_tag;

typedef union ENET_RMON_R_P256TO511_union_tag { /* Rx 256- to 511-Byte Packets Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t COUNT:16;                /* Number of 256- to 511-byte recieve packets */
  } B;
} ENET_RMON_R_P256TO511_tag;

typedef union ENET_RMON_R_P512TO1023_union_tag { /* Rx 512- to 1023-Byte Packets Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t COUNT:16;                /* Number of 512- to 1023-byte recieve packets */
  } B;
} ENET_RMON_R_P512TO1023_tag;

typedef union ENET_RMON_R_P1024TO2047_union_tag { /* Rx 1024- to 2047-Byte Packets Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t COUNT:16;                /* Number of 1024- to 2047-byte recieve packets */
  } B;
} ENET_RMON_R_P1024TO2047_tag;

typedef union ENET_RMON_R_P_GTE2048_union_tag { /* Rx Packets Greater than 2048 Bytes Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t COUNT:16;                /* Number of greater-than-2048-byte recieve packets */
  } B;
} ENET_RMON_R_P_GTE2048_tag;

typedef union ENET_RMON_R_OCTETS_union_tag { /* Rx Octets Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:32;                /* Number of receive octets */
  } B;
} ENET_RMON_R_OCTETS_tag;

typedef union ENET_IEEE_R_DROP_union_tag { /* Frames not Counted Correctly Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t COUNT:16;                /* Frame count */
  } B;
} ENET_IEEE_R_DROP_tag;

typedef union ENET_IEEE_R_FRAME_OK_union_tag { /* Frames Received OK Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t COUNT:16;                /* Number of frames received OK */
  } B;
} ENET_IEEE_R_FRAME_OK_tag;

typedef union ENET_IEEE_R_CRC_union_tag { /* Frames Received with CRC Error Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t COUNT:16;                /* Number of frames received with CRC error */
  } B;
} ENET_IEEE_R_CRC_tag;

typedef union ENET_IEEE_R_ALIGN_union_tag { /* Frames Received with Alignment Error Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t COUNT:16;                /* Number of frames received with alignment error */
  } B;
} ENET_IEEE_R_ALIGN_tag;

typedef union ENET_IEEE_R_MACERR_union_tag { /* Receive FIFO Overflow Count Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t COUNT:16;                /* Receive FIFO overflow count */
  } B;
} ENET_IEEE_R_MACERR_tag;

typedef union ENET_IEEE_R_FDXFC_union_tag { /* Flow Control Pause Frames Received Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t COUNT:16;                /* Number of flow-control pause frames received */
  } B;
} ENET_IEEE_R_FDXFC_tag;

typedef union ENET_IEEE_R_OCTETS_OK_union_tag { /* Octet Count for Frames Received without Error Statistic Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:32;                /* Number of octets for frames received without error */
  } B;
} ENET_IEEE_R_OCTETS_OK_tag;

typedef union ENET_ATCR_union_tag {    /* Adjustable Timer Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:18;            /* Reserved */
    vuint32_t SLAVE:1;                 /* Enable Timer Slave Mode */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t CAPTURE:1;               /* Capture Timer Value */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t RESTART:1;               /* Reset Timer */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t PINPER:1;                /* PINPER */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t _unused_26:1;            /* Reserved */
    vuint32_t PEREN:1;                 /* Enable Periodical Event */
    vuint32_t OFFRST:1;                /* Reset Timer On Offset Event */
    vuint32_t OFFEN:1;                 /* Enable One-Shot Offset Event */
    vuint32_t _unused_30:1;            /* Reserved */
    vuint32_t EN:1;                    /* Enable Timer */
  } B;
} ENET_ATCR_tag;

typedef union ENET_ATVR_union_tag {    /* Timer Value Register */
  vuint32_t R;
  struct {
    vuint32_t ATIME:32;                /* ATIME */
  } B;
} ENET_ATVR_tag;

typedef union ENET_ATOFF_union_tag {   /* Timer Offset Register */
  vuint32_t R;
  struct {
    vuint32_t OFFSET:32;               /* OFFSET */
  } B;
} ENET_ATOFF_tag;

typedef union ENET_ATPER_union_tag {   /* Timer Period Register */
  vuint32_t R;
  struct {
    vuint32_t PERIOD:32;               /* PERIOD */
  } B;
} ENET_ATPER_tag;

typedef union ENET_ATCOR_union_tag {   /* Timer Correction Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t COR:31;                  /* Correction Counter Wrap-Around Value */
  } B;
} ENET_ATCOR_tag;

typedef union ENET_ATINC_union_tag {   /* Time-Stamping Clock Period Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:17;            /* Reserved */
    vuint32_t INC_CORR:7;              /* Correction Increment Value */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t INC:7;                   /* Clock Period Of The Timestamping Clock (ts_clk) In Nanoseconds */
  } B;
} ENET_ATINC_tag;

typedef union ENET_ATSTMP_union_tag {  /* Timestamp of Last Transmitted Frame */
  vuint32_t R;
  struct {
    vuint32_t TIMESTAMP:32;            /* TIMESTAMP */
  } B;
} ENET_ATSTMP_tag;

typedef union ENET_TGSR_union_tag {    /* Timer Global Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:28;            /* Reserved */
    vuint32_t TF3:1;                   /* Copy Of Timer Flag For Channel 3 */
    vuint32_t TF2:1;                   /* Copy Of Timer Flag For Channel 2 */
    vuint32_t TF1:1;                   /* Copy Of Timer Flag For Channel 1 */
    vuint32_t TF0:1;                   /* Copy Of Timer Flag For Channel 0 */
  } B;
} ENET_TGSR_tag;

typedef union ENET_TIMER_TCSR_union_tag { /* Timer Control Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t TPWC:5;                  /* Timer PulseWidth Control */
    vuint32_t _unused_21:3;            /* Reserved */
    vuint32_t TF:1;                    /* Timer Flag */
    vuint32_t TIE:1;                   /* Timer Interrupt Enable */
    vuint32_t TMODE:4;                 /* Timer Mode */
    vuint32_t _unused_30:1;            /* Reserved */
    vuint32_t TDRE:1;                  /* Timer DMA Request Enable */
  } B;
} ENET_TIMER_TCSR_tag;

typedef union ENET_TIMER_TCCR_union_tag { /* Timer Compare Capture Register */
  vuint32_t R;
  struct {
    vuint32_t TCC:32;                  /* Timer Capture Compare */
  } B;
} ENET_TIMER_TCCR_tag;

typedef struct ENET_TIMER_struct_tag {
  ENET_TIMER_TCSR_tag TCSR;            /* Timer Control Status Register */
  ENET_TIMER_TCCR_tag TCCR;            /* Timer Compare Capture Register */
} ENET_TIMER_tag;

struct ENET_tag {
  uint8_t ENET_reserved0[4];
  ENET_EIR_tag EIR;                    /* Interrupt Event Register */
  ENET_EIMR_tag EIMR;                  /* Interrupt Mask Register */
  uint8_t ENET_reserved1[4];
  ENET_RDAR_tag RDAR;                  /* Receive Descriptor Active Register - Ring 0 */
  ENET_TDAR_tag TDAR;                  /* Transmit Descriptor Active Register - Ring 0 */
  uint8_t ENET_reserved2[12];
  ENET_ECR_tag ECR;                    /* Ethernet Control Register */
  uint8_t ENET_reserved3[24];
  ENET_MMFR_tag MMFR;                  /* MII Management Frame Register */
  ENET_MSCR_tag MSCR;                  /* MII Speed Control Register */
  uint8_t ENET_reserved4[28];
  ENET_MIBC_tag MIBC;                  /* MIB Control Register */
  uint8_t ENET_reserved5[28];
  ENET_RCR_tag RCR;                    /* Receive Control Register */
  uint8_t ENET_reserved6[60];
  ENET_TCR_tag TCR;                    /* Transmit Control Register */
  uint8_t ENET_reserved7[28];
  ENET_PALR_tag PALR;                  /* Physical Address Lower Register */
  ENET_PAUR_tag PAUR;                  /* Physical Address Upper Register */
  ENET_OPD_tag OPD;                    /* Opcode/Pause Duration Register */
  ENET_TXIC_tag TXIC[1];               /* Transmit Interrupt Coalescing Register */
  uint8_t ENET_reserved8[12];
  ENET_RXIC_tag RXIC[1];               /* Receive Interrupt Coalescing Register */
  uint8_t ENET_reserved9[20];
  ENET_IAUR_tag IAUR;                  /* Descriptor Individual Upper Address Register */
  ENET_IALR_tag IALR;                  /* Descriptor Individual Lower Address Register */
  ENET_GAUR_tag GAUR;                  /* Descriptor Group Upper Address Register */
  ENET_GALR_tag GALR;                  /* Descriptor Group Lower Address Register */
  uint8_t ENET_reserved10[28];
  ENET_TFWR_tag TFWR;                  /* Transmit FIFO Watermark Register */
  uint8_t ENET_reserved11[56];
  ENET_RDSR_tag RDSR;                  /* Receive Descriptor Ring 0 Start Register */
  ENET_TDSR_tag TDSR;                  /* Transmit Buffer Descriptor Ring 0 Start Register */
  ENET_MRBR_tag MRBR;                  /* Maximum Receive Buffer Size Register - Ring 0 */
  uint8_t ENET_reserved12[4];
  ENET_RSFL_tag RSFL;                  /* Receive FIFO Section Full Threshold */
  ENET_RSEM_tag RSEM;                  /* Receive FIFO Section Empty Threshold */
  ENET_RAEM_tag RAEM;                  /* Receive FIFO Almost Empty Threshold */
  ENET_RAFL_tag RAFL;                  /* Receive FIFO Almost Full Threshold */
  ENET_TSEM_tag TSEM;                  /* Transmit FIFO Section Empty Threshold */
  ENET_TAEM_tag TAEM;                  /* Transmit FIFO Almost Empty Threshold */
  ENET_TAFL_tag TAFL;                  /* Transmit FIFO Almost Full Threshold */
  ENET_TIPG_tag TIPG;                  /* Transmit Inter-Packet Gap */
  ENET_FTRL_tag FTRL;                  /* Frame Truncation Length */
  uint8_t ENET_reserved13[12];
  ENET_TACC_tag TACC;                  /* Transmit Accelerator Function Configuration */
  ENET_RACC_tag RACC;                  /* Receive Accelerator Function Configuration */
  uint8_t ENET_reserved14[56];
  ENET_RMON_T_DROP_tag RMON_T_DROP;    /* Reserved Statistic Register */
  ENET_RMON_T_PACKETS_tag RMON_T_PACKETS; /* Tx Packet Count Statistic Register */
  ENET_RMON_T_BC_PKT_tag RMON_T_BC_PKT; /* Tx Broadcast Packets Statistic Register */
  ENET_RMON_T_MC_PKT_tag RMON_T_MC_PKT; /* Tx Multicast Packets Statistic Register */
  ENET_RMON_T_CRC_ALIGN_tag RMON_T_CRC_ALIGN; /* Tx Packets with CRC/Align Error Statistic Register */
  ENET_RMON_T_UNDERSIZE_tag RMON_T_UNDERSIZE; /* Tx Packets Less Than Bytes and Good CRC Statistic Register */
  ENET_RMON_T_OVERSIZE_tag RMON_T_OVERSIZE; /* Tx Packets GT MAX_FL bytes and Good CRC Statistic Register */
  ENET_RMON_T_FRAG_tag RMON_T_FRAG;    /* Tx Packets Less Than 64 Bytes and Bad CRC Statistic Register */
  ENET_RMON_T_JAB_tag RMON_T_JAB;      /* Tx Packets Greater Than MAX_FL bytes and Bad CRC Statistic Register */
  ENET_RMON_T_COL_tag RMON_T_COL;      /* Tx Collision Count Statistic Register */
  ENET_RMON_T_P64_tag RMON_T_P64;      /* Tx 64-Byte Packets Statistic Register */
  ENET_RMON_T_P65TO127_tag RMON_T_P65TO127; /* Tx 65- to 127-byte Packets Statistic Register */
  ENET_RMON_T_P128TO255_tag RMON_T_P128TO255; /* Tx 128- to 255-byte Packets Statistic Register */
  ENET_RMON_T_P256TO511_tag RMON_T_P256TO511; /* Tx 256- to 511-byte Packets Statistic Register */
  ENET_RMON_T_P512TO1023_tag RMON_T_P512TO1023; /* Tx 512- to 1023-byte Packets Statistic Register */
  ENET_RMON_T_P1024TO2047_tag RMON_T_P1024TO2047; /* Tx 1024- to 2047-byte Packets Statistic Register */
  ENET_RMON_T_P_GTE2048_tag RMON_T_P_GTE2048; /* Tx Packets Greater Than 2048 Bytes Statistic Register */
  ENET_RMON_T_OCTETS_tag RMON_T_OCTETS; /* Tx Octets Statistic Register */
  ENET_IEEE_T_DROP_tag IEEE_T_DROP;    /* Reserved Statistic Register */
  ENET_IEEE_T_FRAME_OK_tag IEEE_T_FRAME_OK; /* Frames Transmitted OK Statistic Register */
  ENET_IEEE_T_1COL_tag IEEE_T_1COL;    /* Frames Transmitted with Single Collision Statistic Register */
  ENET_IEEE_T_MCOL_tag IEEE_T_MCOL;    /* Frames Transmitted with Multiple Collisions Statistic Register */
  ENET_IEEE_T_DEF_tag IEEE_T_DEF;      /* Frames Transmitted after Deferral Delay Statistic Register */
  ENET_IEEE_T_LCOL_tag IEEE_T_LCOL;    /* Frames Transmitted with Late Collision Statistic Register */
  ENET_IEEE_T_EXCOL_tag IEEE_T_EXCOL;  /* Frames Transmitted with Excessive Collisions Statistic Register */
  ENET_IEEE_T_MACERR_tag IEEE_T_MACERR; /* Frames Transmitted with Tx FIFO Underrun Statistic Register */
  ENET_IEEE_T_CSERR_tag IEEE_T_CSERR;  /* Frames Transmitted with Carrier Sense Error Statistic Register */
  ENET_IEEE_T_SQE_tag IEEE_T_SQE;      /* Reserved Statistic Register */
  ENET_IEEE_T_FDXFC_tag IEEE_T_FDXFC;  /* Flow Control Pause Frames Transmitted Statistic Register */
  ENET_IEEE_T_OCTETS_OK_tag IEEE_T_OCTETS_OK; /* Octet Count for Frames Transmitted w/o Error Statistic Register */
  uint8_t ENET_reserved15[12];
  ENET_RMON_R_PACKETS_tag RMON_R_PACKETS; /* Rx Packet Count Statistic Register */
  ENET_RMON_R_BC_PKT_tag RMON_R_BC_PKT; /* Rx Broadcast Packets Statistic Register */
  ENET_RMON_R_MC_PKT_tag RMON_R_MC_PKT; /* Rx Multicast Packets Statistic Register */
  ENET_RMON_R_CRC_ALIGN_tag RMON_R_CRC_ALIGN; /* Rx Packets with CRC/Align Error Statistic Register */
  ENET_RMON_R_UNDERSIZE_tag RMON_R_UNDERSIZE; /* Rx Packets with Less Than 64 Bytes and Good CRC Statistic Register */
  ENET_RMON_R_OVERSIZE_tag RMON_R_OVERSIZE; /* Rx Packets Greater Than MAX_FL and Good CRC Statistic Register */
  ENET_RMON_R_FRAG_tag RMON_R_FRAG;    /* Rx Packets Less Than 64 Bytes and Bad CRC Statistic Register */
  ENET_RMON_R_JAB_tag RMON_R_JAB;      /* Rx Packets Greater Than MAX_FL Bytes and Bad CRC Statistic Register */
  ENET_RMON_R_RESVD_0_tag RMON_R_RESVD_0; /* Reserved Statistic Register */
  ENET_RMON_R_P64_tag RMON_R_P64;      /* Rx 64-Byte Packets Statistic Register */
  ENET_RMON_R_P65TO127_tag RMON_R_P65TO127; /* Rx 65- to 127-Byte Packets Statistic Register */
  ENET_RMON_R_P128TO255_tag RMON_R_P128TO255; /* Rx 128- to 255-Byte Packets Statistic Register */
  ENET_RMON_R_P256TO511_tag RMON_R_P256TO511; /* Rx 256- to 511-Byte Packets Statistic Register */
  ENET_RMON_R_P512TO1023_tag RMON_R_P512TO1023; /* Rx 512- to 1023-Byte Packets Statistic Register */
  ENET_RMON_R_P1024TO2047_tag RMON_R_P1024TO2047; /* Rx 1024- to 2047-Byte Packets Statistic Register */
  ENET_RMON_R_P_GTE2048_tag RMON_R_P_GTE2048; /* Rx Packets Greater than 2048 Bytes Statistic Register */
  ENET_RMON_R_OCTETS_tag RMON_R_OCTETS; /* Rx Octets Statistic Register */
  ENET_IEEE_R_DROP_tag IEEE_R_DROP;    /* Frames not Counted Correctly Statistic Register */
  ENET_IEEE_R_FRAME_OK_tag IEEE_R_FRAME_OK; /* Frames Received OK Statistic Register */
  ENET_IEEE_R_CRC_tag IEEE_R_CRC;      /* Frames Received with CRC Error Statistic Register */
  ENET_IEEE_R_ALIGN_tag IEEE_R_ALIGN;  /* Frames Received with Alignment Error Statistic Register */
  ENET_IEEE_R_MACERR_tag IEEE_R_MACERR; /* Receive FIFO Overflow Count Statistic Register */
  ENET_IEEE_R_FDXFC_tag IEEE_R_FDXFC;  /* Flow Control Pause Frames Received Statistic Register */
  ENET_IEEE_R_OCTETS_OK_tag IEEE_R_OCTETS_OK; /* Octet Count for Frames Received without Error Statistic Register */
  uint8_t ENET_reserved16[284];
  ENET_ATCR_tag ATCR;                  /* Adjustable Timer Control Register */
  ENET_ATVR_tag ATVR;                  /* Timer Value Register */
  ENET_ATOFF_tag ATOFF;                /* Timer Offset Register */
  ENET_ATPER_tag ATPER;                /* Timer Period Register */
  ENET_ATCOR_tag ATCOR;                /* Timer Correction Register */
  ENET_ATINC_tag ATINC;                /* Time-Stamping Clock Period Register */
  ENET_ATSTMP_tag ATSTMP;              /* Timestamp of Last Transmitted Frame */
  uint8_t ENET_reserved17[488];
  ENET_TGSR_tag TGSR;                  /* Timer Global Status Register */
  ENET_TIMER_tag TIMER[4];
};


/* ============================================================================
   =============================== Module: ETIMER =============================
   ============================================================================ */

typedef union ETIMER_CH_COMP1_union_tag { /* Channel n Compare 1 */
  vuint16_t R;
  struct {
    vuint16_t COMP1:16;                /* COMP1 */
  } B;
} ETIMER_CH_COMP1_tag;

typedef union ETIMER_CH_COMP2_union_tag { /* Channel n Compare 2 */
  vuint16_t R;
  struct {
    vuint16_t COMP2:16;                /* COMP2 */
  } B;
} ETIMER_CH_COMP2_tag;

typedef union ETIMER_CH_CAPT1_union_tag { /* Channel n Capture 1 */
  vuint16_t R;
  struct {
    vuint16_t CAPT1:16;                /* Capture 1 */
  } B;
} ETIMER_CH_CAPT1_tag;

typedef union ETIMER_CH_CAPT2_union_tag { /* Channel n Capture 2 */
  vuint16_t R;
  struct {
    vuint16_t CAPT2:16;                /* Capture 2 */
  } B;
} ETIMER_CH_CAPT2_tag;

typedef union ETIMER_CH_LOAD_union_tag { /* Channel n Load */
  vuint16_t R;
  struct {
    vuint16_t LOAD:16;                 /* Load */
  } B;
} ETIMER_CH_LOAD_tag;

typedef union ETIMER_CH_HOLD_union_tag { /* Channel n Hold */
  vuint16_t R;
  struct {
    vuint16_t HOLD:16;                 /* Hold */
  } B;
} ETIMER_CH_HOLD_tag;

typedef union ETIMER_CH_CNTR_union_tag { /* Channel n Counter */
  vuint16_t R;
  struct {
    vuint16_t CNTR:16;                 /* Counter */
  } B;
} ETIMER_CH_CNTR_tag;

typedef union ETIMER_CH_CTRL1_union_tag { /* Channel n Control 1 */
  vuint16_t R;
  struct {
    vuint16_t CNTMODE:3;               /* Count Mode */
    vuint16_t PRISRC:5;                /* Primary Count Source */
    vuint16_t ONCE:1;                  /* Count Once */
    vuint16_t LENGTH:1;                /* Count Length */
    vuint16_t DIR:1;                   /* Count Direction */
    vuint16_t SECSRC:5;                /* Secondary Count Source */
  } B;
} ETIMER_CH_CTRL1_tag;

typedef union ETIMER_CH_CTRL2_union_tag { /* Channel n Control 2 */
  vuint16_t R;
  struct {
    vuint16_t OEN:1;                   /* Output Enable */
    vuint16_t RDNT:1;                  /* Redundant Channel Enable */
    vuint16_t INPUT:1;                 /* External Input Signal */
    vuint16_t VAL:1;                   /* Forced OFLAG Value */
    vuint16_t FORCE:1;                 /* Force OFLAG Output */
    vuint16_t COFRC:1;                 /* Co-Channel OFLAG Force */
    vuint16_t COINIT:2;                /* Co-Channel Initialization */
    vuint16_t SIPS:1;                  /* Secondary Source Input Polarity Select */
    vuint16_t PIPS:1;                  /* Primary Source Input Polarity Select */
    vuint16_t OPS:1;                   /* Output Polarity Select */
    vuint16_t MSTR:1;                  /* Master Mode */
    vuint16_t OUTMODE:4;               /* Output Mode */
  } B;
} ETIMER_CH_CTRL2_tag;

typedef union ETIMER_CH_CTRL3_union_tag { /* Channel n Control 3 */
  vuint16_t R;
  struct {
    vuint16_t STPEN:1;                 /* Stop Actions Enable */
    vuint16_t ROC:2;                   /* Reload On Capture */
    vuint16_t _unused_3:5;
    vuint16_t C2FCNT:3;                /* Capture 2 FIFO Count */
    vuint16_t C1FCNT:3;                /* Capture 1 FIFO Count */
    vuint16_t DBGEN:2;                 /* Debug Actions Enable */
  } B;
} ETIMER_CH_CTRL3_tag;

typedef union ETIMER_CH_STS_union_tag { /* Channel n Status */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:6;
    vuint16_t _unused_6:1;
    vuint16_t RCF:1;                   /* Redundant Channel Flag */
    vuint16_t ICF2:1;                  /* Input Capture 2 Flag */
    vuint16_t ICF1:1;                  /* Input Capture 1 Flag */
    vuint16_t IEHF:1;                  /* Input Edge High Flag */
    vuint16_t IELF:1;                  /* Input Edge Low Flag */
    vuint16_t TOF:1;                   /* Timer Overflow Flag */
    vuint16_t TCF2:1;                  /* Timer Compare 2 Flag */
    vuint16_t TCF1:1;                  /* Timer Compare 1 Flag */
    vuint16_t TCF:1;                   /* Timer Compare Flag */
  } B;
} ETIMER_CH_STS_tag;

typedef union ETIMER_CH_INTDMA_union_tag { /* Channel n Interrupt and DMA Enable */
  vuint16_t R;
  struct {
    vuint16_t ICF2DE:1;                /* Input Capture 2 Flag DMA Enable */
    vuint16_t ICF1DE:1;                /* Input Capture 1 Flag DMA Enable */
    vuint16_t CMPLD2DE:1;              /* Comparator Load 2 Flag DMA Enable */
    vuint16_t CMPLD1DE:1;              /* Comparator Load 1 Flag DMA Enable */
    vuint16_t _unused_4:2;
    vuint16_t _unused_6:1;
    vuint16_t RCFIE:1;                 /* Redundant Channel Flag Interrupt Enable */
    vuint16_t ICF2IE:1;                /* Input Capture 2 Flag Interrupt Enable */
    vuint16_t ICF1IE:1;                /* Input Capture 1 Flag Interrupt Enable */
    vuint16_t IEHFIE:1;                /* Input Edge High Flag Interrupt Enable */
    vuint16_t IELFIE:1;                /* Input Edge Low Flag Interrupt Enable */
    vuint16_t TOFIE:1;                 /* Timer Overflow Flag Interrupt Enable */
    vuint16_t TCF2IE:1;                /* Timer Compare 2 Flag Interrupt Enable */
    vuint16_t TCF1IE:1;                /* Timer Compare 1 Flag Interrupt Enable */
    vuint16_t TCFIE:1;                 /* Timer Compare Flag Interrupt Enable */
  } B;
} ETIMER_CH_INTDMA_tag;

typedef union ETIMER_CH_CMPLD1_union_tag { /* Channel n Comparator Load 1 */
  vuint16_t R;
  struct {
    vuint16_t CMPLD1:16;               /* Comparator Load 1 */
  } B;
} ETIMER_CH_CMPLD1_tag;

typedef union ETIMER_CH_CMPLD2_union_tag { /* Channel n Comparator Load 2 */
  vuint16_t R;
  struct {
    vuint16_t CMPLD2:16;               /* Comparator Load 2 */
  } B;
} ETIMER_CH_CMPLD2_tag;

typedef union ETIMER_CH_CCCTRL_union_tag { /* Channel n Compare and Capture Control */
  vuint16_t R;
  struct {
    vuint16_t CLC2:3;                  /* Compare Load Control 2 */
    vuint16_t CLC1:3;                  /* Compare Load Control 1 */
    vuint16_t CMPMODE:2;               /* Compare Mode */
    vuint16_t CPT2MODE:2;              /* Capture 2 Mode Control */
    vuint16_t CPT1MODE:2;              /* Capture 1 Mode Control */
    vuint16_t CFWM:2;                  /* Capture FIFO Water Mark */
    vuint16_t ONESHOT:1;               /* One-Shot Capture Mode */
    vuint16_t ARM:1;                   /* Arm Capture */
  } B;
} ETIMER_CH_CCCTRL_tag;

typedef union ETIMER_CH_FILT_union_tag { /* Channel n Input Filter */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:5;
    vuint16_t FILT_CNT:3;              /* Input Filter Sample Count */
    vuint16_t FILT_PER:8;              /* Input Filter Sample Period */
  } B;
} ETIMER_CH_FILT_tag;

typedef struct ETIMER_CH_struct_tag {
  ETIMER_CH_COMP1_tag COMP1;           /* Channel n Compare 1 */
  ETIMER_CH_COMP2_tag COMP2;           /* Channel n Compare 2 */
  ETIMER_CH_CAPT1_tag CAPT1;           /* Channel n Capture 1 */
  ETIMER_CH_CAPT2_tag CAPT2;           /* Channel n Capture 2 */
  ETIMER_CH_LOAD_tag LOAD;             /* Channel n Load */
  ETIMER_CH_HOLD_tag HOLD;             /* Channel n Hold */
  ETIMER_CH_CNTR_tag CNTR;             /* Channel n Counter */
  ETIMER_CH_CTRL1_tag CTRL1;           /* Channel n Control 1 */
  ETIMER_CH_CTRL2_tag CTRL2;           /* Channel n Control 2 */
  ETIMER_CH_CTRL3_tag CTRL3;           /* Channel n Control 3 */
  ETIMER_CH_STS_tag STS;               /* Channel n Status */
  ETIMER_CH_INTDMA_tag INTDMA;         /* Channel n Interrupt and DMA Enable */
  ETIMER_CH_CMPLD1_tag CMPLD1;         /* Channel n Comparator Load 1 */
  ETIMER_CH_CMPLD2_tag CMPLD2;         /* Channel n Comparator Load 2 */
  ETIMER_CH_CCCTRL_tag CCCTRL;         /* Channel n Compare and Capture Control */
  ETIMER_CH_FILT_tag FILT;             /* Channel n Input Filter */
} ETIMER_CH_tag;

typedef union ETIMER_ENBL_union_tag {  /* Channel Enable */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:8;
    vuint16_t ENBL:8;                  /* Timer Channel Enable */
  } B;
} ETIMER_ENBL_tag;

typedef union ETIMER_DREQ_union_tag {  /* DMA Request 0 Select */
  vuint16_t R;
  struct {
    vuint16_t DREQ0_EN:1;              /* DMA Request Enable */
    vuint16_t _unused_1:10;
    vuint16_t DREQ0:5;                 /* DMA Request Select */
  } B;
} ETIMER_DREQ_tag;

struct ETIMER_tag {
  ETIMER_CH_tag CH[8];
  uint8_t ETIMER_reserved0[12];
  ETIMER_ENBL_tag ENBL;                /* Channel Enable */
  uint8_t ETIMER_reserved1[2];
  ETIMER_DREQ_tag DREQ[2];             /* DMA Request 0 Select */
};


/* ============================================================================
   =============================== Module: FBXC ===============================
   ============================================================================ */

typedef union FBXC_STR_union_tag {     /* Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:30;            /* Reserved */
    vuint32_t DRW:1;                   /* Disable repair write */
    vuint32_t REP_ERR:1;               /* Repair error */
  } B;
} FBXC_STR_tag;

typedef union FBXC_CTL_union_tag {     /* Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:30;            /* Reserved */
    vuint32_t RSB:1;                   /* Repair enable (active-low) */
    vuint32_t MR:1;                    /* Margin read enable */
  } B;
} FBXC_CTL_tag;

struct FBXC_tag {
  FBXC_STR_tag STR;                    /* Status Register */
  uint8_t FBXC_reserved0[8];
  FBXC_CTL_tag CTL;                    /* Control Register */
};


/* ============================================================================
   =============================== Module: FCCU ===============================
   ============================================================================ */

typedef union FCCU_CTRL_union_tag {    /* Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t _unused_1:2;             /* Reserved */
    vuint32_t _unused_3:19;            /* Reserved */
    vuint32_t DEBUG:1;                 /* Debug Mode Enable */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t OPS:2;                   /* Operation Status */
    vuint32_t _unused_26:1;            /* Reserved */
    vuint32_t OPR:5;                   /* Operation Run */
  } B;
} FCCU_CTRL_tag;

typedef union FCCU_CTRLK_union_tag {   /* Control Key */
  vuint32_t R;
  struct {
    vuint32_t CTRLK:32;                /* Locked-Operation Control Key */
  } B;
} FCCU_CTRLK_tag;

typedef union FCCU_CFG_union_tag {     /* Configuration */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:7;             /* Reserved */
    vuint32_t FCCU_SET_AFTER_RESET:1;  /* Fault-Output (EOUT) Activate */
    vuint32_t FCCU_SET_CLEAR:2;        /* Fault-Output (EOUT) Control */
    vuint32_t _unused_10:2;            /* Reserved */
    vuint32_t _unused_12:4;            /* Reserved */
    vuint32_t FOPE:1;                  /* Fault-Output (EOUT) Prescaler Extension */
    vuint32_t _unused_17:2;            /* Reserved */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t SM:1;                    /* Fault-Output (EOUT) Switching Mode */
    vuint32_t PS:1;                    /* Fault-Output (EOUT) Polarity Selection */
    vuint32_t FOM:3;                   /* Fault-Output (EOUT) Mode */
    vuint32_t FOP:6;                   /* Fault-Output (EOUT) Prescaler */
  } B;
} FCCU_CFG_tag;

typedef union FCCU_NCF_CFG_union_tag { /* Non-critical Fault Configuration */
  vuint32_t R;
  struct {
    vuint32_t NCFC31:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC30:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC29:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC28:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC27:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC26:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC25:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC24:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC23:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC22:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC21:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC20:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC19:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC18:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC17:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC16:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC15:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC14:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC13:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC12:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC11:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC10:1;                /* Non-critical Fault Configuration n */
    vuint32_t NCFC9:1;                 /* Non-critical Fault Configuration n */
    vuint32_t NCFC8:1;                 /* Non-critical Fault Configuration n */
    vuint32_t NCFC7:1;                 /* Non-critical Fault Configuration n */
    vuint32_t NCFC6:1;                 /* Non-critical Fault Configuration n */
    vuint32_t NCFC5:1;                 /* Non-critical Fault Configuration n */
    vuint32_t NCFC4:1;                 /* Non-critical Fault Configuration n */
    vuint32_t NCFC3:1;                 /* Non-critical Fault Configuration n */
    vuint32_t NCFC2:1;                 /* Non-critical Fault Configuration n */
    vuint32_t NCFC1:1;                 /* Non-critical Fault Configuration n */
    vuint32_t NCFC0:1;                 /* Non-critical Fault Configuration n */
  } B;
} FCCU_NCF_CFG_tag;

typedef union FCCU_NCFS_CFG_union_tag { /* Non-critical Fault-State Configuration */
  vuint32_t R;
  struct {
    vuint32_t NCFSC15:2;               /* Non-critical Fault-State Configuration n */
    vuint32_t NCFSC14:2;               /* Non-critical Fault-State Configuration n */
    vuint32_t NCFSC13:2;               /* Non-critical Fault-State Configuration n */
    vuint32_t NCFSC12:2;               /* Non-critical Fault-State Configuration n */
    vuint32_t NCFSC11:2;               /* Non-critical Fault-State Configuration n */
    vuint32_t NCFSC10:2;               /* Non-critical Fault-State Configuration n */
    vuint32_t NCFSC9:2;                /* Non-critical Fault-State Configuration n */
    vuint32_t NCFSC8:2;                /* Non-critical Fault-State Configuration n */
    vuint32_t NCFSC7:2;                /* Non-critical Fault-State Configuration n */
    vuint32_t NCFSC6:2;                /* Non-critical Fault-State Configuration n */
    vuint32_t NCFSC5:2;                /* Non-critical Fault-State Configuration n */
    vuint32_t NCFSC4:2;                /* Non-critical Fault-State Configuration n */
    vuint32_t NCFSC3:2;                /* Non-critical Fault-State Configuration n */
    vuint32_t NCFSC2:2;                /* Non-critical Fault-State Configuration n */
    vuint32_t NCFSC1:2;                /* Non-critical Fault-State Configuration n */
    vuint32_t NCFSC0:2;                /* Non-critical Fault-State Configuration n */
  } B;
} FCCU_NCFS_CFG_tag;

typedef union FCCU_NCF_S_union_tag {   /* Non-critical Fault Status */
  vuint32_t R;
  struct {
    vuint32_t NCFS31:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS30:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS29:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS28:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS27:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS26:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS25:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS24:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS23:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS22:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS21:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS20:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS19:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS18:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS17:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS16:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS15:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS14:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS13:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS12:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS11:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS10:1;                /* Non-critical Fault Status n */
    vuint32_t NCFS9:1;                 /* Non-critical Fault Status n */
    vuint32_t NCFS8:1;                 /* Non-critical Fault Status n */
    vuint32_t NCFS7:1;                 /* Non-critical Fault Status n */
    vuint32_t NCFS6:1;                 /* Non-critical Fault Status n */
    vuint32_t NCFS5:1;                 /* Non-critical Fault Status n */
    vuint32_t NCFS4:1;                 /* Non-critical Fault Status n */
    vuint32_t NCFS3:1;                 /* Non-critical Fault Status n */
    vuint32_t NCFS2:1;                 /* Non-critical Fault Status n */
    vuint32_t NCFS1:1;                 /* Non-critical Fault Status n */
    vuint32_t NCFS0:1;                 /* Non-critical Fault Status n */
  } B;
} FCCU_NCF_S_tag;

typedef union FCCU_NCFK_union_tag {    /* Non-critical Fault Key */
  vuint32_t R;
  struct {
    vuint32_t NCFK:32;                 /* Non-critical Fault Key */
  } B;
} FCCU_NCFK_tag;

typedef union FCCU_NCF_E_union_tag {   /* Non-critical Fault Enable */
  vuint32_t R;
  struct {
    vuint32_t NCFE31:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE30:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE29:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE28:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE27:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE26:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE25:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE24:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE23:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE22:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE21:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE20:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE19:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE18:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE17:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE16:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE15:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE14:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE13:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE12:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE11:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE10:1;                /* Non-critical Fault Enable n */
    vuint32_t NCFE9:1;                 /* Non-critical Fault Enable n */
    vuint32_t NCFE8:1;                 /* Non-critical Fault Enable n */
    vuint32_t NCFE7:1;                 /* Non-critical Fault Enable n */
    vuint32_t NCFE6:1;                 /* Non-critical Fault Enable n */
    vuint32_t NCFE5:1;                 /* Non-critical Fault Enable n */
    vuint32_t NCFE4:1;                 /* Non-critical Fault Enable n */
    vuint32_t NCFE3:1;                 /* Non-critical Fault Enable n */
    vuint32_t NCFE2:1;                 /* Non-critical Fault Enable n */
    vuint32_t NCFE1:1;                 /* Non-critical Fault Enable n */
    vuint32_t NCFE0:1;                 /* Non-critical Fault Enable n */
  } B;
} FCCU_NCF_E_tag;

typedef union FCCU_NCF_TOE_union_tag { /* Non-critical-Fault Alarm-State Timeout Enable */
  vuint32_t R;
  struct {
    vuint32_t NCFTOE31:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE30:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE29:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE28:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE27:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE26:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE25:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE24:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE23:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE22:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE21:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE20:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE19:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE18:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE17:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE16:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE15:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE14:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE13:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE12:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE11:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE10:1;              /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE9:1;               /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE8:1;               /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE7:1;               /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE6:1;               /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE5:1;               /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE4:1;               /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE3:1;               /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE2:1;               /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE1:1;               /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE0:1;               /* Non-critical-Fault Alarm-State Timeout Enable n */
  } B;
} FCCU_NCF_TOE_tag;

typedef union FCCU_NCF_TO_union_tag {  /* Non-critical-Fault Alarm-State Timeout Interval */
  vuint32_t R;
  struct {
    vuint32_t TO:32;                   /* Non-critical-Fault Alarm-State Timeout Interval */
  } B;
} FCCU_NCF_TO_tag;

typedef union FCCU_CFG_TO_union_tag {  /* Configuration-State Timeout Interval */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:29;            /* Reserved */
    vuint32_t TO:3;                    /* Configuration-State Timeout Interval */
  } B;
} FCCU_CFG_TO_tag;

typedef union FCCU_EINOUT_union_tag {  /* IO Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:26;            /* Reserved */
    vuint32_t EIN1:1;                  /* Error Input 1 */
    vuint32_t EIN0:1;                  /* Error Input 0 */
    vuint32_t _unused_28:2;            /* Reserved */
    vuint32_t EOUT1:1;                 /* EOUT1 */
    vuint32_t EOUT0:1;                 /* EOUT0 */
  } B;
} FCCU_EINOUT_tag;

typedef union FCCU_STAT_union_tag {    /* Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:26;            /* Reserved */
    vuint32_t PHYSICERRORPIN:2;        /* EOUT Signal States */
    vuint32_t ESTAT:1;                 /* FCCU Faulty Condition */
    vuint32_t STATUS:3;                /* FCCU State */
  } B;
} FCCU_STAT_tag;

typedef union FCCU_N2AF_STATUS_union_tag { /* Normal-to-Alarm Freeze Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t NAFS:8;                  /* Normal-to-Alarm Freeze Status */
  } B;
} FCCU_N2AF_STATUS_tag;

typedef union FCCU_A2FF_STATUS_union_tag { /* Alarm-to-Fault Freeze Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:22;
    vuint32_t AF_SRC:2;                /* Alarm-to-Fault Source */
    vuint32_t AFFS:8;                  /* Alarm-to-Fault Freeze Status */
  } B;
} FCCU_A2FF_STATUS_tag;

typedef union FCCU_N2FF_STATUS_union_tag { /* Normal-to-Fault Freeze Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:22;            /* Reserved */
    vuint32_t NF_SRC:2;                /* Normal-to-Fault Source */
    vuint32_t NFFS:8;                  /* Normal-to-Fault Freeze Status */
  } B;
} FCCU_N2FF_STATUS_tag;

typedef union FCCU_F2AF_STATUS_union_tag { /* Fault-to-Alarm Freeze Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:23;            /* Reserved */
    vuint32_t FAFS:9;                  /* Fault-to-Alarm Freeze Status */
  } B;
} FCCU_F2AF_STATUS_tag;

typedef union FCCU_NCFF_union_tag {    /* Non-critical Fault Fake */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:25;            /* Reserved */
    vuint32_t FNCFC:7;                 /* FNCFC */
  } B;
} FCCU_NCFF_tag;

typedef union FCCU_IRQ_STAT_union_tag { /* IRQ Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:27;            /* Reserved */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t NMI_STAT:1;              /* NMI Interrupt Status */
    vuint32_t ALRM_STAT:1;             /* Alarm Interrupt Status */
    vuint32_t CFG_TO_STAT:1;           /* Configuration-State Timeout Status */
  } B;
} FCCU_IRQ_STAT_tag;

typedef union FCCU_IRQ_EN_union_tag {  /* IRQ Enable */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:28;            /* Reserved */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t _unused_29:2;            /* Reserved */
    vuint32_t CFG_TO_IEN:1;            /* Configuration-State Timeout Interrupt Enable */
  } B;
} FCCU_IRQ_EN_tag;

typedef union FCCU_MCS_union_tag {     /* Mode Controller Status */
  vuint32_t R;
  struct {
    vuint32_t VL3:1;                   /* Valid 3 */
    vuint32_t FS3:1;                   /* Fault Status 3 */
    vuint32_t _unused_2:2;             /* Reserved */
    vuint32_t MCS3:4;                  /* Mode Controller State 3 */
    vuint32_t VL2:1;                   /* Valid 2 */
    vuint32_t FS2:1;                   /* Fault Status 2 */
    vuint32_t _unused_10:2;            /* Reserved */
    vuint32_t MCS2:4;                  /* Mode Controller State 2 */
    vuint32_t VL1:1;                   /* Valid 1 */
    vuint32_t FS1:1;                   /* Fault Status 1 */
    vuint32_t _unused_18:2;            /* Reserved */
    vuint32_t MCS1:4;                  /* Mode Controller State 1 */
    vuint32_t VL0:1;                   /* Valid 0 */
    vuint32_t FS0:1;                   /* Fault Status 0 */
    vuint32_t _unused_26:2;            /* Reserved */
    vuint32_t MCS0:4;                  /* Mode Controller State 0 */
  } B;
} FCCU_MCS_tag;

typedef union FCCU_TRANS_LOCK_union_tag { /* Transient Configuration Lock */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:23;            /* Reserved */
    vuint32_t TRANSKEY:9;              /* Transient Configuration Lock */
  } B;
} FCCU_TRANS_LOCK_tag;

typedef union FCCU_PERMNT_LOCK_union_tag { /* Permanent Configuration Lock */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:23;            /* Reserved */
    vuint32_t PERMNTKEY:9;             /* Permanent Configuration Lock */
  } B;
} FCCU_PERMNT_LOCK_tag;

typedef union FCCU_DELTA_T_union_tag { /* Delta T */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved */
    vuint32_t _unused_2:14;            /* Reserved */
    vuint32_t _unused_16:2;            /* Reserved */
    vuint32_t DELTA_T:14;              /* Minimum Fault-Output (EOUT) Timer Interval */
  } B;
} FCCU_DELTA_T_tag;

typedef union FCCU_IRQ_ALARM_EN_union_tag { /* Non-critical Alarm-State Interrupt-Request Enable */
  vuint32_t R;
  struct {
    vuint32_t IRQEN31:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN30:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN29:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN28:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN27:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN26:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN25:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN24:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN23:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN22:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN21:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN20:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN19:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN18:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN17:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN16:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN15:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN14:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN13:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN12:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN11:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN10:1;               /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN9:1;                /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN8:1;                /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN7:1;                /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN6:1;                /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN5:1;                /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN4:1;                /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN3:1;                /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN2:1;                /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN1:1;                /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN0:1;                /* Non-critical Alarm-State Interrupt-Request Enable n */
  } B;
} FCCU_IRQ_ALARM_EN_tag;

typedef union FCCU_NMI_EN_union_tag {  /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable */
  vuint32_t R;
  struct {
    vuint32_t NMIEN31:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN30:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN29:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN28:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN27:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN26:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN25:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN24:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN23:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN22:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN21:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN20:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN19:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN18:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN17:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN16:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN15:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN14:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN13:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN12:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN11:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN10:1;               /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN9:1;                /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN8:1;                /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN7:1;                /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN6:1;                /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN5:1;                /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN4:1;                /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN3:1;                /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN2:1;                /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN1:1;                /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN0:1;                /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
  } B;
} FCCU_NMI_EN_tag;

typedef union FCCU_EOUT_SIG_EN_union_tag { /* Non-critical Fault-State EOUT Signaling Enable */
  vuint32_t R;
  struct {
    vuint32_t EOUTEN31:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN30:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN29:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN28:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN27:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN26:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN25:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN24:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN23:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN22:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN21:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN20:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN19:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN18:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN17:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN16:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN15:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN14:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN13:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN12:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN11:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN10:1;              /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN9:1;               /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN8:1;               /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN7:1;               /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN6:1;               /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN5:1;               /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN4:1;               /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN3:1;               /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN2:1;               /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN1:1;               /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN0:1;               /* Non-critical Fault-State EOUT Signaling Enable n */
  } B;
} FCCU_EOUT_SIG_EN_tag;

typedef union FCCU_TMR_ALARM_union_tag { /* Alarm-State Timer */
  vuint32_t R;
  struct {
    vuint32_t COUNT:32;                /* Alarm-State Timer Count */
  } B;
} FCCU_TMR_ALARM_tag;

typedef union FCCU_TMR_CFG_union_tag { /* Configuration-State Timer */
  vuint32_t R;
  struct {
    vuint32_t COUNT:32;                /* Configuration-State Timer Count */
  } B;
} FCCU_TMR_CFG_tag;

typedef union FCCU_TMR_ETMR_union_tag { /* Fault-Output Timer */
  vuint32_t R;
  struct {
    vuint32_t COUNT:32;                /* Fault-Output Timer Count */
  } B;
} FCCU_TMR_ETMR_tag;

struct FCCU_tag {
  FCCU_CTRL_tag CTRL;                  /* Control */
  FCCU_CTRLK_tag CTRLK;                /* Control Key */
  FCCU_CFG_tag CFG;                    /* Configuration */
  uint8_t FCCU_reserved0[16];
  FCCU_NCF_CFG_tag NCF_CFG[4];         /* Non-critical Fault Configuration */
  uint8_t FCCU_reserved1[32];
  FCCU_NCFS_CFG_tag NCFS_CFG[8];       /* Non-critical Fault-State Configuration */
  uint8_t FCCU_reserved2[20];
  FCCU_NCF_S_tag NCF_S[4];             /* Non-critical Fault Status */
  FCCU_NCFK_tag NCFK;                  /* Non-critical Fault Key */
  FCCU_NCF_E_tag NCF_E[4];             /* Non-critical Fault Enable */
  FCCU_NCF_TOE_tag NCF_TOE[4];         /* Non-critical-Fault Alarm-State Timeout Enable */
  FCCU_NCF_TO_tag NCF_TO;              /* Non-critical-Fault Alarm-State Timeout Interval */
  FCCU_CFG_TO_tag CFG_TO;              /* Configuration-State Timeout Interval */
  FCCU_EINOUT_tag EINOUT;              /* IO Control */
  FCCU_STAT_tag STAT;                  /* Status */
  FCCU_N2AF_STATUS_tag N2AF_STATUS;    /* Normal-to-Alarm Freeze Status */
  FCCU_A2FF_STATUS_tag A2FF_STATUS;    /* Alarm-to-Fault Freeze Status */
  FCCU_N2FF_STATUS_tag N2FF_STATUS;    /* Normal-to-Fault Freeze Status */
  FCCU_F2AF_STATUS_tag F2AF_STATUS;    /* Fault-to-Alarm Freeze Status */
  uint8_t FCCU_reserved3[8];
  FCCU_NCFF_tag NCFF;                  /* Non-critical Fault Fake */
  FCCU_IRQ_STAT_tag IRQ_STAT;          /* IRQ Status */
  FCCU_IRQ_EN_tag IRQ_EN;              /* IRQ Enable */
  uint8_t FCCU_reserved4[4];
  FCCU_MCS_tag MCS;                    /* Mode Controller Status */
  FCCU_TRANS_LOCK_tag TRANS_LOCK;      /* Transient Configuration Lock */
  FCCU_PERMNT_LOCK_tag PERMNT_LOCK;    /* Permanent Configuration Lock */
  FCCU_DELTA_T_tag DELTA_T;            /* Delta T */
  FCCU_IRQ_ALARM_EN_tag IRQ_ALARM_EN[4]; /* Non-critical Alarm-State Interrupt-Request Enable */
  FCCU_NMI_EN_tag NMI_EN[4];           /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable */
  FCCU_EOUT_SIG_EN_tag EOUT_SIG_EN[4]; /* Non-critical Fault-State EOUT Signaling Enable */
  FCCU_TMR_ALARM_tag TMR_ALARM;        /* Alarm-State Timer */
  uint8_t FCCU_reserved5[4];
  FCCU_TMR_CFG_tag TMR_CFG;            /* Configuration-State Timer */
  FCCU_TMR_ETMR_tag TMR_ETMR;          /* Fault-Output Timer */
};


/* ============================================================================
   =============================== Module: FLEXPWM ============================
   ============================================================================ */

typedef union FLEXPWM_SUB_CNT_union_tag { /* Submodule n Counter */
  vuint16_t R;
  struct {
    vuint16_t CNT:16;                  /* Count */
  } B;
} FLEXPWM_SUB_CNT_tag;

typedef union FLEXPWM_SUB_INIT_union_tag { /* Submodule n Initial Count */
  vuint16_t R;
  struct {
    vuint16_t INIT:16;                 /* Initial Count */
  } B;
} FLEXPWM_SUB_INIT_tag;

typedef union FLEXPWM_SUB_CTRL2_union_tag { /* Submodule n Control 2 */
  vuint16_t R;
  struct {
    vuint16_t DBGEN:1;                 /* Debug Enable */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t INDEP:1;                 /* Independent Or Complementary Pair Operation */
    vuint16_t PWM23_INIT:1;            /* PWM23 Initial Value */
    vuint16_t PWM45_INIT:1;            /* PWM45 Initial Value */
    vuint16_t PWMX_INIT:1;             /* PWMX Initial Value */
    vuint16_t INIT_SEL:2;              /* Initialization Control Select */
    vuint16_t FRCEN:1;                 /* Force Initialization Enable */
    vuint16_t FORCE:1;                 /* Force Initialization */
    vuint16_t FORCE_SEL:3;             /* Force Source Select */
    vuint16_t RELOAD_SEL:1;            /* Reload Source Select */
    vuint16_t CLK_SEL:2;               /* Clock Source Select */
  } B;
} FLEXPWM_SUB_CTRL2_tag;

typedef union FLEXPWM_SUB_CTRL1_union_tag { /* Submodule n Control 1 */
  vuint16_t R;
  struct {
    vuint16_t LDFQ:4;                  /* Load Frequency */
    vuint16_t HALF:1;                  /* Half Cycle Reload */
    vuint16_t FULL:1;                  /* Full Cycle Reload */
    vuint16_t DT:2;                    /* Deadtime */
    vuint16_t COMPMODE:1;              /* Compare Mode */
    vuint16_t PRSC:3;                  /* Prescaler */
    vuint16_t PHSSHFT:1;               /* Phase Shift Mode Enable */
    vuint16_t LDMOD:1;                 /* Load Mode Select */
    vuint16_t _unused_14:1;
    vuint16_t DBLEN:1;                 /* Double Switching Enable */
  } B;
} FLEXPWM_SUB_CTRL1_tag;

typedef union FLEXPWM_SUB_VAL0_union_tag { /* Submodule n Value 0 */
  vuint16_t R;
  struct {
    vuint16_t VAL0:16;                 /* Value 0 */
  } B;
} FLEXPWM_SUB_VAL0_tag;

typedef union FLEXPWM_SUB_VAL1_union_tag { /* Submodule n Value 1 */
  vuint16_t R;
  struct {
    vuint16_t VAL1:16;                 /* Value 1 */
  } B;
} FLEXPWM_SUB_VAL1_tag;

typedef union FLEXPWM_SUB_VAL2_union_tag { /* Submodule n Value 2 */
  vuint16_t R;
  struct {
    vuint16_t VAL2:16;                 /* Value 2 */
  } B;
} FLEXPWM_SUB_VAL2_tag;

typedef union FLEXPWM_SUB_VAL3_union_tag { /* Submodule n Value 3 */
  vuint16_t R;
  struct {
    vuint16_t VAL3:16;                 /* Value 3 */
  } B;
} FLEXPWM_SUB_VAL3_tag;

typedef union FLEXPWM_SUB_VAL4_union_tag { /* Submodule n Value 4 */
  vuint16_t R;
  struct {
    vuint16_t VAL4:16;                 /* VAL4 */
  } B;
} FLEXPWM_SUB_VAL4_tag;

typedef union FLEXPWM_SUB_VAL5_union_tag { /* Submodule n Value 5 */
  vuint16_t R;
  struct {
    vuint16_t VAL5:16;                 /* VAL5 */
  } B;
} FLEXPWM_SUB_VAL5_tag;

typedef union FLEXPWM_SUB_OCTRL_union_tag { /* Submodule n Output Control */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:1;
    vuint16_t _unused_1:1;
    vuint16_t PWMX_IN:1;               /* PWMX Input */
    vuint16_t _unused_3:2;
    vuint16_t POLA:1;                  /* PWMA Output Polarity */
    vuint16_t POLB:1;                  /* PWMB Output Polarity */
    vuint16_t POLX:1;                  /* PWMX Output Polarity */
    vuint16_t _unused_8:2;
    vuint16_t PWMAFS:2;                /* PWMA Fault State */
    vuint16_t PWMBFS:2;                /* PWMB Fault State */
    vuint16_t PWMXFS:2;                /* PWMX Fault State */
  } B;
} FLEXPWM_SUB_OCTRL_tag;

typedef union FLEXPWM_SUB_STS_union_tag { /* Submodule n Status */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:1;
    vuint16_t RUF:1;                   /* Registers Updated Flag */
    vuint16_t REF:1;                   /* Reload Error Flag */
    vuint16_t RF:1;                    /* Reload Flag */
    vuint16_t _unused_4:4;
    vuint16_t CFX1:1;                  /* Capture Flag X1 */
    vuint16_t CFX0:1;                  /* Capture Flag X0 */
    vuint16_t CMPF:6;                  /* Compare Flags */
  } B;
} FLEXPWM_SUB_STS_tag;

typedef union FLEXPWM_SUB_INTEN_union_tag { /* Submodule n Interrupt Enable */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:2;
    vuint16_t REIE:1;                  /* Reload Error Interrupt Enable */
    vuint16_t RIE:1;                   /* Reload Interrupt Enable */
    vuint16_t _unused_4:4;
    vuint16_t CX1IE:1;                 /* Capture X1 Interrupt Enable */
    vuint16_t CX0IE:1;                 /* Capture X0 Interrupt Enable */
    vuint16_t CMPIE:6;                 /* Compare Interrupt Enables */
  } B;
} FLEXPWM_SUB_INTEN_tag;

typedef union FLEXPWM_SUB_DMAEN_union_tag { /* Submodule n DMA Enable */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:6;
    vuint16_t VALDE:1;                 /* Value Registers DMA Enable */
    vuint16_t FAND:1;                  /* FIFO Watermark AND Control */
    vuint16_t CAPTDE:2;                /* Capture DMA Enable Source Select */
    vuint16_t _unused_10:4;
    vuint16_t CX1DE:1;                 /* Capture X1 FIFO DMA Enable */
    vuint16_t CX0DE:1;                 /* Capture X0 FIFO DMA Enable */
  } B;
} FLEXPWM_SUB_DMAEN_tag;

typedef union FLEXPWM_SUB_TCTRL_union_tag { /* Submodule n Output Trigger Control */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:10;
    vuint16_t OUT_TRIG_EN:6;           /* Output Trigger Enables */
  } B;
} FLEXPWM_SUB_TCTRL_tag;

typedef union FLEXPWM_SUB_DISMAP_union_tag { /* Submodule n Fault Disable Mapping */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:4;
    vuint16_t DISX:4;                  /* PWMX Fault Disable Mask */
    vuint16_t DISB:4;                  /* PWMB Fault Disable Mask */
    vuint16_t DISA:4;                  /* PWMA Fault Disable Mask */
  } B;
} FLEXPWM_SUB_DISMAP_tag;

typedef union FLEXPWM_SUB_DTCNT0_union_tag { /* Submodule n Dead Time Count 0 */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:5;
    vuint16_t DTCNT0:11;               /* Dead Time Control 0 */
  } B;
} FLEXPWM_SUB_DTCNT0_tag;

typedef union FLEXPWM_SUB_DTCNT1_union_tag { /* Submodule n Dead Time Count 1 */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:5;
    vuint16_t DTCNT1:11;               /* Dead Time Control 1 */
  } B;
} FLEXPWM_SUB_DTCNT1_tag;

typedef union FLEXPWM_SUB_CAPTCTRLX_union_tag { /* Submodule n Capture Control X */
  vuint16_t R;
  struct {
    vuint16_t CX1CNT:3;                /* Capture X1 FIFO Word Count */
    vuint16_t CX0CNT:3;                /* Capture X0 FIFO Word Count */
    vuint16_t CFXWM:2;                 /* Capture X FIFOs Watermark */
    vuint16_t EDGCNTX_EN:1;            /* Edge Counter X Enable */
    vuint16_t INPSELX:1;               /* Input Select X */
    vuint16_t EDGX1:2;                 /* Edge X1 */
    vuint16_t EDGX0:2;                 /* Edge X0 */
    vuint16_t ONESHOTX:1;              /* One-Shot Mode Aux */
    vuint16_t ARMX:1;                  /* Arm X */
  } B;
} FLEXPWM_SUB_CAPTCTRLX_tag;

typedef union FLEXPWM_SUB_CAPTCMPX_union_tag { /* Submodule n Capture Compare X */
  vuint16_t R;
  struct {
    vuint16_t EDGCNTX:8;               /* Edge Counter X */
    vuint16_t EDGCMPX:8;               /* Edge Compare X */
  } B;
} FLEXPWM_SUB_CAPTCMPX_tag;

typedef union FLEXPWM_SUB_CVAL0_union_tag { /* Submodule n Capture Value 0 */
  vuint16_t R;
  struct {
    vuint16_t CAPTVAL0:16;             /* Capture Value 0 */
  } B;
} FLEXPWM_SUB_CVAL0_tag;

typedef union FLEXPWM_SUB_CVAL0CYC_union_tag { /* Submodule n Capture Value 0 Cycle */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:13;
    vuint16_t CVAL0CYC:3;              /* CVAL0 Cycle */
  } B;
} FLEXPWM_SUB_CVAL0CYC_tag;

typedef union FLEXPWM_SUB_CVAL1_union_tag { /* Submodule n Capture Value 1 */
  vuint16_t R;
  struct {
    vuint16_t CAPTVAL1:16;             /* Capture Value 1 */
  } B;
} FLEXPWM_SUB_CVAL1_tag;

typedef union FLEXPWM_SUB_CVAL1CYC_union_tag { /* Submodule n Capture Value 1 Cycle */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:13;
    vuint16_t CVAL1CYC:3;              /* Capture Value 1 Cycle */
  } B;
} FLEXPWM_SUB_CVAL1CYC_tag;

typedef struct FLEXPWM_SUB_struct_tag {
  FLEXPWM_SUB_CNT_tag CNT;             /* Submodule n Counter */
  FLEXPWM_SUB_INIT_tag INIT;           /* Submodule n Initial Count */
  FLEXPWM_SUB_CTRL2_tag CTRL2;         /* Submodule n Control 2 */
  FLEXPWM_SUB_CTRL1_tag CTRL1;         /* Submodule n Control 1 */
  FLEXPWM_SUB_VAL0_tag VAL0;           /* Submodule n Value 0 */
  FLEXPWM_SUB_VAL1_tag VAL1;           /* Submodule n Value 1 */
  FLEXPWM_SUB_VAL2_tag VAL2;           /* Submodule n Value 2 */
  FLEXPWM_SUB_VAL3_tag VAL3;           /* Submodule n Value 3 */
  FLEXPWM_SUB_VAL4_tag VAL4;           /* Submodule n Value 4 */
  FLEXPWM_SUB_VAL5_tag VAL5;           /* Submodule n Value 5 */
  uint8_t SUB_reserved0[4];
  FLEXPWM_SUB_OCTRL_tag OCTRL;         /* Submodule n Output Control */
  FLEXPWM_SUB_STS_tag STS;             /* Submodule n Status */
  FLEXPWM_SUB_INTEN_tag INTEN;         /* Submodule n Interrupt Enable */
  FLEXPWM_SUB_DMAEN_tag DMAEN;         /* Submodule n DMA Enable */
  FLEXPWM_SUB_TCTRL_tag TCTRL;         /* Submodule n Output Trigger Control */
  FLEXPWM_SUB_DISMAP_tag DISMAP;       /* Submodule n Fault Disable Mapping */
  FLEXPWM_SUB_DTCNT0_tag DTCNT0;       /* Submodule n Dead Time Count 0 */
  FLEXPWM_SUB_DTCNT1_tag DTCNT1;       /* Submodule n Dead Time Count 1 */
  uint8_t SUB_reserved1[8];
  FLEXPWM_SUB_CAPTCTRLX_tag CAPTCTRLX; /* Submodule n Capture Control X */
  FLEXPWM_SUB_CAPTCMPX_tag CAPTCMPX;   /* Submodule n Capture Compare X */
  FLEXPWM_SUB_CVAL0_tag CVAL0;         /* Submodule n Capture Value 0 */
  FLEXPWM_SUB_CVAL0CYC_tag CVAL0CYC;   /* Submodule n Capture Value 0 Cycle */
  FLEXPWM_SUB_CVAL1_tag CVAL1;         /* Submodule n Capture Value 1 */
  FLEXPWM_SUB_CVAL1CYC_tag CVAL1CYC;   /* Submodule n Capture Value 1 Cycle */
  uint8_t SUB_reserved2[20];
} FLEXPWM_SUB_tag;

typedef union FLEXPWM_OUTEN_union_tag { /* Output Enable */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:4;
    vuint16_t PWMA_EN:4;               /* PWMA Output Enables */
    vuint16_t PWMB_EN:4;               /* PWMB Output Enables */
    vuint16_t PWMX_EN:4;               /* PWMX Output Enables */
  } B;
} FLEXPWM_OUTEN_tag;

typedef union FLEXPWM_MASK_union_tag { /* Mask */
  vuint16_t R;
  struct {
    vuint16_t UPDATE_MASK:4;           /* Update Mask */
    vuint16_t MASKA:4;                 /* PWMA Masks */
    vuint16_t MASKB:4;                 /* PWMB Masks */
    vuint16_t MASKX:4;                 /* PWMX Masks */
  } B;
} FLEXPWM_MASK_tag;

typedef union FLEXPWM_SWCOUT_union_tag { /* Software Controlled Output */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:8;
    vuint16_t OUT23_3:1;               /* Software Controlled Output 23_3 */
    vuint16_t OUT45_3:1;               /* Software Controlled Output 45_3 */
    vuint16_t OUT23_2:1;               /* Software Controlled Output 23_2 */
    vuint16_t OUT45_2:1;               /* Software Controlled Output 45_2 */
    vuint16_t OUT23_1:1;               /* Software Controlled Output 23_1 */
    vuint16_t OUT45_1:1;               /* Software Controlled Output 45_1 */
    vuint16_t OUT23_0:1;               /* Software Controlled Output 23_0 */
    vuint16_t OUT45_0:1;               /* Software Controlled Output 45_0 */
  } B;
} FLEXPWM_SWCOUT_tag;

typedef union FLEXPWM_DTSRCSEL_union_tag { /* Dead Time Source Select */
  vuint16_t R;
  struct {
    vuint16_t SEL23_3:2;               /* PWM23_3 Control Select */
    vuint16_t SEL45_3:2;               /* PWM45_3 Control Select */
    vuint16_t SEL23_2:2;               /* PWM23_2 Control Select */
    vuint16_t SEL45_2:2;               /* PWM45_2 Control Select */
    vuint16_t SEL23_1:2;               /* PWM23_1 Control Select */
    vuint16_t SEL45_1:2;               /* PWM45_1 Control Select */
    vuint16_t SEL23_0:2;               /* PWM23_0 Control Select */
    vuint16_t SEL45_0:2;               /* PWM45_0 Control Select */
  } B;
} FLEXPWM_DTSRCSEL_tag;

typedef union FLEXPWM_MCTRL_union_tag { /* Master Control */
  vuint16_t R;
  struct {
    vuint16_t IPOL:4;                  /* Current Polarity */
    vuint16_t RUN:4;                   /* Run */
    vuint16_t CLDOK:4;                 /* Clear Load Okay */
    vuint16_t LDOK:4;                  /* Load Okay */
  } B;
} FLEXPWM_MCTRL_tag;

typedef union FLEXPWM_FCTRL_union_tag { /* Fault Control */
  vuint16_t R;
  struct {
    vuint16_t FLVL:4;                  /* Fault Level */
    vuint16_t FAUTO:4;                 /* Automatic Fault Clearing */
    vuint16_t FSAFE:4;                 /* Fail Safe Mode */
    vuint16_t FIE:4;                   /* Fault Interrupt Enables */
  } B;
} FLEXPWM_FCTRL_tag;

typedef union FLEXPWM_FSTS_union_tag { /* Fault Status */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:3;
    vuint16_t FTEST:1;                 /* Fault Test */
    vuint16_t FFPIN:4;                 /* Filtered Fault Pins */
    vuint16_t FFULL:4;                 /* Full Cycle */
    vuint16_t FFLAG:4;                 /* Fault Flags */
  } B;
} FLEXPWM_FSTS_tag;

typedef union FLEXPWM_FFILT_union_tag { /* Fault Filter */
  vuint16_t R;
  struct {
    vuint16_t GSTR:1;                  /* Fault Glitch Stretch Enable */
    vuint16_t _unused_1:4;
    vuint16_t FILT_CNT:3;              /* Fault Filter Count */
    vuint16_t FILT_PER:8;              /* Fault Filter Period */
  } B;
} FLEXPWM_FFILT_tag;

typedef union FLEXPWM_FCTRL2_union_tag { /* Fault Control 2 */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:12;            /* Reserved */
    vuint16_t NOCOMB:4;                /* No Combinational Path */
  } B;
} FLEXPWM_FCTRL2_tag;

struct FLEXPWM_tag {
  FLEXPWM_SUB_tag SUB[4];
  FLEXPWM_OUTEN_tag OUTEN;             /* Output Enable */
  FLEXPWM_MASK_tag MASK;               /* Mask */
  FLEXPWM_SWCOUT_tag SWCOUT;           /* Software Controlled Output */
  FLEXPWM_DTSRCSEL_tag DTSRCSEL;       /* Dead Time Source Select */
  FLEXPWM_MCTRL_tag MCTRL;             /* Master Control */
  uint8_t FLEXPWM_reserved0[2];
  FLEXPWM_FCTRL_tag FCTRL;             /* Fault Control */
  FLEXPWM_FSTS_tag FSTS;               /* Fault Status */
  FLEXPWM_FFILT_tag FFILT;             /* Fault Filter */
  FLEXPWM_FCTRL2_tag FCTRL2;           /* Fault Control 2 */
};


/* ============================================================================
   =============================== Module: FR =================================
   ============================================================================ */

typedef union FR_MVR_union_tag {       /* Module Version */
  vuint16_t R;
  struct {
    vuint16_t CHIVER:8;                /* CHI Version Number */
    vuint16_t PEVER:8;                 /* PE Version Number */
  } B;
} FR_MVR_tag;

typedef union FR_MCR_union_tag {       /* Module Configuration */
  vuint16_t R;
  struct {
    vuint16_t MEN:1;                   /* Module Enable */
    vuint16_t SBFF:1;                  /* System Bus Failure Freeze */
    vuint16_t SCM:1;                   /* Single Channel Device Mode */
    vuint16_t CHB:1;                   /* Channel B Enable */
    vuint16_t CHA:1;                   /* Channel A Enable */
    vuint16_t SFFE:1;                  /* Synchronization Frame Filter Enable */
    vuint16_t ECCE:1;                  /* ECC Functionality Enable */
    vuint16_t _unused_7:1;             /* Reserved */
    vuint16_t FUM:1;                   /* FIFO Update Mode */
    vuint16_t FAM:1;                   /* FIFO Address Mode */
    vuint16_t _unused_10:1;
    vuint16_t _unused_11:1;
    vuint16_t BITRATE:3;               /* FlexRay Bus Bit Rate */
    vuint16_t _unused_15:1;
  } B;
} FR_MCR_tag;

typedef union FR_SYMBADHR_union_tag {  /* System Memory Base Address High */
  vuint16_t R;
  struct {
    vuint16_t SMBA:16;                 /* System Memory Base Address High */
  } B;
} FR_SYMBADHR_tag;

typedef union FR_SYMBADLR_union_tag {  /* System Memory Base Address Low */
  vuint16_t R;
  struct {
    vuint16_t SMBA:12;                 /* System Memory Base Address Low */
    vuint16_t _unused_12:4;
  } B;
} FR_SYMBADLR_tag;

typedef union FR_STBSCR_union_tag {    /* Strobe Signal Control */
  vuint16_t R;
  struct {
    vuint16_t WMD:1;                   /* Write Mode */
    vuint16_t _unused_1:3;
    vuint16_t SEL:4;                   /* Strobe Signal Select */
    vuint16_t _unused_8:3;
    vuint16_t ENB:1;                   /* Strobe Signal Enable */
    vuint16_t _unused_12:2;
    vuint16_t STBPSEL:2;               /* Strobe Port Select */
  } B;
} FR_STBSCR_tag;

typedef union FR_MBDSR_union_tag {     /* MB Data Size */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:1;
    vuint16_t MBSEG2DS:7;              /* Message Buffer Segment 2 Data Size */
    vuint16_t _unused_8:1;             /* Reserved */
    vuint16_t MBSEG1DS:7;              /* Message Buffer Segment 1 Data Size */
  } B;
} FR_MBDSR_tag;

typedef union FR_MBSSUTR_union_tag {   /* MB Segment Size and Utilization */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:1;
    vuint16_t LAST_MB_SEG1:7;          /* Last MB In Segment 1 */
    vuint16_t _unused_8:1;
    vuint16_t LAST_MB_UTIL:7;          /* Last Message Buffer Utilized */
  } B;
} FR_MBSSUTR_tag;

typedef union FR_PEDRAR_union_tag {    /* PE DRAM Access */
  vuint16_t R;
  struct {
    vuint16_t INST:4;                  /* PE DRAM Access Instruction */
    vuint16_t ADDR:11;                 /* PE DRAM Access Address */
    vuint16_t DAD:1;                   /* PE DRAM Access Done */
  } B;
} FR_PEDRAR_tag;

typedef union FR_PEDRDR_union_tag {    /* PE DRAM Data */
  vuint16_t R;
  struct {
    vuint16_t DATA:16;                 /* Data To Or From PE DRAM */
  } B;
} FR_PEDRDR_tag;

typedef union FR_POCR_union_tag {      /* Protocol Operation Control Register */
  vuint16_t R;
  struct {
    vuint16_t WME:1;                   /* Write Mode External Correction */
    vuint16_t _unused_1:3;
    vuint16_t EOC_AP:2;                /* External Offset Correction Application */
    vuint16_t ERC_AP:2;                /* External Rate Correction Application */
    vuint16_t BSY_WMC:1;               /* Protocol Control Command Busy Or Command Write */
    vuint16_t _unused_9:3;
    vuint16_t POCCMD:4;                /* Protocol Control Command */
  } B;
} FR_POCR_tag;

typedef union FR_GIFER_union_tag {     /* Global Interrupt Flag And Enable */
  vuint16_t R;
  struct {
    vuint16_t MIF:1;                   /* Module Interrupt Flag */
    vuint16_t PRIF:1;                  /* Protocol Interrupt Flag */
    vuint16_t CHIF:1;                  /* CHI Interrupt Flag */
    vuint16_t WUPIF:1;                 /* Wakeup Interrupt Flag */
    vuint16_t FAFBIF:1;                /* Receive FIFO Channel B Almost Full Interrupt Flag */
    vuint16_t FAFAIF:1;                /* Receive FIFO Channel A Almost Full Interrupt Flag */
    vuint16_t RBIF:1;                  /* Receive Message Buffer Interrupt Flag */
    vuint16_t TBIF:1;                  /* Transmit Message Buffer Interrupt Flag */
    vuint16_t MIE:1;                   /* Module Interrupt Enable */
    vuint16_t PRIE:1;                  /* Protocol Interrupt Enable */
    vuint16_t CHIE:1;                  /* CHI Interrupt Enable */
    vuint16_t WUPIE:1;                 /* Wakeup Interrupt Enable */
    vuint16_t FAFBIE:1;                /* Receive FIFO Channel B Almost Full Interrupt Enable */
    vuint16_t FAFAIE:1;                /* Receive FIFO Channel A Almost Full Interrupt Enable */
    vuint16_t RBIE:1;                  /* Receive Message Buffer Interrupt Enable */
    vuint16_t TBIE:1;                  /* Transmit Message Buffer Interrupt Enable */
  } B;
} FR_GIFER_tag;

typedef union FR_PIFR0_union_tag {     /* Protocol Interrupt Flag 0 */
  vuint16_t R;
  struct {
    vuint16_t FATL_IF:1;               /* Fatal Protocol Error Interrupt Flag */
    vuint16_t INTL_IF:1;               /* Internal Protocol Error Interrupt Flag */
    vuint16_t ILCF_IF:1;               /* Illegal Protocol Configuration Interrupt Flag */
    vuint16_t CSA_IF:1;                /* Cold Start Abort Interrupt Flag */
    vuint16_t MRC_IF:1;                /* Missing Rate Correction Interrupt Flag */
    vuint16_t MOC_IF:1;                /* Missing Offset Correction Interrupt Flag */
    vuint16_t CCL_IF:1;                /* Clock Correction Limit Reached Interrupt Flag */
    vuint16_t MXS_IF:1;                /* Max Sync Frames Detected Interrupt Flag */
    vuint16_t MTX_IF:1;                /* Media Access Test Symbol Received Interrupt Flag */
    vuint16_t LTXB_IF:1;               /* pLatestTx Violation on Channel B Interrupt Flag */
    vuint16_t LTXA_IF:1;               /* pLatestTx Violation on Channel A Interrupt Flag */
    vuint16_t TBVB_IF:1;               /* Transmission Across Boundary On Channel B Interrupt Flag */
    vuint16_t TBVA_IF:1;               /* Transmission Across Boundary On Channel A Interrupt Flag */
    vuint16_t TI2_IF:1;                /* Timer 2 Expired Interrupt Flag */
    vuint16_t TI1_IF:1;                /* Timer 1 Expired Interrupt Flag */
    vuint16_t CYS_IF:1;                /* Cycle Start Interrupt Flag */
  } B;
} FR_PIFR0_tag;

typedef union FR_PIFR1_union_tag {     /* Protocol Interrupt Flag 1 */
  vuint16_t R;
  struct {
    vuint16_t EMC_IF:1;                /* Error Mode Changed Interrupt Flag */
    vuint16_t IPC_IF:1;                /* Illegal Protocol Control Command Interrupt Flag */
    vuint16_t PECF_IF:1;               /* PE Communication Failure Interrupt Flag */
    vuint16_t PSC_IF:1;                /* Protocol State Changed Interrupt Flag */
    vuint16_t SSI3_IF:1;               /* Slot Status Counter Incremented Interrupt Flag 3 */
    vuint16_t SSI2_IF:1;               /* Slot Status Counter Incremented Interrupt Flag 2 */
    vuint16_t SSI1_IF:1;               /* Slot Status Counter Incremented Interrupt Flag 1 */
    vuint16_t SSI0_IF:1;               /* Slot Status Counter Incremented Interrupt Flag 0 */
    vuint16_t _unused_8:2;
    vuint16_t EVT_IF:1;                /* Even Cycle Table Written Interrupt Flag */
    vuint16_t ODT_IF:1;                /* Odd Cycle Table Written Interrupt Flag */
    vuint16_t _unused_12:4;
  } B;
} FR_PIFR1_tag;

typedef union FR_PIER0_union_tag {     /* Protocol Interrupt Enable 0 */
  vuint16_t R;
  struct {
    vuint16_t FATL_IE:1;               /* Fatal Protocol Error Interrupt Enable */
    vuint16_t INTL_IE:1;               /* Internal Protocol Error Interrupt Enable */
    vuint16_t ILCF_IE:1;               /* Illegal Protocol Configuration Interrupt Enable */
    vuint16_t CSA_IE:1;                /* Cold Start Abort Interrupt Enable */
    vuint16_t MRC_IE:1;                /* Missing Rate Correction Interrupt Enable */
    vuint16_t MOC_IE:1;                /* Missing Offset Correction Interrupt Enable */
    vuint16_t CCL_IE:1;                /* Clock Correction Limit Reached Interrupt Enable */
    vuint16_t MXS_IE:1;                /* Max Sync Frames Detected Interrupt Enable */
    vuint16_t MTX_IE:1;                /* Media Access Test Symbol Received Interrupt Enable */
    vuint16_t LTXB_IE:1;               /* pLatestTx Violation on Channel B Interrupt Enable */
    vuint16_t LTXA_IE:1;               /* pLatestTx Violation On Channel A Interrupt Enable */
    vuint16_t TBVB_IE:1;               /* Transmission Across Boundary On Channel B Interrupt Enable */
    vuint16_t TBVA_IE:1;               /* Transmission Across Boundary On Channel A Interrupt Enable */
    vuint16_t TI2_IE:1;                /* Timer 2 Expired Interrupt Enable */
    vuint16_t TI1_IE:1;                /* Timer 1 Expired Interrupt Enable */
    vuint16_t CYS_IE:1;                /* Cycle Start Interrupt Enable */
  } B;
} FR_PIER0_tag;

typedef union FR_PIER1_union_tag {     /* Protocol Interrupt Enable 1 */
  vuint16_t R;
  struct {
    vuint16_t EMC_IE:1;                /* Error Mode Changed Interrupt Enable */
    vuint16_t IPC_IE:1;                /* Illegal Protocol Control Command Interrupt Enable */
    vuint16_t PECF_IE:1;               /* PE Communication Failure Interrupt Enable */
    vuint16_t PSC_IE:1;                /* Protocol State Changed Interrupt Enable */
    vuint16_t SSI3_IE:1;               /* Slot Status Counter Incremented Interrupt Enable */
    vuint16_t SSI2_IE:1;               /* Slot Status Counter Incremented Interrupt Enable */
    vuint16_t SSI1_IE:1;               /* Slot Status Counter Incremented Interrupt Enable */
    vuint16_t SSI0_IE:1;               /* Slot Status Counter Incremented Interrupt Enable */
    vuint16_t _unused_8:2;
    vuint16_t EVT_IE:1;                /* Even Cycle Table Written Interrupt Enable */
    vuint16_t ODT_IE:1;                /* Odd Cycle Table Written Interrupt Enable */
    vuint16_t _unused_12:4;
  } B;
} FR_PIER1_tag;

typedef union FR_CHIERFR_union_tag {   /* CHI Error Flag */
  vuint16_t R;
  struct {
    vuint16_t FRLB_EF:1;               /* Frame Lost Channel B Error Flag */
    vuint16_t FRLA_EF:1;               /* Frame Lost Channel A Error Flag */
    vuint16_t PCMI_EF:1;               /* Protocol Command Ignored Error Flag */
    vuint16_t FOVB_EF:1;               /* Receive FIFO Overrun Channel B Error Flag */
    vuint16_t FOVA_EF:1;               /* Receive FIFO Overrun Channel A Error Flag */
    vuint16_t MBS_EF:1;                /* Message Buffer Search Error Flag */
    vuint16_t MBU_EF:1;                /* MB Usage Error Flag */
    vuint16_t LCK_EF:1;                /* Lock Error Flag */
    vuint16_t _unused_8:1;
    vuint16_t SBCF_EF:1;               /* System Bus Communication Failure Error Flag */
    vuint16_t FID_EF:1;                /* Frame ID Error Flag */
    vuint16_t DPL_EF:1;                /* Dynamic Payload Length Error Flag */
    vuint16_t SPL_EF:1;                /* Static Payload Length Error Flag */
    vuint16_t NML_EF:1;                /* Network Management Length Error Flag */
    vuint16_t NMF_EF:1;                /* Network Management Frame Error Flag */
    vuint16_t ILSA_EF:1;               /* Illegal System Bus Address Error Flag */
  } B;
} FR_CHIERFR_tag;

typedef union FR_MBIVEC_union_tag {    /* Message Buffer Interrupt Vector */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:1;
    vuint16_t TBIVEC:7;                /* Transmit Buffer Interrupt Vector */
    vuint16_t _unused_8:1;
    vuint16_t RBIVEC:7;                /* Receive Buffer Interrupt Vector */
  } B;
} FR_MBIVEC_tag;

typedef union FR_CASERCR_union_tag {   /* Channel A Status Error Counter Register */
  vuint16_t R;
  struct {
    vuint16_t CHAERSCNT:16;            /* Channel A Status Error Counter */
  } B;
} FR_CASERCR_tag;

typedef union FR_CBSERCR_union_tag {   /* Channel B Status Error Counter */
  vuint16_t R;
  struct {
    vuint16_t CHBERSCNT:16;            /* Channel B Status Error Counter */
  } B;
} FR_CBSERCR_tag;

typedef union FR_PSR0_union_tag {      /* Protocol Status 0 */
  vuint16_t R;
  struct {
    vuint16_t ERRMODE:2;               /* Error Mode */
    vuint16_t SLOTMODE:2;              /* Slot Mode */
    vuint16_t _unused_4:1;
    vuint16_t PROTSTATE:3;             /* Protocol State */
    vuint16_t STARTUPSTATE:4;          /* Startup State */
    vuint16_t _unused_12:1;
    vuint16_t WAKEUPSTATUS:3;          /* Wakeup Status */
  } B;
} FR_PSR0_tag;

typedef union FR_PSR1_union_tag {      /* Protocol Status 1 */
  vuint16_t R;
  struct {
    vuint16_t CSAA:1;                  /* Cold Start Attempt Aborted Flag */
    vuint16_t CSP:1;                   /* Leading Cold Start Path */
    vuint16_t _unused_2:1;
    vuint16_t REMCSAT:5;               /* Remaining Coldstart Attempts */
    vuint16_t CPN:1;                   /* Leading Cold Start Path Noise */
    vuint16_t HHR:1;                   /* Host Halt Request Pending */
    vuint16_t FRZ:1;                   /* Freeze Occurred */
    vuint16_t APTAC:5;                 /* Allow Passive To Active Counter */
  } B;
} FR_PSR1_tag;

typedef union FR_PSR2_union_tag {      /* Protocol Status Register 2 */
  vuint16_t R;
  struct {
    vuint16_t NBVB:1;                  /* NIT Boundary Violation On Channel B */
    vuint16_t NSEB:1;                  /* NIT Syntax Error On Channel B */
    vuint16_t STCB:1;                  /* Symbol Window Transmit Conflict On Channel B */
    vuint16_t SBVB:1;                  /* Symbol Window Boundary Violation On Channel B */
    vuint16_t SSEB:1;                  /* Symbol Window Syntax Error On Channel B */
    vuint16_t MTB:1;                   /* MTS Received On Channel B */
    vuint16_t NBVA:1;                  /* NIT Boundary Violation On Channel A */
    vuint16_t NSEA:1;                  /* NIT Syntax Error On Channel A */
    vuint16_t STCA:1;                  /* Symbol Window Transmit Conflict On Channel A */
    vuint16_t SBVA:1;                  /* Symbol Window Boundary Violation On Channel A */
    vuint16_t SSEA:1;                  /* Symbol Window Syntax Error On Channel A */
    vuint16_t MTA:1;                   /* MTS Received On Channel A */
    vuint16_t CKCORFCNT:4;             /* Clock Correction Failed Counter */
  } B;
} FR_PSR2_tag;

typedef union FR_PSR3_union_tag {      /* Protocol Status 3 */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:2;
    vuint16_t WUB:1;                   /* Wakeup Symbol Received On Channel B */
    vuint16_t ABVB:1;                  /* Aggregated Boundary Violation On Channel B */
    vuint16_t AACB:1;                  /* Aggregated Additional Communication On Channel B */
    vuint16_t ACEB:1;                  /* Aggregated Content Error On Channel B */
    vuint16_t ASEB:1;                  /* Aggregated Syntax Error On Channel B */
    vuint16_t AVFB:1;                  /* Aggregated Valid Frame On Channel B */
    vuint16_t _unused_8:2;
    vuint16_t WUA:1;                   /* Wakeup Symbol Received On Channel A */
    vuint16_t ABVA:1;                  /* Aggregated Boundary Violation On Channel A */
    vuint16_t AACA:1;                  /* Aggregated Additional Communication On Channel A */
    vuint16_t ACEA:1;                  /* Aggregated Content Error On Channel A */
    vuint16_t ASEA:1;                  /* Aggregated Syntax Error On Channel A */
    vuint16_t AVFA:1;                  /* Aggregated Valid Frame On Channel A */
  } B;
} FR_PSR3_tag;

typedef union FR_MTCTR_union_tag {     /* MT Counter */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:2;
    vuint16_t MTCT:14;                 /* MT Counter */
  } B;
} FR_MTCTR_tag;

typedef union FR_CYCTR_union_tag {     /* Cycle Counter */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:10;
    vuint16_t CYCCNT:6;                /* Cycle Counter */
  } B;
} FR_CYCTR_tag;

typedef union FR_SLTCTAR_union_tag {   /* Slot Counter Channel A */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:5;
    vuint16_t SLOTCNTA:11;             /* Slot Counter Value For Channel A */
  } B;
} FR_SLTCTAR_tag;

typedef union FR_SLTCTBR_union_tag {   /* Slot Counter Channel B */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:5;
    vuint16_t SLOTCNTB:11;             /* Slot Counter Value For Channel B */
  } B;
} FR_SLTCTBR_tag;

typedef union FR_RTCORVR_union_tag {   /* Rate Correction Value */
  vuint16_t R;
  struct {
    vuint16_t RATECORR:16;             /* Rate Correction Value */
  } B;
} FR_RTCORVR_tag;

typedef union FR_OFCORVR_union_tag {   /* Offset Correction Value */
  vuint16_t R;
  struct {
    vuint16_t OFFSETCORR:16;           /* Offset Correction Value */
  } B;
} FR_OFCORVR_tag;

typedef union FR_CIFR_union_tag {      /* Combined Interrupt Flag */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:8;
    vuint16_t MIF:1;                   /* Module Interrupt Flag */
    vuint16_t PRIF:1;                  /* Protocol Interrupt Flag */
    vuint16_t CHIF:1;                  /* CHI Interrupt Flag */
    vuint16_t WUPIF:1;                 /* Wakeup Interrupt Flag */
    vuint16_t FAFBIF:1;                /* Receive FIFO Channel B Almost Full Interrupt Flag */
    vuint16_t FAFAIF:1;                /* Receive FIFO Channel A Almost Full Interrupt Flag */
    vuint16_t RBIF:1;                  /* Receive Message Buffer Interrupt Flag */
    vuint16_t TBIF:1;                  /* Transmit MB Interrupt Flag */
  } B;
} FR_CIFR_tag;

typedef union FR_SYMATOR_union_tag {   /* System Memory Access Timeout */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:8;
    vuint16_t TIMEOUT:8;               /* System Memory Access Timeout */
  } B;
} FR_SYMATOR_tag;

typedef union FR_SFCNTR_union_tag {    /* Sync Frame Counter */
  vuint16_t R;
  struct {
    vuint16_t SFEVB:4;                 /* Sync Frames Channel B, Even Cycle */
    vuint16_t SFEVA:4;                 /* Sync Frames Channel A, Even Cycle */
    vuint16_t SFODB:4;                 /* Sync Frames Channel B, Odd cycle */
    vuint16_t SFODA:4;                 /* Sync Frames Channel A, Odd Cycle */
  } B;
} FR_SFCNTR_tag;

typedef union FR_SFTOR_union_tag {     /* Sync Frame Table Offset */
  vuint16_t R;
  struct {
    vuint16_t SFT_OFFSET:15;           /* Sync Frame Table Offset */
    vuint16_t _unused_15:1;
  } B;
} FR_SFTOR_tag;

typedef union FR_SFTCCSR_union_tag {   /* Sync Frame Table Configuration Control Status */
  vuint16_t R;
  struct {
    vuint16_t ELKT:1;                  /* Even Cycle Tables Lock/Unlock Trigger */
    vuint16_t OLKT:1;                  /* Odd Cycle Tables Lock And Unlock Trigger */
    vuint16_t CYCNUM:6;                /* Cycle Number */
    vuint16_t ELKS:1;                  /* Even Cycle Tables Lock Status */
    vuint16_t OLKS:1;                  /* Odd Cycle Tables Lock Status */
    vuint16_t EVAL:1;                  /* Even Cycle Tables Valid */
    vuint16_t OVAL:1;                  /* Odd Cycle Tables Valid */
    vuint16_t _unused_12:1;
    vuint16_t OPT:1;                   /* One Pair Trigger */
    vuint16_t SDVEN:1;                 /* Sync Frame Deviation Table Enable */
    vuint16_t SIDEN:1;                 /* Sync Frame ID Table Enable */
  } B;
} FR_SFTCCSR_tag;

typedef union FR_SFIDRFR_union_tag {   /* Sync Frame ID Rejection Filter */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:6;
    vuint16_t SYNFRID:10;              /* Sync Frame Rejection ID */
  } B;
} FR_SFIDRFR_tag;

typedef union FR_SFIDAFVR_union_tag {  /* Sync Frame ID Acceptance Filter Value */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:6;
    vuint16_t FVAL:10;                 /* Filter Value */
  } B;
} FR_SFIDAFVR_tag;

typedef union FR_SFIDAFMR_union_tag {  /* Sync Frame ID Acceptance Filter Mask */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:6;
    vuint16_t FMSK:10;                 /* Filter Mask */
  } B;
} FR_SFIDAFMR_tag;

typedef union FR_NMVR_union_tag {      /* NMV 0 */
  vuint16_t R;
  struct {
    vuint16_t NMVP:16;                 /* NMV Part */
  } B;
} FR_NMVR_tag;

typedef union FR_NMVLR_union_tag {     /* Network Management Vector Length Register */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:12;            /* Reserved */
    vuint16_t NMVL:4;                  /* Network Management Vector Length */
  } B;
} FR_NMVLR_tag;

typedef union FR_TICCR_union_tag {     /* Timer Configuration And Control */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:2;
    vuint16_t T2_CFG:1;                /* Timer T2 Configuration */
    vuint16_t T2_REP:1;                /* Timer T2 Repetitive Mode */
    vuint16_t _unused_4:1;
    vuint16_t T2SP:1;                  /* Timer T2 Stop */
    vuint16_t T2TR:1;                  /* Timer T2 Trigger */
    vuint16_t T2ST:1;                  /* Timer T2 State */
    vuint16_t _unused_8:3;
    vuint16_t T1_REP:1;                /* Timer T1 Repetitive Mode */
    vuint16_t _unused_12:1;
    vuint16_t T1SP:1;                  /* Timer T1 Stop */
    vuint16_t T1TR:1;                  /* Timer T1 Trigger */
    vuint16_t T1ST:1;                  /* Timer T1 State */
  } B;
} FR_TICCR_tag;

typedef union FR_TI1CYSR_union_tag {   /* Timer 1 Cycle Set Register */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:2;
    vuint16_t T1_CYC_VAL:6;            /* Timer T1 Cycle Filter Value */
    vuint16_t _unused_8:2;
    vuint16_t T1_CYC_MSK:6;            /* Timer T1 Cycle Filter Mask */
  } B;
} FR_TI1CYSR_tag;

typedef union FR_TI1MTOR_union_tag {   /* Timer 1 MT Offset */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:2;
    vuint16_t T1_MTOFFSET:14;          /* Timer 1 MT Offset */
  } B;
} FR_TI1MTOR_tag;

typedef union FR_TI2CR0_ABS_union_tag { /* Timer 2 Configuration 0 (Absolute Timer Configuration) */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:2;             /* Reserved */
    vuint16_t T2CYCVAL:6;              /* Timer T2 Cycle Filter Mask */
    vuint16_t _unused_8:2;             /* Reserved */
    vuint16_t T2CYCMSK:6;              /* Timer T2 Cycle Filter Mask */
  } B;
} FR_TI2CR0_ABS_tag;

typedef union FR_TI2CR0_REL_union_tag { /* Timer 2 Configuration 0 (Relative Timer Configuration) */
  vuint16_t R;
  struct {
    vuint16_t T2MTCNT:16;              /* Timer T2 MT High Word */
  } B;
} FR_TI2CR0_REL_tag;

typedef union FR_TI2CR0_union_tag {
  FR_TI2CR0_ABS_tag ABS;               /* Timer 2 Configuration 0 (Absolute Timer Configuration) */
  FR_TI2CR0_REL_tag REL;               /* Timer 2 Configuration 0 (Relative Timer Configuration) */
} FR_TI2CR0_tag;

typedef union FR_TI2CR1_ABS_union_tag { /* Timer 2 Configuration 1 (Absolute Timer Configuration) */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:2;             /* Reserved */
    vuint16_t T2MOFF:14;               /* Timer T2 MT Offset */
  } B;
} FR_TI2CR1_ABS_tag;

typedef union FR_TI2CR1_REL_union_tag { /* Timer 2 Configuration 1 (Relative Timer Configuration) */
  vuint16_t R;
  struct {
    vuint16_t T2MTCNT:16;              /* Timer T2 Macrotick Low Word */
  } B;
} FR_TI2CR1_REL_tag;

typedef union FR_TI2CR1_union_tag {
  FR_TI2CR1_ABS_tag ABS;               /* Timer 2 Configuration 1 (Absolute Timer Configuration) */
  FR_TI2CR1_REL_tag REL;               /* Timer 2 Configuration 1 (Relative Timer Configuration) */
} FR_TI2CR1_tag;

typedef union FR_SSSR_union_tag {      /* Slot Status Selection */
  vuint16_t R;
  struct {
    vuint16_t WMD:1;                   /* Write Mode */
    vuint16_t _unused_1:1;
    vuint16_t SEL:2;                   /* Selector */
    vuint16_t _unused_4:1;
    vuint16_t SLOTNUMBER:11;           /* Slot Number */
  } B;
} FR_SSSR_tag;

typedef union FR_SSCCR_union_tag {     /* Slot Status Counter Condition */
  vuint16_t R;
  struct {
    vuint16_t WMD:1;                   /* Write Mode */
    vuint16_t _unused_1:1;
    vuint16_t SEL:2;                   /* Selector */
    vuint16_t _unused_4:1;
    vuint16_t CNTCFG:2;                /* Counter Configuration */
    vuint16_t MCY:1;                   /* Multi Cycle Selection */
    vuint16_t VFR:1;                   /* Valid Frame Restriction */
    vuint16_t SYF:1;                   /* Sync Frame Restriction */
    vuint16_t NUF:1;                   /* Null Frame Restriction */
    vuint16_t SUF:1;                   /* Startup Frame Restriction */
    vuint16_t STATUSMASK:4;            /* Slot Status Mask */
  } B;
} FR_SSCCR_tag;

typedef union FR_SSR_union_tag {       /* Slot Status */
  vuint16_t R;
  struct {
    vuint16_t VFB:1;                   /* Valid Frame On Channel B */
    vuint16_t SYB:1;                   /* Sync Frame Indicator Channel B */
    vuint16_t NFB:1;                   /* Null Frame Indicator Channel B */
    vuint16_t SUB:1;                   /* Startup Frame Indicator Channel B */
    vuint16_t SEB:1;                   /* Syntax Error On Channel B */
    vuint16_t CEB:1;                   /* Content Error On Channel B */
    vuint16_t BVB:1;                   /* Boundary Violation On Channel B */
    vuint16_t TCB:1;                   /* Transmission Conflict On Channel B */
    vuint16_t VFA:1;                   /* Valid Frame On Channel A */
    vuint16_t SYA:1;                   /* Sync Frame Indicator Channel A */
    vuint16_t NFA:1;                   /* Null Frame Indicator Channel A */
    vuint16_t SUA:1;                   /* Startup Frame Indicator Channel A */
    vuint16_t SEA:1;                   /* Syntax Error On Channel A */
    vuint16_t CEA:1;                   /* Content Error On Channel A */
    vuint16_t BVA:1;                   /* Boundary Violation On Channel A */
    vuint16_t TCA:1;                   /* Transmission Conflict On Channel A */
  } B;
} FR_SSR_tag;

typedef union FR_SSCR_union_tag {      /* Slot Status Counter */
  vuint16_t R;
  struct {
    vuint16_t SLOTSTATUSCNT:16;        /* Slot Status Counter */
  } B;
} FR_SSCR_tag;

typedef union FR_MTSACFR_union_tag {   /* MTS A Configuration */
  vuint16_t R;
  struct {
    vuint16_t MTE:1;                   /* MTS Transmission Enable */
    vuint16_t _unused_1:1;
    vuint16_t CYCCNTMSK:6;             /* Cycle Counter Mask */
    vuint16_t _unused_8:2;
    vuint16_t CYCCNTVAL:6;             /* Cycle Counter Value */
  } B;
} FR_MTSACFR_tag;

typedef union FR_MTSBCFR_union_tag {   /* MTS B Configuration */
  vuint16_t R;
  struct {
    vuint16_t MTE:1;                   /* MTS Transmission Enable */
    vuint16_t _unused_1:1;
    vuint16_t CYCCNTMSK:6;             /* Cycle Counter Mask */
    vuint16_t _unused_8:2;
    vuint16_t CYCCNTVAL:6;             /* Cycle Counter Value */
  } B;
} FR_MTSBCFR_tag;

typedef union FR_RSBIR_union_tag {     /* Receive Shadow Buffer Index */
  vuint16_t R;
  struct {
    vuint16_t WMD:1;                   /* Write Mode */
    vuint16_t _unused_1:1;
    vuint16_t SEL:2;                   /* Selector */
    vuint16_t _unused_4:4;
    vuint16_t RSBIDX:8;                /* RSBIDXA1/RSBIDXA2/RSBIDXB1/RSBIDXB2- Receive Shadow Buffer Index */
  } B;
} FR_RSBIR_tag;

typedef union FR_RFWMSR_union_tag {    /* Receive FIFO Watermark And Selection */
  vuint16_t R;
  struct {
    vuint16_t WM:8;                    /* WMA/WMB - Watermark */
    vuint16_t _unused_8:7;
    vuint16_t SEL:1;                   /* Select */
  } B;
} FR_RFWMSR_tag;

typedef union FR_RFSIR_union_tag {     /* Receive FIFO Start Index */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:6;
    vuint16_t SIDX:10;                 /* SIDXA Or SIDXB Start Index */
  } B;
} FR_RFSIR_tag;

typedef union FR_RFDSR_union_tag {     /* Receive FIFO Depth And Size */
  vuint16_t R;
  struct {
    vuint16_t FIFO_DEPTH:8;            /* FIFO_DEPTHA And FIFO_DEPTHB FIFO Depth */
    vuint16_t _unused_8:1;
    vuint16_t ENTRY_SIZE:7;            /* ENTRY_SIZEA Or ENTRY_SIZEB Entry Size */
  } B;
} FR_RFDSR_tag;

typedef union FR_RFARIR_union_tag {    /* Receive FIFO A Read Index */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:6;
    vuint16_t RDIDX:10;                /* Read Index */
  } B;
} FR_RFARIR_tag;

typedef union FR_RFBRIR_union_tag {    /* Receive FIFO B Read Index */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:6;
    vuint16_t RDIDX:10;                /* Read Index */
  } B;
} FR_RFBRIR_tag;

typedef union FR_RFMIDAFVR_union_tag { /* Receive FIFO Message ID Acceptance Filter Value */
  vuint16_t R;
  struct {
    vuint16_t MIDAFVAL:16;             /* MIDAFVALA Or MIDAFVALB Message ID Acceptance Filter Value */
  } B;
} FR_RFMIDAFVR_tag;

typedef union FR_RFMIDAFMR_union_tag { /* Receive FIFO Message ID Acceptance Filter Mask */
  vuint16_t R;
  struct {
    vuint16_t MIDAFMSK:16;             /* MIDAFMSKA Or MIDAFMSKB Message ID Acceptance Filter Mask */
  } B;
} FR_RFMIDAFMR_tag;

typedef union FR_RFFIDRFVR_union_tag { /* Receive FIFO Frame ID Rejection Filter Value */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:5;
    vuint16_t FIDRFVAL:11;             /* FIDRFVALA Or FIDRFVALB Frame ID Rejection Filter Value */
  } B;
} FR_RFFIDRFVR_tag;

typedef union FR_RFFIDRFMR_union_tag { /* Receive FIFO Frame ID Rejection Filter Mask */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:5;
    vuint16_t FIDRFMSK:11;             /* Frame ID Rejection Filter Mask */
  } B;
} FR_RFFIDRFMR_tag;

typedef union FR_RFRFCFR_union_tag {   /* Receive FIFO Range Filter Configuration */
  vuint16_t R;
  struct {
    vuint16_t WMD:1;                   /* Write Mode */
    vuint16_t IBD:1;                   /* Interval Boundary */
    vuint16_t SEL:2;                   /* Filter Selector */
    vuint16_t _unused_4:1;
    vuint16_t SID:11;                  /* Slot ID */
  } B;
} FR_RFRFCFR_tag;

typedef union FR_RFRFCTR_union_tag {   /* Receive FIFO Range Filter Control */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:4;
    vuint16_t F3MD:1;                  /* Range Filter 3 Mode */
    vuint16_t F2MD:1;                  /* Range Filter 2 Mode */
    vuint16_t F1MD:1;                  /* Range Filter 1 Mode */
    vuint16_t F0MD:1;                  /* Range Filter 0 Mode */
    vuint16_t _unused_8:4;
    vuint16_t F3EN:1;                  /* Range Filter 3 Enable */
    vuint16_t F2EN:1;                  /* Range Filter 2 Enable */
    vuint16_t F1EN:1;                  /* Range Filter 1 Enable */
    vuint16_t F0EN:1;                  /* Range Filter 0 Enable */
  } B;
} FR_RFRFCTR_tag;

typedef union FR_LDTXSLAR_union_tag {  /* Last Dynamic Transmit Slot Channel A */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:5;
    vuint16_t LDYNTXSLOTA:11;          /* Last Dynamic Transmission Slot Channel A */
  } B;
} FR_LDTXSLAR_tag;

typedef union FR_LDTXSLBR_union_tag {  /* Last Dynamic Transmit Slot Channel B */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:5;
    vuint16_t LDYNTXSLOTB:11;          /* Last Dynamic Transmission Slot Channel B */
  } B;
} FR_LDTXSLBR_tag;

typedef union FR_PCR0_union_tag {      /* Protocol Configuration 0 */
  vuint16_t R;
  struct {
    vuint16_t ACTION_POINT_OFFSET:6;   /* action_point_offset */
    vuint16_t STATIC_SLOT_LENGTH:10;   /* static_slot_length */
  } B;
} FR_PCR0_tag;

typedef union FR_PCR1_union_tag {      /* Protocol Configuration 1 */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:2;
    vuint16_t MACRO_AFTER_FIRST_STATIC_SLOT:14; /* macro_after_first_static_slot */
  } B;
} FR_PCR1_tag;

typedef union FR_PCR2_union_tag {      /* Protocol Configuration 2 */
  vuint16_t R;
  struct {
    vuint16_t MINISLOT_AFTER_ACTION_POINT:6; /* minislot_after_action_point */
    vuint16_t NUMBER_OF_STATIC_SLOTS:10; /* gNumberOfStaticSlots */
  } B;
} FR_PCR2_tag;

typedef union FR_PCR3_union_tag {      /* Protocol Configuration 3 */
  vuint16_t R;
  struct {
    vuint16_t WAKEUP_SYMBOL_RX_LOW:6;  /* wakeup_symbol_rx_low */
    vuint16_t MINISLOT_ACTION_POINT_OFFSET:5; /* minislot_action_point_offset */
    vuint16_t COLDSTART_ATTEMPTS:5;    /* coldstart_attempts */
  } B;
} FR_PCR3_tag;

typedef union FR_PCR4_union_tag {      /* Protocol Configuration 4 */
  vuint16_t R;
  struct {
    vuint16_t CAS_RX_LOW_MAX:7;        /* cas_rx_low_max */
    vuint16_t WAKEUP_SYMBOL_RX_WINDOW:9; /* wakeup_symbol_rx_window */
  } B;
} FR_PCR4_tag;

typedef union FR_PCR5_union_tag {      /* Protocol Configuration 5 */
  vuint16_t R;
  struct {
    vuint16_t TSS_TRANSMITTER:4;       /* tss_transmitter */
    vuint16_t WAKEUP_SYMBOL_TX_LOW:6;  /* wakeup_symbol_tx_low */
    vuint16_t WAKEUP_SYMBOL_RX_IDLE:6; /* wakeup_symbol_rx_idle */
  } B;
} FR_PCR5_tag;

typedef union FR_PCR6_union_tag {      /* Protocol Configuration 6 */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:1;
    vuint16_t SYMBOL_WINDOW_AFTER_ACTION_POINT:8; /* symbol_window_after_action_point */
    vuint16_t MACRO_INITIAL_OFFSET_A:7; /* macro_initial_offset_a */
  } B;
} FR_PCR6_tag;

typedef union FR_PCR7_union_tag {      /* Protocol Configuration 7 */
  vuint16_t R;
  struct {
    vuint16_t DECODING_CORRECTION_B:9; /* decoding_correction_b */
    vuint16_t MICRO_PER_MACRO_NOM_HALF:7; /* micro_per_macro_nom_half */
  } B;
} FR_PCR7_tag;

typedef union FR_PCR8_union_tag {      /* Protocol Configuration 8 */
  vuint16_t R;
  struct {
    vuint16_t MAX_WITHOUT_CLOCK_CORRECTION_FATAL:4; /* max_without_clock_correction_fatal */
    vuint16_t MAX_WITHOUT_CLOCK_CORRECTION_PASSIVE:4; /* max_without_clock_correction_passive */
    vuint16_t WAKEUP_SYMBOL_TX_IDLE:8; /* wakeup_symbol_tx_idle */
  } B;
} FR_PCR8_tag;

typedef union FR_PCR9_union_tag {      /* Protocol Configuration 9 */
  vuint16_t R;
  struct {
    vuint16_t MINISLOT_EXISTS:1;       /* minislot_exists */
    vuint16_t SYMBOL_WINDOW_EXISTS:1;  /* symbol_window_exists */
    vuint16_t OFFSET_CORRECTION_OUT:14; /* offset_correction_out */
  } B;
} FR_PCR9_tag;

typedef union FR_PCR10_union_tag {     /* Protocol Configuration 10 */
  vuint16_t R;
  struct {
    vuint16_t SINGLE_SLOT_ENABLED:1;   /* single_slot_enabled */
    vuint16_t WAKEUP_CHANNEL:1;        /* wakeup_channel */
    vuint16_t MACRO_PER_CYCLE:14;      /* macro_per_cycle */
  } B;
} FR_PCR10_tag;

typedef union FR_PCR11_union_tag {     /* Protocol Configuration 11 */
  vuint16_t R;
  struct {
    vuint16_t KEY_SLOT_USED_FOR_STARTUP:1; /* key_slot_used_for_startup */
    vuint16_t KEY_SLOT_USED_FOR_SYNC:1; /* key_slot_used_for_sync */
    vuint16_t OFFSET_CORRECTION_START:14; /* offset_correction_start */
  } B;
} FR_PCR11_tag;

typedef union FR_PCR12_union_tag {     /* Protocol Configuration 12 */
  vuint16_t R;
  struct {
    vuint16_t ALLOW_PASSIVE_TO_ACTIVE:5; /* allow_passive_to_active */
    vuint16_t KEY_SLOT_HEADER_CRC:11;  /* key_slot_header_crc */
  } B;
} FR_PCR12_tag;

typedef union FR_PCR13_union_tag {     /* Protocol Configuration 13 */
  vuint16_t R;
  struct {
    vuint16_t FIRST_MINISLOT_ACTION_POINT_OFFSET:6; /* first_minislot_action_point_offset */
    vuint16_t STATIC_SLOT_AFTER_ACTION_POINT:10; /* static_slot_after_action_point */
  } B;
} FR_PCR13_tag;

typedef union FR_PCR14_union_tag {     /* Protocol Configuration 14 */
  vuint16_t R;
  struct {
    vuint16_t RATE_CORRECTION_OUT:11;  /* rate_correction_out */
    vuint16_t LISTEN_TIMEOUT:5;        /* listen_timeout */
  } B;
} FR_PCR14_tag;

typedef union FR_PCR15_union_tag {     /* Protocol Configuration 15 */
  vuint16_t R;
  struct {
    vuint16_t LISTEN_TIMEOUT:16;       /* listen_timeout */
  } B;
} FR_PCR15_tag;

typedef union FR_PCR16_union_tag {     /* Protocol Configuration 16 */
  vuint16_t R;
  struct {
    vuint16_t MACRO_INITIAL_OFFSET_B:7; /* macro_initial_offset_b */
    vuint16_t NOISE_LISTEN_TIMEOUT:9;  /* noise_listen_timeout */
  } B;
} FR_PCR16_tag;

typedef union FR_PCR17_union_tag {     /* Protocol Configuration 17 */
  vuint16_t R;
  struct {
    vuint16_t NOISE_LISTEN_TIMEOUT:16; /* noise_listen_timeout */
  } B;
} FR_PCR17_tag;

typedef union FR_PCR18_union_tag {     /* Protocol Configuration 18 */
  vuint16_t R;
  struct {
    vuint16_t WAKEUP_PATTERN:6;        /* wakeup_pattern */
    vuint16_t KEY_SLOT_ID:10;          /* key_slot_id */
  } B;
} FR_PCR18_tag;

typedef union FR_PCR19_union_tag {     /* Protocol Configuration 19 */
  vuint16_t R;
  struct {
    vuint16_t DECODING_CORRECTION_A:9; /* decoding_correction_a */
    vuint16_t PAYLOAD_LENGTH_STATIC:7; /* payload_length_static */
  } B;
} FR_PCR19_tag;

typedef union FR_PCR20_union_tag {     /* Protocol Configuration 20 */
  vuint16_t R;
  struct {
    vuint16_t MICRO_INITIAL_OFFSET_B:8; /* micro_initial_offset_b */
    vuint16_t MICRO_INITIAL_OFFSET_A:8; /* micro_initial_offset_a */
  } B;
} FR_PCR20_tag;

typedef union FR_PCR21_union_tag {     /* Protocol Configuration 21 */
  vuint16_t R;
  struct {
    vuint16_t EXTERN_RATE_CORRECTION:3; /* extern_rate_correction */
    vuint16_t LATEST_TX:13;            /* latest_tx */
  } B;
} FR_PCR21_tag;

typedef union FR_PCR22_union_tag {     /* Protocol Configuration 22 */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:1;             /* Reserved bit, will not be changed. Do not write any value different from the reset value. */
    vuint16_t COMP_ACCEPTED_STARTUP_RANGE_A:11; /* comp_accepted_startup_range_a */
    vuint16_t MICRO_PER_CYCLE:4;       /* micro_per_cycle */
  } B;
} FR_PCR22_tag;

typedef union FR_PCR23_union_tag {     /* Protocol Configuration 23 */
  vuint16_t R;
  struct {
    vuint16_t MICRO_PER_CYCLE:16;      /* micro_per_cycle */
  } B;
} FR_PCR23_tag;

typedef union FR_PCR24_union_tag {     /* Protocol Configuration 24 */
  vuint16_t R;
  struct {
    vuint16_t CLUSTER_DRIFT_DAMPING:5; /* cluster_drift_damping */
    vuint16_t MAX_PAYLOAD_LENGTH_DYNAMIC:7; /* max_payload_length_dynamic */
    vuint16_t MICRO_PER_CYCLE_MIN:4;   /* micro_per_cycle_min */
  } B;
} FR_PCR24_tag;

typedef union FR_PCR25_union_tag {     /* Protocol Configuration 25 */
  vuint16_t R;
  struct {
    vuint16_t MICRO_PER_CYCLE_MIN:16;  /* micro_per_cycle_min */
  } B;
} FR_PCR25_tag;

typedef union FR_PCR26_union_tag {     /* Protocol Configuration 26 */
  vuint16_t R;
  struct {
    vuint16_t ALLOW_HALT_DUE_TO_CLOCK:1; /* allow_halt_due_to_clock */
    vuint16_t COMP_ACCEPTED_STARTUP_RANGE_B:11; /* comp_accepted_startup_range_b */
    vuint16_t MICRO_PER_CYCLE_MAX:4;   /* micro_per_cycle_max */
  } B;
} FR_PCR26_tag;

typedef union FR_PCR27_union_tag {     /* Protocol Configuration 27 */
  vuint16_t R;
  struct {
    vuint16_t MICRO_PER_CYCLE_MAX:16;  /* micro_per_cycle_max */
  } B;
} FR_PCR27_tag;

typedef union FR_PCR28_union_tag {     /* Protocol Configuration 28 */
  vuint16_t R;
  struct {
    vuint16_t DYNAMIC_SLOT_IDLE_PHASE:2; /* dynamic_slot_idle_phase */
    vuint16_t MACRO_AFTER_OFFSET_CORRECTION:14; /* macro_after_offset_correction */
  } B;
} FR_PCR28_tag;

typedef union FR_PCR29_union_tag {     /* Protocol Configuration 29 */
  vuint16_t R;
  struct {
    vuint16_t EXTERN_OFFSET_CORRECTION:3; /* extern_offset_correction */
    vuint16_t MINISLOTS_MAX:13;        /* minislots_max */
  } B;
} FR_PCR29_tag;

typedef union FR_PCR30_union_tag {     /* Protocol Configuration 30 */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:12;
    vuint16_t SYNC_NODE_MAX:4;         /* sync_node_max */
  } B;
} FR_PCR30_tag;

typedef union FR_RFSDOR_union_tag {    /* Receive FIFO Start Data Offset */
  vuint16_t R;
  struct {
    vuint16_t SDO:16;                  /* SDOA And SDOB Start Data Field Offset */
  } B;
} FR_RFSDOR_tag;

typedef union FR_RFSYMBADHR_union_tag { /* Receive FIFO System Memory Base Address High */
  vuint16_t R;
  struct {
    vuint16_t SMBA:16;                 /* System Memory Base Address */
  } B;
} FR_RFSYMBADHR_tag;

typedef union FR_RFSYMBADLR_union_tag { /* Receive FIFO System Memory Base Address Low */
  vuint16_t R;
  struct {
    vuint16_t SMBA:12;                 /* System Memory Base Address */
    vuint16_t _unused_12:4;
  } B;
} FR_RFSYMBADLR_tag;

typedef union FR_RFPTR_union_tag {     /* Receive FIFO Periodic Timer */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:2;
    vuint16_t PTD:14;                  /* Periodic Timer Duration */
  } B;
} FR_RFPTR_tag;

typedef union FR_RFFLPCR_union_tag {   /* Receive FIFO Fill Level and Pop Count */
  vuint16_t R;
  struct {
    vuint16_t FLB_OR_PCB:8;            /* FLB Or PCB */
    vuint16_t FLA_OR_PCA:8;            /* FLA Or PCA */
  } B;
} FR_RFFLPCR_tag;

typedef union FR_EEIFER_union_tag {    /* ECC Error Interrupt Flag And Enable */
  vuint16_t R;
  struct {
    vuint16_t LRNE_OF:1;               /* LRAM Non-Corrected Error Overflow Flag */
    vuint16_t LRCE_OF:1;               /* LRAM Corrected Error Overflow Flag */
    vuint16_t DRNE_OF:1;               /* DRAM Non-Corrected Error Overflow Flag */
    vuint16_t DRCE_OF:1;               /* DRAM Corrected Error Overflow Flag */
    vuint16_t LRNE_IF:1;               /* LRAM Non-Corrected Error Interrupt Flag */
    vuint16_t LRCE_IF:1;               /* LRAM Corrected Error Interrupt Flag */
    vuint16_t DRNE_IF:1;               /* DRAM Non-Corrected Error Interrupt Flag */
    vuint16_t DRCE_IF:1;               /* DRAM Corrected Error Interrupt Flag */
    vuint16_t _unused_8:4;
    vuint16_t LRNE_IE:1;               /* LRAM Non-Corrected Error Interrupt Enable */
    vuint16_t LRCE_IE:1;               /* LRAM Corrected Error Interrupt Enable */
    vuint16_t DRNE_IE:1;               /* DRAM Non-Corrected Error Interrupt Enable */
    vuint16_t DRCE_IE:1;               /* DRAM Corrected Error Interrupt Enable */
  } B;
} FR_EEIFER_tag;

typedef union FR_EERICR_union_tag {    /* ECC Error Report And Injection Control */
  vuint16_t R;
  struct {
    vuint16_t BSY:1;                   /* Register Update Busy */
    vuint16_t _unused_1:5;
    vuint16_t ERS:2;                   /* Error Report Select */
    vuint16_t _unused_8:3;
    vuint16_t ERM:1;                   /* Error Report Mode */
    vuint16_t _unused_12:2;
    vuint16_t EIMf:1;                  /* Error Injection Mode */
    vuint16_t EIE:1;                   /* Error Injection Enable */
  } B;
} FR_EERICR_tag;

typedef union FR_EERAR_union_tag {     /* ECC Error Report Address */
  vuint16_t R;
  struct {
    vuint16_t MID:1;                   /* Memory Identifier */
    vuint16_t BANK:3;                  /* Memory Bank */
    vuint16_t ADDR:12;                 /* Memory Address */
  } B;
} FR_EERAR_tag;

typedef union FR_EERDR_union_tag {     /* ECC Error Report Data */
  vuint16_t R;
  struct {
    vuint16_t DATA:16;                 /* Data */
  } B;
} FR_EERDR_tag;

typedef union FR_EERCR_union_tag {     /* ECC Error Report Code */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:11;
    vuint16_t CODE:5;                  /* Code */
  } B;
} FR_EERCR_tag;

typedef union FR_EEIAR_union_tag {     /* ECC Error Injection Address Register */
  vuint16_t R;
  struct {
    vuint16_t MID:1;                   /* Memory Identifier */
    vuint16_t BANK:3;                  /* Memory Bank */
    vuint16_t ADDR:12;                 /* Memory Address */
  } B;
} FR_EEIAR_tag;

typedef union FR_EEIDR_union_tag {     /* ECC Error Injection Data */
  vuint16_t R;
  struct {
    vuint16_t DATA:16;                 /* Data */
  } B;
} FR_EEIDR_tag;

typedef union FR_EEICR_union_tag {     /* ECC Error Injection Code */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:11;
    vuint16_t CODE:5;                  /* Code */
  } B;
} FR_EEICR_tag;

typedef union FR_MB_CCSR_union_tag {   /* MB Configuration Control Status */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:3;
    vuint16_t MTD:1;                   /* MB Transfer Direction */
    vuint16_t CMT:1;                   /* Commit To Transmission */
    vuint16_t EDT:1;                   /* Enable And Disable Trigger */
    vuint16_t LCKT:1;                  /* Lock And Unlock Trigger */
    vuint16_t MBIE:1;                  /* Message Buffer Interrupt Enable */
    vuint16_t _unused_8:3;
    vuint16_t DUP:1;                   /* Data Updated */
    vuint16_t DVAL:1;                  /* Data Valid */
    vuint16_t EDS:1;                   /* Enable And Disable Status */
    vuint16_t LCKS:1;                  /* Lock Status */
    vuint16_t MBIF:1;                  /* Message Buffer Interrupt Flag */
  } B;
} FR_MB_CCSR_tag;

typedef union FR_MB_CCFR_union_tag {   /* MB Cycle Counter Filter */
  vuint16_t R;
  struct {
    vuint16_t MTM:1;                   /* MB Transmission Mode */
    vuint16_t CHA:1;                   /* Channel Assignment A */
    vuint16_t CHB:1;                   /* Channel Assignment B */
    vuint16_t CCFE:1;                  /* Cycle Counter Filtering Enable */
    vuint16_t CCFMSK:6;                /* Cycle Counter Filtering Mask */
    vuint16_t CCFVAL:6;                /* Cycle Counter Filtering Value */
  } B;
} FR_MB_CCFR_tag;

typedef union FR_MB_FIDR_union_tag {   /* MB Frame ID */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:5;
    vuint16_t FID:11;                  /* Frame ID */
  } B;
} FR_MB_FIDR_tag;

typedef union FR_MB_IDXR_union_tag {   /* MB Index */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:8;
    vuint16_t MBIDX:8;                 /* Message Buffer Index */
  } B;
} FR_MB_IDXR_tag;

typedef struct FR_MB_struct_tag {
  FR_MB_CCSR_tag CCSR;                 /* MB Configuration Control Status */
  FR_MB_CCFR_tag CCFR;                 /* MB Cycle Counter Filter */
  FR_MB_FIDR_tag FIDR;                 /* MB Frame ID */
  FR_MB_IDXR_tag IDXR;                 /* MB Index */
} FR_MB_tag;

typedef union FR_MBDOR_union_tag {     /* MB Data Field Offset */
  vuint16_t R;
  struct {
    vuint16_t MBDO:16;                 /* MB Data Field Offset */
  } B;
} FR_MBDOR_tag;

typedef union FR_LEETR_union_tag {     /* LRAM ECC Error Test Register */
  vuint16_t R;
  struct {
    vuint16_t LEETD:16;                /* LRAM ECC Error Test Data */
  } B;
} FR_LEETR_tag;

struct FR_tag {
  FR_MVR_tag MVR;                      /* Module Version */
  FR_MCR_tag MCR;                      /* Module Configuration */
  FR_SYMBADHR_tag SYMBADHR;            /* System Memory Base Address High */
  FR_SYMBADLR_tag SYMBADLR;            /* System Memory Base Address Low */
  FR_STBSCR_tag STBSCR;                /* Strobe Signal Control */
  uint8_t FR_reserved0[2];
  FR_MBDSR_tag MBDSR;                  /* MB Data Size */
  FR_MBSSUTR_tag MBSSUTR;              /* MB Segment Size and Utilization */
  FR_PEDRAR_tag PEDRAR;                /* PE DRAM Access */
  FR_PEDRDR_tag PEDRDR;                /* PE DRAM Data */
  FR_POCR_tag POCR;                    /* Protocol Operation Control Register */
  FR_GIFER_tag GIFER;                  /* Global Interrupt Flag And Enable */
  FR_PIFR0_tag PIFR0;                  /* Protocol Interrupt Flag 0 */
  FR_PIFR1_tag PIFR1;                  /* Protocol Interrupt Flag 1 */
  FR_PIER0_tag PIER0;                  /* Protocol Interrupt Enable 0 */
  FR_PIER1_tag PIER1;                  /* Protocol Interrupt Enable 1 */
  FR_CHIERFR_tag CHIERFR;              /* CHI Error Flag */
  FR_MBIVEC_tag MBIVEC;                /* Message Buffer Interrupt Vector */
  FR_CASERCR_tag CASERCR;              /* Channel A Status Error Counter Register */
  FR_CBSERCR_tag CBSERCR;              /* Channel B Status Error Counter */
  FR_PSR0_tag PSR0;                    /* Protocol Status 0 */
  FR_PSR1_tag PSR1;                    /* Protocol Status 1 */
  FR_PSR2_tag PSR2;                    /* Protocol Status Register 2 */
  FR_PSR3_tag PSR3;                    /* Protocol Status 3 */
  FR_MTCTR_tag MTCTR;                  /* MT Counter */
  FR_CYCTR_tag CYCTR;                  /* Cycle Counter */
  FR_SLTCTAR_tag SLTCTAR;              /* Slot Counter Channel A */
  FR_SLTCTBR_tag SLTCTBR;              /* Slot Counter Channel B */
  FR_RTCORVR_tag RTCORVR;              /* Rate Correction Value */
  FR_OFCORVR_tag OFCORVR;              /* Offset Correction Value */
  FR_CIFR_tag CIFR;                    /* Combined Interrupt Flag */
  FR_SYMATOR_tag SYMATOR;              /* System Memory Access Timeout */
  FR_SFCNTR_tag SFCNTR;                /* Sync Frame Counter */
  FR_SFTOR_tag SFTOR;                  /* Sync Frame Table Offset */
  FR_SFTCCSR_tag SFTCCSR;              /* Sync Frame Table Configuration Control Status */
  FR_SFIDRFR_tag SFIDRFR;              /* Sync Frame ID Rejection Filter */
  FR_SFIDAFVR_tag SFIDAFVR;            /* Sync Frame ID Acceptance Filter Value */
  FR_SFIDAFMR_tag SFIDAFMR;            /* Sync Frame ID Acceptance Filter Mask */
  FR_NMVR_tag NMVR[6];                 /* NMV 0 */
  FR_NMVLR_tag NMVLR;                  /* Network Management Vector Length Register */
  FR_TICCR_tag TICCR;                  /* Timer Configuration And Control */
  FR_TI1CYSR_tag TI1CYSR;              /* Timer 1 Cycle Set Register */
  FR_TI1MTOR_tag TI1MTOR;              /* Timer 1 MT Offset */
  FR_TI2CR0_tag TI2CR0;
  FR_TI2CR1_tag TI2CR1;
  FR_SSSR_tag SSSR;                    /* Slot Status Selection */
  FR_SSCCR_tag SSCCR;                  /* Slot Status Counter Condition */
  FR_SSR_tag SSR[8];                   /* Slot Status */
  FR_SSCR_tag SSCR[4];                 /* Slot Status Counter */
  FR_MTSACFR_tag MTSACFR;              /* MTS A Configuration */
  FR_MTSBCFR_tag MTSBCFR;              /* MTS B Configuration */
  FR_RSBIR_tag RSBIR;                  /* Receive Shadow Buffer Index */
  FR_RFWMSR_tag RFWMSR;                /* Receive FIFO Watermark And Selection */
  FR_RFSIR_tag RFSIR;                  /* Receive FIFO Start Index */
  FR_RFDSR_tag RFDSR;                  /* Receive FIFO Depth And Size */
  FR_RFARIR_tag RFARIR;                /* Receive FIFO A Read Index */
  FR_RFBRIR_tag RFBRIR;                /* Receive FIFO B Read Index */
  FR_RFMIDAFVR_tag RFMIDAFVR;          /* Receive FIFO Message ID Acceptance Filter Value */
  FR_RFMIDAFMR_tag RFMIDAFMR;          /* Receive FIFO Message ID Acceptance Filter Mask */
  FR_RFFIDRFVR_tag RFFIDRFVR;          /* Receive FIFO Frame ID Rejection Filter Value */
  FR_RFFIDRFMR_tag RFFIDRFMR;          /* Receive FIFO Frame ID Rejection Filter Mask */
  FR_RFRFCFR_tag RFRFCFR;              /* Receive FIFO Range Filter Configuration */
  FR_RFRFCTR_tag RFRFCTR;              /* Receive FIFO Range Filter Control */
  FR_LDTXSLAR_tag LDTXSLAR;            /* Last Dynamic Transmit Slot Channel A */
  FR_LDTXSLBR_tag LDTXSLBR;            /* Last Dynamic Transmit Slot Channel B */
  FR_PCR0_tag PCR0;                    /* Protocol Configuration 0 */
  FR_PCR1_tag PCR1;                    /* Protocol Configuration 1 */
  FR_PCR2_tag PCR2;                    /* Protocol Configuration 2 */
  FR_PCR3_tag PCR3;                    /* Protocol Configuration 3 */
  FR_PCR4_tag PCR4;                    /* Protocol Configuration 4 */
  FR_PCR5_tag PCR5;                    /* Protocol Configuration 5 */
  FR_PCR6_tag PCR6;                    /* Protocol Configuration 6 */
  FR_PCR7_tag PCR7;                    /* Protocol Configuration 7 */
  FR_PCR8_tag PCR8;                    /* Protocol Configuration 8 */
  FR_PCR9_tag PCR9;                    /* Protocol Configuration 9 */
  FR_PCR10_tag PCR10;                  /* Protocol Configuration 10 */
  FR_PCR11_tag PCR11;                  /* Protocol Configuration 11 */
  FR_PCR12_tag PCR12;                  /* Protocol Configuration 12 */
  FR_PCR13_tag PCR13;                  /* Protocol Configuration 13 */
  FR_PCR14_tag PCR14;                  /* Protocol Configuration 14 */
  FR_PCR15_tag PCR15;                  /* Protocol Configuration 15 */
  FR_PCR16_tag PCR16;                  /* Protocol Configuration 16 */
  FR_PCR17_tag PCR17;                  /* Protocol Configuration 17 */
  FR_PCR18_tag PCR18;                  /* Protocol Configuration 18 */
  FR_PCR19_tag PCR19;                  /* Protocol Configuration 19 */
  FR_PCR20_tag PCR20;                  /* Protocol Configuration 20 */
  FR_PCR21_tag PCR21;                  /* Protocol Configuration 21 */
  FR_PCR22_tag PCR22;                  /* Protocol Configuration 22 */
  FR_PCR23_tag PCR23;                  /* Protocol Configuration 23 */
  FR_PCR24_tag PCR24;                  /* Protocol Configuration 24 */
  FR_PCR25_tag PCR25;                  /* Protocol Configuration 25 */
  FR_PCR26_tag PCR26;                  /* Protocol Configuration 26 */
  FR_PCR27_tag PCR27;                  /* Protocol Configuration 27 */
  FR_PCR28_tag PCR28;                  /* Protocol Configuration 28 */
  FR_PCR29_tag PCR29;                  /* Protocol Configuration 29 */
  FR_PCR30_tag PCR30;                  /* Protocol Configuration 30 */
  uint8_t FR_reserved1[8];
  FR_RFSDOR_tag RFSDOR;                /* Receive FIFO Start Data Offset */
  FR_RFSYMBADHR_tag RFSYMBADHR;        /* Receive FIFO System Memory Base Address High */
  FR_RFSYMBADLR_tag RFSYMBADLR;        /* Receive FIFO System Memory Base Address Low */
  FR_RFPTR_tag RFPTR;                  /* Receive FIFO Periodic Timer */
  FR_RFFLPCR_tag RFFLPCR;              /* Receive FIFO Fill Level and Pop Count */
  FR_EEIFER_tag EEIFER;                /* ECC Error Interrupt Flag And Enable */
  FR_EERICR_tag EERICR;                /* ECC Error Report And Injection Control */
  FR_EERAR_tag EERAR;                  /* ECC Error Report Address */
  FR_EERDR_tag EERDR;                  /* ECC Error Report Data */
  FR_EERCR_tag EERCR;                  /* ECC Error Report Code */
  FR_EEIAR_tag EEIAR;                  /* ECC Error Injection Address Register */
  FR_EEIDR_tag EEIDR;                  /* ECC Error Injection Data */
  FR_EEICR_tag EEICR;                  /* ECC Error Injection Code */
  uint8_t FR_reserved2[1792];
  FR_MB_tag MB[128];
  uint8_t FR_reserved3[1024];
  FR_MBDOR_tag MBDOR[132];             /* MB Data Field Offset */
  FR_LEETR_tag LEETR[6];               /* LRAM ECC Error Test Register */
};


/* ============================================================================
   =============================== Module: FXOSC ==============================
   ============================================================================ */

typedef union FXOSC_CTRL_union_tag {   /* FXOSC Control Register */
  vuint32_t R;
  struct {
    vuint32_t OSC_BYP:1;               /* Oscillator bypass */
    vuint32_t _unused_1:1;
    vuint32_t _unused_2:4;
    vuint32_t _unused_6:1;
    vuint32_t COMP_EN:1;               /* Comparator enable */
    vuint32_t EOCV:8;                  /* End of count value */
    vuint32_t _unused_16:8;
    vuint32_t GM_SEL:4;                /* Crystal overdrive protection */
    vuint32_t _unused_28:1;
    vuint32_t _unused_29:1;
    vuint32_t _unused_30:1;
    vuint32_t OSCON:1;                 /* Crystal oscillator power-down control */
  } B;
} FXOSC_CTRL_tag;

typedef union FXOSC_STAT_union_tag {   /* Oscillator Status Register */
  vuint32_t R;
  struct {
    vuint32_t OSC_STAT:1;              /* Crystal oscillator status */
    vuint32_t _unused_1:31;
  } B;
} FXOSC_STAT_tag;

struct FXOSC_tag {
  FXOSC_CTRL_tag CTRL;                 /* FXOSC Control Register */
  FXOSC_STAT_tag STAT;                 /* Oscillator Status Register */
};


/* ============================================================================
   =============================== Module: I2C ================================
   ============================================================================ */

typedef union I2C_IBAD_union_tag {     /* I2C Bus Address Register */
  vuint8_t R;
  struct {
    vuint8_t ADR:7;                    /* Slave address */
    vuint8_t _unused_7:1;              /* Reserved */
  } B;
} I2C_IBAD_tag;

typedef union I2C_IBFD_union_tag {     /* I2C Bus Frequency Divider Register */
  vuint8_t R;
  struct {
    vuint8_t IBC:8;                    /* IBC */
  } B;
} I2C_IBFD_tag;

typedef union I2C_IBCR_union_tag {     /* I2C Bus Control Register */
  vuint8_t R;
  struct {
    vuint8_t MDIS:1;                   /* Module disable */
    vuint8_t IBIE:1;                   /* I2C bus interrupt enable */
    vuint8_t MSSL:1;                   /* Master/slave mode select */
    vuint8_t TXRX:1;                   /* Transmit/receive mode select */
    vuint8_t NOACK:1;                  /* Data acknowledge disable */
    vuint8_t RSTA:1;                   /* Repeat START */
    vuint8_t DMAEN:1;                  /* DMA enable */
    vuint8_t _unused_7:1;              /* Reserved */
  } B;
} I2C_IBCR_tag;

typedef union I2C_IBSR_union_tag {     /* I2C Bus Status Register */
  vuint8_t R;
  struct {
    vuint8_t TCF:1;                    /* Transfer complete */
    vuint8_t IAAS:1;                   /* Addressed as a slave */
    vuint8_t IBB:1;                    /* Bus busy */
    vuint8_t _unused_3:2;              /* Reserved */
    vuint8_t SRW:1;                    /* Slave Read/Write */
    vuint8_t IBIF:1;                   /* I2C bus interrupt flag */
    vuint8_t RXAK:1;                   /* Received acknowledge */
  } B;
} I2C_IBSR_tag;

typedef union I2C_IBDR_union_tag {     /* I2C Bus Data I/O Register */
  vuint8_t R;
  struct {
    vuint8_t DATA:8;                   /* DATA */
  } B;
} I2C_IBDR_tag;

typedef union I2C_IBIC_union_tag {     /* I2C Bus Interrupt Config Register */
  vuint8_t R;
  struct {
    vuint8_t BIIE:1;                   /* Bus idle interrupt enable */
    vuint8_t BYTERXIE:1;               /* Byte receive interrupt enable */
    vuint8_t _unused_2:6;              /* Reserved */
  } B;
} I2C_IBIC_tag;

typedef union I2C_IBDBG_union_tag {    /* I2C Bus Debug Register */
  vuint8_t R;
  struct {
    vuint8_t _unused_0:4;              /* Reserved */
    vuint8_t GLFLT_EN:1;               /* Glitch filter enable */
    vuint8_t BYTE_RX:1;                /* The I2C module programs BYTE_RX=1 when an I2C master/slave receives a new byte. The module generates an interrupt if IBIC[BYTERXIE]=1. */
    vuint8_t IPG_DEBUG_HALTED:1;       /* Debug halted */
    vuint8_t IPG_DEBUG_EN:1;           /* Debug enable */
  } B;
} I2C_IBDBG_tag;

struct I2C_tag {
  I2C_IBAD_tag IBAD;                   /* I2C Bus Address Register */
  I2C_IBFD_tag IBFD;                   /* I2C Bus Frequency Divider Register */
  I2C_IBCR_tag IBCR;                   /* I2C Bus Control Register */
  I2C_IBSR_tag IBSR;                   /* I2C Bus Status Register */
  I2C_IBDR_tag IBDR;                   /* I2C Bus Data I/O Register */
  I2C_IBIC_tag IBIC;                   /* I2C Bus Interrupt Config Register */
  I2C_IBDBG_tag IBDBG;                 /* I2C Bus Debug Register */
};


/* ============================================================================
   =============================== Module: INTC ===============================
   ============================================================================ */

typedef union INTC_BCR_union_tag {     /* Block Configuration */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:19;            /* Reserved */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t _unused_20:3;            /* Reserved */
    vuint32_t HVEN2:1;                 /* Hardware vector enable for processor 2 */
    vuint32_t _unused_24:3;            /* Reserved */
    vuint32_t HVEN1:1;                 /* Hardware vector enable for processor 1 */
    vuint32_t _unused_28:3;            /* Reserved */
    vuint32_t HVEN0:1;                 /* Hardware vector mode enable for processor 0 */
  } B;
} INTC_BCR_tag;

typedef union INTC_MPROT_union_tag {   /* Master Protection */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:26;            /* Reserved */
    vuint32_t ID:2;                    /* Master ID */
    vuint32_t _unused_28:3;            /* Reserved */
    vuint32_t MPROT:1;                 /* Master Protection */
  } B;
} INTC_MPROT_tag;

typedef union INTC_CPR_union_tag {     /* Current Priority */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:27;            /* Reserved */
    vuint32_t PRI:5;                   /* Priority */
  } B;
} INTC_CPR_tag;

typedef union INTC_IACKR_union_tag {   /* Interrupt Acknowledge */
  vuint32_t R;
  struct {
    vuint32_t VTBA:20;                 /* Vector table base address */
    vuint32_t INTVEC:10;               /* Interrupt vector */
    vuint32_t _unused_30:2;            /* Reserved */
  } B;
} INTC_IACKR_tag;

typedef union INTC_EOIR_union_tag {    /* End Of Interrupt */
  vuint32_t R;
  struct {
    vuint32_t EOI:32;                  /* End of interrupt */
  } B;
} INTC_EOIR_tag;

typedef union INTC_SSCIR_union_tag {   /* Software Set/Clear Interrupt */
  vuint8_t R;
  struct {
    vuint8_t _unused_0:6;              /* Reserved */
    vuint8_t SET:1;                    /* Set */
    vuint8_t CLR:1;                    /* Clear */
  } B;
} INTC_SSCIR_tag;

typedef union INTC_PSR_union_tag {     /* Priority Select */
  vuint16_t R;
  struct {
    vuint16_t PRC_SELN0:1;             /* Processor select 0 */
    vuint16_t PRC_SELN1:1;             /* Processor select 1 */
    vuint16_t PRC_SELN2:1;             /* Processor select 2 */
    vuint16_t _unused_3:1;             /* Reserved */
    vuint16_t _unused_4:3;             /* Reserved */
    vuint16_t SWTN:1;                  /* Software trigger */
    vuint16_t _unused_8:3;             /* Reserved */
    vuint16_t PRIN:5;                  /* Priority select */
  } B;
} INTC_PSR_tag;

typedef union INTC_CHANNEL_MMRC_union_tag { /* Monitor Mode for Processor 0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:30;            /* Reserved */
    vuint32_t MM:2;                    /* Monitor mode */
  } B;
} INTC_CHANNEL_MMRC_tag;

typedef union INTC_CHANNEL_HIPRIC_union_tag { /* HIPRI for Processor 0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:22;            /* Reserved */
    vuint32_t IRQ:10;                  /* IRQ */
  } B;
} INTC_CHANNEL_HIPRIC_tag;

typedef union INTC_CHANNEL_LATC_union_tag { /* Maximum Latency for Processor 0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;             /* Reserved */
    vuint32_t LAT:24;                  /* Latency */
  } B;
} INTC_CHANNEL_LATC_tag;

typedef union INTC_CHANNEL_TIMERC_union_tag { /* Timer for Processor 0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;             /* Reserved */
    vuint32_t TIMER:24;                /* Timer */
  } B;
} INTC_CHANNEL_TIMERC_tag;

typedef struct INTC_CHANNEL_struct_tag {
  INTC_CHANNEL_MMRC_tag MMRC;          /* Monitor Mode for Processor 0 */
  INTC_CHANNEL_HIPRIC_tag HIPRIC[3];   /* HIPRI for Processor 0 */
  uint8_t CHANNEL_reserved0[4];
  INTC_CHANNEL_LATC_tag LATC[3];       /* Maximum Latency for Processor 0 */
  uint8_t CHANNEL_reserved1[4];
  INTC_CHANNEL_TIMERC_tag TIMERC[3];   /* Timer for Processor 0 */
  uint8_t CHANNEL_reserved2[4];
} INTC_CHANNEL_tag;

struct INTC_tag {
  INTC_BCR_tag BCR;                    /* Block Configuration */
  INTC_MPROT_tag MPROT;                /* Master Protection */
  uint8_t INTC_reserved0[8];
  INTC_CPR_tag CPR[3];                 /* Current Priority */
  uint8_t INTC_reserved1[4];
  INTC_IACKR_tag IACKR[3];             /* Interrupt Acknowledge */
  uint8_t INTC_reserved2[4];
  INTC_EOIR_tag EOIR[3];               /* End Of Interrupt */
  uint8_t INTC_reserved3[4];
  INTC_SSCIR_tag SSCIR[16];            /* Software Set/Clear Interrupt */
  uint8_t INTC_reserved4[16];
  INTC_PSR_tag PSR[766];               /* Priority Select; Valid array indices: 0-15, 32-34, 36-47, 52-84, 216-220, 226-233, 243-246, 251-255, 268-272, 277-291, 310, 316, 380-382, 442, 444, 453-462, 477, 488-491, 496-498, 500-502, 520-543, 546-560, 594-597, 602-609, 622-628, 632-640, 643, 655-668, 700-714, 734-737, 739, 744, 746, 750, 754, 758-765 */
  uint8_t INTC_reserved5[2468];
  INTC_CHANNEL_tag CHANNEL[3];
};


/* ============================================================================
   =============================== Module: JTAGM ==============================
   ============================================================================ */

typedef union JTAGM_MCR_union_tag {    /* Module Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t SWRESET:1;               /* SWRESET */
    vuint32_t _unused_1:7;             /* Reserved */
    vuint32_t _unused_8:10;            /* Reserved */
    vuint32_t INTER_JTAG_FRAME_TIMER:6; /* inter_jtag_frame_timer */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t IIE:1;                   /* IIE */
    vuint32_t TCKSEL:3;                /* TCKSEL */
    vuint32_t JTAGM_JCOMP:1;           /* jtagm_JCOMP */
    vuint32_t DTM:1;                   /* DTM */
  } B;
} JTAGM_MCR_tag;

typedef union JTAGM_SR_union_tag {     /* Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t _unused_2:6;             /* Reserved */
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t LVDSEN:1;                /* LVDSEN */
    vuint32_t JTAGEN:1;                /* JTAGEN */
    vuint32_t LVDSSAFE:1;              /* LVDSSAFE */
    vuint32_t JTAGSAFE:1;              /* JTAGSAFE */
    vuint32_t LVDSESC:1;               /* LVDSESC */
    vuint32_t LFASTEN:1;               /* LFASTEN */
    vuint32_t TOOL:1;                  /* TOOL */
    vuint32_t _unused_16:2;            /* Reserved */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t IDLE:1;                  /* Idle */
    vuint32_t NR:1;                    /* NR */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} JTAGM_SR_tag;

typedef union JTAGM_DOR0_union_tag {   /* Data Out Register 0 */
  vuint32_t R;
  struct {
    vuint32_t TMS_HIGH:32;             /* TMS_HIGH */
  } B;
} JTAGM_DOR0_tag;

typedef union JTAGM_DOR1_union_tag {   /* Data Out Register 1 */
  vuint32_t R;
  struct {
    vuint32_t TMS_LOW:28;              /* TMS_LOW */
    vuint32_t _unused_28:4;            /* Reserved */
  } B;
} JTAGM_DOR1_tag;

typedef union JTAGM_DOR2_union_tag {   /* Data Out Register 2 */
  vuint32_t R;
  struct {
    vuint32_t TDI_HIGH:32;             /* TDI_HIGH */
  } B;
} JTAGM_DOR2_tag;

typedef union JTAGM_DOR3_union_tag {   /* Data Out Register 3 */
  vuint32_t R;
  struct {
    vuint32_t TDI_LOW:28;              /* TDI_LOW */
    vuint32_t _unused_28:3;            /* Reserved */
    vuint32_t SEND:1;                  /* SEND bit */
  } B;
} JTAGM_DOR3_tag;

typedef union JTAGM_DIR0_union_tag {   /* Data Input Register 0 */
  vuint32_t R;
  struct {
    vuint32_t TDO_LOW:32;              /* TDO_LOW */
  } B;
} JTAGM_DIR0_tag;

typedef union JTAGM_DIR1_union_tag {   /* Data Input Register 1 */
  vuint32_t R;
  struct {
    vuint32_t TDO_HIGH:28;             /* TDO_HIGH */
    vuint32_t _unused_28:4;            /* Reserved */
  } B;
} JTAGM_DIR1_tag;

struct JTAGM_tag {
  JTAGM_MCR_tag MCR;                   /* Module Configuration Register */
  JTAGM_SR_tag SR;                     /* Status Register */
  JTAGM_DOR0_tag DOR0;                 /* Data Out Register 0 */
  JTAGM_DOR1_tag DOR1;                 /* Data Out Register 1 */
  JTAGM_DOR2_tag DOR2;                 /* Data Out Register 2 */
  JTAGM_DOR3_tag DOR3;                 /* Data Out Register 3 */
  uint8_t JTAGM_reserved0[4];
  JTAGM_DIR0_tag DIR0;                 /* Data Input Register 0 */
  JTAGM_DIR1_tag DIR1;                 /* Data Input Register 1 */
};


/* ============================================================================
   =============================== Module: LFAST ==============================
   ============================================================================ */

typedef union LFAST_MCR_union_tag {    /* LFAST Mode Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t MSEN:1;                  /* LFAST Master or Slave mode Enable */
    vuint32_t _unused_1:6;             /* Reserved */
    vuint32_t IPGDBG:1;                /* IPG Debug mode */
    vuint32_t _unused_8:7;             /* Reserved */
    vuint32_t LSSEL:1;                 /* Low Speed Select Mode */
    vuint32_t DRFEN:1;                 /* LFAST Enable */
    vuint32_t RXEN:1;                  /* LFAST Receiver Enable */
    vuint32_t TXEN:1;                  /* LFAST Transmitter Enable */
    vuint32_t _unused_19:8;            /* Reserved */
    vuint32_t TXARBD:1;                /* Tx Arbiter Disable */
    vuint32_t CTSEN:1;                 /* CTS Enable */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t DRFRST:1;                /* LFAST Soft Reset */
    vuint32_t DATAEN:1;                /* DATA Frame Enable */
  } B;
} LFAST_MCR_tag;

typedef union LFAST_SCR_union_tag {    /* LFAST Speed Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:15;            /* Reserved */
    vuint32_t DRMD:1;                  /* Data Rate Controller mode */
    vuint32_t _unused_16:7;            /* Reserved */
    vuint32_t RDR:1;                   /* Receiver Data Rate */
    vuint32_t _unused_24:7;            /* Reserved */
    vuint32_t TDR:1;                   /* Transmit Data Rate */
  } B;
} LFAST_SCR_tag;

typedef union LFAST_COCR_union_tag {   /* LFAST Correlator Control Register */
  vuint32_t R;
  struct {
    vuint32_t SMPSEL:8;                /* Sampler Data Path Selector (overrides the correlator selection) */
    vuint32_t _unused_8:6;             /* Reserved */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t _unused_16:12;           /* Reserved */
    vuint32_t CORRTH:3;                /* Correlator Threshold Level */
    vuint32_t PHSSEL:1;
  } B;
} LFAST_COCR_tag;

typedef union LFAST_TMCR_union_tag {   /* LFAST Test Mode Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:6;             /* Reserved */
    vuint32_t CLKTST:1;                /* Clock Test Mode */
    vuint32_t LPON:1;                  /* Loopback Mode Logic Enable */
    vuint32_t _unused_8:5;             /* Reserved */
    vuint32_t LPMOD:3;                 /* Loopback Mode */
    vuint32_t LPFRMTH:16;
  } B;
} LFAST_TMCR_tag;

typedef union LFAST_ALCR_union_tag {   /* LFAST Auto Loopback Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:15;            /* Reserved */
    vuint32_t LPCNTEN:1;               /* Auto Loopback Frame Transmission Count Enable */
    vuint32_t LPFMCNT:16;              /* Auto Loopback Frame Transmission Count */
  } B;
} LFAST_ALCR_tag;

typedef union LFAST_RCDCR_union_tag {  /* LFAST Rate Change Delay Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;            /* Reserved */
    vuint32_t DRCNT:4;                 /* Data Rate Controller Counter Value */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} LFAST_RCDCR_tag;

typedef union LFAST_SLCR_union_tag {   /* LFAST Wakeup Delay Control Register */
  vuint32_t R;
  struct {
    vuint32_t HSCNT:8;                 /* High Speed Sleep mode Exit Time */
    vuint32_t _unused_8:4;             /* Reserved */
    vuint32_t LSCNT:4;                 /* Low Speed Sleep Mode Exit Time */
    vuint32_t HWKCNT:8;
    vuint32_t _unused_24:4;            /* Reserved */
    vuint32_t LWKCNT:4;
  } B;
} LFAST_SLCR_tag;

typedef union LFAST_ICR_union_tag {    /* LFAST ICLC Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:14;            /* Reserved */
    vuint32_t ICLCSEQ:1;               /* ICLC Enabled */
    vuint32_t SNDICLC:1;               /* ICLC Frame Request */
    vuint32_t _unused_16:8;            /* Reserved */
    vuint32_t ICLCPLD:8;               /* ICLC Payload */
  } B;
} LFAST_ICR_tag;

typedef union LFAST_PICR_union_tag {   /* LFAST Ping Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:15;            /* Reserved */
    vuint32_t PNGREQ:1;                /* Ping Response Frame Request */
    vuint32_t PNGAUTO:1;               /* Ping Response Enable */
    vuint32_t _unused_17:7;            /* Reserved */
    vuint32_t PNGPYLD:8;
  } B;
} LFAST_PICR_tag;

typedef union LFAST_RFCR_union_tag {   /* LFAST Rx FIFO CTS Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:10;            /* Reserved */
    vuint32_t RCTSMX:6;                /* Rx FIFO Maximum Threshold */
    vuint32_t _unused_16:10;           /* Reserved */
    vuint32_t RCTSMN:6;                /* Rx FIFO Minimum Threshold */
  } B;
} LFAST_RFCR_tag;

typedef union LFAST_TIER_union_tag {   /* LFAST Tx Interrupt Enable Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:14;            /* Reserved */
    vuint32_t TXIIE:1;
    vuint32_t TXOVIE:1;
    vuint32_t _unused_16:11;           /* Reserved */
    vuint32_t TXPNGIE:1;
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t TXUNSIE:1;
    vuint32_t TXICLCIE:1;
    vuint32_t TXDTIE:1;
  } B;
} LFAST_TIER_tag;

typedef union LFAST_RIER_union_tag {   /* LFAST Rx Interrupt Enable Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;             /* Reserved */
    vuint32_t RXUOIE:1;
    vuint32_t RXMNIE:1;
    vuint32_t RXMXIE:1;
    vuint32_t RXUFIE:1;
    vuint32_t RXOFIE:1;
    vuint32_t RXSZIE:1;
    vuint32_t RXICIE:1;
    vuint32_t RXLCEIE:1;
    vuint32_t _unused_16:12;           /* Reserved */
    vuint32_t RXCTSIE:1;
    vuint32_t RXDIE:1;
    vuint32_t RXUNSIE:1;
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} LFAST_RIER_tag;

typedef union LFAST_RIIER_union_tag {  /* LFAST Rx ICLC Interrupt Enable Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:18;            /* Reserved */
    vuint32_t ICPFIE:1;
    vuint32_t ICPSIE:1;
    vuint32_t ICPRIE:1;
    vuint32_t ICTOIE:1;
    vuint32_t ICLPIE:1;
    vuint32_t ICCTIE:1;
    vuint32_t ICTDIE:1;
    vuint32_t ICTEIE:1;
    vuint32_t ICRFIE:1;
    vuint32_t ICRSIE:1;
    vuint32_t ICTFIE:1;
    vuint32_t ICTSIE:1;
    vuint32_t ICPOFIE:1;
    vuint32_t ICPONIE:1;
  } B;
} LFAST_RIIER_tag;

typedef union LFAST_PLLCR_union_tag {  /* LFAST PLL Control Register */
  vuint32_t R;
  struct {
    vuint32_t IPTMOD:3;
    vuint32_t _unused_3:11;            /* Reserved */
    vuint32_t SWPOFF:1;
    vuint32_t SWPON:1;
    vuint32_t REFINV:1;
    vuint32_t LPCFG:2;
    vuint32_t _unused_19:2;            /* Reserved */
    vuint32_t PLCKCW:2;                /* PLL Lock Ready Count Width */
    vuint32_t FDIVEN:1;
    vuint32_t FBDIV:6;
    vuint32_t PREDIV:2;
  } B;
} LFAST_PLLCR_tag;

typedef union LFAST_UNSTCR_union_tag { /* LFAST Unsolicited Tx Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:15;            /* Reserved */
    vuint32_t USNDRQ:1;                /* Tx Unsolicited send request */
    vuint32_t _unused_16:9;            /* Reserved */
    vuint32_t UNSHDR:7;                /* Tx Unsolicited Message Header */
  } B;
} LFAST_UNSTCR_tag;

typedef union LFAST_UNSTDR_union_tag { /* LFAST Unsolicited Tx Data Registers */
  vuint32_t R;
  struct {
    vuint32_t UNTXD:32;
  } B;
} LFAST_UNSTDR_tag;

typedef union LFAST_GSR_union_tag {    /* LFAST Global Status Register */
  vuint32_t R;
  struct {
    vuint32_t DUALMD:1;
    vuint32_t _unused_1:12;            /* Reserved */
    vuint32_t LRMD:1;
    vuint32_t LDSM:1;                  /* Transmit Interface Data Rate Status */
    vuint32_t DRSM:1;                  /* Receive Interface Data Rate Status */
    vuint32_t _unused_16:11;           /* Reserved */
    vuint32_t LPTXDN:1;
    vuint32_t LPFPDV:1;
    vuint32_t LPCPDV:1;
    vuint32_t LPCHDV:1;
    vuint32_t LPCSDV:1;
  } B;
} LFAST_GSR_tag;

typedef union LFAST_PISR_union_tag {   /* LFAST Ping Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t RXPNGD:8;                /* Ping Data Register */
  } B;
} LFAST_PISR_tag;

typedef union LFAST_DFSR_union_tag {   /* LFAST Data Frame Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved */
    vuint32_t RXDCNT:6;                /* Unread Rx Frame Data Count */
    vuint32_t _unused_8:5;             /* Reserved */
    vuint32_t RXFCNT:3;                /* Unread Rx Frame Count */
    vuint32_t _unused_16:2;            /* Reserved */
    vuint32_t TXDCNT:6;                /* Unread Tx Frame Data Count */
    vuint32_t _unused_24:5;            /* Reserved */
    vuint32_t TXFCNT:3;                /* Unread Tx Frame Count */
  } B;
} LFAST_DFSR_tag;

typedef union LFAST_TISR_union_tag {   /* LFAST Tx Interrupt Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:14;            /* Reserved */
    vuint32_t TXIEF:1;
    vuint32_t TXOVF:1;
    vuint32_t _unused_16:11;           /* Reserved */
    vuint32_t TXPNGF:1;
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t TXUNSF:1;                /* TXUNSF */
    vuint32_t TXICLCF:1;
    vuint32_t TXDTF:1;
  } B;
} LFAST_TISR_tag;

typedef union LFAST_RISR_union_tag {   /* LFAST Rx Interrupt Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;             /* Reserved */
    vuint32_t RXUOF:1;
    vuint32_t RXMNF:1;
    vuint32_t RXMXF:1;
    vuint32_t RXUFF:1;
    vuint32_t RXOFF:1;
    vuint32_t RXSZF:1;
    vuint32_t RXICF:1;
    vuint32_t RXLCEF:1;
    vuint32_t _unused_16:12;           /* Reserved */
    vuint32_t RXCTSF:1;
    vuint32_t RXDF:1;
    vuint32_t RXUNSF:1;
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} LFAST_RISR_tag;

typedef union LFAST_RIISR_union_tag {  /* LFAST Rx ICLC Interrupt Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:18;            /* Reserved */
    vuint32_t ICPFF:1;
    vuint32_t ICPSF:1;
    vuint32_t ICPRF:1;
    vuint32_t ICTOF:1;
    vuint32_t ICLPF:1;
    vuint32_t ICCTF:1;
    vuint32_t ICTDF:1;
    vuint32_t ICTEF:1;
    vuint32_t ICRFF:1;
    vuint32_t ICRSF:1;
    vuint32_t ICTFF:1;
    vuint32_t ICTSF:1;
    vuint32_t ICPOFF:1;
    vuint32_t ICPONF:1;
  } B;
} LFAST_RIISR_tag;

typedef union LFAST_PLLLSR_union_tag { /* LFAST PLL and LVDS Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:14;            /* Reserved */
    vuint32_t PLLDIS:1;                /* PLL Disable Status */
    vuint32_t PLDCR:1;                 /* PLL Lock Delay Counter Ready */
    vuint32_t _unused_16:12;           /* Reserved */
    vuint32_t LRSLPS:1;
    vuint32_t LDSLPS:1;
    vuint32_t _unused_30:2;            /* Reserved */
  } B;
} LFAST_PLLLSR_tag;

typedef union LFAST_UNSRSR_union_tag { /* LFAST Unsolicited Rx Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:23;            /* Reserved */
    vuint32_t URXDV:1;                 /* Unsolicited Data Valid */
    vuint32_t _unused_24:5;            /* Reserved */
    vuint32_t URPCNT:3;                /* Rx Unsolicited Payload */
  } B;
} LFAST_UNSRSR_tag;

typedef union LFAST_UNSRDR_union_tag { /* LFAST Unsolicited Rx Data Register */
  vuint32_t R;
  struct {
    vuint32_t UNRXD:32;                /* Unsolicited Receive Data */
  } B;
} LFAST_UNSRDR_tag;

struct LFAST_tag {
  LFAST_MCR_tag MCR;                   /* LFAST Mode Configuration Register */
  LFAST_SCR_tag SCR;                   /* LFAST Speed Control Register */
  LFAST_COCR_tag COCR;                 /* LFAST Correlator Control Register */
  LFAST_TMCR_tag TMCR;                 /* LFAST Test Mode Control Register */
  LFAST_ALCR_tag ALCR;                 /* LFAST Auto Loopback Control Register */
  LFAST_RCDCR_tag RCDCR;               /* LFAST Rate Change Delay Control Register */
  LFAST_SLCR_tag SLCR;                 /* LFAST Wakeup Delay Control Register */
  LFAST_ICR_tag ICR;                   /* LFAST ICLC Control Register */
  LFAST_PICR_tag PICR;                 /* LFAST Ping Control Register */
  uint8_t LFAST_reserved0[8];
  LFAST_RFCR_tag RFCR;                 /* LFAST Rx FIFO CTS Control Register */
  LFAST_TIER_tag TIER;                 /* LFAST Tx Interrupt Enable Register */
  LFAST_RIER_tag RIER;                 /* LFAST Rx Interrupt Enable Register */
  LFAST_RIIER_tag RIIER;               /* LFAST Rx ICLC Interrupt Enable Register */
  LFAST_PLLCR_tag PLLCR;               /* LFAST PLL Control Register */
  uint8_t LFAST_reserved1[4];
  LFAST_UNSTCR_tag UNSTCR;             /* LFAST Unsolicited Tx Control Register */
  LFAST_UNSTDR_tag UNSTDR[9];          /* LFAST Unsolicited Tx Data Registers */
  uint8_t LFAST_reserved2[20];
  LFAST_GSR_tag GSR;                   /* LFAST Global Status Register */
  LFAST_PISR_tag PISR;                 /* LFAST Ping Status Register */
  uint8_t LFAST_reserved3[12];
  LFAST_DFSR_tag DFSR;                 /* LFAST Data Frame Status Register */
  LFAST_TISR_tag TISR;                 /* LFAST Tx Interrupt Status Register */
  LFAST_RISR_tag RISR;                 /* LFAST Rx Interrupt Status Register */
  LFAST_RIISR_tag RIISR;               /* LFAST Rx ICLC Interrupt Status Register */
  LFAST_PLLLSR_tag PLLLSR;             /* LFAST PLL and LVDS Status Register */
  LFAST_UNSRSR_tag UNSRSR;             /* LFAST Unsolicited Rx Status Register */
  LFAST_UNSRDR_tag UNSRDR[9];          /* LFAST Unsolicited Rx Data Register */
};


/* ============================================================================
   =============================== Module: LINFLEXD ===========================
   ============================================================================ */

typedef union LINFLEXD_LINCR1_union_tag { /* LIN Control Register 1 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:15;            /* Reserved */
    vuint32_t NLSE:1;
    vuint32_t CCD:1;
    vuint32_t CFD:1;
    vuint32_t LASE:1;
    vuint32_t AUTOWU:1;
    vuint32_t MBL:4;
    vuint32_t BF:1;
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t LBKM:1;
    vuint32_t MME:1;
    vuint32_t SSBL:1;
    vuint32_t RBLM:1;
    vuint32_t SLEEP:1;
    vuint32_t INIT:1;
  } B;
} LINFLEXD_LINCR1_tag;

typedef union LINFLEXD_LINIER_union_tag { /* LIN Interrupt Enable Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t SZIE:1;
    vuint32_t OCIE:1;
    vuint32_t BEIE:1;
    vuint32_t CEIE:1;
    vuint32_t HEIE:1;
    vuint32_t _unused_21:2;            /* Reserved */
    vuint32_t FEIE:1;
    vuint32_t BOIE:1;
    vuint32_t LSIE:1;
    vuint32_t WUIE:1;
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t TOIE:1;
    vuint32_t DRIE:1;
    vuint32_t DTIE:1;
    vuint32_t HRIE:1;
  } B;
} LINFLEXD_LINIER_tag;

typedef union LINFLEXD_LINSR_union_tag { /* LIN Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;            /* Reserved */
    vuint32_t AUTOSYNC_COMP:1;
    vuint32_t RDC:3;
    vuint32_t LINS:4;                  /* LIN State */
    vuint32_t _unused_20:2;            /* Reserved */
    vuint32_t RMB:1;
    vuint32_t DRBNE:1;
    vuint32_t RXBUSY:1;
    vuint32_t RDI:1;
    vuint32_t WUF:1;
    vuint32_t _unused_27:2;            /* Reserved */
    vuint32_t DRF:1;
    vuint32_t DTF:1;
    vuint32_t HRF:1;
  } B;
} LINFLEXD_LINSR_tag;

typedef union LINFLEXD_LINESR_union_tag { /* LIN Error Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t SZF:1;
    vuint32_t OCF:1;                   /* Output Compare Flag */
    vuint32_t BEF:1;
    vuint32_t CEF:1;
    vuint32_t SFEF:1;
    vuint32_t SDEF:1;
    vuint32_t IDPEF:1;
    vuint32_t FEF:1;
    vuint32_t BOF:1;
    vuint32_t _unused_25:6;            /* Reserved */
    vuint32_t NF:1;
  } B;
} LINFLEXD_LINESR_tag;

typedef union LINFLEXD_UARTCR_union_tag { /* UART Mode Control Register */
  vuint32_t R;
  struct {
    vuint32_t MIS:1;
    vuint32_t CSP:3;
    vuint32_t OSR:4;                   /* Over Sampling Rate */
    vuint32_t ROSE:1;                  /* Reduced Over Sampling Enable */
    vuint32_t NEF:3;                   /* Number of expected frames */
    vuint32_t DTU_PCETX:1;             /* Disable Timeout in UART mode */
    vuint32_t SBUR:2;
    vuint32_t WLS:1;
    vuint32_t TDFL_TFC:3;
    vuint32_t RDFL_RFC:3;
    vuint32_t RFBM:1;
    vuint32_t TFBM:1;
    vuint32_t WL1:1;
    vuint32_t PC1:1;
    vuint32_t RXEN:1;
    vuint32_t TXEN:1;
    vuint32_t PC0:1;
    vuint32_t PCE:1;
    vuint32_t WL0:1;
    vuint32_t UART:1;
  } B;
} LINFLEXD_UARTCR_tag;

typedef union LINFLEXD_UARTSR_union_tag { /* UART Mode Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t SZF:1;
    vuint32_t OCF:1;
    vuint32_t PE:4;
    vuint32_t RMB:1;
    vuint32_t FEF:1;
    vuint32_t BOF:1;
    vuint32_t RDI:1;
    vuint32_t WUF:1;
    vuint32_t RFNE:1;
    vuint32_t TO:1;
    vuint32_t DRFRFE:1;
    vuint32_t DTFTFF:1;
    vuint32_t NF:1;
  } B;
} LINFLEXD_UARTSR_tag;

typedef union LINFLEXD_LINTCSR_union_tag { /* LIN Time-Out Control Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:21;            /* Reserved */
    vuint32_t MODE:1;
    vuint32_t IOT:1;
    vuint32_t TOCE:1;
    vuint32_t CNT:8;
  } B;
} LINFLEXD_LINTCSR_tag;

typedef union LINFLEXD_LINOCR_union_tag { /* LIN Output Compare Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t OC2:8;
    vuint32_t OC1:8;
  } B;
} LINFLEXD_LINOCR_tag;

typedef union LINFLEXD_LINTOCR_union_tag { /* LIN Time-Out Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:20;            /* Reserved */
    vuint32_t RTO:4;
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t HTO:7;
  } B;
} LINFLEXD_LINTOCR_tag;

typedef union LINFLEXD_LINFBRR_union_tag { /* LIN Fractional Baud Rate Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:28;            /* Reserved */
    vuint32_t FBR:4;
  } B;
} LINFLEXD_LINFBRR_tag;

typedef union LINFLEXD_LINIBRR_union_tag { /* LIN Integer Baud Rate Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;            /* Reserved */
    vuint32_t IBR:20;
  } B;
} LINFLEXD_LINIBRR_tag;

typedef union LINFLEXD_LINCFR_union_tag { /* LIN Checksum Field Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t CF:8;
  } B;
} LINFLEXD_LINCFR_tag;

typedef union LINFLEXD_LINCR2_union_tag { /* LIN Control Register 2 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t TBDE:1;
    vuint32_t IOBE:1;
    vuint32_t IOPE:1;
    vuint32_t WURQ:1;
    vuint32_t DDRQ:1;
    vuint32_t DTRQ:1;
    vuint32_t ABRQ:1;
    vuint32_t HTRQ:1;
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} LINFLEXD_LINCR2_tag;

typedef union LINFLEXD_BIDR_union_tag { /* Buffer Identifier Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t _unused_16:3;            /* Reserved */
    vuint32_t DFL:3;
    vuint32_t DIR:1;
    vuint32_t CCS:1;
    vuint32_t _unused_24:2;            /* Reserved */
    vuint32_t ID:6;
  } B;
} LINFLEXD_BIDR_tag;

typedef union LINFLEXD_BDRL_union_tag { /* Buffer Data Register Least Significant */
  vuint32_t R;
  struct {
    vuint32_t DATA3:8;
    vuint32_t DATA2:8;
    vuint32_t DATA1:8;
    vuint32_t DATA0:8;
  } B;
} LINFLEXD_BDRL_tag;

typedef union LINFLEXD_BDRM_union_tag { /* Buffer Data Register Most Significant */
  vuint32_t R;
  struct {
    vuint32_t DATA7:8;
    vuint32_t DATA6:8;
    vuint32_t DATA5:8;
    vuint32_t DATA4:8;
  } B;
} LINFLEXD_BDRM_tag;

typedef union LINFLEXD_IFER_union_tag { /* Identifier Filter Enable Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t FACT:16;
  } B;
} LINFLEXD_IFER_tag;

typedef union LINFLEXD_IFMI_union_tag { /* Identifier Filter Match Index */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:27;            /* Reserved */
    vuint32_t IFMI:5;
  } B;
} LINFLEXD_IFMI_tag;

typedef union LINFLEXD_IFMR_union_tag { /* Identifier Filter Mode Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t IFM:8;
  } B;
} LINFLEXD_IFMR_tag;

typedef union LINFLEXD_IFCR_union_tag { /* Identifier Filter Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t _unused_16:3;            /* Reserved */
    vuint32_t DFL:3;                   /* Data Field Length */
    vuint32_t DIR:1;                   /* Direction */
    vuint32_t CCS:1;                   /* Classic Checksum */
    vuint32_t _unused_24:2;            /* Reserved */
    vuint32_t ID:6;                    /* Identifier */
  } B;
} LINFLEXD_IFCR_tag;

typedef union LINFLEXD_GCR_union_tag { /* Global Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:26;            /* Reserved */
    vuint32_t TDFBM:1;
    vuint32_t RDFBM:1;
    vuint32_t TDLIS:1;
    vuint32_t RDLIS:1;
    vuint32_t STOP:1;
    vuint32_t SR:1;
  } B;
} LINFLEXD_GCR_tag;

typedef union LINFLEXD_UARTPTO_union_tag { /* UART Preset Timeout Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:20;            /* Reserved */
    vuint32_t PTO:12;
  } B;
} LINFLEXD_UARTPTO_tag;

typedef union LINFLEXD_UARTCTO_union_tag { /* UART Current Timeout Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:20;            /* Reserved */
    vuint32_t CTO:12;
  } B;
} LINFLEXD_UARTCTO_tag;

typedef union LINFLEXD_DMATXE_union_tag { /* DMA Tx Enable Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t DTE0:1;                  /* DMA Tx channel enable */
  } B;
} LINFLEXD_DMATXE_tag;

typedef union LINFLEXD_DMARXE_union_tag { /* DMA Rx Enable Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t DRE0:1;
  } B;
} LINFLEXD_DMARXE_tag;

struct LINFLEXD_tag {
  LINFLEXD_LINCR1_tag LINCR1;          /* LIN Control Register 1 */
  LINFLEXD_LINIER_tag LINIER;          /* LIN Interrupt Enable Register */
  LINFLEXD_LINSR_tag LINSR;            /* LIN Status Register */
  LINFLEXD_LINESR_tag LINESR;          /* LIN Error Status Register */
  LINFLEXD_UARTCR_tag UARTCR;          /* UART Mode Control Register */
  LINFLEXD_UARTSR_tag UARTSR;          /* UART Mode Status Register */
  LINFLEXD_LINTCSR_tag LINTCSR;        /* LIN Time-Out Control Status Register */
  LINFLEXD_LINOCR_tag LINOCR;          /* LIN Output Compare Register */
  LINFLEXD_LINTOCR_tag LINTOCR;        /* LIN Time-Out Control Register */
  LINFLEXD_LINFBRR_tag LINFBRR;        /* LIN Fractional Baud Rate Register */
  LINFLEXD_LINIBRR_tag LINIBRR;        /* LIN Integer Baud Rate Register */
  LINFLEXD_LINCFR_tag LINCFR;          /* LIN Checksum Field Register */
  LINFLEXD_LINCR2_tag LINCR2;          /* LIN Control Register 2 */
  LINFLEXD_BIDR_tag BIDR;              /* Buffer Identifier Register */
  LINFLEXD_BDRL_tag BDRL;              /* Buffer Data Register Least Significant */
  LINFLEXD_BDRM_tag BDRM;              /* Buffer Data Register Most Significant */
  LINFLEXD_IFER_tag IFER;              /* Identifier Filter Enable Register */
  LINFLEXD_IFMI_tag IFMI;              /* Identifier Filter Match Index */
  LINFLEXD_IFMR_tag IFMR;              /* Identifier Filter Mode Register */
  LINFLEXD_IFCR_tag IFCR[16];          /* Identifier Filter Control Register */
  LINFLEXD_GCR_tag GCR;                /* Global Control Register */
  LINFLEXD_UARTPTO_tag UARTPTO;        /* UART Preset Timeout Register */
  LINFLEXD_UARTCTO_tag UARTCTO;        /* UART Current Timeout Register */
  LINFLEXD_DMATXE_tag DMATXE;          /* DMA Tx Enable Register */
  LINFLEXD_DMARXE_tag DMARXE;          /* DMA Rx Enable Register */
};


/* ============================================================================
   =============================== Module: MCB ================================
   ============================================================================ */

typedef union MCB_MISC4_union_tag {    /* Miscellaneous 4 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:6;             /* Reserved */
    vuint32_t _unused_11:3;            /* Reserved */
    vuint32_t MTR:1;                   /* Memory test repair */
    vuint32_t EN_FCCU_NMI_Z4:1;        /* FCCU NMI enable for z4 core */
    vuint32_t SOFTWARE_FAULT:1;        /* Software fault input to FCCU at NCF 44 */
    vuint32_t _unused_17:7;            /* Reserved */
    vuint32_t RRAM_MEM:1;              /* Retention RAM memory control */
    vuint32_t _unused_25:2;            /* Reserved */
    vuint32_t _unused_27:4;            /* Reserved */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} MCB_MISC4_tag;

typedef union MCB_NPC_SPECIAL_ENABLE_union_tag { /* NPC Special Enable Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:14;            /* Reserved */
    vuint32_t NPC_NAL_FIFO_EXTENSION_MODE:2; /* NAL_NPC extended FIFO mode */
    vuint32_t WATER_MARK:4;            /* NAL FIFO watermark level */
    vuint32_t FIFO_DEPTH:4;            /* NAL FIFO depth */
    vuint32_t _unused_24:7;            /* Reserved */
    vuint32_t DISABLE_SPECIAL_ENABLE:1; /* Disables the special enable functionality on the NPC auxiliary EVTI pad */
  } B;
} MCB_NPC_SPECIAL_ENABLE_tag;

typedef union MCB_MISC0_union_tag {    /* Miscellaneous 0 */
  vuint32_t R;
  struct {
    vuint32_t CLKOUT1_SEL:7;           /* CLKOUT_1 clock source selection */
    vuint32_t CLKOUT0_SEL:7;           /* CLKOUT_0 clock source selection */
    vuint32_t ENET_TIMER_MIPI_SEL:1;   /* Ethernet timer 2 and timer 3 selection */
    vuint32_t ENET_TIMER_MIPI1_SEL:2;  /* Ethernet timer 2 and timer 3 selection */
    vuint32_t ENET_TIMER_MIPI0_SEL:2;  /* Ethernet timer 2 and timer 3 selection */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t SPT_EARLY_EN:1;          /* SPT early write enable */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t SPT_MODE:1;              /* SPT mode select */
    vuint32_t CTE_SPT_SYNC_MIPI_SEL:1; /* SPT RCS/RFS and CTE RCS_O(GPIO_80)/RFS_O(GPIO_77) source selection */
    vuint32_t CTE_SPT_SYNC_MIPI1_SEL:2; /* SPT/CTE/CTE IO RCS/RFS selection */
    vuint32_t CTE_SPT_SYNC_MIPI0_SEL:2; /* SPT/CTE/CTE_IO RCS/RFS selection */
    vuint32_t RAE:1;                   /* Register Bus Abort Enable */
    vuint32_t PAE:1;                   /* Peripheral Bus Abort Enable */
  } B;
} MCB_MISC0_tag;

typedef union MCB_MISC1_union_tag {    /* Miscellaneous 1 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t _unused_16:2;            /* Reserved */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t QUADSPI_DUMMY0_SRE_SEL:1; /* QuadSPI Dummy Pad Slew Rate Control Selection */
    vuint32_t SRE_2_CONFIG:1;          /* QuadSPI dummy pad SRE_2 configuration */
    vuint32_t SRE_1_CONFIG:1;          /* QuadSPI dummy pad SRE_1 configuration */
    vuint32_t SRE_0_CONFIG:1;          /* QuadSPI dummy pad SRE_0 configuration */
    vuint32_t _unused_23:3;            /* Reserved */
    vuint32_t MIPI_CTEI_SYNC_SPT_CTEO_SEL:1; /* SPT RCS/RFS and CTE RCS_O(GPIO_80)/ RFS_O(GPIO_77) source selection */
    vuint32_t START_INDICATION:1;      /* Chip start and frame start indication signal */
    vuint32_t _unused_28:4;            /* Reserved */
  } B;
} MCB_MISC1_tag;

typedef union MCB_MISC2_union_tag {    /* Miscellaneous 2 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:18;            /* Reserved */
    vuint32_t NPC_AUR:1;               /* NPC aurora stall data */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t NXMC_2_FIFO_EN:1;        /* Enable signal for the NXMC_2 FIFO */
    vuint32_t _unused_21:3;            /* Reserved */
    vuint32_t SPT_NEXUS_THROTTLE_CONTROL:6;
    vuint32_t RCCU_DMA_STATUS:1;       /* DMA RCCU active status */
    vuint32_t RCCU_Z4_STATUS:1;        /* Z4 RCCU active status */
  } B;
} MCB_MISC2_tag;

typedef union MCB_MISC3_union_tag {    /* Miscellaneous 3 */
  vuint32_t R;
  struct {
    vuint32_t POR_REN:31;              /* Power retention */
    vuint32_t VCO_CLK_OUTPUT:1;        /* VCO clock output */
  } B;
} MCB_MISC3_tag;

typedef union MCB_NEX_FIFO_STATUS_union_tag { /* Nexus Trace FIFO Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:29;            /* Reserved */
    vuint32_t NXMC_3_FIFO_OFLOW:1;     /* Overflow status of NXMC_3_FIFO */
    vuint32_t NAL_NPC_FIFO_OFLOW:1;    /* Overflow status of NAL_NPC extended FIFO */
    vuint32_t NXMC_2_FIFO_OFLOW:1;     /* Overflow status of NXMC_2_FIFO */
  } B;
} MCB_NEX_FIFO_STATUS_tag;

typedef union MCB_PAD_LFAST_TX_union_tag { /* LFAST Tx/Ref Supply Pad Setting */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:15;            /* Reserved */
    vuint32_t FUNC_OUT:1;
    vuint32_t CTRL_CURRENT_REF:4;      /* Control current reference */
    vuint32_t _unused_20:4;            /* Reserved */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t BOOST_TRANSMITTER:1;     /* Boost transmission */
    vuint32_t _unused_27:2;            /* Reserved */
    vuint32_t ENB_INTERNAL_TER:1;      /* Enable internal termination */
    vuint32_t ENB_CURRENT_REF_CTRL:1;  /* Enable current reference control */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} MCB_PAD_LFAST_TX_tag;

typedef union MCB_PAD_LFAST_RX_union_tag { /* LFAST RX Pads Setting */
  vuint32_t R;
  struct {
    vuint32_t LFAST_PHASEA_EN:1;       /* PLL LFAST clock A phase */
    vuint32_t _unused_1:14;            /* Reserved */
    vuint32_t ENB_INTERNAL_TER:1;      /* Enable internal termination */
    vuint32_t _unused_16:12;           /* Reserved */
    vuint32_t CURRENT_BOOST:1;         /* Current boost */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t IN_BUFFER_ENB_CTRL:1;    /* Input buffer enable control */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} MCB_PAD_LFAST_RX_tag;

typedef union MCB_CORE_NEXUS_ENABLE_STATUS_union_tag { /* Nexus Core Enable Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t TRACE_MODE:1;            /* Trace mode */
  } B;
} MCB_CORE_NEXUS_ENABLE_STATUS_tag;

struct MCB_tag {
  uint8_t MCB_reserved0[4];
  MCB_MISC4_tag MISC4;                 /* Miscellaneous 4 */
  MCB_NPC_SPECIAL_ENABLE_tag NPC_SPECIAL_ENABLE; /* NPC Special Enable Control */
  MCB_MISC0_tag MISC0;                 /* Miscellaneous 0 */
  MCB_MISC1_tag MISC1;                 /* Miscellaneous 1 */
  MCB_MISC2_tag MISC2;                 /* Miscellaneous 2 */
  MCB_MISC3_tag MISC3;                 /* Miscellaneous 3 */
  uint8_t MCB_reserved1[36];
  MCB_NEX_FIFO_STATUS_tag NEX_FIFO_STATUS; /* Nexus Trace FIFO Status */
  MCB_PAD_LFAST_TX_tag PAD_LFAST_TX;   /* LFAST Tx/Ref Supply Pad Setting */
  MCB_PAD_LFAST_RX_tag PAD_LFAST_RX;   /* LFAST RX Pads Setting */
  uint8_t MCB_reserved2[20];
  MCB_CORE_NEXUS_ENABLE_STATUS_tag CORE_NEXUS_ENABLE_STATUS; /* Nexus Core Enable Status */
};


/* ============================================================================
   =============================== Module: MC_CGM =============================
   ============================================================================ */

typedef union MC_CGM_PCS_SDUR_union_tag { /* PCS Switch Duration */
  vuint32_t R;
  struct {
    vuint32_t SDUR:8;                  /* Switch Duration */
    vuint32_t _unused_8:24;
  } B;
} MC_CGM_PCS_SDUR_tag;

typedef union MC_CGM_PCS_DIVC2_union_tag { /* PCS Divider Change */
  vuint32_t R;
  struct {
    vuint32_t INIT:16;                 /* Divider Change Initial Value */
    vuint32_t _unused_16:8;
    vuint32_t RATE:8;                  /* Divider Change Rate */
  } B;
} MC_CGM_PCS_DIVC2_tag;

typedef union MC_CGM_PCS_DIVE2_union_tag { /* PCS Divider End */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;
    vuint32_t DIVE:20;                 /* Divider End Value */
  } B;
} MC_CGM_PCS_DIVE2_tag;

typedef union MC_CGM_PCS_DIVS2_union_tag { /* PCS Divider Start */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;
    vuint32_t DIVS:20;                 /* Divider Start Value */
  } B;
} MC_CGM_PCS_DIVS2_tag;

typedef union MC_CGM_PCS_DIVC4_union_tag { /* PCS Divider Change */
  vuint32_t R;
  struct {
    vuint32_t INIT:16;                 /* Divider Change Initial Value */
    vuint32_t _unused_16:8;
    vuint32_t RATE:8;                  /* Divider Change Rate */
  } B;
} MC_CGM_PCS_DIVC4_tag;

typedef union MC_CGM_PCS_DIVE4_union_tag { /* PCS Divider End */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;
    vuint32_t DIVE:20;                 /* Divider End Value */
  } B;
} MC_CGM_PCS_DIVE4_tag;

typedef union MC_CGM_PCS_DIVS4_union_tag { /* PCS Divider Start */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;
    vuint32_t DIVS:20;                 /* Divider Start Value */
  } B;
} MC_CGM_PCS_DIVS4_tag;

typedef union MC_CGM_DIV_UPD_STAT_union_tag { /* Divider Update Status */
  vuint32_t R;
  struct {
    vuint32_t SYS_UPD_STAT:1;          /* System Clock Divider Update Status */
    vuint32_t _unused_1:15;
    vuint32_t _unused_16:1;
    vuint32_t AUX14_UPD_STAT:1;        /* Auxiliary Clock 14 Divider Update Status */
    vuint32_t _unused_18:1;
    vuint32_t _unused_19:1;
    vuint32_t _unused_20:1;
    vuint32_t AUX10_UPD_STAT:1;        /* Auxiliary Clock 10 Divider Update Status */
    vuint32_t AUX9_UPD_STAT:1;         /* Auxiliary Clock 9 Divider Update Status */
    vuint32_t _unused_23:1;
    vuint32_t _unused_24:1;
    vuint32_t _unused_25:1;
    vuint32_t _unused_26:1;
    vuint32_t _unused_27:1;
    vuint32_t _unused_28:1;
    vuint32_t _unused_29:1;
    vuint32_t _unused_30:1;
    vuint32_t AUX0_UPD_STAT:1;         /* Auxiliary Clock 0 Divider Update Status */
  } B;
} MC_CGM_DIV_UPD_STAT_tag;

typedef union MC_CGM_SC_SS_union_tag { /* System Clock Select */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:5;
    vuint32_t SELSTAT:3;               /* Divider Start Value */
    vuint32_t _unused_8:4;
    vuint32_t SWTRG:3;                 /* Switch Trigger Cause */
    vuint32_t SWIP:1;                  /* Switch In Progress */
    vuint32_t _unused_16:16;
  } B;
} MC_CGM_SC_SS_tag;

typedef union MC_CGM_AC0_SC_union_tag { /* Auxiliary Clock Select Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:6;             /* Reserved */
    vuint32_t SELCTL:2;                /* Auxiliary Clock Source Selection Control */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} MC_CGM_AC0_SC_tag;

typedef union MC_CGM_AC0_SS_union_tag { /* Auxiliary Clock Select Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:6;             /* Reserved */
    vuint32_t SELSTAT:2;               /* Auxiliary Clock Source Selection Status */
    vuint32_t _unused_8:24;
  } B;
} MC_CGM_AC0_SS_tag;

typedef union MC_CGM_AC0_DC0_union_tag { /* Auxiliary Clock Divider Configuration */
  vuint32_t R;
  struct {
    vuint32_t DE:1;                    /* Divider 0 Enable */
    vuint32_t _unused_1:13;            /* Reserved */
    vuint32_t DIV:2;                   /* Divider 0 Division Value */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} MC_CGM_AC0_DC0_tag;

typedef union MC_CGM_AC0_DC1_union_tag { /* Auxiliary Clock Divider Configuration */
  vuint32_t R;
  struct {
    vuint32_t DE:1;                    /* Divider 1 Enable */
    vuint32_t _unused_1:13;            /* Reserved */
    vuint32_t DIV:2;                   /* Divider 1 Division Value */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} MC_CGM_AC0_DC1_tag;

typedef union MC_CGM_AC0_DC2_union_tag { /* Auxiliary Clock Divider Configuration */
  vuint32_t R;
  struct {
    vuint32_t DE:1;                    /* Divider 2 Enable */
    vuint32_t _unused_1:13;            /* Reserved */
    vuint32_t DIV:2;                   /* Divider 2 Division Value */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} MC_CGM_AC0_DC2_tag;

typedef union MC_CGM_AC1_SC_union_tag { /* Auxiliary Clock Select Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:6;             /* Reserved */
    vuint32_t SELCTL:2;                /* Auxiliary Clock Source Selection Control */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} MC_CGM_AC1_SC_tag;

typedef union MC_CGM_AC1_SS_union_tag { /* Auxiliary Clock Select Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:6;             /* Reserved */
    vuint32_t SELSTAT:2;               /* Auxiliary Clock Source Selection Status */
    vuint32_t _unused_8:24;
  } B;
} MC_CGM_AC1_SS_tag;

typedef union MC_CGM_AC2_SC_union_tag { /* Auxiliary Clock Select Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:6;             /* Reserved */
    vuint32_t SELCTL:2;                /* Auxiliary Clock Source Selection Control */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} MC_CGM_AC2_SC_tag;

typedef union MC_CGM_AC2_SS_union_tag { /* Auxiliary Clock Select Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:6;             /* Reserved */
    vuint32_t SELSTAT:2;               /* Auxiliary Clock Source Selection Status */
    vuint32_t _unused_8:24;
  } B;
} MC_CGM_AC2_SS_tag;

typedef union MC_CGM_AC3_SC_union_tag { /* Auxiliary Clock Select Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:6;             /* Reserved */
    vuint32_t SELCTL:2;                /* Auxiliary Clock Source Selection Control */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} MC_CGM_AC3_SC_tag;

typedef union MC_CGM_AC3_SS_union_tag { /* Auxiliary Clock Select Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:6;             /* Reserved */
    vuint32_t SELSTAT:2;               /* Auxiliary Clock Source Selection Status */
    vuint32_t _unused_8:24;
  } B;
} MC_CGM_AC3_SS_tag;

typedef union MC_CGM_AC4_SC_union_tag { /* Auxiliary Clock Select Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:6;             /* Reserved */
    vuint32_t SELCTL:2;                /* Auxiliary Clock Source Selection Control */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} MC_CGM_AC4_SC_tag;

typedef union MC_CGM_AC4_SS_union_tag { /* Auxiliary Clock Select Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:6;             /* Reserved */
    vuint32_t SELSTAT:2;               /* Auxiliary Clock Source Selection Status */
    vuint32_t _unused_8:24;
  } B;
} MC_CGM_AC4_SS_tag;

typedef union MC_CGM_AC5_SC_union_tag { /* Auxiliary Clock Select Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:6;             /* Reserved */
    vuint32_t SELCTL:2;                /* Auxiliary Clock Source Selection Control */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} MC_CGM_AC5_SC_tag;

typedef union MC_CGM_AC5_SS_union_tag { /* Auxiliary Clock Select Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:6;             /* Reserved */
    vuint32_t SELSTAT:2;               /* Auxiliary Clock Source Selection Status */
    vuint32_t _unused_8:24;
  } B;
} MC_CGM_AC5_SS_tag;

typedef union MC_CGM_AC6_SC_union_tag { /* Auxiliary Clock Select Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:6;             /* Reserved */
    vuint32_t SELCTL:2;                /* Auxiliary Clock Source Selection Control */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} MC_CGM_AC6_SC_tag;

typedef union MC_CGM_AC6_SS_union_tag { /* Auxiliary Clock Select Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:6;             /* Reserved */
    vuint32_t SELSTAT:2;               /* Auxiliary Clock Source Selection Status */
    vuint32_t _unused_8:24;
  } B;
} MC_CGM_AC6_SS_tag;

typedef union MC_CGM_AC7_SC_union_tag { /* Auxiliary Clock Select Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:6;             /* Reserved */
    vuint32_t SELCTL:2;                /* Auxiliary Clock Source Selection Control */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} MC_CGM_AC7_SC_tag;

typedef union MC_CGM_AC7_SS_union_tag { /* Auxiliary Clock Select Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:6;             /* Reserved */
    vuint32_t SELSTAT:2;               /* Auxiliary Clock Source Selection Status */
    vuint32_t _unused_8:24;
  } B;
} MC_CGM_AC7_SS_tag;

typedef union MC_CGM_AC8_SC_union_tag { /* Auxiliary Clock Select Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:5;             /* Reserved */
    vuint32_t SELCTL:3;                /* Auxiliary Clock Source Selection Control */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} MC_CGM_AC8_SC_tag;

typedef union MC_CGM_AC8_SS_union_tag { /* Auxiliary Clock Select Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:5;             /* Reserved */
    vuint32_t SELSTAT:3;               /* Auxiliary Clock Source Selection Status */
    vuint32_t _unused_8:24;
  } B;
} MC_CGM_AC8_SS_tag;

typedef union MC_CGM_AC9_SC_union_tag { /* Auxiliary Clock Select Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:6;             /* Reserved */
    vuint32_t SELCTL:2;                /* Auxiliary Clock Source Selection Control */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} MC_CGM_AC9_SC_tag;

typedef union MC_CGM_AC9_SS_union_tag { /* Auxiliary Clock Select Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:6;             /* Reserved */
    vuint32_t SELSTAT:2;               /* Auxiliary Clock Source Selection Status */
    vuint32_t _unused_8:24;
  } B;
} MC_CGM_AC9_SS_tag;

typedef union MC_CGM_AC9_DC0_union_tag { /* Auxiliary Clock Divider Configuration */
  vuint32_t R;
  struct {
    vuint32_t DE:1;                    /* Divider 0 Enable */
    vuint32_t _unused_1:8;             /* Reserved */
    vuint32_t DIV:7;                   /* Divider 0 Division Value */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} MC_CGM_AC9_DC0_tag;

typedef union MC_CGM_AC10_SC_union_tag { /* Auxiliary Clock Select Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:5;             /* Reserved */
    vuint32_t SELCTL:3;                /* Auxiliary Clock Source Selection Control */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} MC_CGM_AC10_SC_tag;

typedef union MC_CGM_AC10_SS_union_tag { /* Auxiliary Clock Select Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:5;             /* Reserved */
    vuint32_t SELSTAT:3;               /* Auxiliary Clock Source Selection Status */
    vuint32_t _unused_8:24;
  } B;
} MC_CGM_AC10_SS_tag;

typedef union MC_CGM_AC10_DC0_union_tag { /* Auxiliary Clock Divider Configuration */
  vuint32_t R;
  struct {
    vuint32_t DE:1;                    /* Divider 0 Enable */
    vuint32_t _unused_1:13;            /* Reserved */
    vuint32_t DIV:2;                   /* Divider 0 Division Value */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} MC_CGM_AC10_DC0_tag;

typedef union MC_CGM_AC11_SC_union_tag { /* Auxiliary Clock Select Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:5;             /* Reserved */
    vuint32_t SELCTL:3;                /* Auxiliary Clock Source Selection Control */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} MC_CGM_AC11_SC_tag;

typedef union MC_CGM_AC11_SS_union_tag { /* Auxiliary Clock Select Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:5;             /* Reserved */
    vuint32_t SELSTAT:3;               /* Auxiliary Clock Source Selection Status */
    vuint32_t _unused_8:24;
  } B;
} MC_CGM_AC11_SS_tag;

typedef union MC_CGM_AC12_SC_union_tag { /* Auxiliary Clock Select Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:6;             /* Reserved */
    vuint32_t SELCTL:2;                /* Auxiliary Clock Source Selection Control */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} MC_CGM_AC12_SC_tag;

typedef union MC_CGM_AC12_SS_union_tag { /* Auxiliary Clock Select Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:6;             /* Reserved */
    vuint32_t SELSTAT:2;               /* Auxiliary Clock Source Selection Status */
    vuint32_t _unused_8:24;
  } B;
} MC_CGM_AC12_SS_tag;

typedef union MC_CGM_AC13_SC_union_tag { /* Auxiliary Clock Select Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:6;             /* Reserved */
    vuint32_t SELCTL:2;                /* Auxiliary Clock Source Selection Control */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} MC_CGM_AC13_SC_tag;

typedef union MC_CGM_AC13_SS_union_tag { /* Auxiliary Clock Select Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:6;             /* Reserved */
    vuint32_t SELSTAT:2;               /* Auxiliary Clock Source Selection Status */
    vuint32_t _unused_8:24;
  } B;
} MC_CGM_AC13_SS_tag;

typedef union MC_CGM_AC14_SC_union_tag { /* Auxiliary Clock Select Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:6;             /* Reserved */
    vuint32_t SELCTL:2;                /* Auxiliary Clock Source Selection Control */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} MC_CGM_AC14_SC_tag;

typedef union MC_CGM_AC14_SS_union_tag { /* Auxiliary Clock Select Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:6;             /* Reserved */
    vuint32_t SELSTAT:2;               /* Auxiliary Clock Source Selection Status */
    vuint32_t _unused_8:24;
  } B;
} MC_CGM_AC14_SS_tag;

typedef union MC_CGM_AC14_DC0_union_tag { /* Auxiliary Clock Divider Configuration */
  vuint32_t R;
  struct {
    vuint32_t DE:1;                    /* Divider 0 Enable */
    vuint32_t _unused_1:8;             /* Reserved */
    vuint32_t DIV:7;                   /* Divider 0 Division Value */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} MC_CGM_AC14_DC0_tag;

typedef union MC_CGM_AC15_SC_union_tag { /* Auxiliary Clock Select Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:5;             /* Reserved */
    vuint32_t SELCTL:3;                /* Auxiliary Clock Source Selection Control */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} MC_CGM_AC15_SC_tag;

typedef union MC_CGM_AC15_SS_union_tag { /* Auxiliary Clock Select Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:5;             /* Reserved */
    vuint32_t SELSTAT:3;               /* Auxiliary Clock Source Selection Status */
    vuint32_t _unused_8:24;
  } B;
} MC_CGM_AC15_SS_tag;

struct MC_CGM_tag {
  uint8_t MC_CGM_reserved0[1792];
  MC_CGM_PCS_SDUR_tag PCS_SDUR;        /* PCS Switch Duration */
  uint8_t MC_CGM_reserved1[12];
  MC_CGM_PCS_DIVC2_tag PCS_DIVC2;      /* PCS Divider Change */
  MC_CGM_PCS_DIVE2_tag PCS_DIVE2;      /* PCS Divider End */
  MC_CGM_PCS_DIVS2_tag PCS_DIVS2;      /* PCS Divider Start */
  uint8_t MC_CGM_reserved2[12];
  MC_CGM_PCS_DIVC4_tag PCS_DIVC4;      /* PCS Divider Change */
  MC_CGM_PCS_DIVE4_tag PCS_DIVE4;      /* PCS Divider End */
  MC_CGM_PCS_DIVS4_tag PCS_DIVS4;      /* PCS Divider Start */
  uint8_t MC_CGM_reserved3[168];
  MC_CGM_DIV_UPD_STAT_tag DIV_UPD_STAT; /* Divider Update Status */
  uint8_t MC_CGM_reserved4[4];
  MC_CGM_SC_SS_tag SC_SS;              /* System Clock Select */
  uint8_t MC_CGM_reserved5[24];
  MC_CGM_AC0_SC_tag AC0_SC;            /* Auxiliary Clock Select Control */
  MC_CGM_AC0_SS_tag AC0_SS;            /* Auxiliary Clock Select Status */
  MC_CGM_AC0_DC0_tag AC0_DC0;          /* Auxiliary Clock Divider Configuration */
  MC_CGM_AC0_DC1_tag AC0_DC1;          /* Auxiliary Clock Divider Configuration */
  MC_CGM_AC0_DC2_tag AC0_DC2;          /* Auxiliary Clock Divider Configuration */
  uint8_t MC_CGM_reserved6[12];
  MC_CGM_AC1_SC_tag AC1_SC;            /* Auxiliary Clock Select Control */
  MC_CGM_AC1_SS_tag AC1_SS;            /* Auxiliary Clock Select Status */
  uint8_t MC_CGM_reserved7[24];
  MC_CGM_AC2_SC_tag AC2_SC;            /* Auxiliary Clock Select Control */
  MC_CGM_AC2_SS_tag AC2_SS;            /* Auxiliary Clock Select Status */
  uint8_t MC_CGM_reserved8[24];
  MC_CGM_AC3_SC_tag AC3_SC;            /* Auxiliary Clock Select Control */
  MC_CGM_AC3_SS_tag AC3_SS;            /* Auxiliary Clock Select Status */
  uint8_t MC_CGM_reserved9[24];
  MC_CGM_AC4_SC_tag AC4_SC;            /* Auxiliary Clock Select Control */
  MC_CGM_AC4_SS_tag AC4_SS;            /* Auxiliary Clock Select Status */
  uint8_t MC_CGM_reserved10[24];
  MC_CGM_AC5_SC_tag AC5_SC;            /* Auxiliary Clock Select Control */
  MC_CGM_AC5_SS_tag AC5_SS;            /* Auxiliary Clock Select Status */
  uint8_t MC_CGM_reserved11[24];
  MC_CGM_AC6_SC_tag AC6_SC;            /* Auxiliary Clock Select Control */
  MC_CGM_AC6_SS_tag AC6_SS;            /* Auxiliary Clock Select Status */
  uint8_t MC_CGM_reserved12[24];
  MC_CGM_AC7_SC_tag AC7_SC;            /* Auxiliary Clock Select Control */
  MC_CGM_AC7_SS_tag AC7_SS;            /* Auxiliary Clock Select Status */
  uint8_t MC_CGM_reserved13[24];
  MC_CGM_AC8_SC_tag AC8_SC;            /* Auxiliary Clock Select Control */
  MC_CGM_AC8_SS_tag AC8_SS;            /* Auxiliary Clock Select Status */
  uint8_t MC_CGM_reserved14[24];
  MC_CGM_AC9_SC_tag AC9_SC;            /* Auxiliary Clock Select Control */
  MC_CGM_AC9_SS_tag AC9_SS;            /* Auxiliary Clock Select Status */
  MC_CGM_AC9_DC0_tag AC9_DC0;          /* Auxiliary Clock Divider Configuration */
  uint8_t MC_CGM_reserved15[20];
  MC_CGM_AC10_SC_tag AC10_SC;          /* Auxiliary Clock Select Control */
  MC_CGM_AC10_SS_tag AC10_SS;          /* Auxiliary Clock Select Status */
  MC_CGM_AC10_DC0_tag AC10_DC0;        /* Auxiliary Clock Divider Configuration */
  uint8_t MC_CGM_reserved16[20];
  MC_CGM_AC11_SC_tag AC11_SC;          /* Auxiliary Clock Select Control */
  MC_CGM_AC11_SS_tag AC11_SS;          /* Auxiliary Clock Select Status */
  uint8_t MC_CGM_reserved17[24];
  MC_CGM_AC12_SC_tag AC12_SC;          /* Auxiliary Clock Select Control */
  MC_CGM_AC12_SS_tag AC12_SS;          /* Auxiliary Clock Select Status */
  uint8_t MC_CGM_reserved18[24];
  MC_CGM_AC13_SC_tag AC13_SC;          /* Auxiliary Clock Select Control */
  MC_CGM_AC13_SS_tag AC13_SS;          /* Auxiliary Clock Select Status */
  uint8_t MC_CGM_reserved19[24];
  MC_CGM_AC14_SC_tag AC14_SC;          /* Auxiliary Clock Select Control */
  MC_CGM_AC14_SS_tag AC14_SS;          /* Auxiliary Clock Select Status */
  MC_CGM_AC14_DC0_tag AC14_DC0;        /* Auxiliary Clock Divider Configuration */
  uint8_t MC_CGM_reserved20[20];
  MC_CGM_AC15_SC_tag AC15_SC;          /* Auxiliary Clock Select Control */
  MC_CGM_AC15_SS_tag AC15_SS;          /* Auxiliary Clock Select Status */
};


/* ============================================================================
   =============================== Module: MC_ME ==============================
   ============================================================================ */

typedef union MC_ME_GS_union_tag {     /* Global Status */
  vuint32_t R;
  struct {
    vuint32_t S_CURRENT_MODE:4;        /* Current Chip Mode */
    vuint32_t S_MTRANS:1;              /* Mode Transition Status */
    vuint32_t _unused_5:3;
    vuint32_t _unused_8:3;
    vuint32_t S_MVR:1;                 /* Main Voltage Regulator Status */
    vuint32_t _unused_12:2;
    vuint32_t _unused_14:2;
    vuint32_t _unused_16:1;
    vuint32_t _unused_17:1;
    vuint32_t _unused_18:1;
    vuint32_t _unused_19:1;
    vuint32_t _unused_20:1;
    vuint32_t _unused_21:1;
    vuint32_t _unused_22:1;
    vuint32_t S_CSRC4:1;               /* Clock Source 4 Status */
    vuint32_t _unused_24:1;
    vuint32_t S_CSRC2:1;               /* Clock Source 2 Status */
    vuint32_t _unused_26:1;
    vuint32_t S_RC:1;                  /* System RC Oscillator Status */
    vuint32_t S_SYSCLK:4;              /* System Clock Switch Status */
  } B;
} MC_ME_GS_tag;

typedef union MC_ME_MCTL_union_tag {   /* Mode Control */
  vuint32_t R;
  struct {
    vuint32_t TARGET_MODE:4;           /* Target Chip Mode */
    vuint32_t _unused_4:12;
    vuint32_t KEY:16;                  /* Control Key */
  } B;
} MC_ME_MCTL_tag;

typedef union MC_ME_ME_union_tag {     /* Mode Enable */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t RESET_DEST:1;            /* Destructive RESET Mode Enable */
    vuint32_t _unused_17:1;
    vuint32_t _unused_18:1;
    vuint32_t _unused_19:2;
    vuint32_t STOP0:1;                 /* STOP0 Mode Enable */
    vuint32_t _unused_22:1;
    vuint32_t HALT0:1;                 /* HALT0 Mode Enable */
    vuint32_t RUN3:1;                  /* RUN3 Mode Enable */
    vuint32_t RUN2:1;                  /* RUN2 Mode Enable */
    vuint32_t RUN1:1;                  /* RUN1 Mode Enable */
    vuint32_t RUN0:1;                  /* RUN0 Mode Enable */
    vuint32_t DRUN:1;                  /* DRUN Mode Enable */
    vuint32_t _unused_29:1;
    vuint32_t _unused_30:1;
    vuint32_t RESET_FUNC:1;            /* Functional RESET Mode Enable */
  } B;
} MC_ME_ME_tag;

typedef union MC_ME_IS_union_tag {     /* Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:25;
    vuint32_t _unused_25:1;
    vuint32_t I_ICONF_CC:1;            /* Invalid Mode Configuration Interrupt (core configuration) */
    vuint32_t _unused_27:1;
    vuint32_t I_ICONF:1;               /* Invalid Mode Configuration Interrupt */
    vuint32_t I_IMODE:1;               /* Invalid Mode Interrupt */
    vuint32_t _unused_30:1;
    vuint32_t I_MTC:1;                 /* Mode Transition Complete Interrupt */
  } B;
} MC_ME_IS_tag;

typedef union MC_ME_IM_union_tag {     /* Interrupt Mask */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:25;
    vuint32_t _unused_25:1;
    vuint32_t M_ICONF_CC:1;            /* Invalid Mode Configuration Interrupt (core configuration) Mask */
    vuint32_t _unused_27:1;
    vuint32_t M_ICONF:1;               /* Invalid Mode Configuration Interrupt Mask */
    vuint32_t M_IMODE:1;               /* Invalid Node Interrupt Mask */
    vuint32_t _unused_30:1;
    vuint32_t M_MTC:1;                 /* Mode Transition Complete Interrupt Mask */
  } B;
} MC_ME_IM_tag;

typedef union MC_ME_IMTS_union_tag {   /* Invalid Mode Transition Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:26;
    vuint32_t S_MRIG:1;                /* Mode Request Ignored Status */
    vuint32_t S_MTI:1;                 /* Mode Transition Illegal Status */
    vuint32_t S_MRI:1;                 /* Mode Request Illegal Status */
    vuint32_t S_DMA:1;                 /* Disabled Mode Access Status */
    vuint32_t S_NMA:1;                 /* Non-Existing Mode Access Status */
    vuint32_t _unused_31:1;
  } B;
} MC_ME_IMTS_tag;

typedef union MC_ME_DMTS_union_tag {   /* Debug Mode Transition Status */
  vuint32_t R;
  struct {
    vuint32_t PREVIOUS_MODE:4;         /* Previous Chip Mode */
    vuint32_t _unused_4:4;
    vuint32_t MPH_BUSY:1;              /* MC_ME/MC_PCU Handshake Busy Indicator */
    vuint32_t _unused_9:2;
    vuint32_t PMC_PROG:1;              /* MC_PCU Mode Change in Progress Indicator */
    vuint32_t DBG_MODE:1;              /* Debug Mode Indicator */
    vuint32_t CCKL_PROG:1;             /* Core Clock Enable/Disable in Progress */
    vuint32_t PCS_PROG:1;              /* Progressive System Clock Switching (PCS) in Progress */
    vuint32_t _unused_15:1;
    vuint32_t CDP_PRPH_0_255:1;        /* Clock Disable Process Pending Status for Peripherals 0 - 255 */
    vuint32_t VREG_CSRC_SC:1;          /* Main VREG Dependent Clock Source State Change During Mode Transition Indicator */
    vuint32_t CSRC_CSRC_SC:1;          /* (Other) Clock Source Dependent Clock Source State Change During Mode Transition Indicator */
    vuint32_t RC_SC:1;                 /* RC State Change During Mode Transition Indicator */
    vuint32_t _unused_20:1;
    vuint32_t SYSCLK_SW:1;             /* System Clock Switching Pending Status */
    vuint32_t _unused_22:1;
    vuint32_t _unused_23:1;
    vuint32_t CDP_PRPH_224_255:1;      /* Clock Disable Process Pending Status for Peripherals 224 - 255. */
    vuint32_t CDP_PRPH_192_223:1;      /* Clock Disable Process Pending Status for Peripherals 192 - 223. */
    vuint32_t CDP_PRPH_160_191:1;      /* Clock Disable Process Pending Status for Peripherals 160 - 191. */
    vuint32_t CDP_PRPH_128_159:1;      /* Clock Disable Process Pending Status for Peripherals 128 - 159. */
    vuint32_t CDP_PRPH_96_127:1;       /* Clock Disable Process Pending Status for Peripherals 96 - 127. */
    vuint32_t CDP_PRPH_64_95:1;        /* Clock Disable Process Pending Status for Peripherals 64 - 95. */
    vuint32_t CDP_PRPH_32_63:1;        /* Clock Disable Process Pending Status for Peripherals 32 - 63. */
    vuint32_t CDP_PRPH_0_31:1;         /* Clock Disable Process Pending Status for Peripherals 0 - 31. */
  } B;
} MC_ME_DMTS_tag;

typedef union MC_ME_RESET_MC_union_tag { /* RESET Mode Configuration */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;
    vuint32_t PWRLVL:3;                /* Power Level */
    vuint32_t _unused_4:4;
    vuint32_t _unused_8:3;
    vuint32_t MVRON:1;                 /* Main Voltage Regulator Control */
    vuint32_t _unused_12:2;
    vuint32_t _unused_14:2;
    vuint32_t _unused_16:1;
    vuint32_t _unused_17:1;
    vuint32_t _unused_18:1;
    vuint32_t _unused_19:1;
    vuint32_t _unused_20:1;
    vuint32_t _unused_21:1;
    vuint32_t _unused_22:1;
    vuint32_t CSRC4ON:1;               /* Clock Source 4 Control */
    vuint32_t _unused_24:1;
    vuint32_t CSRC2ON:1;               /* Clock Source 2 Control */
    vuint32_t _unused_26:1;
    vuint32_t RCON:1;                  /* System RC Oscillator Control */
    vuint32_t SYSCLK:4;                /* System Clock Switch Control */
  } B;
} MC_ME_RESET_MC_tag;

typedef union MC_ME_DRUN_MC_union_tag { /* DRUN Mode Configuration */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;
    vuint32_t PWRLVL:3;                /* Power Level */
    vuint32_t _unused_4:4;
    vuint32_t _unused_8:3;
    vuint32_t MVRON:1;                 /* Main Voltage Regulator Control */
    vuint32_t _unused_12:2;
    vuint32_t _unused_14:2;
    vuint32_t _unused_16:1;
    vuint32_t _unused_17:1;
    vuint32_t _unused_18:1;
    vuint32_t _unused_19:1;
    vuint32_t _unused_20:1;
    vuint32_t _unused_21:1;
    vuint32_t _unused_22:1;
    vuint32_t CSRC4ON:1;               /* Clock Source 4 Control */
    vuint32_t _unused_24:1;
    vuint32_t CSRC2ON:1;               /* Clock Source 2 Control */
    vuint32_t _unused_26:1;
    vuint32_t RCON:1;                  /* System RC Oscillator Control */
    vuint32_t SYSCLK:4;                /* System Clock Switch Control */
  } B;
} MC_ME_DRUN_MC_tag;

typedef union MC_ME_RUN0_MC_union_tag { /* RUN0 Mode Configuration */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;
    vuint32_t PWRLVL:3;                /* Power Level */
    vuint32_t _unused_4:4;
    vuint32_t _unused_8:3;
    vuint32_t MVRON:1;                 /* Main Voltage Regulator Control */
    vuint32_t _unused_12:2;
    vuint32_t _unused_14:2;
    vuint32_t _unused_16:1;
    vuint32_t _unused_17:1;
    vuint32_t _unused_18:1;
    vuint32_t _unused_19:1;
    vuint32_t _unused_20:1;
    vuint32_t _unused_21:1;
    vuint32_t _unused_22:1;
    vuint32_t CSRC4ON:1;               /* Clock Source 4 Control */
    vuint32_t _unused_24:1;
    vuint32_t CSRC2ON:1;               /* Clock Source 2 Control */
    vuint32_t _unused_26:1;
    vuint32_t RCON:1;                  /* System RC Oscillator Control */
    vuint32_t SYSCLK:4;                /* System Clock Switch Control */
  } B;
} MC_ME_RUN0_MC_tag;

typedef union MC_ME_RUN1_MC_union_tag { /* RUN1 Mode Configuration */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;
    vuint32_t PWRLVL:3;                /* Power Level */
    vuint32_t _unused_4:4;
    vuint32_t _unused_8:3;
    vuint32_t MVRON:1;                 /* Main Voltage Regulator Control */
    vuint32_t _unused_12:2;
    vuint32_t _unused_14:2;
    vuint32_t _unused_16:1;
    vuint32_t _unused_17:1;
    vuint32_t _unused_18:1;
    vuint32_t _unused_19:1;
    vuint32_t _unused_20:1;
    vuint32_t _unused_21:1;
    vuint32_t _unused_22:1;
    vuint32_t CSRC4ON:1;               /* Clock Source 4 Control */
    vuint32_t _unused_24:1;
    vuint32_t CSRC2ON:1;               /* Clock Source 2 Control */
    vuint32_t _unused_26:1;
    vuint32_t RCON:1;                  /* System RC Oscillator Control */
    vuint32_t SYSCLK:4;                /* System Clock Switch Control */
  } B;
} MC_ME_RUN1_MC_tag;

typedef union MC_ME_RUN2_MC_union_tag { /* RUN2 Mode Configuration */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;
    vuint32_t PWRLVL:3;                /* Power Level */
    vuint32_t _unused_4:4;
    vuint32_t _unused_8:3;
    vuint32_t MVRON:1;                 /* Main Voltage Regulator Control */
    vuint32_t _unused_12:2;
    vuint32_t _unused_14:2;
    vuint32_t _unused_16:1;
    vuint32_t _unused_17:1;
    vuint32_t _unused_18:1;
    vuint32_t _unused_19:1;
    vuint32_t _unused_20:1;
    vuint32_t _unused_21:1;
    vuint32_t _unused_22:1;
    vuint32_t CSRC4ON:1;               /* Clock Source 4 Control */
    vuint32_t _unused_24:1;
    vuint32_t CSRC2ON:1;               /* Clock Source 2 Control */
    vuint32_t _unused_26:1;
    vuint32_t RCON:1;                  /* System RC Oscillator Control */
    vuint32_t SYSCLK:4;                /* System Clock Switch Control */
  } B;
} MC_ME_RUN2_MC_tag;

typedef union MC_ME_RUN3_MC_union_tag { /* RUN3 Mode Configuration */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;
    vuint32_t PWRLVL:3;                /* Power Level */
    vuint32_t _unused_4:4;
    vuint32_t _unused_8:3;
    vuint32_t MVRON:1;                 /* Main Voltage Regulator Control */
    vuint32_t _unused_12:2;
    vuint32_t _unused_14:2;
    vuint32_t _unused_16:1;
    vuint32_t _unused_17:1;
    vuint32_t _unused_18:1;
    vuint32_t _unused_19:1;
    vuint32_t _unused_20:1;
    vuint32_t _unused_21:1;
    vuint32_t _unused_22:1;
    vuint32_t CSRC4ON:1;               /* Clock Source 4 Control */
    vuint32_t _unused_24:1;
    vuint32_t CSRC2ON:1;               /* Clock Source 2 Control */
    vuint32_t _unused_26:1;
    vuint32_t RCON:1;                  /* System RC Oscillator Control */
    vuint32_t SYSCLK:4;                /* System Clock Switch Control */
  } B;
} MC_ME_RUN3_MC_tag;

typedef union MC_ME_HALT0_MC_union_tag { /* HALT0 Mode Configuration */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;
    vuint32_t PWRLVL:3;                /* Power Level */
    vuint32_t _unused_4:4;
    vuint32_t _unused_8:3;
    vuint32_t MVRON:1;                 /* Main Voltage Regulator Control */
    vuint32_t _unused_12:2;
    vuint32_t _unused_14:2;
    vuint32_t _unused_16:1;
    vuint32_t _unused_17:1;
    vuint32_t _unused_18:1;
    vuint32_t _unused_19:1;
    vuint32_t _unused_20:1;
    vuint32_t _unused_21:1;
    vuint32_t _unused_22:1;
    vuint32_t CSRC4ON:1;               /* Clock Source 4 Control */
    vuint32_t _unused_24:1;
    vuint32_t CSRC2ON:1;               /* Clock Source 2 Control */
    vuint32_t _unused_26:1;
    vuint32_t RCON:1;                  /* System RC Oscillator Control */
    vuint32_t SYSCLK:4;                /* System Clock Switch Control */
  } B;
} MC_ME_HALT0_MC_tag;

typedef union MC_ME_STOP0_MC_union_tag { /* STOP0 Mode Configuration */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;
    vuint32_t PWRLVL:3;                /* Power Level */
    vuint32_t _unused_4:4;
    vuint32_t _unused_8:3;
    vuint32_t MVRON:1;                 /* Main Voltage Regulator Control */
    vuint32_t _unused_12:2;
    vuint32_t _unused_14:2;
    vuint32_t _unused_16:1;
    vuint32_t _unused_17:1;
    vuint32_t _unused_18:1;
    vuint32_t _unused_19:1;
    vuint32_t _unused_20:1;
    vuint32_t _unused_21:1;
    vuint32_t _unused_22:1;
    vuint32_t CSRC4ON:1;               /* Clock Source 4 Control */
    vuint32_t _unused_24:1;
    vuint32_t CSRC2ON:1;               /* Clock Source 2 Control */
    vuint32_t _unused_26:1;
    vuint32_t RCON:1;                  /* System RC Oscillator Control */
    vuint32_t SYSCLK:4;                /* System Clock Switch Control */
  } B;
} MC_ME_STOP0_MC_tag;

typedef union MC_ME_PS_union_tag {     /* Peripheral Status */
  vuint32_t R;
  struct {
    vuint32_t S_PERIPH31:1;            /* Peripheral Status */
    vuint32_t S_PERIPH30:1;            /* Peripheral Status */
    vuint32_t S_PERIPH29:1;            /* Peripheral Status */
    vuint32_t S_PERIPH28:1;            /* Peripheral Status */
    vuint32_t S_PERIPH27:1;            /* Peripheral Status */
    vuint32_t S_PERIPH26:1;            /* Peripheral Status */
    vuint32_t S_PERIPH25:1;            /* Peripheral Status */
    vuint32_t S_PERIPH24:1;            /* Peripheral Status */
    vuint32_t S_PERIPH23:1;            /* Peripheral Status */
    vuint32_t S_PERIPH22:1;            /* Peripheral Status */
    vuint32_t S_PERIPH21:1;            /* Peripheral Status */
    vuint32_t S_PERIPH20:1;            /* Peripheral Status */
    vuint32_t S_PERIPH19:1;            /* Peripheral Status */
    vuint32_t S_PERIPH18:1;            /* Peripheral Status */
    vuint32_t S_PERIPH17:1;            /* Peripheral Status */
    vuint32_t S_PERIPH16:1;            /* Peripheral Status */
    vuint32_t S_PERIPH15:1;            /* Peripheral Status */
    vuint32_t S_PERIPH14:1;            /* Peripheral Status */
    vuint32_t S_PERIPH13:1;            /* Peripheral Status */
    vuint32_t S_PERIPH12:1;            /* Peripheral Status */
    vuint32_t S_PERIPH11:1;            /* Peripheral Status */
    vuint32_t S_PERIPH10:1;            /* Peripheral Status */
    vuint32_t S_PERIPH9:1;             /* Peripheral Status */
    vuint32_t S_PERIPH8:1;             /* Peripheral Status */
    vuint32_t S_PERIPH7:1;             /* Peripheral Status */
    vuint32_t S_PERIPH6:1;             /* Peripheral Status */
    vuint32_t S_PERIPH5:1;             /* Peripheral Status */
    vuint32_t S_PERIPH4:1;             /* Peripheral Status */
    vuint32_t S_PERIPH3:1;             /* Peripheral Status */
    vuint32_t S_PERIPH2:1;             /* Peripheral Status */
    vuint32_t S_PERIPH1:1;             /* Peripheral Status */
    vuint32_t S_PERIPH0:1;             /* Peripheral Status */
  } B;
} MC_ME_PS_tag;

typedef union MC_ME_RUN_PC_union_tag { /* Run Peripheral Configuration */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;
    vuint32_t RUN3:1;                  /* Peripheral Control During RUN3 Mode */
    vuint32_t RUN2:1;                  /* Peripheral Control During RUN2 Mode */
    vuint32_t RUN1:1;                  /* Peripheral Control During RUN1 Mode */
    vuint32_t RUN0:1;                  /* Peripheral Control During RUN0 Mode */
    vuint32_t DRUN:1;                  /* Peripheral Control During DRUN Mode */
    vuint32_t _unused_29:1;
    vuint32_t _unused_30:1;
    vuint32_t RESET:1;                 /* Peripheral Control during RESET Mode */
  } B;
} MC_ME_RUN_PC_tag;

typedef union MC_ME_LP_PC_union_tag {  /* Low-power peripheral configuration */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:18;
    vuint32_t _unused_18:1;
    vuint32_t _unused_19:2;
    vuint32_t STOP0:1;                 /* Peripheral Control During STOP0 Mode */
    vuint32_t _unused_22:1;
    vuint32_t HALT0:1;                 /* Peripheral Control During HALT0 Mode */
    vuint32_t _unused_24:8;
  } B;
} MC_ME_LP_PC_tag;

typedef union MC_ME_PCTL_union_tag {   /* Peripheral Control */
  vuint8_t R;
  struct {
    vuint8_t _unused_0:1;
    vuint8_t DBG_F:1;                  /* Peripheral Control in Debug Mode */
    vuint8_t LP_CFG:3;                 /* Peripheral Configuration Select for Non-Run Modes */
    vuint8_t RUN_CFG:3;                /* Peripheral Configuration Select for Run Modes */
  } B;
} MC_ME_PCTL_tag;

typedef union MC_ME_CS_union_tag {     /* Core Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;
    vuint32_t _unused_24:1;
    vuint32_t _unused_25:1;
    vuint32_t _unused_26:1;
    vuint32_t _unused_27:1;
    vuint32_t S_CORE3:1;               /* Core 3 Status */
    vuint32_t S_CORE2:1;               /* Core 2 Status */
    vuint32_t S_CORE1:1;               /* Core 1 Status */
    vuint32_t _unused_31:1;
  } B;
} MC_ME_CS_tag;

typedef union MC_ME_CCTL1_union_tag {  /* Core Control */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:2;
    vuint16_t _unused_2:1;
    vuint16_t _unused_3:2;
    vuint16_t STOP0:1;                 /* Core Control During STOP0 Mode */
    vuint16_t _unused_6:1;
    vuint16_t HALT0:1;                 /* Core Control During HALT0 Mode */
    vuint16_t RUN3:1;                  /* Core Control During RUN3 Mode */
    vuint16_t RUN2:1;                  /* Core Control During RUN2 Mode */
    vuint16_t RUN1:1;                  /* Core Control During RUN1 Mode */
    vuint16_t RUN0:1;                  /* Core Control During RUN0 Mode */
    vuint16_t DRUN:1;                  /* Core Control During DRUN Mode */
    vuint16_t _unused_13:1;
    vuint16_t _unused_14:1;
    vuint16_t RESET:1;                 /* Core Control During RESET Mode */
  } B;
} MC_ME_CCTL1_tag;

typedef union MC_ME_CCTL2_union_tag {  /* Core Control */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:2;
    vuint16_t _unused_2:1;
    vuint16_t _unused_3:2;
    vuint16_t STOP0:1;                 /* Core Control During STOP0 Mode */
    vuint16_t _unused_6:1;
    vuint16_t HALT0:1;                 /* Core Control During HALT0 Mode */
    vuint16_t RUN3:1;                  /* Core Control During RUN3 Mode */
    vuint16_t RUN2:1;                  /* Core Control During RUN2 Mode */
    vuint16_t RUN1:1;                  /* Core Control During RUN1 Mode */
    vuint16_t RUN0:1;                  /* Core Control During RUN0 Mode */
    vuint16_t DRUN:1;                  /* Core Control During DRUN Mode */
    vuint16_t _unused_13:1;
    vuint16_t _unused_14:1;
    vuint16_t RESET:1;                 /* Core Control During RESET Mode */
  } B;
} MC_ME_CCTL2_tag;

typedef union MC_ME_CCTL3_union_tag {  /* Core Control */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:2;
    vuint16_t _unused_2:1;
    vuint16_t _unused_3:2;
    vuint16_t STOP0:1;                 /* Core Control During STOP0 Mode */
    vuint16_t _unused_6:1;
    vuint16_t HALT0:1;                 /* Core Control During HALT0 Mode */
    vuint16_t RUN3:1;                  /* Core Control During RUN3 Mode */
    vuint16_t RUN2:1;                  /* Core Control During RUN2 Mode */
    vuint16_t RUN1:1;                  /* Core Control During RUN1 Mode */
    vuint16_t RUN0:1;                  /* Core Control During RUN0 Mode */
    vuint16_t DRUN:1;                  /* Core Control During DRUN Mode */
    vuint16_t _unused_13:1;
    vuint16_t _unused_14:1;
    vuint16_t RESET:1;                 /* Core Control During RESET Mode */
  } B;
} MC_ME_CCTL3_tag;

typedef union MC_ME_CADDR1_union_tag { /* Core Address */
  vuint32_t R;
  struct {
    vuint32_t ADDR:30;                 /* Core Address */
    vuint32_t _unused_30:1;
    vuint32_t RMC:1;                   /* Reset on Mode Change */
  } B;
} MC_ME_CADDR1_tag;

typedef union MC_ME_CADDR2_union_tag { /* Core Address */
  vuint32_t R;
  struct {
    vuint32_t ADDR:30;                 /* Core Address */
    vuint32_t _unused_30:1;
    vuint32_t RMC:1;                   /* Reset on Mode Change */
  } B;
} MC_ME_CADDR2_tag;

typedef union MC_ME_CADDR3_union_tag { /* Core Address */
  vuint32_t R;
  struct {
    vuint32_t ADDR:30;                 /* Core Address */
    vuint32_t _unused_30:1;
    vuint32_t RMC:1;                   /* Reset on Mode Change */
  } B;
} MC_ME_CADDR3_tag;

struct MC_ME_tag {
  MC_ME_GS_tag GS;                     /* Global Status */
  MC_ME_MCTL_tag MCTL;                 /* Mode Control */
  MC_ME_ME_tag ME;                     /* Mode Enable */
  MC_ME_IS_tag IS;                     /* Interrupt Status */
  MC_ME_IM_tag IM;                     /* Interrupt Mask */
  MC_ME_IMTS_tag IMTS;                 /* Invalid Mode Transition Status */
  MC_ME_DMTS_tag DMTS;                 /* Debug Mode Transition Status */
  uint8_t MC_ME_reserved0[4];
  MC_ME_RESET_MC_tag RESET_MC;         /* RESET Mode Configuration */
  uint8_t MC_ME_reserved1[8];
  MC_ME_DRUN_MC_tag DRUN_MC;           /* DRUN Mode Configuration */
  MC_ME_RUN0_MC_tag RUN0_MC;           /* RUN0 Mode Configuration */
  MC_ME_RUN1_MC_tag RUN1_MC;           /* RUN1 Mode Configuration */
  MC_ME_RUN2_MC_tag RUN2_MC;           /* RUN2 Mode Configuration */
  MC_ME_RUN3_MC_tag RUN3_MC;           /* RUN3 Mode Configuration */
  MC_ME_HALT0_MC_tag HALT0_MC;         /* HALT0 Mode Configuration */
  uint8_t MC_ME_reserved2[4];
  MC_ME_STOP0_MC_tag STOP0_MC;         /* STOP0 Mode Configuration */
  uint8_t MC_ME_reserved3[20];
  MC_ME_PS_tag PS[8];                  /* Peripheral Status */
  MC_ME_RUN_PC_tag RUN_PC[8];          /* Run Peripheral Configuration */
  MC_ME_LP_PC_tag LP_PC[8];            /* Low-power peripheral configuration */
  MC_ME_PCTL_tag PCTL[256];            /* Peripheral Control */
  MC_ME_CS_tag CS;                     /* Core Status */
  uint8_t MC_ME_reserved4[2];
  MC_ME_CCTL1_tag CCTL1;               /* Core Control */
  MC_ME_CCTL2_tag CCTL2;               /* Core Control */
  MC_ME_CCTL3_tag CCTL3;               /* Core Control */
  uint8_t MC_ME_reserved5[24];
  MC_ME_CADDR1_tag CADDR1;             /* Core Address */
  MC_ME_CADDR2_tag CADDR2;             /* Core Address */
  MC_ME_CADDR3_tag CADDR3;             /* Core Address */
};


/* ============================================================================
   =============================== Module: MC_RGM =============================
   ============================================================================ */

typedef union MC_RGM_DES_union_tag {   /* Destructive Event Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t _unused_9:1;             /* Reserved */
    vuint32_t _unused_10:1;            /* Reserved */
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t F_DR_8:1;                /* Flag For Destructive Reset F_DR_8 */
    vuint32_t F_DR_7:1;                /* Flag For Destructive Reset F_DR_7 */
    vuint32_t F_DR_6:1;                /* Flag For Destructive Reset F_DR_6 */
    vuint32_t F_DR_5:1;                /* Flag For Destructive Reset F_DR_5 */
    vuint32_t F_DR_4:1;                /* Flag For Destructive Reset F_DR_4 */
    vuint32_t F_DR_3:1;                /* Flag For Destructive Reset F_DR_3 */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t F_DR_1:1;                /* Flag For Destructive Reset F_DR_1 */
    vuint32_t F_POR:1;                 /* Flag For Power-On Reset */
  } B;
} MC_RGM_DES_tag;

typedef union MC_RGM_DBRE_union_tag {  /* Destructive Bidirectional Reset Enable */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t _unused_9:1;             /* Reserved */
    vuint32_t _unused_10:1;            /* Reserved */
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t BE_F_DR_8:1;             /* Bidirectional Reset Enables For Destructive Reset F_DR_8 */
    vuint32_t BE_F_DR_7:1;             /* Bidirectional Reset Enables For Destructive Reset F_DR_7 */
    vuint32_t BE_F_DR_6:1;             /* Bidirectional Reset Enables For Destructive Reset F_DR_6 */
    vuint32_t BE_F_DR_5:1;             /* Bidirectional Reset Enables For Destructive Reset F_DR_5 */
    vuint32_t BE_F_DR_4:1;             /* Bidirectional Reset Enables For Destructive Reset F_DR_4 */
    vuint32_t BE_F_DR_3:1;             /* Bidirectional Reset Enables For Destructive Reset F_DR_3 */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t BE_F_DR_1:1;             /* Bidirectional Reset Enables For Destructive Reset F_DR_1 */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} MC_RGM_DBRE_tag;

typedef union MC_RGM_FES_union_tag {   /* Functional Event Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t _unused_9:1;             /* Reserved */
    vuint32_t _unused_10:1;            /* Reserved */
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t F_FR_10:1;               /* Flag For Functional Reset F_FR_10 */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t F_FR_5:1;                /* Flag For Functional Reset F_FR_5 */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t F_FR_3:1;                /* Flag For Functional Reset F_FR_3 */
    vuint32_t F_FR_2:1;                /* Flag For Functional Reset F_FR_2 */
    vuint32_t _unused_30:1;            /* Reserved */
    vuint32_t F_EXR:1;                 /* Flag for External Reset */
  } B;
} MC_RGM_FES_tag;

typedef union MC_RGM_FERD_union_tag {  /* Functional Event Reset Disable */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t _unused_9:1;             /* Reserved */
    vuint32_t _unused_10:1;            /* Reserved */
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t D_F_FR_10:1;             /* Disable Functional Reset F_FR_10 */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t _unused_26:1;            /* Reserved */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t _unused_30:1;            /* Reserved */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} MC_RGM_FERD_tag;

typedef union MC_RGM_FEAR_union_tag {  /* Functional Event Alternate Request */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t _unused_9:1;             /* Reserved */
    vuint32_t _unused_10:1;            /* Reserved */
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t AR_F_FR_10:1;            /* Alternate Requests For Functional Reset AR_F_FR_10 */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t _unused_26:1;            /* Reserved */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t _unused_30:1;            /* Reserved */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} MC_RGM_FEAR_tag;

typedef union MC_RGM_FBRE_union_tag {  /* Functional Bidirectional Reset Enable */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t _unused_9:1;             /* Reserved */
    vuint32_t _unused_10:1;            /* Reserved */
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t BE_F_FR_10:1;            /* Bidirectional Reset Enable For Functional Reset BE_F_FR_10 */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t BE_F_FR_5:1;             /* Bidirectional Reset Enable For Functional Reset BE_F_FR_5 */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t BE_F_FR_3:1;             /* Bidirectional Reset Enable For Functional Reset BE_F_FR_3 */
    vuint32_t BE_F_FR_2:1;             /* Bidirectional Reset Enable For Functional Reset BE_F_FR_2 */
    vuint32_t _unused_30:1;            /* Reserved */
    vuint32_t BE_EXR:1;                /* Bidirectional Reset Enable For External Reset */
  } B;
} MC_RGM_FBRE_tag;

typedef union MC_RGM_FREC_union_tag {  /* Functional Reset Escalation Counter */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:28;            /* Reserved */
    vuint32_t FREC:4;                  /* Functional Reset Escalation Counter */
  } B;
} MC_RGM_FREC_tag;

typedef union MC_RGM_FRET_union_tag {  /* Functional Reset Escalation Threshold */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;             /* Reserved */
    vuint32_t FRET:4;                  /* Functional Reset Escalation Threshold */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} MC_RGM_FRET_tag;

typedef union MC_RGM_DRET_union_tag {  /* Destructive Reset Escalation Threshold */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;             /* Reserved */
    vuint32_t DRET:4;                  /* Destructive Reset Escalation Threshold */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} MC_RGM_DRET_tag;

struct MC_RGM_tag {
  MC_RGM_DES_tag DES;                  /* Destructive Event Status */
  uint8_t MC_RGM_reserved0[44];
  MC_RGM_DBRE_tag DBRE;                /* Destructive Bidirectional Reset Enable */
  uint8_t MC_RGM_reserved1[716];
  MC_RGM_FES_tag FES;                  /* Functional Event Status */
  uint8_t MC_RGM_reserved2[12];
  MC_RGM_FERD_tag FERD;                /* Functional Event Reset Disable */
  uint8_t MC_RGM_reserved3[12];
  MC_RGM_FEAR_tag FEAR;                /* Functional Event Alternate Request */
  uint8_t MC_RGM_reserved4[12];
  MC_RGM_FBRE_tag FBRE;                /* Functional Bidirectional Reset Enable */
  uint8_t MC_RGM_reserved5[716];
  MC_RGM_FREC_tag FREC;                /* Functional Reset Escalation Counter */
  MC_RGM_FRET_tag FRET;                /* Functional Reset Escalation Threshold */
  MC_RGM_DRET_tag DRET;                /* Destructive Reset Escalation Threshold */
};


/* ============================================================================
   =============================== Module: MEMU ===============================
   ============================================================================ */

typedef union MEMU_CTRL_union_tag {    /* Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t SWR:1;                   /* Software Reset */
    vuint32_t _unused_17:15;           /* Reserved */
  } B;
} MEMU_CTRL_tag;

typedef union MEMU_ERR_FLAG_union_tag { /* Error Flag */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:11;            /* Reserved */
    vuint32_t PR_CE:1;                 /* Peripheral RAM ECC Correctable Error Detect */
    vuint32_t PR_UCE:1;                /* Peripheral RAM ECC Uncorrectable Error Detect */
    vuint32_t PR_CEO:1;                /* Peripheral RAM ECC Correctable Error Overflow */
    vuint32_t PR_UCO:1;                /* Peripheral RAM ECC Uncorrectable Error Overflow */
    vuint32_t PR_EBO:1;                /* Peripheral RAM ECC Error Buffer Overflow */
    vuint32_t _unused_16:3;            /* Reserved */
    vuint32_t _unused_19:5;            /* Reserved */
    vuint32_t _unused_24:3;            /* Reserved */
    vuint32_t SR_CE:1;                 /* System RAM ECC Correctable Error Detect */
    vuint32_t SR_UCE:1;                /* System RAM ECC Uncorrectable Error Detect */
    vuint32_t SR_CEO:1;                /* System RAM ECC Correctable Error Overflow */
    vuint32_t SR_UCO:1;                /* System RAM ECC Uncorrectable Error Overflow */
    vuint32_t SR_EBO:1;                /* System RAM ECC Error Buffer Overflow */
  } B;
} MEMU_ERR_FLAG_tag;

typedef union MEMU_DEBUG_union_tag {   /* Debug */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:11;            /* Reserved */
    vuint32_t FR_PR_CE:1;              /* Force Peripheral RAM Correctable Error Detect Flag */
    vuint32_t FR_PR_UCE:1;             /* Force Peripheral RAM Uncorrectable Error Detect Flag */
    vuint32_t FR_PR_CEO:1;             /* Force Peripheral RAM Correctable Error Overflow Flag */
    vuint32_t FR_PR_UCO:1;             /* Forces Peripheral RAM Uncorrectable Error Overflow */
    vuint32_t FR_PR_EBO:1;             /* Forces Peripheral RAM Error Buffer Overflow */
    vuint32_t _unused_16:3;            /* Reserved */
    vuint32_t _unused_19:5;            /* Reserved */
    vuint32_t _unused_24:3;            /* Reserved */
    vuint32_t FR_SR_CE:1;              /* Forces System RAM Correctable Error Detect */
    vuint32_t FR_SR_UCE:1;             /* Forces System RAM Uncorrectable Error Detect */
    vuint32_t FR_SR_CEO:1;             /* Forces System RAM Correctable Error Overflow */
    vuint32_t FR_SR_UCO:1;             /* Forces System RAM Uncorrectable Error Overflow */
    vuint32_t FR_SR_EBO:1;             /* Forces System RAM Error Buffer Overflow */
  } B;
} MEMU_DEBUG_tag;

typedef union MEMU_SYS_RAM_CERR_STS_union_tag { /* System RAM Correctable Error Reporting Table Status */
  vuint32_t R;
  struct {
    vuint32_t VLD:1;                   /* Valid */
    vuint32_t _unused_1:23;            /* Reserved */
    vuint32_t BAD_BIT:8;               /* Bad Bit */
  } B;
} MEMU_SYS_RAM_CERR_STS_tag;

typedef union MEMU_SYS_RAM_CERR_ADDR_union_tag { /* System RAM Correctable Error Reporting Table Address */
  vuint32_t R;
  struct {
    vuint32_t ERR_ADD:32;              /* Error Address */
  } B;
} MEMU_SYS_RAM_CERR_ADDR_tag;

typedef struct MEMU_SYS_RAM_CERR_struct_tag {
  MEMU_SYS_RAM_CERR_STS_tag STS;       /* System RAM Correctable Error Reporting Table Status */
  MEMU_SYS_RAM_CERR_ADDR_tag ADDR;     /* System RAM Correctable Error Reporting Table Address */
} MEMU_SYS_RAM_CERR_tag;

typedef union MEMU_SYS_RAM_UNCERR_STS_union_tag { /* System RAM Uncorrectable Error Reporting Table Status */
  vuint32_t R;
  struct {
    vuint32_t VLD:1;                   /* Valid */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MEMU_SYS_RAM_UNCERR_STS_tag;

typedef union MEMU_SYS_RAM_UNCERR_ADDR_union_tag { /* System RAM Uncorrectable Error Reporting Table Address */
  vuint32_t R;
  struct {
    vuint32_t ERR_ADD:32;              /* Error Address */
  } B;
} MEMU_SYS_RAM_UNCERR_ADDR_tag;

typedef union MEMU_SYS_RAM_OFLW_union_tag { /* System RAM Concurrent Overflow */
  vuint32_t R;
  struct {
    vuint32_t OFLW:32;                 /* Overflow */
  } B;
} MEMU_SYS_RAM_OFLW_tag;

typedef union MEMU_PERIPH_RAM_CERR_STS_union_tag { /* Peripheral RAM Correctable Error Reporting Table Status */
  vuint32_t R;
  struct {
    vuint32_t VLD:1;                   /* Valid */
    vuint32_t _unused_1:23;            /* Reserved */
    vuint32_t BAD_BIT:8;               /* Bad Bit */
  } B;
} MEMU_PERIPH_RAM_CERR_STS_tag;

typedef union MEMU_PERIPH_RAM_CERR_ADDR_union_tag { /* Peripheral RAM Correctable Error Reporting Table Address */
  vuint32_t R;
  struct {
    vuint32_t ERR_ADD:32;              /* Error Address */
  } B;
} MEMU_PERIPH_RAM_CERR_ADDR_tag;

typedef struct MEMU_PERIPH_RAM_CERR_struct_tag {
  MEMU_PERIPH_RAM_CERR_STS_tag STS;    /* Peripheral RAM Correctable Error Reporting Table Status */
  MEMU_PERIPH_RAM_CERR_ADDR_tag ADDR;  /* Peripheral RAM Correctable Error Reporting Table Address */
} MEMU_PERIPH_RAM_CERR_tag;

typedef union MEMU_PERIPH_RAM_UNCERR_STS_union_tag { /* Peripheral RAM Uncorrectable Error Reporting Table Status */
  vuint32_t R;
  struct {
    vuint32_t VLD:1;                   /* Valid */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MEMU_PERIPH_RAM_UNCERR_STS_tag;

typedef union MEMU_PERIPH_RAM_UNCERR_ADDR_union_tag { /* Peripheral RAM Uncorrectable Error Reporting Table Address */
  vuint32_t R;
  struct {
    vuint32_t ERR_ADD:32;              /* Error Address */
  } B;
} MEMU_PERIPH_RAM_UNCERR_ADDR_tag;

typedef union MEMU_PERIPH_RAM_OFLW_union_tag { /* Peripheral RAM Concurrent Overflow */
  vuint32_t R;
  struct {
    vuint32_t OFLW:32;                 /* Overflow */
  } B;
} MEMU_PERIPH_RAM_OFLW_tag;

struct MEMU_tag {
  MEMU_CTRL_tag CTRL;                  /* Control */
  MEMU_ERR_FLAG_tag ERR_FLAG;          /* Error Flag */
  uint8_t MEMU_reserved0[4];
  MEMU_DEBUG_tag DEBUG;                /* Debug */
  uint8_t MEMU_reserved1[16];
  MEMU_SYS_RAM_CERR_tag SYS_RAM_CERR[10];
  MEMU_SYS_RAM_UNCERR_STS_tag SYS_RAM_UNCERR_STS; /* System RAM Uncorrectable Error Reporting Table Status */
  MEMU_SYS_RAM_UNCERR_ADDR_tag SYS_RAM_UNCERR_ADDR; /* System RAM Uncorrectable Error Reporting Table Address */
  MEMU_SYS_RAM_OFLW_tag SYS_RAM_OFLW[2]; /* System RAM Concurrent Overflow */
  uint8_t MEMU_reserved2[1440];
  MEMU_PERIPH_RAM_CERR_tag PERIPH_RAM_CERR[2];
  MEMU_PERIPH_RAM_UNCERR_STS_tag PERIPH_RAM_UNCERR_STS; /* Peripheral RAM Uncorrectable Error Reporting Table Status */
  MEMU_PERIPH_RAM_UNCERR_ADDR_tag PERIPH_RAM_UNCERR_ADDR; /* Peripheral RAM Uncorrectable Error Reporting Table Address */
  MEMU_PERIPH_RAM_OFLW_tag PERIPH_RAM_OFLW[1]; /* Peripheral RAM Concurrent Overflow */
};


/* ============================================================================
   =============================== Module: OCOTP ==============================
   ============================================================================ */

typedef union OCOTP_CTRL_SYS_union_tag { /* System master's control */
  vuint32_t R;
  struct {
    vuint32_t AUTH_KEY:16;             /* Key to unlock read and write operation */
    vuint32_t _unused_16:9;
    vuint32_t _unused_25:1;
    vuint32_t RD_WR:4;                 /* eFuse read and write control for the system master */
    vuint32_t _unused_30:1;
    vuint32_t _unused_31:1;
  } B;
} OCOTP_CTRL_SYS_tag;

typedef union OCOTP_ADDR_SYS_union_tag { /* System master's eFuse address for read or write operation */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t ADDR:16;                 /* eFuse read or write address */
  } B;
} OCOTP_ADDR_SYS_tag;

typedef union OCOTP_WRDATA_SYS_union_tag { /* System master's eFuse write data */
  vuint32_t R;
  struct {
    vuint32_t DATA:32;                 /* eFuse data for eFuse write operation */
  } B;
} OCOTP_WRDATA_SYS_tag;

typedef union OCOTP_RDATA_SYS_union_tag { /* System master's eFuse read data */
  vuint32_t R;
  struct {
    vuint32_t DATA:32;                 /* Read data */
  } B;
} OCOTP_RDATA_SYS_tag;

typedef union OCOTP_CTRL_FBX_union_tag { /* FBXC control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:13;
    vuint32_t IPG_STOP_ACK:1;          /* Low-power mode acknowledgment */
    vuint32_t IPG_STOP:1;              /* Low Power entry */
    vuint32_t FBX_PD:1;                /* Fusebox Power Down */
    vuint32_t _unused_16:7;
    vuint32_t SEC_MODE:1;              /* Indicates that the FBXC is in Secure mode. */
    vuint32_t _unused_24:7;
    vuint32_t _unused_31:1;
  } B;
} OCOTP_CTRL_FBX_tag;

typedef union OCOTP_GPR_union_tag {    /* General purpose */
  vuint32_t R;
  struct {
    vuint32_t GPR:32;                  /* General-purpose field that you can use to store information for your application */
  } B;
} OCOTP_GPR_tag;

typedef union OCOTP_STATUS_SYS_union_tag { /* System master's access status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:29;
    vuint32_t ERROR:1;                 /* Error status flag */
    vuint32_t _unused_30:1;
    vuint32_t BUSY:1;                  /* OCOTP busy indication */
  } B;
} OCOTP_STATUS_SYS_tag;

typedef union OCOTP_VERSION_union_tag { /* OCOTP design version */
  vuint32_t R;
  struct {
    vuint32_t MAJOR:8;                 /* The major part of the RTL version */
    vuint32_t MINOR:8;                 /* The minor part of the RTL version */
    vuint32_t STEP:16;                 /* The step part of the RTL version */
  } B;
} OCOTP_VERSION_tag;

typedef union OCOTP_SEC_union_tag {    /* ECC status for single-bit ECC error */
  vuint32_t R;
  struct {
    vuint32_t SEC32:1;                 /* SEC error status */
    vuint32_t SEC31:1;                 /* SEC error status */
    vuint32_t SEC30:1;                 /* SEC error status */
    vuint32_t SEC29:1;                 /* SEC error status */
    vuint32_t SEC28:1;                 /* SEC error status */
    vuint32_t SEC27:1;                 /* SEC error status */
    vuint32_t SEC26:1;                 /* SEC error status */
    vuint32_t SEC25:1;                 /* SEC error status */
    vuint32_t SEC24:1;                 /* SEC error status */
    vuint32_t SEC23:1;                 /* SEC error status */
    vuint32_t SEC22:1;                 /* SEC error status */
    vuint32_t SEC21:1;                 /* SEC error status */
    vuint32_t SEC20:1;                 /* SEC error status */
    vuint32_t SEC19:1;                 /* SEC error status */
    vuint32_t SEC18:1;                 /* SEC error status */
    vuint32_t SEC17:1;                 /* SEC error status */
    vuint32_t SEC16:1;                 /* SEC error status */
    vuint32_t SEC15:1;                 /* SEC error status */
    vuint32_t SEC14:1;                 /* SEC error status */
    vuint32_t SEC13:1;                 /* SEC error status */
    vuint32_t SEC12:1;                 /* SEC error status */
    vuint32_t SEC11:1;                 /* SEC error status */
    vuint32_t SEC10:1;                 /* SEC error status */
    vuint32_t SEC9:1;                  /* SEC error status */
    vuint32_t SEC8:1;                  /* SEC error status */
    vuint32_t SEC7:1;                  /* SEC error status */
    vuint32_t SEC6:1;                  /* SEC error status */
    vuint32_t SEC5:1;                  /* SEC error status */
    vuint32_t SEC4:1;                  /* SEC error status */
    vuint32_t SEC3:1;                  /* SEC error status */
    vuint32_t SEC2:1;                  /* SEC error status */
    vuint32_t SEC1:1;                  /* SEC error status */
  } B;
} OCOTP_SEC_tag;

typedef union OCOTP_DED_union_tag {    /* ECC status for double-bit ECC error */
  vuint32_t R;
  struct {
    vuint32_t DED32:1;                 /* DED error status */
    vuint32_t DED31:1;                 /* DED error status */
    vuint32_t DED30:1;                 /* DED error status */
    vuint32_t DED29:1;                 /* DED error status */
    vuint32_t DED28:1;                 /* DED error status */
    vuint32_t DED27:1;                 /* DED error status */
    vuint32_t DED26:1;                 /* DED error status */
    vuint32_t DED25:1;                 /* DED error status */
    vuint32_t DED24:1;                 /* DED error status */
    vuint32_t DED23:1;                 /* DED error status */
    vuint32_t DED22:1;                 /* DED error status */
    vuint32_t DED21:1;                 /* DED error status */
    vuint32_t DED20:1;                 /* DED error status */
    vuint32_t DED19:1;                 /* DED error status */
    vuint32_t DED18:1;                 /* DED error status */
    vuint32_t DED17:1;                 /* DED error status */
    vuint32_t DED16:1;                 /* DED error status */
    vuint32_t DED15:1;                 /* DED error status */
    vuint32_t DED14:1;                 /* DED error status */
    vuint32_t DED13:1;                 /* DED error status */
    vuint32_t DED12:1;                 /* DED error status */
    vuint32_t DED11:1;                 /* DED error status */
    vuint32_t DED10:1;                 /* DED error status */
    vuint32_t DED9:1;                  /* DED error status */
    vuint32_t DED8:1;                  /* DED error status */
    vuint32_t DED7:1;                  /* DED error status */
    vuint32_t DED6:1;                  /* DED error status */
    vuint32_t DED5:1;                  /* DED error status */
    vuint32_t DED4:1;                  /* DED error status */
    vuint32_t DED3:1;                  /* DED error status */
    vuint32_t DED2:1;                  /* DED error status */
    vuint32_t DED1:1;                  /* DED error status */
  } B;
} OCOTP_DED_tag;

typedef union OCOTP_ERR_INJCTR_union_tag { /* ECC error injector */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t ADDR:16;                 /* The address of the bit in the shadow register where you want to inject the single-bit ECC error. The OCOTP inverts that bit. */
  } B;
} OCOTP_ERR_INJCTR_tag;

typedef union OCOTP_FBXC_REGS_union_tag { /* Memory-mapped to FBXC register space */
  vuint32_t R;
  struct {
    vuint32_t FBXC_REG:32;             /* See the FBXC chapter for correct access type, reset value and functionality. */
  } B;
} OCOTP_FBXC_REGS_tag;

typedef union OCOTP_SHADOWS_union_tag { /* Shadow */
  vuint32_t R;
  struct {
    vuint32_t EFUSES:32;               /* OTP data */
  } B;
} OCOTP_SHADOWS_tag;

struct OCOTP_tag {
  OCOTP_CTRL_SYS_tag CTRL_SYS;         /* System master's control */
  OCOTP_ADDR_SYS_tag ADDR_SYS;         /* System master's eFuse address for read or write operation */
  OCOTP_WRDATA_SYS_tag WRDATA_SYS;     /* System master's eFuse write data */
  OCOTP_RDATA_SYS_tag RDATA_SYS;       /* System master's eFuse read data */
  uint8_t OCOTP_reserved0[32];
  OCOTP_CTRL_FBX_tag CTRL_FBX;         /* FBXC control */
  uint8_t OCOTP_reserved1[12];
  OCOTP_GPR_tag GPR[2];                /* General purpose */
  uint8_t OCOTP_reserved2[8];
  OCOTP_STATUS_SYS_tag STATUS_SYS;     /* System master's access status */
  uint8_t OCOTP_reserved3[8];
  OCOTP_VERSION_tag VERSION;           /* OCOTP design version */
  uint8_t OCOTP_reserved4[16];
  OCOTP_SEC_tag SEC[6];                /* ECC status for single-bit ECC error */
  uint8_t OCOTP_reserved5[40];
  OCOTP_DED_tag DED[6];                /* ECC status for double-bit ECC error */
  uint8_t OCOTP_reserved6[40];
  OCOTP_ERR_INJCTR_tag ERR_INJCTR;     /* ECC error injector */
  uint8_t OCOTP_reserved7[12];
  OCOTP_FBXC_REGS_tag FBXC_REGS[64];   /* Memory-mapped to FBXC register space */
  OCOTP_SHADOWS_tag SHADOWS[256];      /* Shadow */
};


/* ============================================================================
   =============================== Module: PCM ================================
   ============================================================================ */

typedef union PCM_IAHB_BE1_union_tag { /* IAHB Burst Enable 1 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:5;             /* Reserved */
    vuint32_t PRE_DMA:1;               /* Pending Read Enable DMA */
    vuint32_t BRE_DMA:1;               /* Burst Read Enable DMA */
    vuint32_t BWE_DMA:1;               /* Burst Write Enable DMA */
    vuint32_t _unused_8:5;             /* Reserved */
    vuint32_t PRE_ENET_FR:1;           /* Pending Read Enable ENET And FlexRay */
    vuint32_t BRE_ENET_FR:1;           /* Burst Read Enable ENET And FlexRay */
    vuint32_t BWE_ENET_FR:1;           /* Burst Write Enable ENET And FlexRay */
    vuint32_t _unused_16:5;            /* Reserved */
    vuint32_t PRE_D2I:1;               /* Pending Read Enable D2I */
    vuint32_t BRE_D2I:1;               /* Burst Read Enable D2I */
    vuint32_t BWE_D2I:1;               /* Burst Write Enable D2I */
    vuint32_t _unused_24:5;            /* Reserved */
    vuint32_t PRE_I2D:1;               /* Pending Read Enable I2D */
    vuint32_t BRE_I2D:1;               /* Burst Read Enable I2D */
    vuint32_t BWE_I2D:1;               /* Burst Write Enable I2D */
  } B;
} PCM_IAHB_BE1_tag;

typedef union PCM_IAHB_BE2_union_tag { /* IAHB Burst Enable 2 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:13;            /* Reserved */
    vuint32_t _unused_13:3;            /* Reserved */
    vuint32_t _unused_16:5;            /* Reserved */
    vuint32_t PRE_FLEXRAY:1;           /* Pending Read Enable FlexRay */
    vuint32_t BRE_FLEXRAY:1;           /* Burst Read Enable FlexRay */
    vuint32_t BWE_FLEXRAY:1;           /* Burst Write Enable FlexRay */
    vuint32_t _unused_24:5;            /* Reserved */
    vuint32_t PRE_ENET:1;              /* Pending Read Enable ENET */
    vuint32_t BRE_ENET:1;              /* Burst Read Enable ENET */
    vuint32_t BWE_ENET:1;              /* Burst Write Enable ENET */
  } B;
} PCM_IAHB_BE2_tag;

typedef union PCM_IAHB_BE3_union_tag { /* IAHB Burst Enable 3 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:21;            /* Reserved */
    vuint32_t PRE_AIPS1:1;             /* Pending Read Enable AIPS_1 */
    vuint32_t BRE_AIPS1:1;             /* Burst Read Enable AIPS_1 */
    vuint32_t BWE_AIPS1:1;             /* Burst Write Enable AIPS_1 */
    vuint32_t _unused_24:5;            /* Reserved */
    vuint32_t PRE_AIPS0:1;             /* Pending Read Enable AIPS_0 */
    vuint32_t BRE_AIPS0:1;             /* Burst Read Enable AIPS_0 */
    vuint32_t BWE_AIPS0:1;             /* Burst Write Enable AIPS_0 */
  } B;
} PCM_IAHB_BE3_tag;

typedef union PCM_IAHB_BE4_union_tag { /* IAHB Burst Enable 4 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:13;            /* Reserved */
    vuint32_t PRE_PRAM3:1;             /* Pending Read Enable PRAM_2 */
    vuint32_t BRE_PRAM3:1;             /* Burst Read Enable PRAM_2 */
    vuint32_t BWE_PRAM3:1;             /* Burst Write Enable PRAM_2 */
    vuint32_t _unused_16:5;            /* Reserved */
    vuint32_t PRE_PRAM2:1;             /* Pending Read Enable PRAM_1 */
    vuint32_t BRE_PRAM2:1;             /* Burst Read Enable PRAM_1 */
    vuint32_t BWE_PRAM2:1;             /* Burst Write Enable PRAM_1 */
    vuint32_t _unused_24:5;            /* Reserved */
    vuint32_t PRE_PRAM1:1;             /* Pending Read Enable PRAM_0 */
    vuint32_t BRE_PRAM1:1;             /* Burst Read Enable PRAM_0 */
    vuint32_t BWE_PRAM1:1;             /* Burst Write Enable PRAM_0 */
  } B;
} PCM_IAHB_BE4_tag;

typedef union PCM_IAHB_BE5_union_tag { /* IAHB Burst Enable 5 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:5;             /* Reserved */
    vuint32_t _unused_5:3;             /* Reserved */
    vuint32_t _unused_8:5;             /* Reserved */
    vuint32_t PRE_Z7B:1;               /* Pending Read Enable z7b */
    vuint32_t BRE_Z7B:1;               /* Burst Read Enable z7b */
    vuint32_t BWE_Z7B:1;               /* Burst Write Enable z7a */
    vuint32_t _unused_16:5;            /* Reserved */
    vuint32_t PRE_Z7A:1;               /* Pending Read Enable z7a */
    vuint32_t BRE_Z7A:1;               /* Burst Read Enable z7a */
    vuint32_t BWE_Z7A:1;               /* Burst Write Enable z7a */
    vuint32_t _unused_24:5;            /* Reserved */
    vuint32_t PRE_SPT:1;               /* Pending Read Enable SPT */
    vuint32_t BRE_SPT:1;               /* Burst Read Enable SPT */
    vuint32_t BWE_SPT:1;               /* Burst Write Enable SPT */
  } B;
} PCM_IAHB_BE5_tag;

typedef union PCM_IAHB_BE6_union_tag { /* IAHB Burst Enable 6 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:5;             /* Reserved */
    vuint32_t PRE_Z4A:1;               /* Pending Read Enable z4a */
    vuint32_t BRE_Z4A:1;               /* Burst Read Enable z4a */
    vuint32_t BWE_Z4A:1;               /* Burst Write Enable z4a */
    vuint32_t _unused_8:5;             /* Reserved */
    vuint32_t PRE_CSE:1;               /* Pending Read Enable CSE */
    vuint32_t BRE_CSE:1;               /* Burst Read Enable CSE */
    vuint32_t BWE_CSE:1;               /* Burst Write Enable CSE */
    vuint32_t _unused_16:5;            /* Reserved */
    vuint32_t PRE_QUADSPI:1;           /* Pending Read Enable QuadSPI */
    vuint32_t BRE_QUADSPI:1;           /* Burst Read Enable QuadSPI */
    vuint32_t BWE_QUADSPI:1;           /* Burst Write Enable QuadSPI */
    vuint32_t _unused_24:5;            /* Reserved */
    vuint32_t _unused_29:3;            /* Reserved */
  } B;
} PCM_IAHB_BE6_tag;

typedef union PCM_IAHB_BE7_union_tag { /* IAHB Burst Enable 7 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:13;            /* Reserved */
    vuint32_t PRE_NORTH_OF_TCM_SPLITTER:1; /* Pending Read Enable North Of TCM Splitter */
    vuint32_t BRE_NORTH_OF_TCM_SPLITTER:1; /* Burst Read Enable North Of TCM Splitter */
    vuint32_t BWE_NORTH_OF_TCM_SPLITTER:1; /* Burst Write Enable North Of TCM Splitter */
    vuint32_t _unused_16:5;            /* Reserved */
    vuint32_t PRE_Z7B:1;               /* Pending Read Enable z7b */
    vuint32_t BRE_Z7B:1;               /* Burst Read Enable z7b */
    vuint32_t BWE_Z7B:1;               /* Burst Write Enable z7b */
    vuint32_t _unused_24:5;            /* Reserved */
    vuint32_t PRE_Z7A:1;               /* Pending Read Enable z7a */
    vuint32_t BRE_Z7A:1;               /* Burst Read Enable z7a */
    vuint32_t BWE_Z7A:1;               /* Burst Write Enable z7a */
  } B;
} PCM_IAHB_BE7_tag;

struct PCM_tag {
  uint8_t PCM_reserved0[4];
  PCM_IAHB_BE1_tag IAHB_BE1;           /* IAHB Burst Enable 1 */
  PCM_IAHB_BE2_tag IAHB_BE2;           /* IAHB Burst Enable 2 */
  PCM_IAHB_BE3_tag IAHB_BE3;           /* IAHB Burst Enable 3 */
  PCM_IAHB_BE4_tag IAHB_BE4;           /* IAHB Burst Enable 4 */
  PCM_IAHB_BE5_tag IAHB_BE5;           /* IAHB Burst Enable 5 */
  PCM_IAHB_BE6_tag IAHB_BE6;           /* IAHB Burst Enable 6 */
  PCM_IAHB_BE7_tag IAHB_BE7;           /* IAHB Burst Enable 7 */
};


/* ============================================================================
   =============================== Module: PERIPH_PLL =========================
   ============================================================================ */

typedef union PERIPH_PLL_PLLCR_union_tag { /* PLL Control Register */
  vuint32_t R;
  struct {
    vuint32_t PLLPD:1;                 /* PLL power down */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} PERIPH_PLL_PLLCR_tag;

typedef union PERIPH_PLL_PLLSR_union_tag { /* PLL Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:21;
    vuint32_t _unused_21:3;
    vuint32_t _unused_24:4;
    vuint32_t LOL:1;                   /* Loss-Of-Lock flag */
    vuint32_t LOCK:1;                  /* Lock status */
    vuint32_t _unused_30:2;
  } B;
} PERIPH_PLL_PLLSR_tag;

typedef union PERIPH_PLL_PLLDV_union_tag { /* PLL Divider */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;
    vuint32_t _unused_1:6;
    vuint32_t _unused_7:3;
    vuint32_t _unused_10:6;
    vuint32_t _unused_16:1;
    vuint32_t RDIV:3;                  /* Input clock predivider */
    vuint32_t _unused_20:4;
    vuint32_t MFI:8;                   /* Integer portion of loop divider. */
  } B;
} PERIPH_PLL_PLLDV_tag;

typedef union PERIPH_PLL_PLLFD_union_tag { /* PLL Fractional Divider */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;
    vuint32_t SDMEN:1;                 /* Fractional mode enable */
    vuint32_t _unused_2:1;
    vuint32_t _unused_3:1;
    vuint32_t _unused_4:6;
    vuint32_t _unused_10:4;
    vuint32_t _unused_14:1;
    vuint32_t _unused_15:1;
    vuint32_t _unused_16:1;
    vuint32_t MFN:15;                  /* Numerator of fractional loop division factor */
  } B;
} PERIPH_PLL_PLLFD_tag;

typedef union PERIPH_PLL_PLLCLKMUX_union_tag { /* PLL Clock Multiplexer */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;
    vuint32_t REFCLKSEL:1;             /* Reference clock select */
  } B;
} PERIPH_PLL_PLLCLKMUX_tag;

typedef union PERIPH_PLL_PLLODIV_union_tag { /* PLL Output Divider */
  vuint32_t R;
  struct {
    vuint32_t DE:1;                    /* Divider enable */
    vuint32_t _unused_1:7;
    vuint32_t DIV:8;                   /* Division value */
    vuint32_t _unused_16:14;
    vuint32_t _unused_30:2;            /* Reserved */
  } B;
} PERIPH_PLL_PLLODIV_tag;

struct PERIPH_PLL_tag {
  PERIPH_PLL_PLLCR_tag PLLCR;          /* PLL Control Register */
  PERIPH_PLL_PLLSR_tag PLLSR;          /* PLL Status Register */
  PERIPH_PLL_PLLDV_tag PLLDV;          /* PLL Divider */
  uint8_t PERIPH_PLL_reserved0[4];
  PERIPH_PLL_PLLFD_tag PLLFD;          /* PLL Fractional Divider */
  uint8_t PERIPH_PLL_reserved1[12];
  PERIPH_PLL_PLLCLKMUX_tag PLLCLKMUX;  /* PLL Clock Multiplexer */
  uint8_t PERIPH_PLL_reserved2[92];
  PERIPH_PLL_PLLODIV_tag PLLODIV[10];  /* PLL Output Divider */
};


/* ============================================================================
   =============================== Module: PIT ================================
   ============================================================================ */

typedef union PIT_MCR_union_tag {      /* PIT Module Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:29;            /* Reserved */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t MDIS:1;                  /* Module Disable for PIT */
    vuint32_t FRZ:1;                   /* Freeze */
  } B;
} PIT_MCR_tag;

typedef union PIT_LTMR64H_union_tag {  /* PIT Upper Lifetime Timer Register */
  vuint32_t R;
  struct {
    vuint32_t LTH:32;                  /* Life Timer value */
  } B;
} PIT_LTMR64H_tag;

typedef union PIT_LTMR64L_union_tag {  /* PIT Lower Lifetime Timer Register */
  vuint32_t R;
  struct {
    vuint32_t LTL:32;                  /* Life Timer value */
  } B;
} PIT_LTMR64L_tag;

typedef union PIT_TIMER_LDVAL_union_tag { /* Timer Load Value Register */
  vuint32_t R;
  struct {
    vuint32_t TSV:32;                  /* Timer Start Value */
  } B;
} PIT_TIMER_LDVAL_tag;

typedef union PIT_TIMER_CVAL_union_tag { /* Current Timer Value Register */
  vuint32_t R;
  struct {
    vuint32_t TVL:32;                  /* Current Timer Value */
  } B;
} PIT_TIMER_CVAL_tag;

typedef union PIT_TIMER_TCTRL_union_tag { /* Timer Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:29;            /* Reserved */
    vuint32_t CHN:1;                   /* Chain Mode */
    vuint32_t TIE:1;                   /* Timer Interrupt Enable */
    vuint32_t TEN:1;                   /* Timer Enable */
  } B;
} PIT_TIMER_TCTRL_tag;

typedef union PIT_TIMER_TFLG_union_tag { /* Timer Flag Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t TIF:1;                   /* Timer Interrupt Flag */
  } B;
} PIT_TIMER_TFLG_tag;

typedef struct PIT_TIMER_struct_tag {
  PIT_TIMER_LDVAL_tag LDVAL;           /* Timer Load Value Register */
  PIT_TIMER_CVAL_tag CVAL;             /* Current Timer Value Register */
  PIT_TIMER_TCTRL_tag TCTRL;           /* Timer Control Register */
  PIT_TIMER_TFLG_tag TFLG;             /* Timer Flag Register */
} PIT_TIMER_tag;

struct PIT_tag {
  PIT_MCR_tag MCR;                     /* PIT Module Control Register */
  uint8_t PIT_reserved0[220];
  PIT_LTMR64H_tag LTMR64H;             /* PIT Upper Lifetime Timer Register */
  PIT_LTMR64L_tag LTMR64L;             /* PIT Lower Lifetime Timer Register */
  uint8_t PIT_reserved1[24];
  PIT_TIMER_tag TIMER[4];
};


/* ============================================================================
   =============================== Module: PMC ================================
   ============================================================================ */

typedef union PMC_SSR_union_tag {      /* Source of System Reset */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:29;            /* Reserved */
    vuint32_t POR_WDOG_EVENT:1;        /* POR watchdog event flag */
    vuint32_t CSPD_EVENT:1;            /* Critical supply presence detector event flag */
    vuint32_t POR_SUP:1;               /* POR on core supply CSPD event flag */
  } B;
} PMC_SSR_tag;

typedef union PMC_NCSPD_CTL_union_tag { /* Non-Critical Supply Presence Detector Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t _unused_9:1;             /* Reserved */
    vuint32_t _unused_10:1;            /* Reserved */
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t NCSPD_CTL16:1;           /* NCSPD16 control */
    vuint32_t NCSPD_CTL15:1;           /* NCSPD15 control */
    vuint32_t NCSPD_CTL14:1;           /* NCSPD14 control */
    vuint32_t NCSPD_CTL13:1;           /* NCSPD13 control */
    vuint32_t NCSPD_CTL12:1;           /* NCSPD12 control */
    vuint32_t NCSPD_CTL11:1;           /* NCSPD11 control */
    vuint32_t NCSPD_CTL10:1;           /* NCSPD10 control */
    vuint32_t NCSPD_CTL9:1;            /* NCSPD9 control */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t _unused_26:1;            /* Reserved */
    vuint32_t NCSPD_CTL4:1;            /* NCSPD4 control */
    vuint32_t NCSPD_CTL3:1;            /* NCSPD3 control */
    vuint32_t NCSPD_CTL2:1;            /* NCSPD2 control */
    vuint32_t NCSPD_CTL1:1;            /* NCSPD1 control */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} PMC_NCSPD_CTL_tag;

typedef union PMC_NCSPD_STAT_union_tag { /* NCSPD Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t _unused_9:1;             /* Reserved */
    vuint32_t _unused_10:1;            /* Reserved */
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t NCSPD_STAT16:1;          /* NCSPD16 status */
    vuint32_t NCSPD_STAT15:1;          /* NCSPD15 status */
    vuint32_t NCSPD_STAT14:1;          /* NCSPD14 status */
    vuint32_t NCSPD_STAT13:1;          /* NCSPD13 status */
    vuint32_t NCSPD_STAT12:1;          /* NCSPD12 status */
    vuint32_t NCSPD_STAT11:1;          /* NCSPD11 status */
    vuint32_t NCSPD_STAT10:1;          /* NCSPD10 status */
    vuint32_t NCSPD_STAT9:1;           /* NCSPD9 status */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t _unused_26:1;            /* Reserved */
    vuint32_t NCSPD_STAT4:1;           /* NCSPD4 status */
    vuint32_t NCSPD_STAT3:1;           /* NCSPD3 status */
    vuint32_t NCSPD_STAT2:1;           /* NCSPD2 status */
    vuint32_t NCSPD_STAT1:1;           /* NCSPD1 status */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} PMC_NCSPD_STAT_tag;

typedef union PMC_CSPD_EVENT_CAPTURE_union_tag { /* CSPD Event Capture (CSPDEF) */
  vuint32_t R;
  struct {
    vuint32_t CSPD_EVENT_CAPTURE30:1;  /* CSPD30 event flag */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t _unused_9:1;             /* Reserved */
    vuint32_t _unused_10:1;            /* Reserved */
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t CSPD_EVENT_CAPTURE5:1;   /* CSPD5 event flag */
    vuint32_t CSPD_EVENT_CAPTURE4:1;   /* CSPD4 event flag */
    vuint32_t CSPD_EVENT_CAPTURE3:1;   /* CSPD3 event flag */
    vuint32_t CSPD_EVENT_CAPTURE2:1;   /* CSPD2 event flag */
    vuint32_t CSPD_EVENT_CAPTURE1:1;   /* CSPD1 event flag */
    vuint32_t CSPD_EVENT_CAPTURE0:1;   /* CSPD0 event flag */
    vuint32_t HVCPOREF:1;              /* PMC supply CSPD event flag */
  } B;
} PMC_CSPD_EVENT_CAPTURE_tag;

typedef union PMC_NCSPD_EVENT_CAPTURE_union_tag { /* NCSPD Event Flag (NCSPDEF) */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t _unused_9:1;             /* Reserved */
    vuint32_t _unused_10:1;            /* Reserved */
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t NCSPD_EVENT_CAPTURE16:1; /* NCSPD16 event flag */
    vuint32_t NCSPD_EVENT_CAPTURE15:1; /* NCSPD15 event flag */
    vuint32_t NCSPD_EVENT_CAPTURE14:1; /* NCSPD14 event flag */
    vuint32_t NCSPD_EVENT_CAPTURE13:1; /* NCSPD13 event flag */
    vuint32_t NCSPD_EVENT_CAPTURE12:1; /* NCSPD12 event flag */
    vuint32_t NCSPD_EVENT_CAPTURE11:1; /* NCSPD11 event flag */
    vuint32_t NCSPD_EVENT_CAPTURE10:1; /* NCSPD10 event flag */
    vuint32_t NCSPD_EVENT_CAPTURE9:1;  /* NCSPD9 event flag */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t _unused_26:1;            /* Reserved */
    vuint32_t NCSPD_EVENT_CAPTURE4:1;  /* NCSPD4 event flag */
    vuint32_t NCSPD_EVENT_CAPTURE3:1;  /* NCSPD3 event flag */
    vuint32_t NCSPD_EVENT_CAPTURE2:1;  /* NCSPD2 event flag */
    vuint32_t NCSPD_EVENT_CAPTURE1:1;  /* NCSPD1 event flag */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} PMC_NCSPD_EVENT_CAPTURE_tag;

typedef union PMC_POR_WDOG_EVENT_CAPTURE_union_tag { /* Device Status Flag (DSF0) */
  vuint32_t R;
  struct {
    vuint32_t DSFBIT0:32;
  } B;
} PMC_POR_WDOG_EVENT_CAPTURE_tag;

struct PMC_tag {
  PMC_SSR_tag SSR;                     /* Source of System Reset */
  PMC_NCSPD_CTL_tag NCSPD_CTL;         /* Non-Critical Supply Presence Detector Control */
  uint8_t PMC_reserved0[4];
  PMC_NCSPD_STAT_tag NCSPD_STAT;       /* NCSPD Status Register */
  PMC_CSPD_EVENT_CAPTURE_tag CSPD_EVENT_CAPTURE; /* CSPD Event Capture (CSPDEF) */
  PMC_NCSPD_EVENT_CAPTURE_tag NCSPD_EVENT_CAPTURE; /* NCSPD Event Flag (NCSPDEF) */
  uint8_t PMC_reserved1[4];
  PMC_POR_WDOG_EVENT_CAPTURE_tag POR_WDOG_EVENT_CAPTURE[2]; /* Device Status Flag (DSF0) */
};


/* ============================================================================
   =============================== Module: PRAMC ==============================
   ============================================================================ */

typedef union PRAMC_PRCR1_union_tag {  /* Platform RAM Configuration register 1 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:22;            /* Reserved */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t P0_BO_DIS:1;             /* Port p0 read burst optimization disable. */
    vuint32_t _unused_26:5;            /* Reserved */
    vuint32_t FT_DIS:1;                /* Flow-through disabled */
  } B;
} PRAMC_PRCR1_tag;

typedef union PRAMC_PRCR2_union_tag {  /* Platform RAM Configuration register 2 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:22;            /* Reserved */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t P0_BO_DIS:1;             /* Port p0 read burst optimization disable. */
    vuint32_t _unused_26:5;            /* Reserved */
    vuint32_t FT_DIS:1;                /* Flow-through disabled */
  } B;
} PRAMC_PRCR2_tag;

typedef union PRAMC_PRCR3_union_tag {  /* Platform RAM Configuration register 3 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:22;            /* Reserved */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t P0_BO_DIS:1;             /* Port p0 read burst optimization disable. */
    vuint32_t _unused_26:5;            /* Reserved */
    vuint32_t FT_DIS:1;                /* Flow-through disabled */
  } B;
} PRAMC_PRCR3_tag;

typedef union PRAMC_PRCR4_union_tag {  /* Platform RAM Configuration register 4 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:22;            /* Reserved */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t P0_BO_DIS:1;             /* Port p0 read burst optimization disable. */
    vuint32_t _unused_26:5;            /* Reserved */
    vuint32_t FT_DIS:1;                /* Flow-through disabled */
  } B;
} PRAMC_PRCR4_tag;

typedef union PRAMC_PRCR5_union_tag {  /* Platform RAM Configuration register 5 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:22;            /* Reserved */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t P0_BO_DIS:1;             /* Port p0 read burst optimization disable. */
    vuint32_t _unused_26:5;            /* Reserved */
    vuint32_t FT_DIS:1;                /* Flow-through disabled */
  } B;
} PRAMC_PRCR5_tag;

typedef union PRAMC_PRCR6_union_tag {  /* Platform RAM Configuration register 6 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:22;            /* Reserved */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t P0_BO_DIS:1;             /* Port p0 read burst optimization disable. */
    vuint32_t _unused_26:5;            /* Reserved */
    vuint32_t FT_DIS:1;                /* Flow-through disabled */
  } B;
} PRAMC_PRCR6_tag;

typedef union PRAMC_PRCR7_union_tag {  /* Platform RAM Configuration register 7 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:22;            /* Reserved */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t P0_BO_DIS:1;             /* Port p0 read burst optimization disable. */
    vuint32_t _unused_26:5;            /* Reserved */
    vuint32_t FT_DIS:1;                /* Flow-through disabled */
  } B;
} PRAMC_PRCR7_tag;

typedef union PRAMC_PRCR8_union_tag {  /* Platform RAM Configuration register 8 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:22;            /* Reserved */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t P0_BO_DIS:1;             /* Port p0 read burst optimization disable. */
    vuint32_t _unused_26:5;            /* Reserved */
    vuint32_t FT_DIS:1;                /* Flow-through disabled */
  } B;
} PRAMC_PRCR8_tag;

typedef union PRAMC_PRCR9_union_tag {  /* Platform RAM Configuration register 9 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:22;            /* Reserved */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t P0_BO_DIS:1;             /* Port p0 read burst optimization disable. */
    vuint32_t _unused_26:5;            /* Reserved */
    vuint32_t FT_DIS:1;                /* Flow-through disabled */
  } B;
} PRAMC_PRCR9_tag;

struct PRAMC_tag {
  PRAMC_PRCR1_tag PRCR1;               /* Platform RAM Configuration register 1 */
  PRAMC_PRCR2_tag PRCR2;               /* Platform RAM Configuration register 2 */
  PRAMC_PRCR3_tag PRCR3;               /* Platform RAM Configuration register 3 */
  PRAMC_PRCR4_tag PRCR4;               /* Platform RAM Configuration register 4 */
  PRAMC_PRCR5_tag PRCR5;               /* Platform RAM Configuration register 5 */
  PRAMC_PRCR6_tag PRCR6;               /* Platform RAM Configuration register 6 */
  PRAMC_PRCR7_tag PRCR7;               /* Platform RAM Configuration register 7 */
  PRAMC_PRCR8_tag PRCR8;               /* Platform RAM Configuration register 8 */
  PRAMC_PRCR9_tag PRCR9;               /* Platform RAM Configuration register 9 */
};


/* ============================================================================
   =============================== Module: PRAM_XBAR ==========================
   ============================================================================ */

typedef union PRAM_XBAR_CHANNEL_PRS_union_tag { /* Priority Register Slave */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:13;
    vuint32_t M4:3;                    /* Master 4 Priority */
    vuint32_t _unused_16:1;
    vuint32_t M3:3;                    /* Master 3 Priority */
    vuint32_t _unused_20:1;
    vuint32_t M2:3;                    /* Master 2 Priority */
    vuint32_t _unused_24:1;
    vuint32_t M1:3;                    /* Master 1 Priority */
    vuint32_t _unused_28:1;
    vuint32_t M0:3;                    /* Master 0 Priority */
  } B;
} PRAM_XBAR_CHANNEL_PRS_tag;

typedef union PRAM_XBAR_CHANNEL_CRS_union_tag { /* Control */
  vuint32_t R;
  struct {
    vuint32_t RO:1;                    /* Read Only */
    vuint32_t HLP:1;                   /* Halt Low Priority */
    vuint32_t _unused_2:9;
    vuint32_t HPE4:1;                  /* High-Priority Elevation For Master 4 */
    vuint32_t HPE3:1;                  /* High-Priority Elevation For Master 3 */
    vuint32_t HPE2:1;                  /* High-Priority Elevation For Master 2 */
    vuint32_t HPE1:1;                  /* High-Priority Elevation For Master 1 */
    vuint32_t HPE0:1;                  /* High-Priority Elevation For Master 0 */
    vuint32_t _unused_16:6;
    vuint32_t ARB:2;                   /* Arbitration Mode */
    vuint32_t _unused_24:2;
    vuint32_t PCTL:2;                  /* Parking Control */
    vuint32_t _unused_28:1;
    vuint32_t PARK:3;                  /* Park */
  } B;
} PRAM_XBAR_CHANNEL_CRS_tag;

typedef struct PRAM_XBAR_CHANNEL_struct_tag {
  PRAM_XBAR_CHANNEL_PRS_tag PRS;       /* Priority Register Slave */
  uint8_t CHANNEL_reserved0[12];
  PRAM_XBAR_CHANNEL_CRS_tag CRS;       /* Control */
  uint8_t CHANNEL_reserved1[236];
} PRAM_XBAR_CHANNEL_tag;

typedef union PRAM_XBAR_MGPCR0_union_tag { /* Master General Purpose Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:29;
    vuint32_t AULB:3;                  /* Arbitrates On Undefined Length Bursts */
  } B;
} PRAM_XBAR_MGPCR0_tag;

typedef union PRAM_XBAR_MGPCR1_union_tag { /* Master General Purpose Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:29;
    vuint32_t AULB:3;                  /* Arbitrates On Undefined Length Bursts */
  } B;
} PRAM_XBAR_MGPCR1_tag;

typedef union PRAM_XBAR_MGPCR2_union_tag { /* Master General Purpose Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:29;
    vuint32_t AULB:3;                  /* Arbitrates On Undefined Length Bursts */
  } B;
} PRAM_XBAR_MGPCR2_tag;

typedef union PRAM_XBAR_MGPCR3_union_tag { /* Master General Purpose Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:29;
    vuint32_t AULB:3;                  /* Arbitrates On Undefined Length Bursts */
  } B;
} PRAM_XBAR_MGPCR3_tag;

typedef union PRAM_XBAR_MGPCR4_union_tag { /* Master General Purpose Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:29;
    vuint32_t AULB:3;                  /* Arbitrates On Undefined Length Bursts */
  } B;
} PRAM_XBAR_MGPCR4_tag;

struct PRAM_XBAR_tag {
  PRAM_XBAR_CHANNEL_tag CHANNEL[8];
  PRAM_XBAR_MGPCR0_tag MGPCR0;         /* Master General Purpose Control */
  uint8_t PRAM_XBAR_reserved0[252];
  PRAM_XBAR_MGPCR1_tag MGPCR1;         /* Master General Purpose Control */
  uint8_t PRAM_XBAR_reserved1[252];
  PRAM_XBAR_MGPCR2_tag MGPCR2;         /* Master General Purpose Control */
  uint8_t PRAM_XBAR_reserved2[252];
  PRAM_XBAR_MGPCR3_tag MGPCR3;         /* Master General Purpose Control */
  uint8_t PRAM_XBAR_reserved3[252];
  PRAM_XBAR_MGPCR4_tag MGPCR4;         /* Master General Purpose Control */
};


/* ============================================================================
   =============================== Module: QuadSPI ============================
   ============================================================================ */

typedef union QuadSPI_MCR_union_tag {  /* Module Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;
    vuint32_t _unused_1:1;
    vuint32_t _unused_2:2;
    vuint32_t _unused_4:1;
    vuint32_t _unused_5:1;
    vuint32_t DQS_FA_SEL:2;            /* DQS clock for sampling read data at flash memory A */
    vuint32_t _unused_8:1;
    vuint32_t _unused_9:3;
    vuint32_t _unused_12:4;            /* Reserved */
    vuint32_t _unused_16:1;
    vuint32_t MDIS:1;                  /* Module disable */
    vuint32_t _unused_18:1;
    vuint32_t DLPEN:1;                 /* Data learning pattern enable */
    vuint32_t CLR_TXF:1;               /* Clear TX FIFO/buffer */
    vuint32_t CLR_RXF:1;               /* Clear RX FIFO */
    vuint32_t _unused_22:1;
    vuint32_t _unused_23:1;
    vuint32_t DDR_EN:1;                /* DDR mode enable */
    vuint32_t _unused_25:1;
    vuint32_t DQS_LAT_EN:1;            /* DQS latency enable */
    vuint32_t _unused_27:1;
    vuint32_t _unused_28:2;
    vuint32_t SWRSTHD:1;               /* Software reset for AHB domain */
    vuint32_t SWRSTSD:1;               /* Software reset for serial flash memory domain */
  } B;
} QuadSPI_MCR_tag;

typedef union QuadSPI_IPCR_union_tag { /* IP Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;
    vuint32_t SEQID:4;                 /* Points to a sequence in the LUT */
    vuint32_t _unused_8:7;
    vuint32_t _unused_15:1;
    vuint32_t IDATSZ:16;               /* IP data transfer size */
  } B;
} QuadSPI_IPCR_tag;

typedef union QuadSPI_FLSHCR_union_tag { /* Flash Memory Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:14;
    vuint32_t TDH:2;                   /* Serial flash memory data in hold time */
    vuint32_t _unused_16:4;
    vuint32_t TCSH:4;                  /* Serial flash memory CS hold time */
    vuint32_t _unused_24:4;
    vuint32_t TCSS:4;                  /* Serial flash memory CS setup time */
  } B;
} QuadSPI_FLSHCR_tag;

typedef union QuadSPI_BUF0CR_union_tag { /* Buffer 0 Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;
    vuint32_t _unused_1:15;
    vuint32_t ADATSZ:8;                /* AHB data transfer size */
    vuint32_t _unused_24:4;
    vuint32_t MSTRID:4;                /* Master ID */
  } B;
} QuadSPI_BUF0CR_tag;

typedef union QuadSPI_BUF1CR_union_tag { /* Buffer 1 Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t ADATSZ:8;                /* AHB data transfer size */
    vuint32_t _unused_24:4;
    vuint32_t MSTRID:4;                /* Master ID */
  } B;
} QuadSPI_BUF1CR_tag;

typedef union QuadSPI_BUF2CR_union_tag { /* Buffer 2 Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t ADATSZ:8;                /* AHB data transfer size */
    vuint32_t _unused_24:4;
    vuint32_t MSTRID:4;                /* Master ID */
  } B;
} QuadSPI_BUF2CR_tag;

typedef union QuadSPI_BUF3CR_union_tag { /* Buffer 3 Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t ALLMST:1;                /* All master enable */
    vuint32_t _unused_1:15;
    vuint32_t ADATSZ:8;                /* AHB data transfer size */
    vuint32_t _unused_24:4;
    vuint32_t MSTRID:4;                /* Master ID */
  } B;
} QuadSPI_BUF3CR_tag;

typedef union QuadSPI_BFGENCR_union_tag { /* Buffer Generic Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:15;
    vuint32_t _unused_15:1;
    vuint32_t SEQID:4;                 /* Points to a sequence in the LUT */
    vuint32_t _unused_20:12;
  } B;
} QuadSPI_BFGENCR_tag;

typedef union QuadSPI_BUF0IND_union_tag { /* Buffer 0 Top Index Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:21;
    vuint32_t TPINDX0:8;               /* Top index of buffer 0 */
    vuint32_t _unused_29:3;
  } B;
} QuadSPI_BUF0IND_tag;

typedef union QuadSPI_BUF1IND_union_tag { /* Buffer 1 Top Index Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:21;
    vuint32_t TPINDX1:8;               /* Top index of buffer 1 */
    vuint32_t _unused_29:3;
  } B;
} QuadSPI_BUF1IND_tag;

typedef union QuadSPI_BUF2IND_union_tag { /* Buffer 2 Top Index Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:21;
    vuint32_t TPINDX2:8;               /* Top index of buffer 2 */
    vuint32_t _unused_29:3;
  } B;
} QuadSPI_BUF2IND_tag;

typedef union QuadSPI_DLLCRA_union_tag { /* DLL Flash Memory A Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t DLLEN:1;                 /* DLL enable */
    vuint32_t FREQEN:1;                /* Frequency enable */
    vuint32_t _unused_2:2;
    vuint32_t _unused_4:4;
    vuint32_t _unused_8:4;
    vuint32_t SLV_FINE_OFFSET:4;       /* Fine offset delay elements in incoming DQS */
    vuint32_t T_BY_32:1;               /* T/32 offset delay */
    vuint32_t SLV_DLY_OFFSET:3;        /* T/16 offset delay elements in incoming DQS */
    vuint32_t SLV_DLY_COARSE:4;        /* Delay elements in each delay tap */
    vuint32_t SLV_DLY_FINE:3;          /* Fine adjustment delay elements */
    vuint32_t _unused_27:1;
    vuint32_t SLAVE_AUTO_UPDT:1;       /* Slave chain update */
    vuint32_t SLV_EN:1;                /* Slave enable */
    vuint32_t SLV_DLL_BYPASS:1;        /* Slave DLL bypass */
    vuint32_t SLV_UPD:1;               /* Slave update */
  } B;
} QuadSPI_DLLCRA_tag;

typedef union QuadSPI_SFAR_union_tag { /* Serial Flash Memory Address Register */
  vuint32_t R;
  struct {
    vuint32_t SFADR:32;                /* Serial flash memory address */
  } B;
} QuadSPI_SFAR_tag;

typedef union QuadSPI_SFACR_union_tag { /* Serial Flash Memory Address Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:14;
    vuint32_t _unused_14:1;
    vuint32_t WA:1;                    /* Word addressable */
    vuint32_t _unused_16:2;
    vuint32_t _unused_18:6;
    vuint32_t _unused_24:4;
    vuint32_t CAS:4;                   /* Column address space */
  } B;
} QuadSPI_SFACR_tag;

typedef union QuadSPI_SMPR_union_tag { /* Sampling Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;
    vuint32_t _unused_1:3;
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t DLLFSMPFA:3;             /* Selects the nth tap provided by slave delay chain for flash memory A */
    vuint32_t _unused_8:5;             /* Reserved */
    vuint32_t _unused_13:3;
    vuint32_t _unused_16:9;
    vuint32_t FSDLY:1;                 /* Full-speed delay selection for internal/pad loop back DQS sampling */
    vuint32_t FSPHS:1;                 /* Full-speed phase selection for SDR instructions */
    vuint32_t _unused_27:2;
    vuint32_t _unused_29:3;
  } B;
} QuadSPI_SMPR_tag;

typedef union QuadSPI_RBSR_union_tag { /* RX Buffer Status Register */
  vuint32_t R;
  struct {
    vuint32_t RDCTR:16;                /* Read counter */
    vuint32_t _unused_16:8;
    vuint32_t RDBFL:8;                 /* RX buffer fill level */
  } B;
} QuadSPI_RBSR_tag;

typedef union QuadSPI_RBCT_union_tag { /* RX Buffer Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:23;
    vuint32_t RXBRD:1;                 /* RX buffer readout */
    vuint32_t _unused_24:1;
    vuint32_t WMRK:7;                  /* RX buffer watermark */
  } B;
} QuadSPI_RBCT_tag;

typedef union QuadSPI_DLLSR_union_tag { /* DLL Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;
    vuint32_t _unused_4:4;
    vuint32_t _unused_8:8;
    vuint32_t DLLA_LOCK:1;             /* DLL A lock status */
    vuint32_t SLVA_LOCK:1;             /* Slave high lock status */
    vuint32_t DLLA_RANGE_ERR:1;        /* DLL master delay chain */
    vuint32_t DLLA_FINE_UNDERFLOW:1;   /* Fine delay chain underflow */
    vuint32_t _unused_20:4;
    vuint32_t DLLA_SLV_FINE_VAL:4;     /* Fine delay cells in slave delay chain */
    vuint32_t DLLA_SLV_COARSE_VAL:4;   /* Coarse delay cells in slave delay chain */
  } B;
} QuadSPI_DLLSR_tag;

typedef union QuadSPI_DLCR_union_tag { /* Data Learning Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t _unused_2:4;
    vuint32_t DL_2TAP:1;               /* Data learning algorithm configuration */
    vuint32_t DL_NONDLP_FLSH:1;        /* Data learning enabled for non-DLP flash memory */
    vuint32_t _unused_8:8;
    vuint32_t DLP_SEL_FA:2;            /* Selects pattern matching IO pads */
    vuint32_t _unused_18:6;
    vuint32_t _unused_24:8;
  } B;
} QuadSPI_DLCR_tag;

typedef union QuadSPI_DLSR_FA_union_tag { /* Data Learning Status Flash Memory A Register */
  vuint32_t R;
  struct {
    vuint32_t DLPFFA:1;                /* Data learning pattern fail */
    vuint32_t _unused_1:15;
    vuint32_t POS_EDGE:8;
    vuint32_t NEG_EDGE:8;
  } B;
} QuadSPI_DLSR_FA_tag;

typedef union QuadSPI_TBSR_union_tag { /* TX Buffer Status Register */
  vuint32_t R;
  struct {
    vuint32_t TRCTR:16;                /* Transmit counter */
    vuint32_t _unused_16:10;
    vuint32_t TRBFL:6;                 /* TX buffer fill level */
  } B;
} QuadSPI_TBSR_tag;

typedef union QuadSPI_TBDR_union_tag { /* TX Buffer Data Register */
  vuint32_t R;
  struct {
    vuint32_t TXDATA:32;               /* TX data */
  } B;
} QuadSPI_TBDR_tag;

typedef union QuadSPI_TBCT_union_tag { /* TX Buffer Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;
    vuint32_t _unused_24:3;
    vuint32_t WMRK:5;                  /* Watermark for TX buffer */
  } B;
} QuadSPI_TBCT_tag;

typedef union QuadSPI_SR_union_tag {   /* Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;
    vuint32_t _unused_3:1;
    vuint32_t TXFULL:1;                /* TX buffer full */
    vuint32_t TXDMA:1;                 /* TX DMA */
    vuint32_t TXWA:1;                  /* TX buffer watermark available */
    vuint32_t TXNE:1;                  /* TX buffer not empty */
    vuint32_t RXDMA:1;                 /* RX buffer DMA */
    vuint32_t _unused_9:3;
    vuint32_t RXFULL:1;                /* RX buffer full */
    vuint32_t _unused_13:2;
    vuint32_t RXWE:1;                  /* RX buffer watermark exceeded */
    vuint32_t _unused_16:1;
    vuint32_t AHB3FUL:1;               /* AHB 3 buffer full */
    vuint32_t AHB2FUL:1;               /* AHB 2 buffer full */
    vuint32_t AHB1FUL:1;               /* AHB 1 buffer full */
    vuint32_t AHB0FUL:1;               /* AHB 0 buffer full */
    vuint32_t AHB3NE:1;                /* AHB 3 buffer not empty */
    vuint32_t AHB2NE:1;                /* AHB 2 buffer not empty */
    vuint32_t AHB1NE:1;                /* AHB 1 buffer not empty */
    vuint32_t AHB0NE:1;                /* AHB 0 buffer not empty */
    vuint32_t AHBTRN:1;                /* AHB access transaction pending */
    vuint32_t _unused_26:1;
    vuint32_t _unused_27:1;
    vuint32_t KEY_FET:1;               /* Key fetch */
    vuint32_t AHB_ACC:1;               /* AHB read access */
    vuint32_t IP_ACC:1;                /* IP access */
    vuint32_t BUSY:1;                  /* Module busy */
  } B;
} QuadSPI_SR_tag;

typedef union QuadSPI_FR_union_tag {   /* Flag Register */
  vuint32_t R;
  struct {
    vuint32_t DLPFF:1;                 /* Data learning pattern failure flag */
    vuint32_t IAKFEF:1;                /* Illegal access during key fetch error flag */
    vuint32_t KFEF:1;                  /* Key fetch error flag */
    vuint32_t DLLABRT:1;               /* DLL abort */
    vuint32_t TBFF:1;                  /* TX buffer fill flag */
    vuint32_t TBUF:1;                  /* TX buffer underrun flag */
    vuint32_t _unused_6:1;
    vuint32_t DLLUNLCK:1;              /* DLL unlock */
    vuint32_t ILLINE:1;                /* Illegal instruction error flag */
    vuint32_t _unused_9:2;
    vuint32_t _unused_11:1;
    vuint32_t _unused_12:2;
    vuint32_t RBOF:1;                  /* RX buffer overflow flag */
    vuint32_t RBDF:1;                  /* RX buffer drain flag */
    vuint32_t AAEF:1;                  /* AHB abort error flag */
    vuint32_t AITEF:1;                 /* AHB illegal transaction error flag */
    vuint32_t _unused_18:1;
    vuint32_t ABOF:1;                  /* AHB buffer overflow flag */
    vuint32_t _unused_20:1;
    vuint32_t _unused_21:1;
    vuint32_t _unused_22:1;
    vuint32_t _unused_23:1;
    vuint32_t IPAEF:1;                 /* IP command trigger during AHB access error flag */
    vuint32_t IPIEF:1;                 /* IP command trigger could not be executed error flag */
    vuint32_t _unused_26:1;
    vuint32_t _unused_27:1;
    vuint32_t _unused_28:3;
    vuint32_t TFF:1;                   /* IP command transaction finished flag */
  } B;
} QuadSPI_FR_tag;

typedef union QuadSPI_RSER_union_tag { /* Interrupt and DMA Request Select and Enable Register */
  vuint32_t R;
  struct {
    vuint32_t DLPFIE:1;                /* Data learning pattern failure interrupt enable */
    vuint32_t IAKFIE:1;                /* Illegal access during key fetch interrupt enable flag */
    vuint32_t KFEIE:1;                 /* Key fetch error interrupt enable flag */
    vuint32_t _unused_3:1;
    vuint32_t TBFIE:1;                 /* TX buffer fill interrupt enable flag */
    vuint32_t TBUIE:1;                 /* TX buffer underrun interrupt enable flag */
    vuint32_t TBFDE:1;                 /* TX buffer fill DMA enable */
    vuint32_t DLLULIE:1;               /* DLL unlock interrupt enable */
    vuint32_t ILLINIE:1;               /* Illegal instruction error interrupt enable */
    vuint32_t _unused_9:1;
    vuint32_t RBDDE:1;                 /* RX buffer drain DMA enable */
    vuint32_t _unused_11:1;
    vuint32_t _unused_12:2;
    vuint32_t RBOIE:1;                 /* RX buffer overflow interrupt enable */
    vuint32_t RBDIE:1;                 /* RX buffer drain interrupt enable */
    vuint32_t AAIE:1;                  /* AHB abort error interrupt enable */
    vuint32_t AITIE:1;                 /* AHB illegal transaction interrupt enable flag */
    vuint32_t AIBSIE:1;                /* AHB illegal burst size interrupt enable flag */
    vuint32_t ABOIE:1;                 /* AHB buffer overflow interrupt enable flag */
    vuint32_t _unused_20:1;
    vuint32_t _unused_21:1;
    vuint32_t _unused_22:1;
    vuint32_t _unused_23:1;
    vuint32_t IPAEIE:1;                /* IP command trigger during AHB read access error interrupt enable flag */
    vuint32_t IPIEIE:1;                /* IP command trigger during IP access error interrupt enable flag */
    vuint32_t _unused_26:1;
    vuint32_t _unused_27:1;
    vuint32_t _unused_28:3;
    vuint32_t TFIE:1;                  /* Transaction finished interrupt enable flag */
  } B;
} QuadSPI_RSER_tag;

typedef union QuadSPI_SPTRCLR_union_tag { /* Sequence Pointer Clear Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:14;
    vuint32_t PREFETCH_DIS:1;          /* Prefetch disable */
    vuint32_t ABRT_CLR:1;              /* Flash memory Abort/AHB buffer clear */
    vuint32_t _unused_16:7;
    vuint32_t IPPTRC:1;                /* IP pointer clear */
    vuint32_t _unused_24:7;
    vuint32_t BFPTRC:1;                /* Buffer pointer clear */
  } B;
} QuadSPI_SPTRCLR_tag;

typedef union QuadSPI_SFA1AD_union_tag { /* Serial Flash Memory A1 Top Address Register */
  vuint32_t R;
  struct {
    vuint32_t TPADA1:22;               /* Top address for serial flash memory A1 */
    vuint32_t _unused_22:10;
  } B;
} QuadSPI_SFA1AD_tag;

typedef union QuadSPI_SFA2AD_union_tag { /* Serial Flash Memory A2 Top Address Register */
  vuint32_t R;
  struct {
    vuint32_t TPADA2:22;               /* Top address for serial flash memory A2 */
    vuint32_t _unused_22:10;
  } B;
} QuadSPI_SFA2AD_tag;

typedef union QuadSPI_SFB1AD_union_tag { /* Serial Flash Memory B1 Top Address Register */
  vuint32_t R;
  struct {
    vuint32_t TPADB1:22;               /* Top address for serial flash memory B1. */
    vuint32_t _unused_22:10;
  } B;
} QuadSPI_SFB1AD_tag;

typedef union QuadSPI_SFB2AD_union_tag { /* Serial Flash Memory B2 Top Address Register */
  vuint32_t R;
  struct {
    vuint32_t TPADB2:22;               /* Top address for serial flash memory B2. */
    vuint32_t _unused_22:10;
  } B;
} QuadSPI_SFB2AD_tag;

typedef union QuadSPI_DLPR_union_tag { /* Data Learn Pattern Register */
  vuint32_t R;
  struct {
    vuint32_t DLPV:32;                 /* Data learning pattern value */
  } B;
} QuadSPI_DLPR_tag;

typedef union QuadSPI_RBDR_union_tag { /* RX Buffer Data Register */
  vuint32_t R;
  struct {
    vuint32_t RXDATA:32;               /* RX data */
  } B;
} QuadSPI_RBDR_tag;

typedef union QuadSPI_LUTKEY_union_tag { /* LUT Key Register */
  vuint32_t R;
  struct {
    vuint32_t KEY:32;                  /* Key to lock or unlock the LUT */
  } B;
} QuadSPI_LUTKEY_tag;

typedef union QuadSPI_LCKCR_union_tag { /* LUT Lock Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:30;
    vuint32_t UNLOCK:1;                /* Unlock LUT */
    vuint32_t LOCK:1;                  /* Lock LUT */
  } B;
} QuadSPI_LCKCR_tag;

typedef union QuadSPI_LUT_union_tag {  /* LUT Register */
  vuint32_t R;
  struct {
    vuint32_t INSTR1:6;                /* Instruction 1 */
    vuint32_t PAD1:2;                  /* Pad information for INSTR1 */
    vuint32_t OPRND1:8;                /* Operand for INSTR1 */
    vuint32_t INSTR0:6;                /* Instruction 0 */
    vuint32_t PAD0:2;                  /* Pad information for INSTR0 */
    vuint32_t OPRND0:8;                /* Operand for INSTR0 */
  } B;
} QuadSPI_LUT_tag;

struct QuadSPI_tag {
  QuadSPI_MCR_tag MCR;                 /* Module Configuration Register */
  uint8_t QuadSPI_reserved0[4];
  QuadSPI_IPCR_tag IPCR;               /* IP Configuration Register */
  QuadSPI_FLSHCR_tag FLSHCR;           /* Flash Memory Configuration Register */
  QuadSPI_BUF0CR_tag BUF0CR;           /* Buffer 0 Configuration Register */
  QuadSPI_BUF1CR_tag BUF1CR;           /* Buffer 1 Configuration Register */
  QuadSPI_BUF2CR_tag BUF2CR;           /* Buffer 2 Configuration Register */
  QuadSPI_BUF3CR_tag BUF3CR;           /* Buffer 3 Configuration Register */
  QuadSPI_BFGENCR_tag BFGENCR;         /* Buffer Generic Configuration Register */
  uint8_t QuadSPI_reserved1[12];
  QuadSPI_BUF0IND_tag BUF0IND;         /* Buffer 0 Top Index Register */
  QuadSPI_BUF1IND_tag BUF1IND;         /* Buffer 1 Top Index Register */
  QuadSPI_BUF2IND_tag BUF2IND;         /* Buffer 2 Top Index Register */
  uint8_t QuadSPI_reserved2[36];
  QuadSPI_DLLCRA_tag DLLCRA;           /* DLL Flash Memory A Configuration Register */
  uint8_t QuadSPI_reserved3[156];
  QuadSPI_SFAR_tag SFAR;               /* Serial Flash Memory Address Register */
  QuadSPI_SFACR_tag SFACR;             /* Serial Flash Memory Address Configuration Register */
  QuadSPI_SMPR_tag SMPR;               /* Sampling Register */
  QuadSPI_RBSR_tag RBSR;               /* RX Buffer Status Register */
  QuadSPI_RBCT_tag RBCT;               /* RX Buffer Control Register */
  uint8_t QuadSPI_reserved4[24];
  QuadSPI_DLLSR_tag DLLSR;             /* DLL Status Register */
  QuadSPI_DLCR_tag DLCR;               /* Data Learning Configuration Register */
  QuadSPI_DLSR_FA_tag DLSR_FA;         /* Data Learning Status Flash Memory A Register */
  uint8_t QuadSPI_reserved5[24];
  QuadSPI_TBSR_tag TBSR;               /* TX Buffer Status Register */
  QuadSPI_TBDR_tag TBDR;               /* TX Buffer Data Register */
  QuadSPI_TBCT_tag TBCT;               /* TX Buffer Control Register */
  QuadSPI_SR_tag SR;                   /* Status Register */
  QuadSPI_FR_tag FRr;                  /* Flag Register */
  QuadSPI_RSER_tag RSER;               /* Interrupt and DMA Request Select and Enable Register */
  uint8_t QuadSPI_reserved6[4];
  QuadSPI_SPTRCLR_tag SPTRCLR;         /* Sequence Pointer Clear Register */
  uint8_t QuadSPI_reserved7[16];
  QuadSPI_SFA1AD_tag SFA1AD;           /* Serial Flash Memory A1 Top Address Register */
  QuadSPI_SFA2AD_tag SFA2AD;           /* Serial Flash Memory A2 Top Address Register */
  QuadSPI_SFB1AD_tag SFB1AD;           /* Serial Flash Memory B1 Top Address Register */
  QuadSPI_SFB2AD_tag SFB2AD;           /* Serial Flash Memory B2 Top Address Register */
  QuadSPI_DLPR_tag DLPR;               /* Data Learn Pattern Register */
  uint8_t QuadSPI_reserved8[108];
  QuadSPI_RBDR_tag RBDR[64];           /* RX Buffer Data Register */
  QuadSPI_LUTKEY_tag LUTKEY;           /* LUT Key Register */
  QuadSPI_LCKCR_tag LCKCR;             /* LUT Lock Configuration Register */
  uint8_t QuadSPI_reserved9[8];
  QuadSPI_LUT_tag LUT[80];             /* LUT Register */
};


/* ============================================================================
   =============================== Module: QuadSPI_ARDB =======================
   ============================================================================ */

typedef union QuadSPI_ARDB_ARDB_union_tag { /* AHB RX Data Buffer Register */
  vuint32_t R;
  struct {
    vuint32_t ARXD:32;                 /* ARDB provided RX buffer data */
  } B;
} QuadSPI_ARDB_ARDB_tag;

struct QuadSPI_ARDB_tag {
  QuadSPI_ARDB_ARDB_tag ARDB[128];     /* AHB RX Data Buffer Register */
};


/* ============================================================================
   =============================== Module: REG_PROT ===========================
   ============================================================================ */

typedef union REG_PROT_SLBRN_union_tag { /* Soft Lock Bit n */
  vuint8_t R;
  struct {
    vuint8_t WE0:1;                    /* Write Enable For SLB0 */
    vuint8_t WE1:1;                    /* Write Enable For SLB1 */
    vuint8_t WE2:1;                    /* Write Enable For SLB2 */
    vuint8_t WE3:1;                    /* Write Enable For SLB3 */
    vuint8_t SLB0:1;                   /* Soft Lock Bit 0 */
    vuint8_t SLB1:1;                   /* Soft Lock Bit 1 */
    vuint8_t SLB2:1;                   /* Soft Lock Bit 2 */
    vuint8_t SLB3:1;                   /* Soft Lock Bit 3 */
  } B;
} REG_PROT_SLBRN_tag;

typedef union REG_PROT_GCR_union_tag { /* Global Configuration */
  vuint32_t R;
  struct {
    vuint32_t HLB:1;                   /* Hard Lock Bit */
    vuint32_t _unused_1:7;             /* Reserved */
    vuint32_t UAA:1;                   /* User Access Allowed */
    vuint32_t _unused_9:23;            /* Reserved */
  } B;
} REG_PROT_GCR_tag;

struct REG_PROT_tag {
  uint8_t REG_PROT_reserved0[14336];
  REG_PROT_SLBRN_tag SLBRN;            /* Soft Lock Bit n */
  uint8_t REG_PROT_reserved1[2043];
  REG_PROT_GCR_tag GCR;                /* Global Configuration */
};


/* ============================================================================
   =============================== Module: SEMA42 =============================
   ============================================================================ */

typedef union SEMA42_GATE_union_tag {  /* Gate Register */
  vuint8_t R;
  struct {
    vuint8_t _unused_0:4;              /* Reserved */
    vuint8_t GTFSM:4;                  /* Gate finite state machine */
  } B;
} SEMA42_GATE_tag;

typedef union SEMA42_RSTGT_R_union_tag { /* Reset Gate Read */
  vuint16_t R;
  struct {
    vuint16_t ROZ:2;                   /* ROZ */
    vuint16_t RSTGSM:2;                /* Reset gate finite state machine */
    vuint16_t RSTGMS:4;                /* Reset gate domain */
    vuint16_t RSTGTN:8;                /* Reset gate number */
  } B;
} SEMA42_RSTGT_R_tag;

typedef union SEMA42_RSTGT_W_union_tag { /* Reset Gate Write */
  vuint16_t R;
  struct {
    vuint16_t RSTGDP:8;                /* Reset gate data pattern */
    vuint16_t RSTGTN:8;                /* Reset gate number */
  } B;
} SEMA42_RSTGT_W_tag;

typedef union SEMA42_RSTGT_union_tag {
  SEMA42_RSTGT_R_tag R;                /* Reset Gate Read */
  SEMA42_RSTGT_W_tag W;                /* Reset Gate Write */
} SEMA42_RSTGT_tag;

struct SEMA42_tag {
  SEMA42_GATE_tag GATE[16];            /* Gate Register */
  uint8_t SEMA42_reserved0[48];
  SEMA42_RSTGT_tag RSTGT;
};


/* ============================================================================
   =============================== Module: SIPI ===============================
   ============================================================================ */

typedef union SIPI_CCR0_union_tag {    /* SIPI Channel Control Register 0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:15;            /* Reserved */
    vuint32_t TC:1;                    /* Send Trigger Command */
    vuint32_t _unused_16:8;            /* Reserved */
    vuint32_t WL:2;                    /* Word Length Transfer */
    vuint32_t CHEN:1;                  /* Channel Enable */
    vuint32_t ST:1;                    /* Streaming Transfer */
    vuint32_t IDT:1;                   /* ID Read Request Transfer */
    vuint32_t RRT:1;                   /* Read Request Transfer */
    vuint32_t WRT:1;                   /* Write Request Transfer */
    vuint32_t DEN:1;                   /* DMA Enable */
  } B;
} SIPI_CCR0_tag;

typedef union SIPI_CSR0_union_tag {    /* SIPI Channel Status Register 0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t RAR:1;                   /* Read Answer Reception */
    vuint32_t TID:3;                   /* Transaction ID of Transmitted Frame */
    vuint32_t ACKR:1;                  /* Acknowledge Received */
    vuint32_t CB:1;                    /* Channel Busy */
    vuint32_t _unused_30:2;            /* Reserved */
  } B;
} SIPI_CSR0_tag;

typedef union SIPI_CIR0_union_tag {    /* SIPI Channel Interrupt Register 0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:26;            /* Reserved */
    vuint32_t WAIE:1;                  /* Write Acknowledge Interrupt Enable */
    vuint32_t RAIE:1;                  /* Read Answer Interrupt Enable */
    vuint32_t TCIE:1;                  /* Trigger Command Interrupt Enable */
    vuint32_t TOIE:1;                  /* Timeout Error Interrupt Enabled */
    vuint32_t TIDIE:1;                 /* Transaction ID Error Interrupt Enable */
    vuint32_t ACKIE:1;                 /* Acknowledge Error Interrupt Enable */
  } B;
} SIPI_CIR0_tag;

typedef union SIPI_CTOR0_union_tag {   /* SIPI Channel Timeout Register 0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t TOR:8;                   /* Timeout Value for Transmitted Requests */
  } B;
} SIPI_CTOR0_tag;

typedef union SIPI_CCRC0_union_tag {   /* SIPI Channel CRC Register 0 */
  vuint32_t R;
  struct {
    vuint32_t CRCI:16;
    vuint32_t CRCT:16;
  } B;
} SIPI_CCRC0_tag;

typedef union SIPI_CAR0_union_tag {    /* SIPI Channel Address Register 0 */
  vuint32_t R;
  struct {
    vuint32_t CAR:32;
  } B;
} SIPI_CAR0_tag;

typedef union SIPI_CDR0_union_tag {    /* SIPI Channel Data Register 0 */
  vuint32_t R;
  struct {
    vuint32_t CDR:32;
  } B;
} SIPI_CDR0_tag;

typedef union SIPI_CCR1_union_tag {    /* SIPI Channel Control Register 1 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:15;            /* Reserved */
    vuint32_t TC:1;                    /* Send Trigger Command */
    vuint32_t _unused_16:8;            /* Reserved */
    vuint32_t WL:2;                    /* Word Length Transfer */
    vuint32_t CHEN:1;                  /* Channel Enable */
    vuint32_t ST:1;                    /* Streaming Transfer */
    vuint32_t IDT:1;                   /* ID Read Request Transfer */
    vuint32_t RRT:1;                   /* Read Request Transfer */
    vuint32_t WRT:1;                   /* Write Request Transfer */
    vuint32_t DEN:1;                   /* DMA Enable */
  } B;
} SIPI_CCR1_tag;

typedef union SIPI_CSR1_union_tag {    /* SIPI Channel Status Register 1 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t RAR:1;                   /* Read Answer Reception */
    vuint32_t TID:3;                   /* Transaction ID of Transmitted Frame */
    vuint32_t ACKR:1;                  /* Acknowledge Received */
    vuint32_t CB:1;                    /* Channel Busy */
    vuint32_t _unused_30:2;            /* Reserved */
  } B;
} SIPI_CSR1_tag;

typedef union SIPI_CIR1_union_tag {    /* SIPI Channel Interrupt Register 1 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:26;            /* Reserved */
    vuint32_t WAIE:1;                  /* Write Acknowledge Interrupt Enable */
    vuint32_t RAIE:1;                  /* Read Answer Interrupt Enable */
    vuint32_t TCIE:1;                  /* Trigger Command Interrupt Enable */
    vuint32_t TOIE:1;                  /* Timeout Error Interrupt Enabled */
    vuint32_t TIDIE:1;                 /* Transaction ID Error Interrupt Enable */
    vuint32_t ACKIE:1;                 /* Acknowledge Error Interrupt Enable */
  } B;
} SIPI_CIR1_tag;

typedef union SIPI_CTOR1_union_tag {   /* SIPI Channel Timeout Register 1 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t TOR:8;                   /* Timeout Value for Transmitted Requests */
  } B;
} SIPI_CTOR1_tag;

typedef union SIPI_CCRC1_union_tag {   /* SIPI Channel CRC Register 1 */
  vuint32_t R;
  struct {
    vuint32_t CRCI:16;
    vuint32_t CRCT:16;
  } B;
} SIPI_CCRC1_tag;

typedef union SIPI_CAR1_union_tag {    /* SIPI Channel Address Register 1 */
  vuint32_t R;
  struct {
    vuint32_t CAR:32;
  } B;
} SIPI_CAR1_tag;

typedef union SIPI_CDR1_union_tag {    /* SIPI Channel Data Register 1 */
  vuint32_t R;
  struct {
    vuint32_t CDR:32;
  } B;
} SIPI_CDR1_tag;

typedef union SIPI_CCR2_union_tag {    /* SIPI Channel Control Register 2 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:15;            /* Reserved */
    vuint32_t TC:1;                    /* Send Trigger Command */
    vuint32_t _unused_16:8;            /* Reserved */
    vuint32_t WL:2;                    /* Word Length Transfer */
    vuint32_t CHEN:1;                  /* Channel Enable */
    vuint32_t ST:1;                    /* Streaming Transfer */
    vuint32_t IDT:1;                   /* ID Read Request Transfer */
    vuint32_t RRT:1;                   /* Read Request Transfer */
    vuint32_t WRT:1;                   /* Write Request Transfer */
    vuint32_t DEN:1;                   /* DMA Enable */
  } B;
} SIPI_CCR2_tag;

typedef union SIPI_CSR2_union_tag {    /* SIPI Channel Status Register 2 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t RAR:1;                   /* Read Answer Reception */
    vuint32_t TID:3;                   /* Transaction ID of Transmitted Frame */
    vuint32_t ACKR:1;                  /* Acknowledge Received */
    vuint32_t CB:1;                    /* Channel Busy */
    vuint32_t _unused_30:2;            /* Reserved */
  } B;
} SIPI_CSR2_tag;

typedef union SIPI_CIR2_union_tag {    /* SIPI Channel Interrupt Register 2 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:26;            /* Reserved */
    vuint32_t WAIE:1;                  /* Write Acknowledge Interrupt Enable */
    vuint32_t RAIE:1;                  /* Read Answer Interrupt Enable */
    vuint32_t TCIE:1;                  /* Trigger Command Interrupt Enable */
    vuint32_t TOIE:1;                  /* Timeout Error Interrupt Enabled */
    vuint32_t TIDIE:1;                 /* Transaction ID Error Interrupt Enable */
    vuint32_t ACKIE:1;                 /* Acknowledge Error Interrupt Enable */
  } B;
} SIPI_CIR2_tag;

typedef union SIPI_CTOR2_union_tag {   /* SIPI Channel Timeout Register 2 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t TOR:8;                   /* Timeout Value for Transmitted Requests */
  } B;
} SIPI_CTOR2_tag;

typedef union SIPI_CCRC2_union_tag {   /* SIPI Channel CRC Register 2 */
  vuint32_t R;
  struct {
    vuint32_t CRCI:16;
    vuint32_t CRCT:16;
  } B;
} SIPI_CCRC2_tag;

typedef union SIPI_CAR2_union_tag {    /* SIPI Channel Address Register 2 */
  vuint32_t R;
  struct {
    vuint32_t CAR:32;
  } B;
} SIPI_CAR2_tag;

typedef union SIPI_CDR2_union_tag {    /* SIPI Channel Data Register 2 */
  vuint32_t R;
  struct {
    vuint32_t CDR2:32;
  } B;
} SIPI_CDR2_tag;

typedef union SIPI_CCR3_union_tag {    /* SIPI Channel Control Register 3 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:15;            /* Reserved */
    vuint32_t TC:1;                    /* Send Trigger Command */
    vuint32_t _unused_16:8;            /* Reserved */
    vuint32_t WL:2;                    /* Word Length Transfer */
    vuint32_t CHEN:1;                  /* Channel Enable */
    vuint32_t ST:1;                    /* Streaming Transfer */
    vuint32_t IDT:1;                   /* ID Read Request Transfer */
    vuint32_t RRT:1;                   /* Read Request Transfer */
    vuint32_t WRT:1;                   /* Write Request Transfer */
    vuint32_t DEN:1;                   /* DMA Enable */
  } B;
} SIPI_CCR3_tag;

typedef union SIPI_CSR3_union_tag {    /* SIPI Channel Status Register 3 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t RAR:1;                   /* Read Answer Reception */
    vuint32_t TID:3;                   /* Transaction ID of Transmitted Frame */
    vuint32_t ACKR:1;                  /* Acknowledge Received */
    vuint32_t CB:1;                    /* Channel Busy */
    vuint32_t _unused_30:2;            /* Reserved */
  } B;
} SIPI_CSR3_tag;

typedef union SIPI_CIR3_union_tag {    /* SIPI Channel Interrupt Register 3 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:26;            /* Reserved */
    vuint32_t WAIE:1;                  /* Write Acknowledge Interrupt Enable */
    vuint32_t RAIE:1;                  /* Read Answer Interrupt Enable */
    vuint32_t TCIE:1;                  /* Trigger Command Interrupt Enable */
    vuint32_t TOIE:1;                  /* Timeout Error Interrupt Enabled */
    vuint32_t TIDIE:1;                 /* Transaction ID Error Interrupt Enable */
    vuint32_t ACKIE:1;                 /* Acknowledge Error Interrupt Enable */
  } B;
} SIPI_CIR3_tag;

typedef union SIPI_CTOR3_union_tag {   /* SIPI Channel Timeout Register 3 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t TOR:8;                   /* Timeout Value for Transmitted Requests */
  } B;
} SIPI_CTOR3_tag;

typedef union SIPI_CCRC3_union_tag {   /* SIPI Channel CRC Register 3 */
  vuint32_t R;
  struct {
    vuint32_t CRCI:16;
    vuint32_t CRCT:16;
  } B;
} SIPI_CCRC3_tag;

typedef union SIPI_CAR3_union_tag {    /* SIPI Channel Address Register 3 */
  vuint32_t R;
  struct {
    vuint32_t CAR:32;
  } B;
} SIPI_CAR3_tag;

typedef union SIPI_CDR3_union_tag {    /* SIPI Channel Data Register 3 */
  vuint32_t R;
  struct {
    vuint32_t CDR:32;
  } B;
} SIPI_CDR3_tag;

typedef union SIPI_MCR_union_tag {     /* SIPI Module Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t FRZ:1;                   /* Freeze Enable */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t HALT:1;                  /* Halt Mode Enable */
    vuint32_t _unused_3:2;             /* Reserved */
    vuint32_t PRSCLR:11;               /* Timeout Counter Prescaler */
    vuint32_t AID:2;                   /* Address Increment/Decrement */
    vuint32_t _unused_18:3;            /* Reserved */
    vuint32_t CRCIE:1;                 /* CRC Error Interrupt Enable */
    vuint32_t MCRIE:1;                 /* Max Count Reached Interrupt Enable */
    vuint32_t _unused_23:4;            /* Reserved */
    vuint32_t CHNSB:1;                 /* Channel Coding Select Bit */
    vuint32_t TEN:1;                   /* Target Enable */
    vuint32_t INIT:1;                  /* Initialization Mode */
    vuint32_t MOEN:1;                  /* Module Enable */
    vuint32_t SR:1;                    /* Soft Reset */
  } B;
} SIPI_MCR_tag;

typedef union SIPI_SR_union_tag {      /* SIPI Status Register */
  vuint32_t R;
  struct {
    vuint32_t FRZACK:1;                /* Freeze Mode Acknowledge */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t _unused_2:19;            /* Reserved */
    vuint32_t GCRCE:1;                 /* Global CRC Error Field */
    vuint32_t MCR:1;                   /* Maximum Count Reached */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t TE:4;                    /* Trigger Event on Respective Channels */
    vuint32_t STATE:4;
  } B;
} SIPI_SR_tag;

typedef union SIPI_MAXCR_union_tag {   /* SIPI Max Count Register */
  vuint32_t R;
  struct {
    vuint32_t MXCNT:30;
    vuint32_t _unused_30:2;            /* Reserved */
  } B;
} SIPI_MAXCR_tag;

typedef union SIPI_ARR_union_tag {     /* SIPI Address Reload Register */
  vuint32_t R;
  struct {
    vuint32_t ADRLD:30;
    vuint32_t _unused_30:2;            /* Reserved */
  } B;
} SIPI_ARR_tag;

typedef union SIPI_ACR_union_tag {     /* SIPI Address Count Register */
  vuint32_t R;
  struct {
    vuint32_t ADCNT:30;
    vuint32_t _unused_30:2;            /* Reserved */
  } B;
} SIPI_ACR_tag;

typedef union SIPI_ERR_union_tag {     /* SIPI Error Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:5;             /* Reserved */
    vuint32_t TOE3:1;                  /* Timeout Error for Channel 3 */
    vuint32_t TIDE3:1;                 /* Transaction ID Error for Channel 3 */
    vuint32_t ACKE3:1;                 /* Acknowledge Error for Channel 3 */
    vuint32_t _unused_8:5;             /* Reserved */
    vuint32_t TOE2:1;                  /* Timeout Error for Channel 2 */
    vuint32_t TIDE2:1;                 /* Transaction ID Error for Channel 2 */
    vuint32_t ACKE2:1;                 /* Acknowledge Error for Channel 2 */
    vuint32_t _unused_16:5;            /* Reserved */
    vuint32_t TOE1:1;                  /* Timeout Error for Channel 1 */
    vuint32_t TIDE1:1;                 /* Transaction ID Error for Channel 1 */
    vuint32_t ACKE1:1;                 /* Acknowledge Error for Channel 1 */
    vuint32_t _unused_24:5;            /* Reserved */
    vuint32_t TOE0:1;                  /* Timeout Error for Channel 0 */
    vuint32_t TIDE0:1;                 /* Transaction ID Error for Channel 0 */
    vuint32_t ACKE0:1;                 /* Acknowledge Error for Channel 0 */
  } B;
} SIPI_ERR_tag;

struct SIPI_tag {
  SIPI_CCR0_tag CCR0;                  /* SIPI Channel Control Register 0 */
  SIPI_CSR0_tag CSR0;                  /* SIPI Channel Status Register 0 */
  uint8_t SIPI_reserved0[4];
  SIPI_CIR0_tag CIR0;                  /* SIPI Channel Interrupt Register 0 */
  SIPI_CTOR0_tag CTOR0;                /* SIPI Channel Timeout Register 0 */
  SIPI_CCRC0_tag CCRC0;                /* SIPI Channel CRC Register 0 */
  SIPI_CAR0_tag CAR0;                  /* SIPI Channel Address Register 0 */
  SIPI_CDR0_tag CDR0;                  /* SIPI Channel Data Register 0 */
  SIPI_CCR1_tag CCR1;                  /* SIPI Channel Control Register 1 */
  SIPI_CSR1_tag CSR1;                  /* SIPI Channel Status Register 1 */
  uint8_t SIPI_reserved1[4];
  SIPI_CIR1_tag CIR1;                  /* SIPI Channel Interrupt Register 1 */
  SIPI_CTOR1_tag CTOR1;                /* SIPI Channel Timeout Register 1 */
  SIPI_CCRC1_tag CCRC1;                /* SIPI Channel CRC Register 1 */
  SIPI_CAR1_tag CAR1;                  /* SIPI Channel Address Register 1 */
  SIPI_CDR1_tag CDR1;                  /* SIPI Channel Data Register 1 */
  SIPI_CCR2_tag CCR2;                  /* SIPI Channel Control Register 2 */
  SIPI_CSR2_tag CSR2;                  /* SIPI Channel Status Register 2 */
  uint8_t SIPI_reserved2[4];
  SIPI_CIR2_tag CIR2;                  /* SIPI Channel Interrupt Register 2 */
  SIPI_CTOR2_tag CTOR2;                /* SIPI Channel Timeout Register 2 */
  SIPI_CCRC2_tag CCRC2;                /* SIPI Channel CRC Register 2 */
  SIPI_CAR2_tag CAR2;                  /* SIPI Channel Address Register 2 */
  SIPI_CDR2_tag CDR2[8];               /* SIPI Channel Data Register 2 */
  SIPI_CCR3_tag CCR3;                  /* SIPI Channel Control Register 3 */
  SIPI_CSR3_tag CSR3;                  /* SIPI Channel Status Register 3 */
  uint8_t SIPI_reserved3[4];
  SIPI_CIR3_tag CIR3;                  /* SIPI Channel Interrupt Register 3 */
  SIPI_CTOR3_tag CTOR3;                /* SIPI Channel Timeout Register 3 */
  SIPI_CCRC3_tag CCRC3;                /* SIPI Channel CRC Register 3 */
  SIPI_CAR3_tag CAR3;                  /* SIPI Channel Address Register 3 */
  SIPI_CDR3_tag CDR3;                  /* SIPI Channel Data Register 3 */
  SIPI_MCR_tag MCR;                    /* SIPI Module Configuration Register */
  SIPI_SR_tag SR;                      /* SIPI Status Register */
  SIPI_MAXCR_tag MAXCR;                /* SIPI Max Count Register */
  SIPI_ARR_tag ARR;                    /* SIPI Address Reload Register */
  SIPI_ACR_tag ACR;                    /* SIPI Address Count Register */
  SIPI_ERR_tag ERR;                    /* SIPI Error Register */
};


/* ============================================================================
   =============================== Module: SIUL2 ==============================
   ============================================================================ */

typedef union SIUL2_MIDR1_union_tag {  /* SIUL2 MCU ID Register #1 */
  vuint32_t R;
  struct {
    vuint32_t PART_FAMILY:12;          /* Part Family Number */
    vuint32_t _unused_14:6;            /* Reserved */
    vuint32_t PACKAGE:2;               /* Package */
    vuint32_t _unused_8:4;             /* Reserved */
    vuint32_t MAJOR_MASK:4;            /* Major Mask Revision */
    vuint32_t MINOR_MASK:4;            /* Minor Mask Revision */
  } B;
} SIUL2_MIDR1_tag;

typedef union SIUL2_MIDR2_union_tag {  /* SIUL2 MCU ID Register #2 */
  vuint32_t R;
  struct {
    vuint32_t _unused_25:7;            /* Reserved */
    vuint32_t CAN_FD:1;                /* CAN FD */
    vuint32_t PRODUCT_FAMILY:8;        /* Product Family Letter */
    vuint32_t PERFORMANCE:8;
    vuint32_t CONFIGURATION:8;
  } B;
} SIUL2_MIDR2_tag;

typedef union SIUL2_DISR0_union_tag {  /* SIUL2 DMA/Interrupt Status Flag Register0 */
  vuint32_t R;
  struct {
    vuint32_t EIF31:1;                 /* External Interrupt Status Flag 31 */
    vuint32_t EIF30:1;                 /* External Interrupt Status Flag 30 */
    vuint32_t EIF29:1;                 /* External Interrupt Status Flag 29 */
    vuint32_t EIF28:1;                 /* External Interrupt Status Flag 28 */
    vuint32_t EIF27:1;                 /* External Interrupt Status Flag 27 */
    vuint32_t EIF26:1;                 /* External Interrupt Status Flag 26 */
    vuint32_t EIF25:1;                 /* External Interrupt Status Flag 25 */
    vuint32_t EIF24:1;                 /* External Interrupt Status Flag 24 */
    vuint32_t EIF23:1;                 /* External Interrupt Status Flag 23 */
    vuint32_t EIF22:1;                 /* External Interrupt Status Flag 22 */
    vuint32_t EIF21:1;                 /* External Interrupt Status Flag 21 */
    vuint32_t EIF20:1;                 /* External Interrupt Status Flag 20 */
    vuint32_t EIF19:1;                 /* External Interrupt Status Flag 19 */
    vuint32_t EIF18:1;                 /* External Interrupt Status Flag 18 */
    vuint32_t EIF17:1;                 /* External Interrupt Status Flag 17 */
    vuint32_t EIF16:1;                 /* External Interrupt Status Flag 16 */
    vuint32_t EIF15:1;                 /* External Interrupt Status Flag 15 */
    vuint32_t EIF14:1;                 /* External Interrupt Status Flag 14 */
    vuint32_t EIF13:1;                 /* External Interrupt Status Flag 13 */
    vuint32_t EIF12:1;                 /* External Interrupt Status Flag 12 */
    vuint32_t EIF11:1;                 /* External Interrupt Status Flag 11 */
    vuint32_t EIF10:1;                 /* External Interrupt Status Flag 10 */
    vuint32_t EIF9:1;                  /* External Interrupt Status Flag 9 */
    vuint32_t EIF8:1;                  /* External Interrupt Status Flag 8 */
    vuint32_t EIF7:1;                  /* External Interrupt Status Flag 7 */
    vuint32_t EIF6:1;                  /* External Interrupt Status Flag 6 */
    vuint32_t EIF5:1;                  /* External Interrupt Status Flag 5 */
    vuint32_t EIF4:1;                  /* External Interrupt Status Flag 4 */
    vuint32_t EIF3:1;                  /* External Interrupt Status Flag 3 */
    vuint32_t EIF2:1;                  /* External Interrupt Status Flag 2 */
    vuint32_t EIF1:1;                  /* External Interrupt Status Flag 1 */
    vuint32_t EIF0:1;                  /* External Interrupt Status Flag 0 */
  } B;
} SIUL2_DISR0_tag;

typedef union SIUL2_DIRER0_union_tag { /* SIUL2 DMA/Interrupt Request Enable Register0 */
  vuint32_t R;
  struct {
    vuint32_t EIRE31:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE30:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE29:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE28:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE27:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE26:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE25:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE24:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE23:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE22:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE21:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE20:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE19:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE18:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE17:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE16:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE15:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE14:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE13:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE12:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE11:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE10:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE9:1;                 /* External Interrupt Request Enable */
    vuint32_t EIRE8:1;                 /* External Interrupt Request Enable */
    vuint32_t EIRE7:1;                 /* External Interrupt Request Enable */
    vuint32_t EIRE6:1;                 /* External Interrupt Request Enable */
    vuint32_t EIRE5:1;                 /* External Interrupt Request Enable */
    vuint32_t EIRE4:1;                 /* External Interrupt Request Enable */
    vuint32_t EIRE3:1;                 /* External Interrupt Request Enable */
    vuint32_t EIRE2:1;                 /* External Interrupt Request Enable */
    vuint32_t EIRE1:1;                 /* External Interrupt Request Enable */
    vuint32_t EIRE0:1;                 /* External Interrupt Request Enable */
  } B;
} SIUL2_DIRER0_tag;

typedef union SIUL2_DIRSR0_union_tag { /* SIUL2 DMA/Interrupt Request Select Register0 */
  vuint32_t R;
  struct {
    vuint32_t DIRSR31:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR30:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR29:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR28:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR27:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR26:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR25:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR24:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR23:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR22:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR21:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR20:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR19:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR18:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR17:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR16:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR15:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR14:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR13:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR12:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR11:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR10:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR9:1;                /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR8:1;                /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR7:1;                /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR6:1;                /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR5:1;                /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR4:1;                /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR3:1;                /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR2:1;                /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR1:1;                /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR0:1;                /* DMA/Interrupt Request Select Register */
  } B;
} SIUL2_DIRSR0_tag;

typedef union SIUL2_IREER0_union_tag { /* SIUL2 Interrupt Rising-Edge Event Enable Register 0 */
  vuint32_t R;
  struct {
    vuint32_t IREE31:1;                /* Enables rising-edge events to set DISR0[EIFR31]. */
    vuint32_t IREE30:1;                /* Enables rising-edge events to set DISR0[EIFR30]. */
    vuint32_t IREE29:1;                /* Enables rising-edge events to set DISR0[EIFR29]. */
    vuint32_t IREE28:1;                /* Enables rising-edge events to set DISR0[EIFR28]. */
    vuint32_t IREE27:1;                /* Enables rising-edge events to set DISR0[EIFR27]. */
    vuint32_t IREE26:1;                /* Enables rising-edge events to set DISR0[EIFR26]. */
    vuint32_t IREE25:1;                /* Enables rising-edge events to set DISR0[EIFR25]. */
    vuint32_t IREE24:1;                /* Enables rising-edge events to set DISR0[EIFR24]. */
    vuint32_t IREE23:1;                /* Enables rising-edge events to set DISR0[EIFR23]. */
    vuint32_t IREE22:1;                /* Enables rising-edge events to set DISR0[EIFR22]. */
    vuint32_t IREE21:1;                /* Enables rising-edge events to set DISR0[EIFR21]. */
    vuint32_t IREE20:1;                /* Enables rising-edge events to set DISR0[EIFR20]. */
    vuint32_t IREE19:1;                /* Enables rising-edge events to set DISR0[EIFR19]. */
    vuint32_t IREE18:1;                /* Enables rising-edge events to set DISR0[EIFR18]. */
    vuint32_t IREE17:1;                /* Enables rising-edge events to set DISR0[EIFR17]. */
    vuint32_t IREE16:1;                /* Enables rising-edge events to set DISR0[EIFR16]. */
    vuint32_t IREE15:1;                /* Enables rising-edge events to set DISR0[EIFR15]. */
    vuint32_t IREE14:1;                /* Enables rising-edge events to set DISR0[EIFR14]. */
    vuint32_t IREE13:1;                /* Enables rising-edge events to set DISR0[EIFR13]. */
    vuint32_t IREE12:1;                /* Enables rising-edge events to set DISR0[EIFR12]. */
    vuint32_t IREE11:1;                /* Enables rising-edge events to set DISR0[EIFR11]. */
    vuint32_t IREE10:1;                /* Enables rising-edge events to set DISR0[EIFR10]. */
    vuint32_t IREE9:1;                 /* Enables rising-edge events to set DISR0[EIFR9]. */
    vuint32_t IREE8:1;                 /* Enables rising-edge events to set DISR0[EIFR8]. */
    vuint32_t IREE7:1;                 /* Enables rising-edge events to set DISR0[EIFR7]. */
    vuint32_t IREE6:1;                 /* Enables rising-edge events to set DISR0[EIFR6]. */
    vuint32_t IREE5:1;                 /* Enables rising-edge events to set DISR0[EIFR5]. */
    vuint32_t IREE4:1;                 /* Enables rising-edge events to set DISR0[EIFR4]. */
    vuint32_t IREE3:1;                 /* Enables rising-edge events to set DISR0[EIFR3]. */
    vuint32_t IREE2:1;                 /* Enables rising-edge events to set DISR0[EIFR2]. */
    vuint32_t IREE1:1;                 /* Enables rising-edge events to set DISR0[EIFR1]. */
    vuint32_t IREE0:1;                 /* Enables rising-edge events to set DISR0[EIFR0]. */
  } B;
} SIUL2_IREER0_tag;

typedef union SIUL2_IFEER0_union_tag { /* SIUL2 Interrupt Falling-Edge Event Enable Register 0 */
  vuint32_t R;
  struct {
    vuint32_t IFEE31:1;                /* Enable falling-edge events to set DISR0[EIFR31]. */
    vuint32_t IFEE30:1;                /* Enable falling-edge events to set DISR0[EIFR30]. */
    vuint32_t IFEE29:1;                /* Enable falling-edge events to set DISR0[EIFR29]. */
    vuint32_t IFEE28:1;                /* Enable falling-edge events to set DISR0[EIFR28]. */
    vuint32_t IFEE27:1;                /* Enable falling-edge events to set DISR0[EIFR27]. */
    vuint32_t IFEE26:1;                /* Enable falling-edge events to set DISR0[EIFR26]. */
    vuint32_t IFEE25:1;                /* Enable falling-edge events to set DISR0[EIFR25]. */
    vuint32_t IFEE24:1;                /* Enable falling-edge events to set DISR0[EIFR24]. */
    vuint32_t IFEE23:1;                /* Enable falling-edge events to set DISR0[EIFR23]. */
    vuint32_t IFEE22:1;                /* Enable falling-edge events to set DISR0[EIFR22]. */
    vuint32_t IFEE21:1;                /* Enable falling-edge events to set DISR0[EIFR21]. */
    vuint32_t IFEE20:1;                /* Enable falling-edge events to set DISR0[EIFR20]. */
    vuint32_t IFEE19:1;                /* Enable falling-edge events to set DISR0[EIFR19]. */
    vuint32_t IFEE18:1;                /* Enable falling-edge events to set DISR0[EIFR18]. */
    vuint32_t IFEE17:1;                /* Enable falling-edge events to set DISR0[EIFR17]. */
    vuint32_t IFEE16:1;                /* Enable falling-edge events to set DISR0[EIFR16]. */
    vuint32_t IFEE15:1;                /* Enable falling-edge events to set DISR0[EIFR15]. */
    vuint32_t IFEE14:1;                /* Enable falling-edge events to set DISR0[EIFR14]. */
    vuint32_t IFEE13:1;                /* Enable falling-edge events to set DISR0[EIFR13]. */
    vuint32_t IFEE12:1;                /* Enable falling-edge events to set DISR0[EIFR12]. */
    vuint32_t IFEE11:1;                /* Enable falling-edge events to set DISR0[EIFR11]. */
    vuint32_t IFEE10:1;                /* Enable falling-edge events to set DISR0[EIFR10]. */
    vuint32_t IFEE9:1;                 /* Enable falling-edge events to set DISR0[EIFR9]. */
    vuint32_t IFEE8:1;                 /* Enable falling-edge events to set DISR0[EIFR8]. */
    vuint32_t IFEE7:1;                 /* Enable falling-edge events to set DISR0[EIFR7]. */
    vuint32_t IFEE6:1;                 /* Enable falling-edge events to set DISR0[EIFR6]. */
    vuint32_t IFEE5:1;                 /* Enable falling-edge events to set DISR0[EIFR5]. */
    vuint32_t IFEE4:1;                 /* Enable falling-edge events to set DISR0[EIFR4]. */
    vuint32_t IFEE3:1;                 /* Enable falling-edge events to set DISR0[EIFR3]. */
    vuint32_t IFEE2:1;                 /* Enable falling-edge events to set DISR0[EIFR2]. */
    vuint32_t IFEE1:1;                 /* Enable falling-edge events to set DISR0[EIFR1]. */
    vuint32_t IFEE0:1;                 /* Enable falling-edge events to set DISR0[EIFR0]. */
  } B;
} SIUL2_IFEER0_tag;

typedef union SIUL2_IFER0_union_tag {  /* SIUL2 Interrupt Filter Enable Register 0 */
  vuint32_t R;
  struct {
    vuint32_t IFE31:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE30:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE29:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE28:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE27:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE26:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE25:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE24:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE23:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE22:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE21:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE20:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE19:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE18:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE17:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE16:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE15:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE14:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE13:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE12:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE11:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE10:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE9:1;                  /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE8:1;                  /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE7:1;                  /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE6:1;                  /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE5:1;                  /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE4:1;                  /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE3:1;                  /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE2:1;                  /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE1:1;                  /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE0:1;                  /* Enables digital glitch filter on the interrupt pad input. */
  } B;
} SIUL2_IFER0_tag;

typedef union SIUL2_IFMCR_union_tag {  /* SIUL2 Interrupt Filter Maximum Counter Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_4:28;            /* Reserved */
    vuint32_t MAXCNT:4;                /* Maximum Interrupt Filter Counter setting */
  } B;
} SIUL2_IFMCR_tag;

typedef union SIUL2_IFCPR_union_tag {  /* SIUL2 Interrupt Filter Clock Prescaler Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_4:28;            /* Reserved */
    vuint32_t IFCP:4;                  /* Interrupt Filter Clock Prescaler setting */
  } B;
} SIUL2_IFCPR_tag;

typedef union SIUL2_MSCR_union_tag {   /* SIUL2 Multiplexed Signal Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_22:10;           /* Reserved */
    vuint32_t OBE:1;                   /* GPIO Output Buffer Enable */
    vuint32_t ODE:1;                   /* Open Drain Enable */
    vuint32_t IBE:1;                   /* Input Buffer Enable */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t INV:1;                   /* Invert */
    vuint32_t SRE:3;                   /* Slew Rate Control */
    vuint32_t PUE:1;                   /* Pull Enable */
    vuint32_t PUS:1;                   /* Pull Select */
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t RCVR:1;                  /* Receiver Select */
    vuint32_t _unused_6:4;             /* Reserved */
    vuint32_t SMC:1;                   /* Safe Mode Control */
    vuint32_t _unused_3:2;             /* Reserved */
    vuint32_t SSS:3;                   /* Source Signal Select */
  } B;
} SIUL2_MSCR_tag;

typedef union SIUL2_IMCR_union_tag {   /* SIUL2 Input Multiplexed Signal Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_3:29;            /* Reserved */
    vuint32_t SSS:3;                   /* Source Signal Select */
  } B;
} SIUL2_IMCR_tag;

typedef union SIUL2_GPDO_union_tag {   /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t _unused_1:7;              /* Reserved */
    vuint8_t PDO_N:1;                  /* Pad Data Out */
  } B;
} SIUL2_GPDO_tag;

typedef union SIUL2_GPDI_union_tag {   /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t _unused_1:7;              /* Reserved */
    vuint8_t PDI_N:1;                  /* Pad Data In */
  } B;
} SIUL2_GPDI_tag;

typedef union SIUL2_PGPDO_union_tag {  /* SIUL2 Parallel GPIO Pad Data Out Register */
  vuint16_t R;
  struct {
    vuint16_t PPDO0:1;                 /* Parallel Pad Data Out 0 */
    vuint16_t PPDO1:1;                 /* Parallel Pad Data Out 1 */
    vuint16_t PPDO2:1;                 /* Parallel Pad Data Out 2 */
    vuint16_t PPDO3:1;                 /* Parallel Pad Data Out 3 */
    vuint16_t PPDO4:1;                 /* Parallel Pad Data Out 4 */
    vuint16_t PPDO5:1;                 /* Parallel Pad Data Out 5 */
    vuint16_t PPDO6:1;                 /* Parallel Pad Data Out 6 */
    vuint16_t PPDO7:1;                 /* Parallel Pad Data Out 7 */
    vuint16_t PPDO8:1;                 /* Parallel Pad Data Out 8 */
    vuint16_t PPDO9:1;                 /* Parallel Pad Data Out 9 */
    vuint16_t PPDO10:1;                /* Parallel Pad Data Out 10 */
    vuint16_t PPDO11:1;                /* Parallel Pad Data Out 11 */
    vuint16_t PPDO12:1;                /* Parallel Pad Data Out 12 */
    vuint16_t PPDO13:1;                /* Parallel Pad Data Out 13 */
    vuint16_t PPDO14:1;                /* Parallel Pad Data Out 14 */
    vuint16_t PPDO15:1;                /* Parallel Pad Data Out 15 */
  } B;
} SIUL2_PGPDO_tag;

typedef union SIUL2_PGPDI_union_tag {  /* SIUL2 Parallel GPIO Pad Data In Register */
  vuint16_t R;
  struct {
    vuint16_t PPDI0:1;                 /* Parallel Pad Data In 0 */
    vuint16_t PPDI1:1;                 /* Parallel Pad Data In 1 */
    vuint16_t PPDI2:1;                 /* Parallel Pad Data In 2 */
    vuint16_t PPDI3:1;                 /* Parallel Pad Data In 3 */
    vuint16_t PPDI4:1;                 /* Parallel Pad Data In 4 */
    vuint16_t PPDI5:1;                 /* Parallel Pad Data In 5 */
    vuint16_t PPDI6:1;                 /* Parallel Pad Data In 6 */
    vuint16_t PPDI7:1;                 /* Parallel Pad Data In 7 */
    vuint16_t PPDI8:1;                 /* Parallel Pad Data In 8 */
    vuint16_t PPDI9:1;                 /* Parallel Pad Data In 9 */
    vuint16_t PPDI10:1;                /* Parallel Pad Data In 10 */
    vuint16_t PPDI11:1;                /* Parallel Pad Data In 11 */
    vuint16_t PPDI12:1;                /* Parallel Pad Data In 12 */
    vuint16_t PPDI13:1;                /* Parallel Pad Data In 13 */
    vuint16_t PPDI14:1;                /* Parallel Pad Data In 14 */
    vuint16_t PPDI15:1;                /* Parallel Pad Data In 15 */
  } B;
} SIUL2_PGPDI_tag;

typedef union SIUL2_MPGPDO_union_tag { /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
  vuint32_t R;
  struct {
    vuint32_t MASK0:1;                 /* Mask Field 0 */
    vuint32_t MASK1:1;                 /* Mask Field 1 */
    vuint32_t MASK2:1;                 /* Mask Field 2 */
    vuint32_t MASK3:1;                 /* Mask Field 3 */
    vuint32_t MASK4:1;                 /* Mask Field 4 */
    vuint32_t MASK5:1;                 /* Mask Field 5 */
    vuint32_t MASK6:1;                 /* Mask Field 6 */
    vuint32_t MASK7:1;                 /* Mask Field 7 */
    vuint32_t MASK8:1;                 /* Mask Field 8 */
    vuint32_t MASK9:1;                 /* Mask Field 9 */
    vuint32_t MASK10:1;                /* Mask Field 10 */
    vuint32_t MASK11:1;                /* Mask Field 11 */
    vuint32_t MASK12:1;                /* Mask Field 12 */
    vuint32_t MASK13:1;                /* Mask Field 13 */
    vuint32_t MASK14:1;                /* Mask Field 14 */
    vuint32_t MASK15:1;                /* Mask Field 15 */
    vuint32_t MPPDO0:1;                /* Masked Parallel Pad Data Out 0 */
    vuint32_t MPPDO1:1;                /* Masked Parallel Pad Data Out 1 */
    vuint32_t MPPDO2:1;                /* Masked Parallel Pad Data Out 2 */
    vuint32_t MPPDO3:1;                /* Masked Parallel Pad Data Out 3 */
    vuint32_t MPPDO4:1;                /* Masked Parallel Pad Data Out 4 */
    vuint32_t MPPDO5:1;                /* Masked Parallel Pad Data Out 5 */
    vuint32_t MPPDO6:1;                /* Masked Parallel Pad Data Out 6 */
    vuint32_t MPPDO7:1;                /* Masked Parallel Pad Data Out 7 */
    vuint32_t MPPDO8:1;                /* Masked Parallel Pad Data Out 8 */
    vuint32_t MPPDO9:1;                /* Masked Parallel Pad Data Out 9 */
    vuint32_t MPPDO10:1;               /* Masked Parallel Pad Data Out 10 */
    vuint32_t MPPDO11:1;               /* Masked Parallel Pad Data Out 11 */
    vuint32_t MPPDO12:1;               /* Masked Parallel Pad Data Out 12 */
    vuint32_t MPPDO13:1;               /* Masked Parallel Pad Data Out 13 */
    vuint32_t MPPDO14:1;               /* Masked Parallel Pad Data Out 14 */
    vuint32_t MPPDO15:1;               /* Masked Parallel Pad Data Out 15 */
  } B;
} SIUL2_MPGPDO_tag;

struct SIUL2_tag {
  uint8_t SIUL2_reserved0[4];
  SIUL2_MIDR1_tag MIDR1;               /* SIUL2 MCU ID Register #1 */
  SIUL2_MIDR2_tag MIDR2;               /* SIUL2 MCU ID Register #2 */
  uint8_t SIUL2_reserved1[4];
  SIUL2_DISR0_tag DISR0;               /* SIUL2 DMA/Interrupt Status Flag Register0 */
  uint8_t SIUL2_reserved2[4];
  SIUL2_DIRER0_tag DIRER0;             /* SIUL2 DMA/Interrupt Request Enable Register0 */
  uint8_t SIUL2_reserved3[4];
  SIUL2_DIRSR0_tag DIRSR0;             /* SIUL2 DMA/Interrupt Request Select Register0 */
  uint8_t SIUL2_reserved4[4];
  SIUL2_IREER0_tag IREER0;             /* SIUL2 Interrupt Rising-Edge Event Enable Register 0 */
  uint8_t SIUL2_reserved5[4];
  SIUL2_IFEER0_tag IFEER0;             /* SIUL2 Interrupt Falling-Edge Event Enable Register 0 */
  uint8_t SIUL2_reserved6[4];
  SIUL2_IFER0_tag IFER0;               /* SIUL2 Interrupt Filter Enable Register 0 */
  uint8_t SIUL2_reserved7[4];
  SIUL2_IFMCR_tag IFMCR[32];           /* SIUL2 Interrupt Filter Maximum Counter Register */
  SIUL2_IFCPR_tag IFCPR;               /* SIUL2 Interrupt Filter Clock Prescaler Register */
  uint8_t SIUL2_reserved8[380];
  SIUL2_MSCR_tag MSCR[218];            /* SIUL2 Multiplexed Signal Configuration Register; Valid array indices: 0-22, 42-44, 47-54, 56, 59, 62, 77, 79-80, 94-95, 101, 104-107, 116-121, 123-125, 128-130, 132-137, 200-207, 210-217 */
  uint8_t SIUL2_reserved9[1176];
  SIUL2_IMCR_tag IMCR[154];            /* SIUL2 Input Multiplexed Signal Configuration Register; Valid array indices: 0-2, 4-10, 20, 27-43, 52-54, 60-61, 63, 88-91, 93, 100-110, 137-153 */
  uint8_t SIUL2_reserved10[1624];
  SIUL2_GPDO_tag GPDO[218];            /* SIUL2 GPIO Pad Data Output Register */
  uint8_t SIUL2_reserved11[294];
  SIUL2_GPDI_tag GPDI[218];            /* SIUL2 GPIO Pad Data Input Register */
  uint8_t SIUL2_reserved12[294];
  SIUL2_PGPDO_tag PGPDO[14];           /* SIUL2 Parallel GPIO Pad Data Out Register */
  uint8_t SIUL2_reserved13[36];
  SIUL2_PGPDI_tag PGPDI[14];           /* SIUL2 Parallel GPIO Pad Data In Register */
  uint8_t SIUL2_reserved14[36];
  SIUL2_MPGPDO_tag MPGPDO[14];         /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
};


/* ============================================================================
   =============================== Module: SMPU_0 =============================
   ============================================================================ */

typedef union SMPU_0_CESR0_union_tag { /* Control/Error Status Register 0 */
  vuint32_t R;
  struct {
    vuint32_t MERR:16;                 /* Master n error, where the bus master number matches the bit number */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t _unused_17:11;           /* Reserved */
    vuint32_t HRL:3;                   /* Hardware Revision Level */
    vuint32_t GVLD:1;                  /* Global Valid */
  } B;
} SMPU_0_CESR0_tag;

typedef union SMPU_0_CESR1_union_tag { /* Control/Error Status Register 1 */
  vuint32_t R;
  struct {
    vuint32_t MEOVR:16;                /* Master n error overrun, where the bus master number matches the bit number */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t _unused_17:11;           /* Reserved */
    vuint32_t NRGD:4;                  /* Number of Region Descriptors */
  } B;
} SMPU_0_CESR1_tag;

typedef union SMPU_0_ERROR_EAR_union_tag { /* Error Address Register, Bus Master n */
  vuint32_t R;
  struct {
    vuint32_t EADDR:32;                /* Error address */
  } B;
} SMPU_0_ERROR_EAR_tag;

typedef union SMPU_0_ERROR_EDR_union_tag { /* Error Detail Register, Bus Master n */
  vuint32_t R;
  struct {
    vuint32_t EACD:24;                 /* Error access control detail */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t EATTR:2;                 /* Error attributes */
    vuint32_t ERW:1;                   /* Error read/write */
    vuint32_t EMN:4;                   /* Error master number */
  } B;
} SMPU_0_ERROR_EDR_tag;

typedef struct SMPU_0_ERROR_struct_tag {
  SMPU_0_ERROR_EAR_tag EAR;            /* Error Address Register, Bus Master n */
  SMPU_0_ERROR_EDR_tag EDR;            /* Error Detail Register, Bus Master n */
} SMPU_0_ERROR_tag;

typedef union SMPU_0_RGD_WORD0_union_tag { /* Region Descriptor n, Word 0 */
  vuint32_t R;
  struct {
    vuint32_t SRTADDR:32;              /* Start address */
  } B;
} SMPU_0_RGD_WORD0_tag;

typedef union SMPU_0_RGD_WORD1_union_tag { /* Region Descriptor n, Word 1 */
  vuint32_t R;
  struct {
    vuint32_t ENDADDR:32;              /* End address */
  } B;
} SMPU_0_RGD_WORD1_tag;

typedef union SMPU_0_RGD_WORD2_union_tag { /* Region Descriptor n, Word 2 */
  vuint32_t R;
  struct {
    vuint32_t M0P:2;                   /* Bus master 0 permissions */
    vuint32_t M1P:2;                   /* Bus master 1 permissions */
    vuint32_t M2P:2;                   /* Bus master 2 permissions */
    vuint32_t M3P:2;                   /* Bus master 3 permissions */
    vuint32_t M4P:2;                   /* Bus master 4 permissions */
    vuint32_t M5P:2;                   /* Bus master 5 permissions */
    vuint32_t M6P:2;                   /* Bus master 6 permissions */
    vuint32_t M7P:2;                   /* Bus master 7 permissions */
    vuint32_t M8P:2;                   /* Bus master 8 permissions */
    vuint32_t M9P:2;                   /* Bus master 9 permissions */
    vuint32_t M10P:2;                  /* Bus master 10 permissions */
    vuint32_t M11P:2;                  /* Bus master 11 permissions */
    vuint32_t M12P:2;                  /* Bus master 12 permissions */
    vuint32_t M13P:2;                  /* Bus master 13 permissions */
    vuint32_t M14P:2;                  /* Bus master 14 permissions */
    vuint32_t M15P:2;                  /* Bus master 15 permissions */
  } B;
} SMPU_0_RGD_WORD2_tag;

typedef union SMPU_0_RGD_WORD3_union_tag { /* Region Descriptor n, Word 3 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:28;            /* Reserved */
    vuint32_t RO:1;                    /* Read only */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t CI:1;                    /* Cache inhibit */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} SMPU_0_RGD_WORD3_tag;

typedef struct SMPU_0_RGD_struct_tag {
  SMPU_0_RGD_WORD0_tag WORD0;          /* Region Descriptor n, Word 0 */
  SMPU_0_RGD_WORD1_tag WORD1;          /* Region Descriptor n, Word 1 */
  SMPU_0_RGD_WORD2_tag WORD2;          /* Region Descriptor n, Word 2 */
  SMPU_0_RGD_WORD3_tag WORD3;          /* Region Descriptor n, Word 3 */
} SMPU_0_RGD_tag;

struct SMPU_0_tag {
  SMPU_0_CESR0_tag CESR0;              /* Control/Error Status Register 0 */
  SMPU_0_CESR1_tag CESR1;              /* Control/Error Status Register 1 */
  uint8_t SMPU_0_reserved0[248];
  SMPU_0_ERROR_tag ERROR[16];
  uint8_t SMPU_0_reserved1[640];
  SMPU_0_RGD_tag RGD[16];
};


/* ============================================================================
   =============================== Module: SMPU_1 =============================
   ============================================================================ */

typedef union SMPU_1_CESR0_union_tag { /* Control/Error Status Register 0 */
  vuint32_t R;
  struct {
    vuint32_t MERR:16;                 /* Master n error, where the bus master number matches the bit number */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t _unused_17:11;           /* Reserved */
    vuint32_t HRL:3;                   /* Hardware Revision Level */
    vuint32_t GVLD:1;                  /* Global Valid */
  } B;
} SMPU_1_CESR0_tag;

typedef union SMPU_1_CESR1_union_tag { /* Control/Error Status Register 1 */
  vuint32_t R;
  struct {
    vuint32_t MEOVR:16;                /* Master n error overrun, where the bus master number matches the bit number */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t _unused_17:11;           /* Reserved */
    vuint32_t NRGD:4;                  /* Number of Region Descriptors */
  } B;
} SMPU_1_CESR1_tag;

typedef union SMPU_1_ERROR_EAR_union_tag { /* Error Address Register, Bus Master n */
  vuint32_t R;
  struct {
    vuint32_t EADDR:32;                /* Error address */
  } B;
} SMPU_1_ERROR_EAR_tag;

typedef union SMPU_1_ERROR_EDR_union_tag { /* Error Detail Register, Bus Master n */
  vuint32_t R;
  struct {
    vuint32_t EACD:24;                 /* Error access control detail */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t EATTR:2;                 /* Error attributes */
    vuint32_t ERW:1;                   /* Error read/write */
    vuint32_t EMN:4;                   /* Error master number */
  } B;
} SMPU_1_ERROR_EDR_tag;

typedef struct SMPU_1_ERROR_struct_tag {
  SMPU_1_ERROR_EAR_tag EAR;            /* Error Address Register, Bus Master n */
  SMPU_1_ERROR_EDR_tag EDR;            /* Error Detail Register, Bus Master n */
} SMPU_1_ERROR_tag;

typedef union SMPU_1_RGD_WORD0_union_tag { /* Region Descriptor n, Word 0 */
  vuint32_t R;
  struct {
    vuint32_t SRTADDR:32;              /* Start address */
  } B;
} SMPU_1_RGD_WORD0_tag;

typedef union SMPU_1_RGD_WORD1_union_tag { /* Region Descriptor n, Word 1 */
  vuint32_t R;
  struct {
    vuint32_t ENDADDR:32;              /* End address */
  } B;
} SMPU_1_RGD_WORD1_tag;

typedef union SMPU_1_RGD_WORD2_union_tag { /* Region Descriptor n, Word 2 */
  vuint32_t R;
  struct {
    vuint32_t M0P:2;                   /* Bus master 0 permissions */
    vuint32_t M1P:2;                   /* Bus master 1 permissions */
    vuint32_t M2P:2;                   /* Bus master 2 permissions */
    vuint32_t M3P:2;                   /* Bus master 3 permissions */
    vuint32_t M4P:2;                   /* Bus master 4 permissions */
    vuint32_t M5P:2;                   /* Bus master 5 permissions */
    vuint32_t M6P:2;                   /* Bus master 6 permissions */
    vuint32_t M7P:2;                   /* Bus master 7 permissions */
    vuint32_t M8P:2;                   /* Bus master 8 permissions */
    vuint32_t M9P:2;                   /* Bus master 9 permissions */
    vuint32_t M10P:2;                  /* Bus master 10 permissions */
    vuint32_t M11P:2;                  /* Bus master 11 permissions */
    vuint32_t M12P:2;                  /* Bus master 12 permissions */
    vuint32_t M13P:2;                  /* Bus master 13 permissions */
    vuint32_t M14P:2;                  /* Bus master 14 permissions */
    vuint32_t M15P:2;                  /* Bus master 15 permissions */
  } B;
} SMPU_1_RGD_WORD2_tag;

typedef union SMPU_1_RGD_WORD3_union_tag { /* Region Descriptor n, Word 3 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:28;            /* Reserved */
    vuint32_t RO:1;                    /* Read only */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t CI:1;                    /* Cache inhibit */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} SMPU_1_RGD_WORD3_tag;

typedef struct SMPU_1_RGD_struct_tag {
  SMPU_1_RGD_WORD0_tag WORD0;          /* Region Descriptor n, Word 0 */
  SMPU_1_RGD_WORD1_tag WORD1;          /* Region Descriptor n, Word 1 */
  SMPU_1_RGD_WORD2_tag WORD2;          /* Region Descriptor n, Word 2 */
  SMPU_1_RGD_WORD3_tag WORD3;          /* Region Descriptor n, Word 3 */
} SMPU_1_RGD_tag;

struct SMPU_1_tag {
  SMPU_1_CESR0_tag CESR0;              /* Control/Error Status Register 0 */
  SMPU_1_CESR1_tag CESR1;              /* Control/Error Status Register 1 */
  uint8_t SMPU_1_reserved0[248];
  SMPU_1_ERROR_tag ERROR[16];
  uint8_t SMPU_1_reserved1[640];
  SMPU_1_RGD_tag RGD[16];
};


/* ============================================================================
   =============================== Module: SPI_1 ==============================
   ============================================================================ */

typedef union SPI_1_MCR_union_tag {    /* Module Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t MSTR:1;                  /* Master/Slave Mode Select */
    vuint32_t CONT_SCKE:1;             /* Continuous SCK Enable */
    vuint32_t DCONF:2;                 /* SPI Configuration */
    vuint32_t FRZ:1;                   /* Freeze */
    vuint32_t MTFE:1;                  /* Modified Transfer Format Enable */
    vuint32_t PCSSE:1;                 /* Peripheral Chip Select Strobe Enable */
    vuint32_t ROOE:1;                  /* Receive FIFO Overflow Overwrite Enable */
    vuint32_t PCSIS:8;                 /* Peripheral Chip Select x Inactive State */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t MDIS:1;                  /* Module Disable */
    vuint32_t DIS_TXF:1;               /* Disable Transmit FIFO */
    vuint32_t DIS_RXF:1;               /* Disable Receive FIFO */
    vuint32_t CLR_TXF:1;               /* Clear TX FIFO */
    vuint32_t CLR_RXF:1;               /* Clear RX FIFO */
    vuint32_t SMPL_PT:2;               /* Sample Point */
    vuint32_t _unused_24:5;            /* Reserved */
    vuint32_t FCPCS:1;                 /* Fast Continuous PCS Mode */
    vuint32_t PES:1;                   /* Parity Error Stop */
    vuint32_t HALT:1;                  /* Halt */
  } B;
} SPI_1_MCR_tag;

typedef union SPI_1_TCR_union_tag {    /* Transfer Count Register */
  vuint32_t R;
  struct {
    vuint32_t SPI_TCNT:16;             /* SPI Transfer Counter */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} SPI_1_TCR_tag;

typedef union SPI_1_MODE_CTAR_union_tag { /* Clock and Transfer Attributes Register (in Master mode) */
  vuint32_t R;
  struct {
    vuint32_t DBR:1;                   /* Double Baud Rate */
    vuint32_t FMSZ:4;                  /* Frame Size */
    vuint32_t CPOL:1;                  /* Clock Polarity */
    vuint32_t CPHA:1;                  /* Clock Phase */
    vuint32_t LSBFE:1;                 /* LSB First */
    vuint32_t PCSSCK:2;                /* PCS to SCK Delay Prescaler */
    vuint32_t PASC:2;                  /* After SCK Delay Prescaler */
    vuint32_t PDT:2;                   /* Delay after Transfer Prescaler */
    vuint32_t PBR:2;                   /* Baud Rate Prescaler */
    vuint32_t CSSCK:4;                 /* PCS to SCK Delay Scaler */
    vuint32_t ASC:4;                   /* After SCK Delay Scaler */
    vuint32_t DT:4;                    /* Delay After Transfer Scaler */
    vuint32_t BR:4;                    /* Baud Rate Scaler */
  } B;
} SPI_1_MODE_CTAR_tag;

typedef union SPI_1_MODE_CTAR_SLAVE_union_tag { /* Clock and Transfer Attributes Register (in Slave mode) */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Always write the reset value to this field. */
    vuint32_t FMSZ:4;                  /* Frame Size */
    vuint32_t CPOL:1;                  /* Clock Polarity */
    vuint32_t CPHA:1;                  /* Clock Phase */
    vuint32_t PE:1;                    /* Parity Enable */
    vuint32_t PP:1;                    /* Parity Polarity */
    vuint32_t _unused_9:1;             /* Reserved */
    vuint32_t _unused_10:22;           /* Reserved */
  } B;
} SPI_1_MODE_CTAR_SLAVE_tag;

typedef union SPI_1_MODE_union_tag {
  SPI_1_MODE_CTAR_tag CTAR[8];         /* Clock and Transfer Attributes Register (in Master mode) */
  SPI_1_MODE_CTAR_SLAVE_tag CTAR_SLAVE[1]; /* Clock and Transfer Attributes Register (in Slave mode) */
} SPI_1_MODE_tag;

typedef union SPI_1_SR_union_tag {     /* Status Register */
  vuint32_t R;
  struct {
    vuint32_t TCF:1;                   /* Transfer Complete Flag */
    vuint32_t TXRXS:1;                 /* TX and RX Status */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t EOQF:1;                  /* End of Queue Flag */
    vuint32_t TFUF:1;                  /* Transmit FIFO Underflow Flag */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t TFFF:1;                  /* Transmit FIFO Fill Flag */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t _unused_9:1;             /* Reserved */
    vuint32_t SPEF:1;                  /* SPI Parity Error Flag */
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t RFOF:1;                  /* Receive FIFO Overflow Flag */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t RFDF:1;                  /* Receive FIFO Drain Flag */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t TXCTR:4;                 /* TX FIFO Counter */
    vuint32_t TXNXTPTR:4;              /* Transmit Next Pointer */
    vuint32_t RXCTR:4;                 /* RX FIFO Counter */
    vuint32_t POPNXTPTR:4;             /* Pop Next Pointer */
  } B;
} SPI_1_SR_tag;

typedef union SPI_1_RSER_union_tag {   /* DMA/Interrupt Request Select and Enable Register */
  vuint32_t R;
  struct {
    vuint32_t TCF_RE:1;                /* Transmission Complete Request Enable */
    vuint32_t _unused_1:1;             /* Always write the reset value to this field. */
    vuint32_t _unused_2:1;             /* Always write the reset value to this field. */
    vuint32_t EOQF_RE:1;               /* Finished Request Enable */
    vuint32_t TFUF_RE:1;               /* Transmit FIFO Underflow Request Enable */
    vuint32_t _unused_5:1;             /* Always write the reset value to this field. */
    vuint32_t TFFF_RE:1;               /* Transmit FIFO Fill Request Enable */
    vuint32_t TFFF_DIRS:1;             /* Transmit FIFO Fill DMA or Interrupt Request Select */
    vuint32_t _unused_8:1;             /* Always write the reset value to this field. */
    vuint32_t _unused_9:1;             /* Always write the reset value to this field. */
    vuint32_t SPEF_RE:1;               /* SPI Parity Error Request Enable */
    vuint32_t _unused_11:1;            /* Always write the reset value to this field. */
    vuint32_t RFOF_RE:1;               /* Receive FIFO Overflow Request Enable */
    vuint32_t _unused_13:1;            /* Always write the reset value to this field. */
    vuint32_t RFDF_RE:1;               /* Receive FIFO Drain Request Enable */
    vuint32_t RFDF_DIRS:1;             /* Receive FIFO Drain DMA or Interrupt Request Select */
    vuint32_t _unused_16:1;            /* Always write the reset value to this field. */
    vuint32_t _unused_17:1;            /* Always write the reset value to this field. */
    vuint32_t _unused_18:14;           /* Reserved */
  } B;
} SPI_1_RSER_tag;

typedef union SPI_1_PUSHR_PUSHR_union_tag { /* PUSH TX FIFO Register In Master Mode */
  vuint32_t R;
  struct {
    vuint32_t CONT:1;                  /* Continuous Peripheral Chip Select Enable */
    vuint32_t CTAS:3;                  /* Clock and Transfer Attributes Select */
    vuint32_t EOQ:1;                   /* End of Queue */
    vuint32_t CTCNT:1;                 /* Clear Transfer Counter */
    vuint32_t PE_MASC:1;               /* Parity Enable or Mask TASC Delay in Current Frame */
    vuint32_t PP_MCSC:1;               /* Parity Polarity or Mask TCSC Delay in Next Frame */
    vuint32_t PCS:8;                   /* PCS */
    vuint32_t TXDATA:16;               /* Transmit Data */
  } B;
} SPI_1_PUSHR_PUSHR_tag;

typedef union SPI_1_PUSHR_PUSHR_SLAVE_union_tag { /* PUSH TX FIFO Register In Slave Mode */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t TXDATA:16;               /* Transmit Data */
  } B;
} SPI_1_PUSHR_PUSHR_SLAVE_tag;

typedef union SPI_1_PUSHR_union_tag {
  SPI_1_PUSHR_PUSHR_tag PUSHR;         /* PUSH TX FIFO Register In Master Mode */
  SPI_1_PUSHR_PUSHR_SLAVE_tag PUSHR_SLAVE; /* PUSH TX FIFO Register In Slave Mode */
} SPI_1_PUSHR_tag;

typedef union SPI_1_POPR_union_tag {   /* POP RX FIFO Register */
  vuint32_t R;
  struct {
    vuint32_t RXDATA:32;               /* Received Data */
  } B;
} SPI_1_POPR_tag;

typedef union SPI_1_TXFR_union_tag {   /* Transmit FIFO Registers */
  vuint32_t R;
  struct {
    vuint32_t TXCMD_TXDATA:16;         /* Transmit Command or Transmit Data */
    vuint32_t TXDATA:16;               /* Transmit Data */
  } B;
} SPI_1_TXFR_tag;

typedef union SPI_1_RXFR_union_tag {   /* Receive FIFO Registers */
  vuint32_t R;
  struct {
    vuint32_t RXDATA:32;               /* Receive Data */
  } B;
} SPI_1_RXFR_tag;

struct SPI_1_tag {
  SPI_1_MCR_tag MCR;                   /* Module Configuration Register */
  uint8_t SPI_1_reserved0[4];
  SPI_1_TCR_tag TCR;                   /* Transfer Count Register */
  SPI_1_MODE_tag MODE;
  SPI_1_SR_tag SR;                     /* Status Register */
  SPI_1_RSER_tag RSER;                 /* DMA/Interrupt Request Select and Enable Register */
  SPI_1_PUSHR_tag PUSHR;
  SPI_1_POPR_tag POPR;                 /* POP RX FIFO Register */
  SPI_1_TXFR_tag TXFR[5];              /* Transmit FIFO Registers */
  uint8_t SPI_1_reserved1[44];
  SPI_1_RXFR_tag RXFR[5];              /* Receive FIFO Registers */
};


/* ============================================================================
   =============================== Module: SPI_2 ==============================
   ============================================================================ */

typedef union SPI_2_MCR_union_tag {    /* Module Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t MSTR:1;                  /* Master/Slave Mode Select */
    vuint32_t CONT_SCKE:1;             /* Continuous SCK Enable */
    vuint32_t DCONF:2;                 /* SPI Configuration */
    vuint32_t FRZ:1;                   /* Freeze */
    vuint32_t MTFE:1;                  /* Modified Transfer Format Enable */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t ROOE:1;                  /* Receive FIFO Overflow Overwrite Enable */
    vuint32_t _unused_8:4;             /* Always write the reset value to this field. */
    vuint32_t PCSIS:4;                 /* Peripheral Chip Select x Inactive State */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t MDIS:1;                  /* Module Disable */
    vuint32_t DIS_TXF:1;               /* Disable Transmit FIFO */
    vuint32_t DIS_RXF:1;               /* Disable Receive FIFO */
    vuint32_t CLR_TXF:1;               /* Clear TX FIFO */
    vuint32_t CLR_RXF:1;               /* Clear RX FIFO */
    vuint32_t SMPL_PT:2;               /* Sample Point */
    vuint32_t _unused_24:5;            /* Reserved */
    vuint32_t FCPCS:1;                 /* Fast Continuous PCS Mode */
    vuint32_t PES:1;                   /* Parity Error Stop */
    vuint32_t HALT:1;                  /* Halt */
  } B;
} SPI_2_MCR_tag;

typedef union SPI_2_TCR_union_tag {    /* Transfer Count Register */
  vuint32_t R;
  struct {
    vuint32_t SPI_TCNT:16;             /* SPI Transfer Counter */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} SPI_2_TCR_tag;

typedef union SPI_2_MODE_CTAR_union_tag { /* Clock and Transfer Attributes Register (in Master mode) */
  vuint32_t R;
  struct {
    vuint32_t DBR:1;                   /* Double Baud Rate */
    vuint32_t FMSZ:4;                  /* Frame Size */
    vuint32_t CPOL:1;                  /* Clock Polarity */
    vuint32_t CPHA:1;                  /* Clock Phase */
    vuint32_t LSBFE:1;                 /* LSB First */
    vuint32_t PCSSCK:2;                /* PCS to SCK Delay Prescaler */
    vuint32_t PASC:2;                  /* After SCK Delay Prescaler */
    vuint32_t PDT:2;                   /* Delay after Transfer Prescaler */
    vuint32_t PBR:2;                   /* Baud Rate Prescaler */
    vuint32_t CSSCK:4;                 /* PCS to SCK Delay Scaler */
    vuint32_t ASC:4;                   /* After SCK Delay Scaler */
    vuint32_t DT:4;                    /* Delay After Transfer Scaler */
    vuint32_t BR:4;                    /* Baud Rate Scaler */
  } B;
} SPI_2_MODE_CTAR_tag;

typedef union SPI_2_MODE_CTAR_SLAVE_union_tag { /* Clock and Transfer Attributes Register (in Slave mode) */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Always write the reset value to this field. */
    vuint32_t FMSZ:4;                  /* Frame Size */
    vuint32_t CPOL:1;                  /* Clock Polarity */
    vuint32_t CPHA:1;                  /* Clock Phase */
    vuint32_t PE:1;                    /* Parity Enable */
    vuint32_t PP:1;                    /* Parity Polarity */
    vuint32_t _unused_9:1;             /* Reserved */
    vuint32_t _unused_10:22;           /* Reserved */
  } B;
} SPI_2_MODE_CTAR_SLAVE_tag;

typedef union SPI_2_MODE_union_tag {
  SPI_2_MODE_CTAR_tag CTAR[8];         /* Clock and Transfer Attributes Register (in Master mode) */
  SPI_2_MODE_CTAR_SLAVE_tag CTAR_SLAVE[1]; /* Clock and Transfer Attributes Register (in Slave mode) */
} SPI_2_MODE_tag;

typedef union SPI_2_SR_union_tag {     /* Status Register */
  vuint32_t R;
  struct {
    vuint32_t TCF:1;                   /* Transfer Complete Flag */
    vuint32_t TXRXS:1;                 /* TX and RX Status */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t EOQF:1;                  /* End of Queue Flag */
    vuint32_t TFUF:1;                  /* Transmit FIFO Underflow Flag */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t TFFF:1;                  /* Transmit FIFO Fill Flag */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t _unused_9:1;             /* Reserved */
    vuint32_t SPEF:1;                  /* SPI Parity Error Flag */
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t RFOF:1;                  /* Receive FIFO Overflow Flag */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t RFDF:1;                  /* Receive FIFO Drain Flag */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t TXCTR:4;                 /* TX FIFO Counter */
    vuint32_t TXNXTPTR:4;              /* Transmit Next Pointer */
    vuint32_t RXCTR:4;                 /* RX FIFO Counter */
    vuint32_t POPNXTPTR:4;             /* Pop Next Pointer */
  } B;
} SPI_2_SR_tag;

typedef union SPI_2_RSER_union_tag {   /* DMA/Interrupt Request Select and Enable Register */
  vuint32_t R;
  struct {
    vuint32_t TCF_RE:1;                /* Transmission Complete Request Enable */
    vuint32_t _unused_1:1;             /* Always write the reset value to this field. */
    vuint32_t _unused_2:1;             /* Always write the reset value to this field. */
    vuint32_t EOQF_RE:1;               /* Finished Request Enable */
    vuint32_t TFUF_RE:1;               /* Transmit FIFO Underflow Request Enable */
    vuint32_t _unused_5:1;             /* Always write the reset value to this field. */
    vuint32_t TFFF_RE:1;               /* Transmit FIFO Fill Request Enable */
    vuint32_t TFFF_DIRS:1;             /* Transmit FIFO Fill DMA or Interrupt Request Select */
    vuint32_t _unused_8:1;             /* Always write the reset value to this field. */
    vuint32_t _unused_9:1;             /* Always write the reset value to this field. */
    vuint32_t SPEF_RE:1;               /* SPI Parity Error Request Enable */
    vuint32_t _unused_11:1;            /* Always write the reset value to this field. */
    vuint32_t RFOF_RE:1;               /* Receive FIFO Overflow Request Enable */
    vuint32_t _unused_13:1;            /* Always write the reset value to this field. */
    vuint32_t RFDF_RE:1;               /* Receive FIFO Drain Request Enable */
    vuint32_t RFDF_DIRS:1;             /* Receive FIFO Drain DMA or Interrupt Request Select */
    vuint32_t _unused_16:1;            /* Always write the reset value to this field. */
    vuint32_t _unused_17:1;            /* Always write the reset value to this field. */
    vuint32_t _unused_18:14;           /* Reserved */
  } B;
} SPI_2_RSER_tag;

typedef union SPI_2_PUSHR_PUSHR_union_tag { /* PUSH TX FIFO Register In Master Mode */
  vuint32_t R;
  struct {
    vuint32_t CONT:1;                  /* Continuous Peripheral Chip Select Enable */
    vuint32_t CTAS:3;                  /* Clock and Transfer Attributes Select */
    vuint32_t EOQ:1;                   /* End of Queue */
    vuint32_t CTCNT:1;                 /* Clear Transfer Counter */
    vuint32_t PE_MASC:1;               /* Parity Enable or Mask TASC Delay in Current Frame */
    vuint32_t PP_MCSC:1;               /* Parity Polarity or Mask TCSC Delay in Next Frame */
    vuint32_t _unused_8:4;             /* Always write the reset value to this field. */
    vuint32_t PCS:4;                   /* PCS */
    vuint32_t TXDATA:16;               /* Transmit Data */
  } B;
} SPI_2_PUSHR_PUSHR_tag;

typedef union SPI_2_PUSHR_PUSHR_SLAVE_union_tag { /* PUSH TX FIFO Register In Slave Mode */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t TXDATA:16;               /* Transmit Data */
  } B;
} SPI_2_PUSHR_PUSHR_SLAVE_tag;

typedef union SPI_2_PUSHR_union_tag {
  SPI_2_PUSHR_PUSHR_tag PUSHR;         /* PUSH TX FIFO Register In Master Mode */
  SPI_2_PUSHR_PUSHR_SLAVE_tag PUSHR_SLAVE; /* PUSH TX FIFO Register In Slave Mode */
} SPI_2_PUSHR_tag;

typedef union SPI_2_POPR_union_tag {   /* POP RX FIFO Register */
  vuint32_t R;
  struct {
    vuint32_t RXDATA:32;               /* Received Data */
  } B;
} SPI_2_POPR_tag;

typedef union SPI_2_TXFR_union_tag {   /* Transmit FIFO Registers */
  vuint32_t R;
  struct {
    vuint32_t TXCMD_TXDATA:16;         /* Transmit Command or Transmit Data */
    vuint32_t TXDATA:16;               /* Transmit Data */
  } B;
} SPI_2_TXFR_tag;

typedef union SPI_2_RXFR_union_tag {   /* Receive FIFO Registers */
  vuint32_t R;
  struct {
    vuint32_t RXDATA:32;               /* Receive Data */
  } B;
} SPI_2_RXFR_tag;

struct SPI_2_tag {
  SPI_2_MCR_tag MCR;                   /* Module Configuration Register */
  uint8_t SPI_2_reserved0[4];
  SPI_2_TCR_tag TCR;                   /* Transfer Count Register */
  SPI_2_MODE_tag MODE;
  SPI_2_SR_tag SR;                     /* Status Register */
  SPI_2_RSER_tag RSER;                 /* DMA/Interrupt Request Select and Enable Register */
  SPI_2_PUSHR_tag PUSHR;
  SPI_2_POPR_tag POPR;                 /* POP RX FIFO Register */
  SPI_2_TXFR_tag TXFR[5];              /* Transmit FIFO Registers */
  uint8_t SPI_2_reserved1[44];
  SPI_2_RXFR_tag RXFR[5];              /* Receive FIFO Registers */
};


/* ============================================================================
   =============================== Module: SPI_3 ==============================
   ============================================================================ */

typedef union SPI_3_MCR_union_tag {    /* Module Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t MSTR:1;                  /* Master/Slave Mode Select */
    vuint32_t CONT_SCKE:1;             /* Continuous SCK Enable */
    vuint32_t DCONF:2;                 /* SPI Configuration */
    vuint32_t FRZ:1;                   /* Freeze */
    vuint32_t MTFE:1;                  /* Modified Transfer Format Enable */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t ROOE:1;                  /* Receive FIFO Overflow Overwrite Enable */
    vuint32_t _unused_8:7;             /* Always write the reset value to this field. */
    vuint32_t PCSIS:1;                 /* Peripheral Chip Select x Inactive State */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t MDIS:1;                  /* Module Disable */
    vuint32_t DIS_TXF:1;               /* Disable Transmit FIFO */
    vuint32_t DIS_RXF:1;               /* Disable Receive FIFO */
    vuint32_t CLR_TXF:1;               /* Clear TX FIFO */
    vuint32_t CLR_RXF:1;               /* Clear RX FIFO */
    vuint32_t SMPL_PT:2;               /* Sample Point */
    vuint32_t _unused_24:5;            /* Reserved */
    vuint32_t FCPCS:1;                 /* Fast Continuous PCS Mode */
    vuint32_t PES:1;                   /* Parity Error Stop */
    vuint32_t HALT:1;                  /* Halt */
  } B;
} SPI_3_MCR_tag;

typedef union SPI_3_TCR_union_tag {    /* Transfer Count Register */
  vuint32_t R;
  struct {
    vuint32_t SPI_TCNT:16;             /* SPI Transfer Counter */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} SPI_3_TCR_tag;

typedef union SPI_3_MODE_CTAR_union_tag { /* Clock and Transfer Attributes Register (in Master mode) */
  vuint32_t R;
  struct {
    vuint32_t DBR:1;                   /* Double Baud Rate */
    vuint32_t FMSZ:4;                  /* Frame Size */
    vuint32_t CPOL:1;                  /* Clock Polarity */
    vuint32_t CPHA:1;                  /* Clock Phase */
    vuint32_t LSBFE:1;                 /* LSB First */
    vuint32_t PCSSCK:2;                /* PCS to SCK Delay Prescaler */
    vuint32_t PASC:2;                  /* After SCK Delay Prescaler */
    vuint32_t PDT:2;                   /* Delay after Transfer Prescaler */
    vuint32_t PBR:2;                   /* Baud Rate Prescaler */
    vuint32_t CSSCK:4;                 /* PCS to SCK Delay Scaler */
    vuint32_t ASC:4;                   /* After SCK Delay Scaler */
    vuint32_t DT:4;                    /* Delay After Transfer Scaler */
    vuint32_t BR:4;                    /* Baud Rate Scaler */
  } B;
} SPI_3_MODE_CTAR_tag;

typedef union SPI_3_MODE_CTAR_SLAVE_union_tag { /* Clock and Transfer Attributes Register (in Slave mode) */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Always write the reset value to this field. */
    vuint32_t FMSZ:4;                  /* Frame Size */
    vuint32_t CPOL:1;                  /* Clock Polarity */
    vuint32_t CPHA:1;                  /* Clock Phase */
    vuint32_t PE:1;                    /* Parity Enable */
    vuint32_t PP:1;                    /* Parity Polarity */
    vuint32_t _unused_9:1;             /* Reserved */
    vuint32_t _unused_10:22;           /* Reserved */
  } B;
} SPI_3_MODE_CTAR_SLAVE_tag;

typedef union SPI_3_MODE_union_tag {
  SPI_3_MODE_CTAR_tag CTAR[8];         /* Clock and Transfer Attributes Register (in Master mode) */
  SPI_3_MODE_CTAR_SLAVE_tag CTAR_SLAVE[1]; /* Clock and Transfer Attributes Register (in Slave mode) */
} SPI_3_MODE_tag;

typedef union SPI_3_SR_union_tag {     /* Status Register */
  vuint32_t R;
  struct {
    vuint32_t TCF:1;                   /* Transfer Complete Flag */
    vuint32_t TXRXS:1;                 /* TX and RX Status */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t EOQF:1;                  /* End of Queue Flag */
    vuint32_t TFUF:1;                  /* Transmit FIFO Underflow Flag */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t TFFF:1;                  /* Transmit FIFO Fill Flag */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t _unused_9:1;             /* Reserved */
    vuint32_t SPEF:1;                  /* SPI Parity Error Flag */
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t RFOF:1;                  /* Receive FIFO Overflow Flag */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t RFDF:1;                  /* Receive FIFO Drain Flag */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t TXCTR:4;                 /* TX FIFO Counter */
    vuint32_t TXNXTPTR:4;              /* Transmit Next Pointer */
    vuint32_t RXCTR:4;                 /* RX FIFO Counter */
    vuint32_t POPNXTPTR:4;             /* Pop Next Pointer */
  } B;
} SPI_3_SR_tag;

typedef union SPI_3_RSER_union_tag {   /* DMA/Interrupt Request Select and Enable Register */
  vuint32_t R;
  struct {
    vuint32_t TCF_RE:1;                /* Transmission Complete Request Enable */
    vuint32_t _unused_1:1;             /* Always write the reset value to this field. */
    vuint32_t _unused_2:1;             /* Always write the reset value to this field. */
    vuint32_t EOQF_RE:1;               /* Finished Request Enable */
    vuint32_t TFUF_RE:1;               /* Transmit FIFO Underflow Request Enable */
    vuint32_t _unused_5:1;             /* Always write the reset value to this field. */
    vuint32_t TFFF_RE:1;               /* Transmit FIFO Fill Request Enable */
    vuint32_t TFFF_DIRS:1;             /* Transmit FIFO Fill DMA or Interrupt Request Select */
    vuint32_t _unused_8:1;             /* Always write the reset value to this field. */
    vuint32_t _unused_9:1;             /* Always write the reset value to this field. */
    vuint32_t SPEF_RE:1;               /* SPI Parity Error Request Enable */
    vuint32_t _unused_11:1;            /* Always write the reset value to this field. */
    vuint32_t RFOF_RE:1;               /* Receive FIFO Overflow Request Enable */
    vuint32_t _unused_13:1;            /* Always write the reset value to this field. */
    vuint32_t RFDF_RE:1;               /* Receive FIFO Drain Request Enable */
    vuint32_t RFDF_DIRS:1;             /* Receive FIFO Drain DMA or Interrupt Request Select */
    vuint32_t _unused_16:1;            /* Always write the reset value to this field. */
    vuint32_t _unused_17:1;            /* Always write the reset value to this field. */
    vuint32_t _unused_18:14;           /* Reserved */
  } B;
} SPI_3_RSER_tag;

typedef union SPI_3_PUSHR_PUSHR_union_tag { /* PUSH TX FIFO Register In Master Mode */
  vuint32_t R;
  struct {
    vuint32_t CONT:1;                  /* Continuous Peripheral Chip Select Enable */
    vuint32_t CTAS:3;                  /* Clock and Transfer Attributes Select */
    vuint32_t EOQ:1;                   /* End of Queue */
    vuint32_t CTCNT:1;                 /* Clear Transfer Counter */
    vuint32_t PE_MASC:1;               /* Parity Enable or Mask TASC Delay in Current Frame */
    vuint32_t PP_MCSC:1;               /* Parity Polarity or Mask TCSC Delay in Next Frame */
    vuint32_t _unused_8:7;             /* Always write the reset value to this field. */
    vuint32_t PCS:1;                   /* PCS */
    vuint32_t TXDATA:16;               /* Transmit Data */
  } B;
} SPI_3_PUSHR_PUSHR_tag;

typedef union SPI_3_PUSHR_PUSHR_SLAVE_union_tag { /* PUSH TX FIFO Register In Slave Mode */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t TXDATA:16;               /* Transmit Data */
  } B;
} SPI_3_PUSHR_PUSHR_SLAVE_tag;

typedef union SPI_3_PUSHR_union_tag {
  SPI_3_PUSHR_PUSHR_tag PUSHR;         /* PUSH TX FIFO Register In Master Mode */
  SPI_3_PUSHR_PUSHR_SLAVE_tag PUSHR_SLAVE; /* PUSH TX FIFO Register In Slave Mode */
} SPI_3_PUSHR_tag;

typedef union SPI_3_POPR_union_tag {   /* POP RX FIFO Register */
  vuint32_t R;
  struct {
    vuint32_t RXDATA:32;               /* Received Data */
  } B;
} SPI_3_POPR_tag;

typedef union SPI_3_TXFR_union_tag {   /* Transmit FIFO Registers */
  vuint32_t R;
  struct {
    vuint32_t TXCMD_TXDATA:16;         /* Transmit Command or Transmit Data */
    vuint32_t TXDATA:16;               /* Transmit Data */
  } B;
} SPI_3_TXFR_tag;

typedef union SPI_3_RXFR_union_tag {   /* Receive FIFO Registers */
  vuint32_t R;
  struct {
    vuint32_t RXDATA:32;               /* Receive Data */
  } B;
} SPI_3_RXFR_tag;

struct SPI_3_tag {
  SPI_3_MCR_tag MCR;                   /* Module Configuration Register */
  uint8_t SPI_3_reserved0[4];
  SPI_3_TCR_tag TCR;                   /* Transfer Count Register */
  SPI_3_MODE_tag MODE;
  SPI_3_SR_tag SR;                     /* Status Register */
  SPI_3_RSER_tag RSER;                 /* DMA/Interrupt Request Select and Enable Register */
  SPI_3_PUSHR_tag PUSHR;
  SPI_3_POPR_tag POPR;                 /* POP RX FIFO Register */
  SPI_3_TXFR_tag TXFR[5];              /* Transmit FIFO Registers */
  uint8_t SPI_3_reserved1[44];
  SPI_3_RXFR_tag RXFR[5];              /* Receive FIFO Registers */
};


/* ============================================================================
   =============================== Module: SPI_4 ==============================
   ============================================================================ */

typedef union SPI_4_MCR_union_tag {    /* Module Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t MSTR:1;                  /* Master/Slave Mode Select */
    vuint32_t CONT_SCKE:1;             /* Continuous SCK Enable */
    vuint32_t DCONF:2;                 /* SPI Configuration */
    vuint32_t FRZ:1;                   /* Freeze */
    vuint32_t MTFE:1;                  /* Modified Transfer Format Enable */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t ROOE:1;                  /* Receive FIFO Overflow Overwrite Enable */
    vuint32_t _unused_8:7;             /* Always write the reset value to this field. */
    vuint32_t PCSIS:1;                 /* Peripheral Chip Select x Inactive State */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t MDIS:1;                  /* Module Disable */
    vuint32_t DIS_TXF:1;               /* Disable Transmit FIFO */
    vuint32_t DIS_RXF:1;               /* Disable Receive FIFO */
    vuint32_t CLR_TXF:1;               /* Clear TX FIFO */
    vuint32_t CLR_RXF:1;               /* Clear RX FIFO */
    vuint32_t SMPL_PT:2;               /* Sample Point */
    vuint32_t _unused_24:5;            /* Reserved */
    vuint32_t FCPCS:1;                 /* Fast Continuous PCS Mode */
    vuint32_t PES:1;                   /* Parity Error Stop */
    vuint32_t HALT:1;                  /* Halt */
  } B;
} SPI_4_MCR_tag;

typedef union SPI_4_TCR_union_tag {    /* Transfer Count Register */
  vuint32_t R;
  struct {
    vuint32_t SPI_TCNT:16;             /* SPI Transfer Counter */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} SPI_4_TCR_tag;

typedef union SPI_4_MODE_CTAR_union_tag { /* Clock and Transfer Attributes Register (in Master mode) */
  vuint32_t R;
  struct {
    vuint32_t DBR:1;                   /* Double Baud Rate */
    vuint32_t FMSZ:4;                  /* Frame Size */
    vuint32_t CPOL:1;                  /* Clock Polarity */
    vuint32_t CPHA:1;                  /* Clock Phase */
    vuint32_t LSBFE:1;                 /* LSB First */
    vuint32_t PCSSCK:2;                /* PCS to SCK Delay Prescaler */
    vuint32_t PASC:2;                  /* After SCK Delay Prescaler */
    vuint32_t PDT:2;                   /* Delay after Transfer Prescaler */
    vuint32_t PBR:2;                   /* Baud Rate Prescaler */
    vuint32_t CSSCK:4;                 /* PCS to SCK Delay Scaler */
    vuint32_t ASC:4;                   /* After SCK Delay Scaler */
    vuint32_t DT:4;                    /* Delay After Transfer Scaler */
    vuint32_t BR:4;                    /* Baud Rate Scaler */
  } B;
} SPI_4_MODE_CTAR_tag;

typedef union SPI_4_MODE_CTAR_SLAVE_union_tag { /* Clock and Transfer Attributes Register (in Slave mode) */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Always write the reset value to this field. */
    vuint32_t FMSZ:4;                  /* Frame Size */
    vuint32_t CPOL:1;                  /* Clock Polarity */
    vuint32_t CPHA:1;                  /* Clock Phase */
    vuint32_t PE:1;                    /* Parity Enable */
    vuint32_t PP:1;                    /* Parity Polarity */
    vuint32_t _unused_9:1;             /* Reserved */
    vuint32_t _unused_10:22;           /* Reserved */
  } B;
} SPI_4_MODE_CTAR_SLAVE_tag;

typedef union SPI_4_MODE_union_tag {
  SPI_4_MODE_CTAR_tag CTAR[8];         /* Clock and Transfer Attributes Register (in Master mode) */
  SPI_4_MODE_CTAR_SLAVE_tag CTAR_SLAVE[1]; /* Clock and Transfer Attributes Register (in Slave mode) */
} SPI_4_MODE_tag;

typedef union SPI_4_SR_union_tag {     /* Status Register */
  vuint32_t R;
  struct {
    vuint32_t TCF:1;                   /* Transfer Complete Flag */
    vuint32_t TXRXS:1;                 /* TX and RX Status */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t EOQF:1;                  /* End of Queue Flag */
    vuint32_t TFUF:1;                  /* Transmit FIFO Underflow Flag */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t TFFF:1;                  /* Transmit FIFO Fill Flag */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t _unused_9:1;             /* Reserved */
    vuint32_t SPEF:1;                  /* SPI Parity Error Flag */
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t RFOF:1;                  /* Receive FIFO Overflow Flag */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t RFDF:1;                  /* Receive FIFO Drain Flag */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t TXCTR:4;                 /* TX FIFO Counter */
    vuint32_t TXNXTPTR:4;              /* Transmit Next Pointer */
    vuint32_t RXCTR:4;                 /* RX FIFO Counter */
    vuint32_t POPNXTPTR:4;             /* Pop Next Pointer */
  } B;
} SPI_4_SR_tag;

typedef union SPI_4_RSER_union_tag {   /* DMA/Interrupt Request Select and Enable Register */
  vuint32_t R;
  struct {
    vuint32_t TCF_RE:1;                /* Transmission Complete Request Enable */
    vuint32_t _unused_1:1;             /* Always write the reset value to this field. */
    vuint32_t _unused_2:1;             /* Always write the reset value to this field. */
    vuint32_t EOQF_RE:1;               /* Finished Request Enable */
    vuint32_t TFUF_RE:1;               /* Transmit FIFO Underflow Request Enable */
    vuint32_t _unused_5:1;             /* Always write the reset value to this field. */
    vuint32_t TFFF_RE:1;               /* Transmit FIFO Fill Request Enable */
    vuint32_t TFFF_DIRS:1;             /* Transmit FIFO Fill DMA or Interrupt Request Select */
    vuint32_t _unused_8:1;             /* Always write the reset value to this field. */
    vuint32_t _unused_9:1;             /* Always write the reset value to this field. */
    vuint32_t SPEF_RE:1;               /* SPI Parity Error Request Enable */
    vuint32_t _unused_11:1;            /* Always write the reset value to this field. */
    vuint32_t RFOF_RE:1;               /* Receive FIFO Overflow Request Enable */
    vuint32_t _unused_13:1;            /* Always write the reset value to this field. */
    vuint32_t RFDF_RE:1;               /* Receive FIFO Drain Request Enable */
    vuint32_t RFDF_DIRS:1;             /* Receive FIFO Drain DMA or Interrupt Request Select */
    vuint32_t _unused_16:1;            /* Always write the reset value to this field. */
    vuint32_t _unused_17:1;            /* Always write the reset value to this field. */
    vuint32_t _unused_18:14;           /* Reserved */
  } B;
} SPI_4_RSER_tag;

typedef union SPI_4_PUSHR_PUSHR_union_tag { /* PUSH TX FIFO Register In Master Mode */
  vuint32_t R;
  struct {
    vuint32_t CONT:1;                  /* Continuous Peripheral Chip Select Enable */
    vuint32_t CTAS:3;                  /* Clock and Transfer Attributes Select */
    vuint32_t EOQ:1;                   /* End of Queue */
    vuint32_t CTCNT:1;                 /* Clear Transfer Counter */
    vuint32_t PE_MASC:1;               /* Parity Enable or Mask TASC Delay in Current Frame */
    vuint32_t PP_MCSC:1;               /* Parity Polarity or Mask TCSC Delay in Next Frame */
    vuint32_t _unused_8:7;             /* Always write the reset value to this field. */
    vuint32_t PCS:1;                   /* PCS */
    vuint32_t TXDATA:16;               /* Transmit Data */
  } B;
} SPI_4_PUSHR_PUSHR_tag;

typedef union SPI_4_PUSHR_PUSHR_SLAVE_union_tag { /* PUSH TX FIFO Register In Slave Mode */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t TXDATA:16;               /* Transmit Data */
  } B;
} SPI_4_PUSHR_PUSHR_SLAVE_tag;

typedef union SPI_4_PUSHR_union_tag {
  SPI_4_PUSHR_PUSHR_tag PUSHR;         /* PUSH TX FIFO Register In Master Mode */
  SPI_4_PUSHR_PUSHR_SLAVE_tag PUSHR_SLAVE; /* PUSH TX FIFO Register In Slave Mode */
} SPI_4_PUSHR_tag;

typedef union SPI_4_POPR_union_tag {   /* POP RX FIFO Register */
  vuint32_t R;
  struct {
    vuint32_t RXDATA:32;               /* Received Data */
  } B;
} SPI_4_POPR_tag;

typedef union SPI_4_TXFR_union_tag {   /* Transmit FIFO Registers */
  vuint32_t R;
  struct {
    vuint32_t TXCMD_TXDATA:16;         /* Transmit Command or Transmit Data */
    vuint32_t TXDATA:16;               /* Transmit Data */
  } B;
} SPI_4_TXFR_tag;

typedef union SPI_4_RXFR_union_tag {   /* Receive FIFO Registers */
  vuint32_t R;
  struct {
    vuint32_t RXDATA:32;               /* Receive Data */
  } B;
} SPI_4_RXFR_tag;

struct SPI_4_tag {
  SPI_4_MCR_tag MCR;                   /* Module Configuration Register */
  uint8_t SPI_4_reserved0[4];
  SPI_4_TCR_tag TCR;                   /* Transfer Count Register */
  SPI_4_MODE_tag MODE;
  SPI_4_SR_tag SR;                     /* Status Register */
  SPI_4_RSER_tag RSER;                 /* DMA/Interrupt Request Select and Enable Register */
  SPI_4_PUSHR_tag PUSHR;
  SPI_4_POPR_tag POPR;                 /* POP RX FIFO Register */
  SPI_4_TXFR_tag TXFR[5];              /* Transmit FIFO Registers */
  uint8_t SPI_4_reserved1[44];
  SPI_4_RXFR_tag RXFR[5];              /* Receive FIFO Registers */
};


/* ============================================================================
   =============================== Module: SPT ================================
   ============================================================================ */

typedef union SPT_GBL_CTRL_union_tag { /* SPT Global Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:28;
    vuint32_t AHB_BYTE_SWAP:1;         /* AHB Interface Data Byte Swapping Enable */
    vuint32_t PG_ST_CTRL:1;            /* Program Start Control */
    vuint32_t _unused_30:2;
  } B;
} SPT_GBL_CTRL_tag;

typedef union SPT_CS_PG_ST_ADDR_union_tag { /* Program Start Address */
  vuint32_t R;
  struct {
    vuint32_t PG_ST_ADDR:32;           /* Program Start Address */
  } B;
} SPT_CS_PG_ST_ADDR_tag;

typedef union SPT_CS_MODE_CTRL_union_tag { /* Mode Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:13;
    vuint32_t CSDMA_BRST_SZ:2;         /* Command Sequencer DMA Burst Size */
    vuint32_t ERROR_EN:1;              /* Error Enable */
    vuint32_t PREFETCH:1;              /* Early Prefetch Enable */
    vuint32_t BKPT3_RE:1;              /* Breakpoint 3 Remain Enabled */
    vuint32_t BKPT3_EN:1;              /* Breakpoint 3 Enable */
    vuint32_t BKPT2_RE:1;              /* Breakpoint 2 Remain Enabled */
    vuint32_t BKPT2_EN:1;              /* Breakpoint 2 Enable */
    vuint32_t BKPT1_RE:1;              /* Breakpoint 1 Remain Enabled */
    vuint32_t BKPT1_EN:1;              /* Breakpoint 1 Enable */
    vuint32_t BKPT0_RE:1;              /* Breakpoint 0 Remain Enabled */
    vuint32_t BKPT0_EN:1;              /* Breakpoint 0 Enable */
    vuint32_t CS_SYS_DEBUG:1;          /* System Debug Enable */
    vuint32_t CS_BKPT_DEBUG:1;         /* Breakpoint Debug Enable */
    vuint32_t CS_IMM_DEBUG:1;          /* IMM Debug Enable */
    vuint32_t DEBUG_MD:2;              /* Debug Mode Control */
    vuint32_t ASYNCSTOP:1;             /* Enter Asyncstop State */
    vuint32_t STOP:1;                  /* Enter Stop State */
  } B;
} SPT_CS_MODE_CTRL_tag;

typedef union SPT_CS_WD_COUNT_union_tag { /* Watchdog Counter */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;
    vuint32_t WD_COUNT:24;             /* Watchdog Timer Count */
  } B;
} SPT_CS_WD_COUNT_tag;

typedef union SPT_CS_BKPT0_ADDR_union_tag { /* Breakpoint 0 Address */
  vuint32_t R;
  struct {
    vuint32_t BKPT0:32;                /* Breakpoint 0 Address */
  } B;
} SPT_CS_BKPT0_ADDR_tag;

typedef union SPT_CS_BKPT1_ADDR_union_tag { /* Breakpoint 1 Address */
  vuint32_t R;
  struct {
    vuint32_t BKPT1:32;                /* Breakpoint 1 Address */
  } B;
} SPT_CS_BKPT1_ADDR_tag;

typedef union SPT_CS_BKPT2_ADDR_union_tag { /* Breakpoint 2 Address */
  vuint32_t R;
  struct {
    vuint32_t BKPT2:32;                /* Breakpoint 2 address */
  } B;
} SPT_CS_BKPT2_ADDR_tag;

typedef union SPT_CS_BKPT3_ADDR_union_tag { /* Breakpoint 3 Address */
  vuint32_t R;
  struct {
    vuint32_t BKPT3:32;                /* Breakpoint 3 address */
  } B;
} SPT_CS_BKPT3_ADDR_tag;

typedef union SPT_CS_JAM_INST0_union_tag { /* Jamming Instruction 0 */
  vuint32_t R;
  struct {
    vuint32_t JAM_INST_127_96:32;      /* Jamming instruction bits 127-96 */
  } B;
} SPT_CS_JAM_INST0_tag;

typedef union SPT_CS_JAM_INST1_union_tag { /* Jamming Instruction 1 */
  vuint32_t R;
  struct {
    vuint32_t JAM_INST_95_64:32;       /* Jamming instruction bits 95-64 */
  } B;
} SPT_CS_JAM_INST1_tag;

typedef union SPT_CS_JAM_INST2_union_tag { /* Jamming Instruction 2 */
  vuint32_t R;
  struct {
    vuint32_t JAM_INST_63_32:32;       /* Jamming instruction bits 63-32 */
  } B;
} SPT_CS_JAM_INST2_tag;

typedef union SPT_CS_JAM_INST3_union_tag { /* Jamming Instruction 3 */
  vuint32_t R;
  struct {
    vuint32_t JAM_INST_31_0:32;        /* Jamming instruction bits 31-0 */
  } B;
} SPT_CS_JAM_INST3_tag;

typedef union SPT_CS_CURR_INST_ADDR_union_tag { /* Current Instruction Address */
  vuint32_t R;
  struct {
    vuint32_t CURRENT_INST_ADDR:32;    /* Current Instruction Pointer */
  } B;
} SPT_CS_CURR_INST_ADDR_tag;

typedef union SPT_CS_CURR_INST0_union_tag { /* Current Instruction 0 */
  vuint32_t R;
  struct {
    vuint32_t CURR_INST_127_96:32;     /* Bits 127-96 of the instruction currently being executed */
  } B;
} SPT_CS_CURR_INST0_tag;

typedef union SPT_CS_CURR_INST1_union_tag { /* Current Instruction 1 */
  vuint32_t R;
  struct {
    vuint32_t CURR_INST_95_64:32;      /* Bits 95-64 of the instruction currently being executed */
  } B;
} SPT_CS_CURR_INST1_tag;

typedef union SPT_CS_CURR_INST2_union_tag { /* Current Instruction 2 */
  vuint32_t R;
  struct {
    vuint32_t CURR_INST_63_32:32;      /* Bits 63-2 of the instruction currently being executed */
  } B;
} SPT_CS_CURR_INST2_tag;

typedef union SPT_CS_CURR_INST3_union_tag { /* Current Instruction 3 */
  vuint32_t R;
  struct {
    vuint32_t CURR_INST_31_0:32;       /* Bits 31-0 of the instruction currently being executed */
  } B;
} SPT_CS_CURR_INST3_tag;

typedef union SPT_CS_LOOPCNTR01_union_tag { /* Loop Counters 0 and 1 */
  vuint32_t R;
  struct {
    vuint32_t LOOP_CNTR1:16;           /* Loop Counter 1 */
    vuint32_t LOOP_CNTR0:16;           /* Loop Counter 0 */
  } B;
} SPT_CS_LOOPCNTR01_tag;

typedef union SPT_CS_LOOPCNTR23_union_tag { /* Loop Counters 2 and 3 */
  vuint32_t R;
  struct {
    vuint32_t LOOP_CNTR3:16;           /* Loop Counter 3 */
    vuint32_t LOOP_CNTR2:16;           /* Loop Counter 2 */
  } B;
} SPT_CS_LOOPCNTR23_tag;

typedef union SPT_CS_ERR_INST_ADDR_union_tag { /* Error Instruction Address */
  vuint32_t R;
  struct {
    vuint32_t ERROR_INST_ADDR:32;      /* Error instruction pointer */
  } B;
} SPT_CS_ERR_INST_ADDR_tag;

typedef union SPT_CS_ERR_INST0_union_tag { /* Error Instruction 0 */
  vuint32_t R;
  struct {
    vuint32_t ERR_INST_127_96:32;      /* Bits 127-96 of the instruction that caused an error */
  } B;
} SPT_CS_ERR_INST0_tag;

typedef union SPT_CS_ERR_INST1_union_tag { /* Error Instruction 1 */
  vuint32_t R;
  struct {
    vuint32_t ERR_INST_95_64:32;       /* Bits 95-64 of the instruction that caused an error */
  } B;
} SPT_CS_ERR_INST1_tag;

typedef union SPT_CS_ERR_INST2_union_tag { /* Error Instruction 2 */
  vuint32_t R;
  struct {
    vuint32_t ERR_INST_63_32:32;       /* Bits 63-32 of the instruction that caused an error */
  } B;
} SPT_CS_ERR_INST2_tag;

typedef union SPT_CS_ERR_INST3_union_tag { /* Error Instruction 3 */
  vuint32_t R;
  struct {
    vuint32_t ERR_INST_31_0:32;        /* Bits 31-0 of the instruction that caused an error */
  } B;
} SPT_CS_ERR_INST3_tag;

typedef union SPT_CS_STATUS0_union_tag { /* General Status 0 */
  vuint32_t R;
  struct {
    vuint32_t WD_ZERO:1;               /* Watchdog Timer is Zero */
    vuint32_t _unused_1:14;
    vuint32_t BKPT3_OCC:1;             /* Breakpoint 3 Encountered Indicator */
    vuint32_t BKPT2_OCC:1;             /* Breakpoint 2 Encountered Indicator */
    vuint32_t BKPT1_OCC:1;             /* Breakpoint 1 Encountered Indicator */
    vuint32_t BKPT0_OCC:1;             /* Breakpoint 0 Encountered Indicator */
    vuint32_t JAM_OVR:1;               /* Instruction Jamming Mode Instruction Completion Indicator */
    vuint32_t STEP_JUMP_OVR:1;         /* Step To Next Breakpoint mode Break Indicator */
    vuint32_t STEP_ONCE_OVR:1;         /* Step Once Mode Instruction Completion Indicator */
    vuint32_t MD_JAM:1;                /* Instruction Jamming Mode Indicator */
    vuint32_t MD_STEP_JUMP:1;          /* Step To Next Breakpoint Mode Indicator */
    vuint32_t MD_STEP_ONCE:1;          /* Step Once Mode Indicator */
    vuint32_t MD_HALT:1;               /* Halt Mode Indicator */
    vuint32_t PS_RUN:1;                /* Run State Indicator */
    vuint32_t PS_ASYNCSTOP:1;          /* Asyncstop State Indicator */
    vuint32_t PS_STOP:1;               /* Stop State Indicator */
    vuint32_t PS_DEBUG:1;              /* Debug State Indicator */
    vuint32_t PS_WAIT:1;               /* Wait State Indicator */
    vuint32_t PS_START:1;              /* Start State Indicator */
  } B;
} SPT_CS_STATUS0_tag;

typedef union SPT_CS_STATUS1_union_tag { /* General Status 1 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:20;
    vuint32_t JAM_ILL_JUMP:1;          /* Illegal JUMP in Instruction Jamming Mode */
    vuint32_t JAM_ILL_NEXT:1;          /* Illegal NEXT in Instruction Jamming Mode */
    vuint32_t JAM_ILL_LOOP:1;          /* Illegal LOOP in Instruction Jamming Mode */
    vuint32_t JAM_ILL_SYNC:1;          /* Illegal SYNC in Instruction Jamming Mode */
    vuint32_t JAM_ILL_OPCODE:1;        /* Illegal Opcode in Instruction Jamming Mode */
    vuint32_t ILL_ADD:1;               /* Illegal ADD */
    vuint32_t ILL_GET:1;               /* Illegal GET */
    vuint32_t ILL_SET:1;               /* Illegal SET */
    vuint32_t ILL_NEXT:1;              /* Illegal NEXT */
    vuint32_t ILL_0CNTLOOP:1;          /* Illegal Loop Count Error */
    vuint32_t ILL_LOOP:1;              /* Illegal LOOP */
    vuint32_t ILL_OPCODE:1;            /* Illegal Opcode */
  } B;
} SPT_CS_STATUS1_tag;

typedef union SPT_CS_STATUS2_union_tag { /* General Status 2 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:5;
    vuint32_t WD_WAITREG_TR:2;         /* Event Trigger Type for Watchdog Timer */
    vuint32_t _unused_7:1;
    vuint32_t WD_WAITREG_EVT_NUM:5;    /* Watchdog Waits for this Event Number */
    vuint32_t WAITREG_TR:2;            /* Event Trigger Type */
    vuint32_t _unused_15:1;
    vuint32_t WAITREG_EVT_NUM:6;       /* Event Number for WAIT Instruction */
    vuint32_t WAITREG_EVT_TYPE:1;      /* Event Type for WAIT Instruction */
    vuint32_t _unused_23:1;
    vuint32_t WAITREG_SW:8;            /* Wait Status for Software-Enforced Event */
  } B;
} SPT_CS_STATUS2_tag;

typedef union SPT_CS_STATUS3_union_tag { /* General Status 3 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;
    vuint32_t CS_DMA_ON:1;             /* Command Sequencer DMA ON */
    vuint32_t PROC_STATE:4;            /* Processing State */
    vuint32_t LOOP_DEPTH:3;            /* Loop Depth */
  } B;
} SPT_CS_STATUS3_tag;

typedef union SPT_CS_EVTREG1_union_tag { /* EVT1 Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;
    vuint32_t EVTREG1:8;               /* EVT1 Register */
  } B;
} SPT_CS_EVTREG1_tag;

typedef union SPT_CS_EVTREG2_union_tag { /* EVT2 Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;
    vuint32_t EVTREG2:8;               /* EVT2 Register */
  } B;
} SPT_CS_EVTREG2_tag;

typedef union SPT_CS_SW_EVTREG_union_tag { /* Software Event Trigger */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;
    vuint32_t SW_EVTREG:8;             /* Software Event Trigger */
  } B;
} SPT_CS_SW_EVTREG_tag;

typedef union SPT_CORE1_VER_EVT_union_tag { /* Core 1 Version Register Events */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:21;
    vuint32_t PDMA_TRANS_DONE_EVT1:1;  /* Event for PDMA Transfer Done for Core 1 */
    vuint32_t _unused_22:2;
    vuint32_t EVTREG1:8;               /* EVT1 Register */
  } B;
} SPT_CORE1_VER_EVT_tag;

typedef union SPT_CORE2_VER_EVT_union_tag { /* Core 2 Version Register Events */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:21;
    vuint32_t PDMA_TRANS_DONE_EVT2:1;  /* Event for PDMA Transfer Done for Core 2 */
    vuint32_t _unused_22:2;
    vuint32_t EVTREG2:8;               /* EVT2 Register */
  } B;
} SPT_CORE2_VER_EVT_tag;

typedef union SPT_EVENT_RST_CTRL_union_tag { /* SPT Event Reset Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:29;
    vuint32_t PDMA_TRANS_DONE_RST:1;   /* PDMA Transfer Done Reset */
    vuint32_t _unused_30:2;
  } B;
} SPT_EVENT_RST_CTRL_tag;

typedef union SPT_PDMA_LFSR_LOAD_VAL_HIGH_union_tag { /* LFSR Load High Value */
  vuint32_t R;
  struct {
    vuint32_t PDMA_LFSR_LOAD_VAL_HIGH:32; /* LFSR Load High Value */
  } B;
} SPT_PDMA_LFSR_LOAD_VAL_HIGH_tag;

typedef union SPT_PDMA_LFSR_LOAD_VAL_LOW_union_tag { /* LFSR Load Low Value */
  vuint32_t R;
  struct {
    vuint32_t PDMA_LFSR_LOAD_VAL_LOW:32; /* LFSR Load Low Value */
  } B;
} SPT_PDMA_LFSR_LOAD_VAL_LOW_tag;

typedef union SPT_PDMA_CONTROL_union_tag { /* PDMA Control */
  vuint32_t R;
  struct {
    vuint32_t PDMA_COUNT_CS_PRIORITY:16; /* PDMA Count Register for the Command Sequencer to Get Priority */
    vuint32_t _unused_16:12;
    vuint32_t PDMA_MAX_BURST_SIZE:2;   /* Maximum AHB burst size */
    vuint32_t _unused_30:1;
    vuint32_t PDMA_LFSR_LOAD_EN:1;     /* LFSR Load Enable */
  } B;
} SPT_PDMA_CONTROL_tag;

typedef union SPT_PDMA_TRANSFER_COUNT_STATUS_union_tag { /* PDMA Transfer Count Status */
  vuint32_t R;
  struct {
    vuint32_t AGGR_DATA_COUNT:16;      /* Aggregation Data Count */
    vuint32_t TRANSFER_COUNT:16;       /* Number of Words Transferred via PDMA */
  } B;
} SPT_PDMA_TRANSFER_COUNT_STATUS_tag;

typedef union SPT_PDMA_FMTB_EXP_ADDR_STATUS_union_tag { /* PDMA Format B Exponent Address Status */
  vuint32_t R;
  struct {
    vuint32_t EXPN_ADDR:32;            /* Exponent Address */
  } B;
} SPT_PDMA_FMTB_EXP_ADDR_STATUS_tag;

typedef union SPT_MEM_ERR_INJECT_CTRL_union_tag { /* Memory Error Injection */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;
    vuint32_t TR_PAR_ERR_INJ:4;        /* Twiddle RAM Parity Error Injection */
    vuint32_t OR_PAR_ERR_INJ:4;        /* Operand RAM Parity Error Injection */
  } B;
} SPT_MEM_ERR_INJECT_CTRL_tag;

typedef union SPT_MEM_ERR_STATUS_union_tag { /* Memory Error Status */
  vuint32_t R;
  struct {
    vuint32_t OR_MOD_PAR_ERR:1;        /* Operand RAM Module Parity Error */
    vuint32_t OR_DMA_PAR_ERR:1;        /* Operand RAM DMA Parity Error */
    vuint32_t OR_2_ACC_CONTN:1;        /* Operand RAM Two Access Contention */
    vuint32_t OR_3_ACC_CONTN:1;        /* Operand RAM Three Access Contention */
    vuint32_t _unused_4:12;
    vuint32_t TR_PAR_ERR:1;            /* Twiddle RAM Parity Error */
    vuint32_t _unused_17:13;
    vuint32_t WR_LCK_VIOL:1;           /* Work Register Lock Violation */
    vuint32_t _unused_31:1;
  } B;
} SPT_MEM_ERR_STATUS_tag;

typedef union SPT_MEM_ERR_INT_EN_union_tag { /* Memory Error Interrupt Enable */
  vuint32_t R;
  struct {
    vuint32_t OR_MOD_PAR_IE:1;         /* Operand RAM Module Parity Interrupt Enable */
    vuint32_t OR_DMA_PAR_IE:1;         /* Operand RAM DMA Parity Interrupt Enable */
    vuint32_t OR_2_ACC_IE:1;           /* Operand RAM Two Access Contention Interrupt Enable */
    vuint32_t OR_3_ACC_IE:1;           /* Operand RAM Three Access Contention Interrupt Enable */
    vuint32_t _unused_4:12;
    vuint32_t TR_PAR_IE:1;             /* Twiddle RAM Parity Error Interrupt Enable */
    vuint32_t _unused_17:13;
    vuint32_t WR_LCK_IE:1;             /* Work Register Lock Interrupt Enable */
    vuint32_t _unused_31:1;
  } B;
} SPT_MEM_ERR_INT_EN_tag;

typedef union SPT_DMA_ERR_STATUS_union_tag { /* DMA Error Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;
    vuint32_t CS_AHB_ERR:1;            /* Command Sequencer AHB error Response */
    vuint32_t _unused_25:1;
    vuint32_t PDMA_AHB_ERR:1;          /* PDMA AHB Error */
    vuint32_t _unused_27:2;
    vuint32_t DMA_COMMAND_ERR:1;       /* DMA Command Error */
    vuint32_t _unused_30:2;
  } B;
} SPT_DMA_ERR_STATUS_tag;

typedef union SPT_DMA_ERR_INT_EN_union_tag { /* DMA Error Interrupt Enable */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;
    vuint32_t CS_AHB_ERR_IE:1;         /* Command Sequencer AHB Interrupt Enable */
    vuint32_t _unused_25:1;
    vuint32_t PDMA_AHB_ERR_IE:1;       /* Interrupt Enable for PDMA AHB Error */
    vuint32_t _unused_27:2;
    vuint32_t DMA_COMMAND_ERR_IE:1;    /* DMA Command Error Interrupt Enable */
    vuint32_t _unused_30:2;
  } B;
} SPT_DMA_ERR_INT_EN_tag;

typedef union SPT_GBL_STATUS_union_tag { /* Global Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:29;
    vuint32_t PDMA_TRANS_DONE:1;       /* PDMA Transfer Done */
    vuint32_t _unused_30:2;
  } B;
} SPT_GBL_STATUS_tag;

typedef union SPT_GBL_STATUS_IE_union_tag { /* Global Status Interrupt Enable */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:29;
    vuint32_t PDMA_TRANS_DONE_IE:1;    /* PDMA Transfer Done Interrupt Enable */
    vuint32_t _unused_30:2;
  } B;
} SPT_GBL_STATUS_IE_tag;

typedef union SPT_HW_ACC_ERR_STATUS_union_tag { /* Hardware Accelerator Error Status */
  vuint32_t R;
  struct {
    vuint32_t FFT_RDX2_RND_ERR:1;      /* FFT Radix2 Round Error */
    vuint32_t FFT_OPR_ADDR_ERR:1;      /* Operand Address Error */
    vuint32_t FFT_MULT_COEF2_ERR:1;    /* FFT MULT Coefficient 2 Error */
    vuint32_t FFT_MULT_COEF1_ERR:1;    /* FFT MULT Coefficient 1 Error */
    vuint32_t FFT_TW_OVS_ERR:1;        /* FFT Twiddle Oversampling Error */
    vuint32_t FFT_QE_VL_OVS_ERR:1;     /* Quadrature Extension Vector Length Oversampling Error */
    vuint32_t FFT_RDX4_RND_ERR:1;      /* FFT Radix4 Round Error */
    vuint32_t FFT_WIN_RND_ERR:1;       /* FFT Window Round Error */
    vuint32_t MAXS_IP_CMD_ERR:1;       /* MAXS Input Command Error */
    vuint32_t _unused_9:3;
    vuint32_t COPY_IP_CMD_ERR:1;       /* COPY Input Command Error */
    vuint32_t _unused_13:3;
    vuint32_t FFT_ILL_SHFTVAL:1;       /* FFT Illegal Shift Value Error */
    vuint32_t _unused_17:4;
    vuint32_t HST_DESTADDR_NOT_MULTOF8_ERR:1; /* Destination address not multiple of 8 Error */
    vuint32_t HST_SRCADDR_NOT_MULTOF8_ERR:1; /* Source Address not Multiple of 8 Error */
    vuint32_t HST_SRC_NOT_OR_ERR:1;    /* Source not Operand RAM Error */
    vuint32_t HST_VECLEN_NOT_MULTOF8_ERR:1; /* Vector Length not Multiple of 8 Error */
    vuint32_t HST_INVALID_WR_ACCESS_ERR:1; /* HIST Work Register Access Error */
    vuint32_t _unused_26:2;
    vuint32_t VMT_SHFT_OVF_ERR:1;      /* VMT Shift Overflow Error */
    vuint32_t VMT_CON_RL_ERR:1;        /* VMT Conjugate with Real Type Error */
    vuint32_t VMT_SS_CB_ERR:1;         /* VMT Vector Sum and Scale with Conjugate/Bypass Error */
    vuint32_t VMT_DVS_ERR:1;           /* VMT Dual Vector Sum Error */
  } B;
} SPT_HW_ACC_ERR_STATUS_tag;

typedef union SPT_HW_ACC_ERR_IE_union_tag { /* Hardware Accelerator Error Interrupt Enable */
  vuint32_t R;
  struct {
    vuint32_t FFT_RDX2_RND_IE:1;       /* FFT Radix2 Round Error Interrupt Enable */
    vuint32_t FFT_OPR_ADDR_IE:1;       /* Operand Address Interrupt Enable */
    vuint32_t FFT_MULT_COEF2_IE:1;     /* FFT MULT Coefficient 2 Interrupt Enable */
    vuint32_t FFT_MULT_COEF1_IE:1;     /* FFT MULT Coefficient 1 Interrupt Enable */
    vuint32_t FFT_TW_OVS_IE:1;         /* FFT Twiddle Oversampling Error Interrupt Enable */
    vuint32_t FFT_QE_VL_OVS_IE:1;      /* Quadrature Extension Vector Length Oversampling Interrupt Enable */
    vuint32_t FFT_RDX4_RND_IE:1;       /* FFT Radix4 Round Error Interrupt Enable */
    vuint32_t FFT_WIN_RND_IE:1;        /* FFT Window Round Interrupt Enable */
    vuint32_t MAXS_IP_CMD_IE:1;        /* MAXS Input Command Interrupt Enable */
    vuint32_t _unused_9:3;
    vuint32_t COPY_IP_CMD_IE:1;        /* COPY Input Command Interrupt Enable */
    vuint32_t _unused_13:3;
    vuint32_t FFT_ILL_SHFTVAL_IE:1;    /* FFT Illegal Shift Value Error Interrupt Enable */
    vuint32_t _unused_17:4;
    vuint32_t HST_DESTADDR_NOT_MULTOF8_ERR_IE:1; /* Destination Address Not Multiple of 8 Error Interrupt Enable */
    vuint32_t HST_SRCADDR_NOT_MULTOF8_ERR_IE:1; /* Source Address not Multiple of 8 Error Interrupt Enable */
    vuint32_t HST_SRC_NOT_OR_ERR_IE:1; /* Source not Operand RAM Error Interrupt Enable */
    vuint32_t HST_VECLEN_NOT_MULTOF8_ERR_IE:1; /* Vector Length not Multiple of 8 Error Interrupt Enable */
    vuint32_t HST_INVALID_WR_ACCESS_ERR_IE:1; /* HIST Work Register Access Error Interrupt Enable */
    vuint32_t _unused_26:2;
    vuint32_t VMT_SHFT_OVF_IE:1;       /* VMT Shift Overflow Interrupt Enable */
    vuint32_t VMT_CON_RL_IE:1;         /* VMT Conjugate with Real Type Interrupt Enable */
    vuint32_t VMT_SS_CB_IE:1;          /* VMT Sum Scale with Conjugate/Bypass Interrupt Enable */
    vuint32_t VMT_DVS_IE:1;            /* VMT Dual Vector Sum Interrupt Enable */
  } B;
} SPT_HW_ACC_ERR_IE_tag;

typedef union SPT_HIST_OVF_STATUS0_union_tag { /* HIST Overflow Status 0 */
  vuint32_t R;
  struct {
    vuint32_t B31_OVF:1;               /* Bin Counter 31 Overflow */
    vuint32_t B30_OVF:1;               /* Bin Counter 30 Overflow */
    vuint32_t B29_OVF:1;               /* Bin Counter 29 Overflow */
    vuint32_t B28_OVF:1;               /* Bin Counter 28 Overflow */
    vuint32_t B27_OVF:1;               /* Bin Counter 27 Overflow */
    vuint32_t B26_OVF:1;               /* Bin Counter 26 Overflow */
    vuint32_t B25_OVF:1;               /* Bin Counter 25 Overflow */
    vuint32_t B24_OVF:1;               /* Bin Counter 24 Overflow */
    vuint32_t B23_OVF:1;               /* Bin Counter 23 Overflow */
    vuint32_t B22_OVF:1;               /* Bin Counter 22 Overflow */
    vuint32_t B21_OVF:1;               /* Bin Counter 21 Overflow */
    vuint32_t B20_OVF:1;               /* Bin Counter 20 Overflow */
    vuint32_t B19_OVF:1;               /* Bin Counter 19 Overflow */
    vuint32_t B18_OVF:1;               /* Bin Counter 18 Overflow */
    vuint32_t B17_OVF:1;               /* Bin Counter 17 Overflow */
    vuint32_t B16_OVF:1;               /* Bin Counter 16 Overflow */
    vuint32_t B15_OVF:1;               /* Bin Counter 15 Overflow */
    vuint32_t B14_OVF:1;               /* Bin Counter 14 Overflow */
    vuint32_t B13_OVF:1;               /* Bin Counter 13 Overflow */
    vuint32_t B12_OVF:1;               /* Bin Counter 12 Overflow */
    vuint32_t B11_OVF:1;               /* Bin Counter 11 Overflow */
    vuint32_t B10_OVF:1;               /* Bin Counter 10 Overflow */
    vuint32_t B9_OVF:1;                /* Bin Counter 9 Overflow */
    vuint32_t B8_OVF:1;                /* Bin Counter 8 Overflow */
    vuint32_t B7_OVF:1;                /* Bin Counter 7 Overflow */
    vuint32_t B6_OVF:1;                /* Bin Counter 6 Overflow */
    vuint32_t B5_OVF:1;                /* Bin Counter 5 Overflow */
    vuint32_t B4_OVF:1;                /* Bin Counter 4 Overflow */
    vuint32_t B3_OVF:1;                /* Bin Counter 3 Overflow */
    vuint32_t B2_OVF:1;                /* Bin Counter 2 Overflow */
    vuint32_t B1_OVF:1;                /* Bin Counter 1 Overflow */
    vuint32_t B0_OVF:1;                /* Bin Counter 0 Overflow */
  } B;
} SPT_HIST_OVF_STATUS0_tag;

typedef union SPT_HIST_OVF_STATUS1_union_tag { /* HIST Overflow Status 1 */
  vuint32_t R;
  struct {
    vuint32_t B63_OVF:1;               /* Bin Counter 63 Overflow */
    vuint32_t B62_OVF:1;               /* Bin Counter 62 Overflow */
    vuint32_t B61_OVF:1;               /* Bin Counter 61 Overflow */
    vuint32_t B60_OVF:1;               /* Bin Counter 60 Overflow */
    vuint32_t B59_OVF:1;               /* Bin Counter 59 Overflow */
    vuint32_t B58_OVF:1;               /* Bin Counter 58 Overflow */
    vuint32_t B57_OVF:1;               /* Bin Counter 57 Overflow */
    vuint32_t B56_OVF:1;               /* Bin Counter 56 Overflow */
    vuint32_t B55_OVF:1;               /* Bin Counter 55 Overflow */
    vuint32_t B54_OVF:1;               /* Bin Counter 54 Overflow */
    vuint32_t B53_OVF:1;               /* Bin Counter 53 Overflow */
    vuint32_t B52_OVF:1;               /* Bin Counter 52 Overflow */
    vuint32_t B51_OVF:1;               /* Bin Counter 51 Overflow */
    vuint32_t B50_OVF:1;               /* Bin Counter 50 Overflow */
    vuint32_t B49_OVF:1;               /* Bin Counter 49 Overflow */
    vuint32_t B48_OVF:1;               /* Bin Counter 48 Overflow */
    vuint32_t B47_OVF:1;               /* Bin Counter 47 Overflow */
    vuint32_t B46_OVF:1;               /* Bin Counter 46 Overflow */
    vuint32_t B45_OVF:1;               /* Bin Counter 45 Overflow */
    vuint32_t B44_OVF:1;               /* Bin Counter 44 Overflow */
    vuint32_t B43_OVF:1;               /* Bin Counter 43 Overflow */
    vuint32_t B42_OVF:1;               /* Bin Counter 42 Overflow */
    vuint32_t B41_OVF:1;               /* Bin Counter 41 Overflow */
    vuint32_t B40_OVF:1;               /* Bin Counter 40 Overflow */
    vuint32_t B39_OVF:1;               /* Bin Counter 39 Overflow */
    vuint32_t B38_OVF:1;               /* Bin Counter 38 Overflow */
    vuint32_t B37_OVF:1;               /* Bin Counter 37 Overflow */
    vuint32_t B36_OVF:1;               /* Bin Counter 36 Overflow */
    vuint32_t B35_OVF:1;               /* Bin Counter 35 Overflow */
    vuint32_t B34_OVF:1;               /* Bin Counter 34 Overflow */
    vuint32_t B33_OVF:1;               /* Bin Counter 33 Overflow */
    vuint32_t B32_OVF:1;               /* Bin Counter 32 Overflow */
  } B;
} SPT_HIST_OVF_STATUS1_tag;

typedef union SPT_HIST_OVF_IE_union_tag { /* HIST Overflow Interrupt Enable */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;
    vuint32_t OVF_IE:1;                /* HIST Overflow Interrupt Enable */
  } B;
} SPT_HIST_OVF_IE_tag;

typedef union SPT_CS_INTEN0_union_tag { /* Interrupt Enable 0 */
  vuint32_t R;
  struct {
    vuint32_t WD_ZERO_INTEN:1;         /* Watchdog Reached Zero Interrupt Enable */
    vuint32_t _unused_1:14;
    vuint32_t BKPT3_OCC_INTEN:1;       /* BKPT3 Interrupt Enable */
    vuint32_t BKPT2_OCC_INTEN:1;       /* BKPT2 Interrupt Enable */
    vuint32_t BKPT1_OCC_INTEN:1;       /* BKPT1 Interrupt Enable */
    vuint32_t BKPT0_OCC_INTEN:1;       /* BKPT0 Interrupt Enable */
    vuint32_t JAM_OVR_INTEN:1;         /* Jamming Instruction Over Interrupt Enable */
    vuint32_t STEP_JUMP_OVR_INTEN:1;   /* Breakpoint Encountered in Step To Next Breakpoint Mode Interrupt Enable */
    vuint32_t STEP_ONCE_OVR_INTEN:1;   /* Step Once Mode Instruction Over Interrupt Enable */
    vuint32_t MD_JAM_INTEN:1;          /* Instruction Jamming Mode Interrupt Enable */
    vuint32_t MD_STEP_JUMP_INTEN:1;    /* Step To Next Breakpoint Mode Interrupt Enable */
    vuint32_t MD_STEP_ONCE_INTEN:1;    /* Step Once Mode Interrupt Enable */
    vuint32_t MD_HALT_INTEN:1;         /* Halt Mode Interrupt Enable */
    vuint32_t PS_RUN_INTEN:1;          /* Run State Interrupt Enable */
    vuint32_t PS_ASYNCSTOP_INTEN:1;    /* Asyncstop State Interrupt Enable */
    vuint32_t PS_STOP_INTEN:1;         /* Stop State Interrupt Enable */
    vuint32_t PS_DEBUG_INTEN:1;        /* Debug State Interrupt Enable */
    vuint32_t PS_WAIT_INTEN:1;         /* Wait State Interrupt Enable */
    vuint32_t PS_START_INTEN:1;        /* Start State Interrupt Enable */
  } B;
} SPT_CS_INTEN0_tag;

typedef union SPT_CS_INTEN1_union_tag { /* Interrupt Enable Register 1 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:20;
    vuint32_t JAM_ILL_JUMP_INTEN:1;    /* Illegal JUMP in Jamming Mode Interrupt Enable */
    vuint32_t JAM_ILL_NEXT_INTEN:1;    /* Illegal NEXT in Jamming Mode Interrupt Enable */
    vuint32_t JAM_ILL_LOOP_INTEN:1;    /* Illegal LOOP in Jamming mode Interrupt Enable */
    vuint32_t JAM_ILL_SYNC_INTEN:1;    /* Illegal SYNC in Jamming Mode Interrupt enable */
    vuint32_t JAM_ILL_OPCODE_INTEN:1;  /* Illegal Opcode in Jamming Mode Interrupt Enable */
    vuint32_t ILL_ADD_INTEN:1;         /* Illegal ADD Interrupt Enable */
    vuint32_t ILL_GET_INTEN:1;         /* Illegal GET Interrupt Enable */
    vuint32_t ILL_SET_INTEN:1;         /* Illegal SET Interrupt Enable */
    vuint32_t ILL_NEXT_INTEN:1;        /* Illegal NEXT Interrupt Enable */
    vuint32_t ILL_0CNTLOOP_INTEN:1;    /* Illegal Loop Count Error Interrupt Enable */
    vuint32_t ILL_LOOP_INTEN:1;        /* Illegal LOOP Interrupt Enable */
    vuint32_t ILL_OPCODE_INTEN:1;      /* Illegal Opcode Interrupt Enable */
  } B;
} SPT_CS_INTEN1_tag;

typedef union SPT_CS_EVT1_INTEN_union_tag { /* EVT1 Interrupt Enable */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;
    vuint32_t EVT1_INTEN:8;            /* EVT Interrupt Enable for Core 1 */
  } B;
} SPT_CS_EVT1_INTEN_tag;

typedef union SPT_CS_EVT2_INTEN_union_tag { /* EVT2 Interrupt Enable */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;
    vuint32_t EVT2_INTEN:8;            /* EVT Interrupt Enable for Core 2 */
  } B;
} SPT_CS_EVT2_INTEN_tag;

typedef union SPT_WR_0_15_CTRL_REG_union_tag { /* Access Control */
  vuint32_t R;
  struct {
    vuint32_t WR15_ACC_CTRL:1;         /* Work Register 15 Access Control */
    vuint32_t WR15_LCK:1;              /* Work Register 15 Lock */
    vuint32_t WR14_ACC_CTRL:1;         /* Work Register 14 Access Control */
    vuint32_t WR14_LCK:1;              /* Work Register 14 Lock */
    vuint32_t WR13_ACC_CTRL:1;         /* Work Register 13 Access Control */
    vuint32_t WR13_LCK:1;              /* Work Register 13 Lock */
    vuint32_t WR12_ACC_CTRL:1;         /* Work Register 12 Access Control */
    vuint32_t WR12_LCK:1;              /* Work Register 12 Lock */
    vuint32_t WR11_ACC_CTRL:1;         /* Work Register 11 Access Control */
    vuint32_t WR11_LCK:1;              /* Work Register 11 Lock */
    vuint32_t WR10_ACC_CTRL:1;         /* Work Register 10 Access Control */
    vuint32_t WR10_LCK:1;              /* Work Register 10 Lock */
    vuint32_t WR9_ACC_CTRL:1;          /* Work Register 9 Access Control */
    vuint32_t WR9_LCK:1;               /* Work Register 9 Lock */
    vuint32_t WR8_ACC_CTRL:1;          /* Work Register 8 Access Control */
    vuint32_t WR8_LCK:1;               /* Work Register 8 Lock */
    vuint32_t WR7_ACC_CTRL:1;          /* Work Register 7 Access Control */
    vuint32_t WR7_LCK:1;               /* Work Register 7 Lock */
    vuint32_t WR6_ACC_CTRL:1;          /* Work Register 6 Access Control */
    vuint32_t WR6_LCK:1;               /* Work Register 6 Lock */
    vuint32_t WR5_ACC_CTRL:1;          /* Work Register 5 Access Control */
    vuint32_t WR5_LCK:1;               /* Work Register 5 Lock */
    vuint32_t WR4_ACC_CTRL:1;          /* Work Register 4 Access Control */
    vuint32_t WR4_LCK:1;               /* Work Register 4 Lock */
    vuint32_t WR3_ACC_CTRL:1;          /* Work Register 3 Access Control */
    vuint32_t WR3_LCK:1;               /* Work Register 3 Lock */
    vuint32_t WR2_ACC_CTRL:1;          /* Work Register 2 Access Control */
    vuint32_t WR2_LCK:1;               /* Work Register 2 Lock */
    vuint32_t WR1_ACC_CTRL:1;          /* Work Register 1 Access Control */
    vuint32_t WR1_LCK:1;               /* Work Register 1 Lock */
    vuint32_t WR0_ACC_CTRL:1;          /* Work Register 0 Access Control */
    vuint32_t WR0_LCK:1;               /* Work Register 0 Lock */
  } B;
} SPT_WR_0_15_CTRL_REG_tag;

typedef union SPT_WR_16_31_CTRL_REG_union_tag { /* Access Control */
  vuint32_t R;
  struct {
    vuint32_t WR31_ACC_CTRL:1;         /* Work Register 31 Access Control */
    vuint32_t WR31_LCK:1;              /* Work Register 31 Lock */
    vuint32_t WR30_ACC_CTRL:1;         /* Work Register 30 Access Control */
    vuint32_t WR30_LCK:1;              /* Work Register 30 Lock */
    vuint32_t WR29_ACC_CTRL:1;         /* Work Register 29 Access Control */
    vuint32_t WR29_LCK:1;              /* Work Register 29 Lock */
    vuint32_t WR28_ACC_CTRL:1;         /* Work Register 28 Access Control */
    vuint32_t WR28_LCK:1;              /* Work Register 28 Lock */
    vuint32_t WR27_ACC_CTRL:1;         /* Work Register 27 Access Control */
    vuint32_t WR27_LCK:1;              /* Work Register 27 Lock */
    vuint32_t WR26_ACC_CTRL:1;         /* Work Register 26 Access Control */
    vuint32_t WR26_LCK:1;              /* Work Register 26 Lock */
    vuint32_t WR25_ACC_CTRL:1;         /* Work Register 25 Access Control */
    vuint32_t WR25_LCK:1;              /* Work Register 25 Lock */
    vuint32_t WR24_ACC_CTRL:1;         /* Work Register 24 Access Control */
    vuint32_t WR24_LCK:1;              /* Work Register 24 Lock */
    vuint32_t WR23_ACC_CTRL:1;         /* Work Register 23 Access Control */
    vuint32_t WR23_LCK:1;              /* Work Register 23 Lock */
    vuint32_t WR22_ACC_CTRL:1;         /* Work Register 22 Access Control */
    vuint32_t WR22_LCK:1;              /* Work Register 22 Lock */
    vuint32_t WR21_ACC_CTRL:1;         /* Work Register 21 Access Control */
    vuint32_t WR21_LCK:1;              /* Work Register 21 Lock */
    vuint32_t WR20_ACC_CTRL:1;         /* Work Register 20 Access Control */
    vuint32_t WR20_LCK:1;              /* Work Register 20 Lock */
    vuint32_t WR19_ACC_CTRL:1;         /* Work Register 19 Access Control */
    vuint32_t WR19_LCK:1;              /* Work Register 19 Lock */
    vuint32_t WR18_ACC_CTRL:1;         /* Work Register 18 Access Control */
    vuint32_t WR18_LCK:1;              /* Work Register 18 Lock */
    vuint32_t WR17_ACC_CTRL:1;         /* Work Register 17 Access Control */
    vuint32_t WR17_LCK:1;              /* Work Register 17 Lock */
    vuint32_t WR16_ACC_CTRL:1;         /* Work Register 15 Access Control */
    vuint32_t WR16_LCK:1;              /* Work Register 16 Lock */
  } B;
} SPT_WR_16_31_CTRL_REG_tag;

typedef union SPT_WR_32_47_CTRL_REG_union_tag { /* Access Control */
  vuint32_t R;
  struct {
    vuint32_t WR47_ACC_CTRL:1;         /* Work Register 47 Access Control */
    vuint32_t WR47_LCK:1;              /* Work Register 47 Lock */
    vuint32_t WR46_ACC_CTRL:1;         /* Work Register 46 Access Control */
    vuint32_t WR46_LCK:1;              /* Work Register 46 Lock */
    vuint32_t WR45_ACC_CTRL:1;         /* Work Register 45 Access Control */
    vuint32_t WR45_LCK:1;              /* Work Register 45 Lock */
    vuint32_t WR44_ACC_CTRL:1;         /* Work Register 44 Access Control */
    vuint32_t WR44_LCK:1;              /* Work Register 44 Lock */
    vuint32_t WR43_ACC_CTRL:1;         /* Work Register 43 Access Control */
    vuint32_t WR43_LCK:1;              /* Work Register 43 Lock */
    vuint32_t WR42_ACC_CTRL:1;         /* Work Register 42 Access Control */
    vuint32_t WR42_LCK:1;              /* Work Register 42 Lock */
    vuint32_t WR41_ACC_CTRL:1;         /* Work Register 41 Access Control */
    vuint32_t WR41_LCK:1;              /* Work Register 41 Lock */
    vuint32_t WR40_ACC_CTRL:1;         /* Work Register 40 Access Control */
    vuint32_t WR40_LCK:1;              /* Work Register 40 Lock */
    vuint32_t WR39_ACC_CTRL:1;         /* Work Register 39 Access Control */
    vuint32_t WR39_LCK:1;              /* Work Register 39 Lock */
    vuint32_t WR38_ACC_CTRL:1;         /* Work Register 38 Access Control */
    vuint32_t WR38_LCK:1;              /* Work Register 38 Lock */
    vuint32_t WR37_ACC_CTRL:1;         /* Work Register 37 Access Control */
    vuint32_t WR37_LCK:1;              /* Work Register 37 Lock */
    vuint32_t WR36_ACC_CTRL:1;         /* Work Register 36 Access Control */
    vuint32_t WR36_LCK:1;              /* Work Register 36 Lock */
    vuint32_t WR35_ACC_CTRL:1;         /* Work Register 35 Access Control */
    vuint32_t WR35_LCK:1;              /* Work Register 35 Lock */
    vuint32_t WR34_ACC_CTRL:1;         /* Work Register 34 Access Control */
    vuint32_t WR34_LCK:1;              /* Work Register 34 Lock */
    vuint32_t WR33_ACC_CTRL:1;         /* Work Register 33 Access Control */
    vuint32_t WR33_LCK:1;              /* Work Register 33 Lock */
    vuint32_t WR32_ACC_CTRL:1;         /* Work Register 32 Access Control */
    vuint32_t WR32_LCK:1;              /* Work Register 32 Lock */
  } B;
} SPT_WR_32_47_CTRL_REG_tag;

typedef union SPT_WR_R0_RE_union_tag { /* Work Register R0 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R0:24;              /* Real Part of Work Register R0 */
  } B;
} SPT_WR_R0_RE_tag;

typedef union SPT_WR_R0_IM_union_tag { /* Work Register R0 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R0:24;                /* Imaginary Part of Work Register R0 */
  } B;
} SPT_WR_R0_IM_tag;

typedef union SPT_WR_R1_RE_union_tag { /* Work Register R1 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R1:24;              /* Real Part of Work Register R1 */
  } B;
} SPT_WR_R1_RE_tag;

typedef union SPT_WR_R1_IM_union_tag { /* Work Register R1 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R1:24;                /* Imaginary Part of Work Register R1 */
  } B;
} SPT_WR_R1_IM_tag;

typedef union SPT_WR_R2_RE_union_tag { /* Work Register R2 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R2:24;              /* Real Part of Work Register R2 */
  } B;
} SPT_WR_R2_RE_tag;

typedef union SPT_WR_R2_IM_union_tag { /* Work Register R2 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R2:24;                /* Imaginary Part of Work Register R2 */
  } B;
} SPT_WR_R2_IM_tag;

typedef union SPT_WR_R3_RE_union_tag { /* Work Register R3 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R3:24;              /* Real Part of Work Register R3 */
  } B;
} SPT_WR_R3_RE_tag;

typedef union SPT_WR_R3_IM_union_tag { /* Work Register R3 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R3:24;                /* Imaginary Part of Work Register R3 */
  } B;
} SPT_WR_R3_IM_tag;

typedef union SPT_WR_R4_RE_union_tag { /* Work Register R4 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R4:24;              /* Real Part of Work Register R4 */
  } B;
} SPT_WR_R4_RE_tag;

typedef union SPT_WR_R4_IM_union_tag { /* Work Register R4 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R4:24;                /* Imaginary Part of Work Register R4 */
  } B;
} SPT_WR_R4_IM_tag;

typedef union SPT_WR_R5_RE_union_tag { /* Work Register R5 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R5:24;              /* Real Part of Work Register R5 */
  } B;
} SPT_WR_R5_RE_tag;

typedef union SPT_WR_R5_IM_union_tag { /* Work Register R5 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R5:24;                /* Imaginary Part of Work Register R5 */
  } B;
} SPT_WR_R5_IM_tag;

typedef union SPT_WR_R6_RE_union_tag { /* Work Register R6 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R6:24;              /* Real Part of Work Register R6 */
  } B;
} SPT_WR_R6_RE_tag;

typedef union SPT_WR_R6_IM_union_tag { /* Work Register R6 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R6:24;                /* Imaginary Part of Work Register R6 */
  } B;
} SPT_WR_R6_IM_tag;

typedef union SPT_WR_R7_RE_union_tag { /* Work Register R7 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R7:24;              /* Real Part of Work Register R7 */
  } B;
} SPT_WR_R7_RE_tag;

typedef union SPT_WR_R7_IM_union_tag { /* Work Register R7 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R7:24;                /* Imaginary Part of Work Register R7 */
  } B;
} SPT_WR_R7_IM_tag;

typedef union SPT_WR_R8_RE_union_tag { /* Work Register R8 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R8:24;              /* Real Part of Work Register R8 */
  } B;
} SPT_WR_R8_RE_tag;

typedef union SPT_WR_R8_IM_union_tag { /* Work Register R8 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R8:24;                /* Imaginary Part of Work Register R8 */
  } B;
} SPT_WR_R8_IM_tag;

typedef union SPT_WR_R9_RE_union_tag { /* Work Register R9 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R9:24;              /* Real Part of Work Register R9 */
  } B;
} SPT_WR_R9_RE_tag;

typedef union SPT_WR_R9_IM_union_tag { /* Work Register R9 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R9:24;                /* Imaginary Part of Work Register R9 */
  } B;
} SPT_WR_R9_IM_tag;

typedef union SPT_WR_R10_RE_union_tag { /* Work Register R10 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R10:24;             /* Real Part of Work Register R10 */
  } B;
} SPT_WR_R10_RE_tag;

typedef union SPT_WR_R10_IM_union_tag { /* Work Register R10 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R10:24;               /* Imaginary Part of Work Register R10 */
  } B;
} SPT_WR_R10_IM_tag;

typedef union SPT_WR_R11_RE_union_tag { /* Work Register R11 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R11:24;             /* Real Part of Work Register R11 */
  } B;
} SPT_WR_R11_RE_tag;

typedef union SPT_WR_R11_IM_union_tag { /* Work Register R11 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R11:24;               /* Imaginary Part of Work Register R11 */
  } B;
} SPT_WR_R11_IM_tag;

typedef union SPT_WR_R12_RE_union_tag { /* Work Register R12 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R12:24;             /* Real Part of Work Register R12 */
  } B;
} SPT_WR_R12_RE_tag;

typedef union SPT_WR_R12_IM_union_tag { /* Work Register R12 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R12:24;               /* Imaginary Part of Work Register R12 */
  } B;
} SPT_WR_R12_IM_tag;

typedef union SPT_WR_R13_RE_union_tag { /* Work Register R13 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R13:24;             /* Real Part of Work Register R13 */
  } B;
} SPT_WR_R13_RE_tag;

typedef union SPT_WR_R13_IM_union_tag { /* Work Register R13 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R13:24;               /* Imaginary Part of Work Register R13 */
  } B;
} SPT_WR_R13_IM_tag;

typedef union SPT_WR_R14_RE_union_tag { /* Work Register R14 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R14:24;             /* Real Part of Work Register R14 */
  } B;
} SPT_WR_R14_RE_tag;

typedef union SPT_WR_R14_IM_union_tag { /* Work Register R14 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R14:24;               /* Imaginary Part of Work Register R14 */
  } B;
} SPT_WR_R14_IM_tag;

typedef union SPT_WR_R15_RE_union_tag { /* Work Register R15 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R15:24;             /* Real Part of Work Register R15 */
  } B;
} SPT_WR_R15_RE_tag;

typedef union SPT_WR_R15_IM_union_tag { /* Work Register R15 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R15:24;               /* Imaginary Part of Work Register R15 */
  } B;
} SPT_WR_R15_IM_tag;

typedef union SPT_WR_R16_RE_union_tag { /* Work Register R16 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R16:24;             /* Real Part of Work Register R16 */
  } B;
} SPT_WR_R16_RE_tag;

typedef union SPT_WR_R16_IM_union_tag { /* Work Register R16 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R16:24;               /* Imaginary Part of Work Register R16 */
  } B;
} SPT_WR_R16_IM_tag;

typedef union SPT_WR_R17_RE_union_tag { /* Work Register R17 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R17:24;             /* Real Part of Work Register R17 */
  } B;
} SPT_WR_R17_RE_tag;

typedef union SPT_WR_R17_IM_union_tag { /* Work Register R17 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R17:24;               /* Imaginary Part of Work Register R17 */
  } B;
} SPT_WR_R17_IM_tag;

typedef union SPT_WR_R18_RE_union_tag { /* Work Register R18 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R18:24;             /* Real Part of Work Register R18 */
  } B;
} SPT_WR_R18_RE_tag;

typedef union SPT_WR_R18_IM_union_tag { /* Work Register R18 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R18:24;               /* Imaginary Part of Work Register R18 */
  } B;
} SPT_WR_R18_IM_tag;

typedef union SPT_WR_R19_RE_union_tag { /* Work Register R19 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R19:24;             /* Real Part of Work Register R19 */
  } B;
} SPT_WR_R19_RE_tag;

typedef union SPT_WR_R19_IM_union_tag { /* Work Register R19 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R19:24;               /* Imaginary Part of Work Register R19 */
  } B;
} SPT_WR_R19_IM_tag;

typedef union SPT_WR_R20_RE_union_tag { /* Work Register R20 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R20:24;             /* Real Part of Work Register R20 */
  } B;
} SPT_WR_R20_RE_tag;

typedef union SPT_WR_R20_IM_union_tag { /* Work Register R20 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R20:24;               /* Imaginary Part of Work Register R20 */
  } B;
} SPT_WR_R20_IM_tag;

typedef union SPT_WR_R21_RE_union_tag { /* Work Register R21 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R21:24;             /* Real Part of Work Register R21 */
  } B;
} SPT_WR_R21_RE_tag;

typedef union SPT_WR_R21_IM_union_tag { /* Work Register R21 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R21:24;               /* Imaginary Part of Work Register R21 */
  } B;
} SPT_WR_R21_IM_tag;

typedef union SPT_WR_R22_RE_union_tag { /* Work Register R22 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R22:24;             /* Real Part of Work Register R22 */
  } B;
} SPT_WR_R22_RE_tag;

typedef union SPT_WR_R22_IM_union_tag { /* Work Register R22 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R22:24;               /* Imaginary Part of Work Register R22 */
  } B;
} SPT_WR_R22_IM_tag;

typedef union SPT_WR_R23_RE_union_tag { /* Work Register R23 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R23:24;             /* Real Part of Work Register R23 */
  } B;
} SPT_WR_R23_RE_tag;

typedef union SPT_WR_R23_IM_union_tag { /* Work Register R23 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R23:24;               /* Imaginary Part of Work Register R23 */
  } B;
} SPT_WR_R23_IM_tag;

typedef union SPT_WR_R24_RE_union_tag { /* Work Register R24 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R24:24;             /* Real Part of Work Register R24 */
  } B;
} SPT_WR_R24_RE_tag;

typedef union SPT_WR_R24_IM_union_tag { /* Work Register R24 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R24:24;               /* Imaginary Part of Work Register R24 */
  } B;
} SPT_WR_R24_IM_tag;

typedef union SPT_WR_R25_RE_union_tag { /* Work Register R25 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R25:24;             /* Real Part of Work Register R25 */
  } B;
} SPT_WR_R25_RE_tag;

typedef union SPT_WR_R25_IM_union_tag { /* Work Register R25 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R25:24;               /* Imaginary Part of Work Register R25 */
  } B;
} SPT_WR_R25_IM_tag;

typedef union SPT_WR_R26_RE_union_tag { /* Work Register R26 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R26:24;             /* Real Part of Work Register R26 */
  } B;
} SPT_WR_R26_RE_tag;

typedef union SPT_WR_R26_IM_union_tag { /* Work Register R26 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R26:24;               /* Imaginary Part of Work Register R26 */
  } B;
} SPT_WR_R26_IM_tag;

typedef union SPT_WR_R27_RE_union_tag { /* Work Register R27 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R27:24;             /* Real Part of Work Register R27 */
  } B;
} SPT_WR_R27_RE_tag;

typedef union SPT_WR_R27_IM_union_tag { /* Work Register R27 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R27:24;               /* Imaginary Part of Work Register R27 */
  } B;
} SPT_WR_R27_IM_tag;

typedef union SPT_WR_R28_RE_union_tag { /* Work Register R28 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R28:24;             /* Real Part of Work Register R28 */
  } B;
} SPT_WR_R28_RE_tag;

typedef union SPT_WR_R28_IM_union_tag { /* Work Register R28 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R28:24;               /* Imaginary Part of Work Register R28 */
  } B;
} SPT_WR_R28_IM_tag;

typedef union SPT_WR_R29_RE_union_tag { /* Work Register R29 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R29:24;             /* Real Part of Work Register R29 */
  } B;
} SPT_WR_R29_RE_tag;

typedef union SPT_WR_R29_IM_union_tag { /* Work Register R29 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R29:24;               /* Imaginary Part of Work Register R29 */
  } B;
} SPT_WR_R29_IM_tag;

typedef union SPT_WR_R30_RE_union_tag { /* Work Register R30 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R30:24;             /* Real Part of Work Register R30 */
  } B;
} SPT_WR_R30_RE_tag;

typedef union SPT_WR_R30_IM_union_tag { /* Work Register R30 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R30:24;               /* Imaginary Part of Work Register R30 */
  } B;
} SPT_WR_R30_IM_tag;

typedef union SPT_WR_R31_RE_union_tag { /* Work Register R31 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R31:24;             /* Real Part of Work Register R31 */
  } B;
} SPT_WR_R31_RE_tag;

typedef union SPT_WR_R31_IM_union_tag { /* Work Register R31 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R31:24;               /* Imaginary Part of Work Register R31 */
  } B;
} SPT_WR_R31_IM_tag;

typedef union SPT_WR_R32_RE_union_tag { /* Work Register R32 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R32:24;             /* Real Part of Work Register R32 */
  } B;
} SPT_WR_R32_RE_tag;

typedef union SPT_WR_R32_IM_union_tag { /* Work Register R32 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R32:24;               /* Imaginary Part of Work Register R32 */
  } B;
} SPT_WR_R32_IM_tag;

typedef union SPT_WR_R33_RE_union_tag { /* Work Register R33 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R33:24;             /* Real Part of Work Register R33 */
  } B;
} SPT_WR_R33_RE_tag;

typedef union SPT_WR_R33_IM_union_tag { /* Work Register R33 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R33:24;               /* Imaginary Part of Work Register R33 */
  } B;
} SPT_WR_R33_IM_tag;

typedef union SPT_WR_R34_RE_union_tag { /* Work Register R34 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R34:24;             /* Real Part of Work Register R34 */
  } B;
} SPT_WR_R34_RE_tag;

typedef union SPT_WR_R34_IM_union_tag { /* Work Register R34 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R34:24;               /* Imaginary Part of Work Register R34 */
  } B;
} SPT_WR_R34_IM_tag;

typedef union SPT_WR_R35_RE_union_tag { /* Work Register R35 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R35:24;             /* Real Part of Work Register R35 */
  } B;
} SPT_WR_R35_RE_tag;

typedef union SPT_WR_R35_IM_union_tag { /* Work Register R35 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R35:24;               /* Imaginary Part of Work Register R35 */
  } B;
} SPT_WR_R35_IM_tag;

typedef union SPT_WR_R36_RE_union_tag { /* Work Register R36 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R36:24;             /* Real Part of Work Register R36 */
  } B;
} SPT_WR_R36_RE_tag;

typedef union SPT_WR_R36_IM_union_tag { /* Work Register R36 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R36:24;               /* Imaginary Part of Work Register R36 */
  } B;
} SPT_WR_R36_IM_tag;

typedef union SPT_WR_R37_RE_union_tag { /* Work Register R37 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R37:24;             /* Real Part of Work Register R37 */
  } B;
} SPT_WR_R37_RE_tag;

typedef union SPT_WR_R37_IM_union_tag { /* Work Register R37 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R37:24;               /* Imaginary Part of Work Register R37 */
  } B;
} SPT_WR_R37_IM_tag;

typedef union SPT_WR_R38_RE_union_tag { /* Work Register R38 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R38:24;             /* Real Part of Work Register R38 */
  } B;
} SPT_WR_R38_RE_tag;

typedef union SPT_WR_R38_IM_union_tag { /* Work Register R38 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R38:24;               /* Imaginary Part of Work Register R38 */
  } B;
} SPT_WR_R38_IM_tag;

typedef union SPT_WR_R39_RE_union_tag { /* Work Register R39 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R39:24;             /* Real Part of Work Register R39 */
  } B;
} SPT_WR_R39_RE_tag;

typedef union SPT_WR_R39_IM_union_tag { /* Work Register R39 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R39:24;               /* Imaginary Part of Work Register R39 */
  } B;
} SPT_WR_R39_IM_tag;

typedef union SPT_WR_R40_RE_union_tag { /* Work Register R40 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R40:24;             /* Real Part of Work Register R40 */
  } B;
} SPT_WR_R40_RE_tag;

typedef union SPT_WR_R40_IM_union_tag { /* Work Register R40 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R40:24;               /* Imaginary Part of Work Register R40 */
  } B;
} SPT_WR_R40_IM_tag;

typedef union SPT_WR_R41_RE_union_tag { /* Work Register R41 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R41:24;             /* Real Part of Work Register R41 */
  } B;
} SPT_WR_R41_RE_tag;

typedef union SPT_WR_R41_IM_union_tag { /* Work Register R41 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R41:24;               /* Imaginary Part of Work Register R41 */
  } B;
} SPT_WR_R41_IM_tag;

typedef union SPT_WR_R42_RE_union_tag { /* Work Register R42 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R42:24;             /* Real Part of Work Register R42 */
  } B;
} SPT_WR_R42_RE_tag;

typedef union SPT_WR_R42_IM_union_tag { /* Work Register R42 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R42:24;               /* Imaginary Part of Work Register R42 */
  } B;
} SPT_WR_R42_IM_tag;

typedef union SPT_WR_R43_RE_union_tag { /* Work Register R43 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R43:24;             /* Real Part of Work Register R43 */
  } B;
} SPT_WR_R43_RE_tag;

typedef union SPT_WR_R43_IM_union_tag { /* Work Register R43 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R43:24;               /* Imaginary Part of Work Register R43 */
  } B;
} SPT_WR_R43_IM_tag;

typedef union SPT_WR_R44_RE_union_tag { /* Work Register R44 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R44:24;             /* Real Part of Work Register R44 */
  } B;
} SPT_WR_R44_RE_tag;

typedef union SPT_WR_R44_IM_union_tag { /* Work Register R44 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R44:24;               /* Imaginary Part of Work Register R44 */
  } B;
} SPT_WR_R44_IM_tag;

typedef union SPT_WR_R45_RE_union_tag { /* Work Register R45 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R45:24;             /* Real Part of Work Register R45 */
  } B;
} SPT_WR_R45_RE_tag;

typedef union SPT_WR_R45_IM_union_tag { /* Work Register R45 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R45:24;               /* Imaginary Part of Work Register R45 */
  } B;
} SPT_WR_R45_IM_tag;

typedef union SPT_WR_R46_RE_union_tag { /* Work Register R46 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R46:24;             /* Real Part of Work Register R46 */
  } B;
} SPT_WR_R46_RE_tag;

typedef union SPT_WR_R46_IM_union_tag { /* Work Register R46 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R46:24;               /* Imaginary Part of Work Register R46 */
  } B;
} SPT_WR_R46_IM_tag;

typedef union SPT_WR_R47_RE_union_tag { /* Work Register R47 Real */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t REAL_R47:24;             /* Real Part of Work Register R47 */
  } B;
} SPT_WR_R47_RE_tag;

typedef union SPT_WR_R47_IM_union_tag { /* Work Register R47 Imaginary */
  vuint32_t R;
  struct {
    vuint32_t SIGN_EXT:8;              /* Sign Extension */
    vuint32_t IM_R47:24;               /* Imaginary Part of Work Register R47 */
  } B;
} SPT_WR_R47_IM_tag;

typedef union SPT_CS_CHRP_CNTR_RST_union_tag { /* External Events Chirp Counter Reset Mapping */
  vuint32_t R;
  struct {
    vuint32_t RST_CHRP_CNT_EVT_1:4;    /* Chirp Counter 1 Reset Event */
    vuint32_t RST_CHRP_CNT_EVT_0:4;    /* Chirp Counter 0 Reset Event */
    vuint32_t _unused_8:24;
  } B;
} SPT_CS_CHRP_CNTR_RST_tag;

typedef union SPT_CS_CHRP_CNTR_LD_union_tag { /* External Events Chirp Counter Load Mapping */
  vuint32_t R;
  struct {
    vuint32_t LOAD_CHRP_CNT_EVT_1:4;   /* Chirp Counter 1 Load Event */
    vuint32_t LOAD_CHRP_CNT_EVT_0:4;   /* Chirp Counter 0 Load Event */
    vuint32_t _unused_8:24;
  } B;
} SPT_CS_CHRP_CNTR_LD_tag;

struct SPT_tag {
  SPT_GBL_CTRL_tag GBL_CTRL;           /* SPT Global Control */
  uint8_t SPT_reserved0[188];
  SPT_CS_PG_ST_ADDR_tag CS_PG_ST_ADDR; /* Program Start Address */
  SPT_CS_MODE_CTRL_tag CS_MODE_CTRL;   /* Mode Control */
  SPT_CS_WD_COUNT_tag CS_WD_COUNT;     /* Watchdog Counter */
  SPT_CS_BKPT0_ADDR_tag CS_BKPT0_ADDR; /* Breakpoint 0 Address */
  SPT_CS_BKPT1_ADDR_tag CS_BKPT1_ADDR; /* Breakpoint 1 Address */
  SPT_CS_BKPT2_ADDR_tag CS_BKPT2_ADDR; /* Breakpoint 2 Address */
  SPT_CS_BKPT3_ADDR_tag CS_BKPT3_ADDR; /* Breakpoint 3 Address */
  SPT_CS_JAM_INST0_tag CS_JAM_INST0;   /* Jamming Instruction 0 */
  SPT_CS_JAM_INST1_tag CS_JAM_INST1;   /* Jamming Instruction 1 */
  SPT_CS_JAM_INST2_tag CS_JAM_INST2;   /* Jamming Instruction 2 */
  SPT_CS_JAM_INST3_tag CS_JAM_INST3;   /* Jamming Instruction 3 */
  SPT_CS_CURR_INST_ADDR_tag CS_CURR_INST_ADDR; /* Current Instruction Address */
  SPT_CS_CURR_INST0_tag CS_CURR_INST0; /* Current Instruction 0 */
  SPT_CS_CURR_INST1_tag CS_CURR_INST1; /* Current Instruction 1 */
  SPT_CS_CURR_INST2_tag CS_CURR_INST2; /* Current Instruction 2 */
  SPT_CS_CURR_INST3_tag CS_CURR_INST3; /* Current Instruction 3 */
  SPT_CS_LOOPCNTR01_tag CS_LOOPCNTR01; /* Loop Counters 0 and 1 */
  SPT_CS_LOOPCNTR23_tag CS_LOOPCNTR23; /* Loop Counters 2 and 3 */
  SPT_CS_ERR_INST_ADDR_tag CS_ERR_INST_ADDR; /* Error Instruction Address */
  SPT_CS_ERR_INST0_tag CS_ERR_INST0;   /* Error Instruction 0 */
  SPT_CS_ERR_INST1_tag CS_ERR_INST1;   /* Error Instruction 1 */
  SPT_CS_ERR_INST2_tag CS_ERR_INST2;   /* Error Instruction 2 */
  SPT_CS_ERR_INST3_tag CS_ERR_INST3;   /* Error Instruction 3 */
  SPT_CS_STATUS0_tag CS_STATUS0;       /* General Status 0 */
  SPT_CS_STATUS1_tag CS_STATUS1;       /* General Status 1 */
  SPT_CS_STATUS2_tag CS_STATUS2;       /* General Status 2 */
  SPT_CS_STATUS3_tag CS_STATUS3;       /* General Status 3 */
  SPT_CS_EVTREG1_tag CS_EVTREG1;       /* EVT1 Status */
  SPT_CS_EVTREG2_tag CS_EVTREG2;       /* EVT2 Status */
  SPT_CS_SW_EVTREG_tag CS_SW_EVTREG;   /* Software Event Trigger */
  SPT_CORE1_VER_EVT_tag CORE1_VER_EVT; /* Core 1 Version Register Events */
  SPT_CORE2_VER_EVT_tag CORE2_VER_EVT; /* Core 2 Version Register Events */
  SPT_EVENT_RST_CTRL_tag EVENT_RST_CTRL; /* SPT Event Reset Control */
  uint8_t SPT_reserved1[60];
  SPT_PDMA_LFSR_LOAD_VAL_HIGH_tag PDMA_LFSR_LOAD_VAL_HIGH; /* LFSR Load High Value */
  SPT_PDMA_LFSR_LOAD_VAL_LOW_tag PDMA_LFSR_LOAD_VAL_LOW; /* LFSR Load Low Value */
  SPT_PDMA_CONTROL_tag PDMA_CONTROL;   /* PDMA Control */
  uint8_t SPT_reserved2[52];
  SPT_PDMA_TRANSFER_COUNT_STATUS_tag PDMA_TRANSFER_COUNT_STATUS; /* PDMA Transfer Count Status */
  SPT_PDMA_FMTB_EXP_ADDR_STATUS_tag PDMA_FMTB_EXP_ADDR_STATUS; /* PDMA Format B Exponent Address Status */
  uint8_t SPT_reserved3[52];
  SPT_MEM_ERR_INJECT_CTRL_tag MEM_ERR_INJECT_CTRL; /* Memory Error Injection */
  SPT_MEM_ERR_STATUS_tag MEM_ERR_STATUS; /* Memory Error Status */
  SPT_MEM_ERR_INT_EN_tag MEM_ERR_INT_EN; /* Memory Error Interrupt Enable */
  SPT_DMA_ERR_STATUS_tag DMA_ERR_STATUS; /* DMA Error Status */
  SPT_DMA_ERR_INT_EN_tag DMA_ERR_INT_EN; /* DMA Error Interrupt Enable */
  SPT_GBL_STATUS_tag GBL_STATUS;       /* Global Status */
  SPT_GBL_STATUS_IE_tag GBL_STATUS_IE; /* Global Status Interrupt Enable */
  SPT_HW_ACC_ERR_STATUS_tag HW_ACC_ERR_STATUS; /* Hardware Accelerator Error Status */
  SPT_HW_ACC_ERR_IE_tag HW_ACC_ERR_IE; /* Hardware Accelerator Error Interrupt Enable */
  SPT_HIST_OVF_STATUS0_tag HIST_OVF_STATUS0; /* HIST Overflow Status 0 */
  SPT_HIST_OVF_STATUS1_tag HIST_OVF_STATUS1; /* HIST Overflow Status 1 */
  SPT_HIST_OVF_IE_tag HIST_OVF_IE;     /* HIST Overflow Interrupt Enable */
  SPT_CS_INTEN0_tag CS_INTEN0;         /* Interrupt Enable 0 */
  SPT_CS_INTEN1_tag CS_INTEN1;         /* Interrupt Enable Register 1 */
  SPT_CS_EVT1_INTEN_tag CS_EVT1_INTEN; /* EVT1 Interrupt Enable */
  SPT_CS_EVT2_INTEN_tag CS_EVT2_INTEN; /* EVT2 Interrupt Enable */
  uint8_t SPT_reserved4[4];
  SPT_WR_0_15_CTRL_REG_tag WR_0_15_CTRL_REG; /* Access Control */
  SPT_WR_16_31_CTRL_REG_tag WR_16_31_CTRL_REG; /* Access Control */
  SPT_WR_32_47_CTRL_REG_tag WR_32_47_CTRL_REG; /* Access Control */
  uint8_t SPT_reserved5[4];
  SPT_WR_R0_RE_tag WR_R0_RE;           /* Work Register R0 Real */
  SPT_WR_R0_IM_tag WR_R0_IM;           /* Work Register R0 Imaginary */
  SPT_WR_R1_RE_tag WR_R1_RE;           /* Work Register R1 Real */
  SPT_WR_R1_IM_tag WR_R1_IM;           /* Work Register R1 Imaginary */
  SPT_WR_R2_RE_tag WR_R2_RE;           /* Work Register R2 Real */
  SPT_WR_R2_IM_tag WR_R2_IM;           /* Work Register R2 Imaginary */
  SPT_WR_R3_RE_tag WR_R3_RE;           /* Work Register R3 Real */
  SPT_WR_R3_IM_tag WR_R3_IM;           /* Work Register R3 Imaginary */
  SPT_WR_R4_RE_tag WR_R4_RE;           /* Work Register R4 Real */
  SPT_WR_R4_IM_tag WR_R4_IM;           /* Work Register R4 Imaginary */
  SPT_WR_R5_RE_tag WR_R5_RE;           /* Work Register R5 Real */
  SPT_WR_R5_IM_tag WR_R5_IM;           /* Work Register R5 Imaginary */
  SPT_WR_R6_RE_tag WR_R6_RE;           /* Work Register R6 Real */
  SPT_WR_R6_IM_tag WR_R6_IM;           /* Work Register R6 Imaginary */
  SPT_WR_R7_RE_tag WR_R7_RE;           /* Work Register R7 Real */
  SPT_WR_R7_IM_tag WR_R7_IM;           /* Work Register R7 Imaginary */
  SPT_WR_R8_RE_tag WR_R8_RE;           /* Work Register R8 Real */
  SPT_WR_R8_IM_tag WR_R8_IM;           /* Work Register R8 Imaginary */
  SPT_WR_R9_RE_tag WR_R9_RE;           /* Work Register R9 Real */
  SPT_WR_R9_IM_tag WR_R9_IM;           /* Work Register R9 Imaginary */
  SPT_WR_R10_RE_tag WR_R10_RE;         /* Work Register R10 Real */
  SPT_WR_R10_IM_tag WR_R10_IM;         /* Work Register R10 Imaginary */
  SPT_WR_R11_RE_tag WR_R11_RE;         /* Work Register R11 Real */
  SPT_WR_R11_IM_tag WR_R11_IM;         /* Work Register R11 Imaginary */
  SPT_WR_R12_RE_tag WR_R12_RE;         /* Work Register R12 Real */
  SPT_WR_R12_IM_tag WR_R12_IM;         /* Work Register R12 Imaginary */
  SPT_WR_R13_RE_tag WR_R13_RE;         /* Work Register R13 Real */
  SPT_WR_R13_IM_tag WR_R13_IM;         /* Work Register R13 Imaginary */
  SPT_WR_R14_RE_tag WR_R14_RE;         /* Work Register R14 Real */
  SPT_WR_R14_IM_tag WR_R14_IM;         /* Work Register R14 Imaginary */
  SPT_WR_R15_RE_tag WR_R15_RE;         /* Work Register R15 Real */
  SPT_WR_R15_IM_tag WR_R15_IM;         /* Work Register R15 Imaginary */
  SPT_WR_R16_RE_tag WR_R16_RE;         /* Work Register R16 Real */
  SPT_WR_R16_IM_tag WR_R16_IM;         /* Work Register R16 Imaginary */
  SPT_WR_R17_RE_tag WR_R17_RE;         /* Work Register R17 Real */
  SPT_WR_R17_IM_tag WR_R17_IM;         /* Work Register R17 Imaginary */
  SPT_WR_R18_RE_tag WR_R18_RE;         /* Work Register R18 Real */
  SPT_WR_R18_IM_tag WR_R18_IM;         /* Work Register R18 Imaginary */
  SPT_WR_R19_RE_tag WR_R19_RE;         /* Work Register R19 Real */
  SPT_WR_R19_IM_tag WR_R19_IM;         /* Work Register R19 Imaginary */
  SPT_WR_R20_RE_tag WR_R20_RE;         /* Work Register R20 Real */
  SPT_WR_R20_IM_tag WR_R20_IM;         /* Work Register R20 Imaginary */
  SPT_WR_R21_RE_tag WR_R21_RE;         /* Work Register R21 Real */
  SPT_WR_R21_IM_tag WR_R21_IM;         /* Work Register R21 Imaginary */
  SPT_WR_R22_RE_tag WR_R22_RE;         /* Work Register R22 Real */
  SPT_WR_R22_IM_tag WR_R22_IM;         /* Work Register R22 Imaginary */
  SPT_WR_R23_RE_tag WR_R23_RE;         /* Work Register R23 Real */
  SPT_WR_R23_IM_tag WR_R23_IM;         /* Work Register R23 Imaginary */
  SPT_WR_R24_RE_tag WR_R24_RE;         /* Work Register R24 Real */
  SPT_WR_R24_IM_tag WR_R24_IM;         /* Work Register R24 Imaginary */
  SPT_WR_R25_RE_tag WR_R25_RE;         /* Work Register R25 Real */
  SPT_WR_R25_IM_tag WR_R25_IM;         /* Work Register R25 Imaginary */
  SPT_WR_R26_RE_tag WR_R26_RE;         /* Work Register R26 Real */
  SPT_WR_R26_IM_tag WR_R26_IM;         /* Work Register R26 Imaginary */
  SPT_WR_R27_RE_tag WR_R27_RE;         /* Work Register R27 Real */
  SPT_WR_R27_IM_tag WR_R27_IM;         /* Work Register R27 Imaginary */
  SPT_WR_R28_RE_tag WR_R28_RE;         /* Work Register R28 Real */
  SPT_WR_R28_IM_tag WR_R28_IM;         /* Work Register R28 Imaginary */
  SPT_WR_R29_RE_tag WR_R29_RE;         /* Work Register R29 Real */
  SPT_WR_R29_IM_tag WR_R29_IM;         /* Work Register R29 Imaginary */
  SPT_WR_R30_RE_tag WR_R30_RE;         /* Work Register R30 Real */
  SPT_WR_R30_IM_tag WR_R30_IM;         /* Work Register R30 Imaginary */
  SPT_WR_R31_RE_tag WR_R31_RE;         /* Work Register R31 Real */
  SPT_WR_R31_IM_tag WR_R31_IM;         /* Work Register R31 Imaginary */
  SPT_WR_R32_RE_tag WR_R32_RE;         /* Work Register R32 Real */
  SPT_WR_R32_IM_tag WR_R32_IM;         /* Work Register R32 Imaginary */
  SPT_WR_R33_RE_tag WR_R33_RE;         /* Work Register R33 Real */
  SPT_WR_R33_IM_tag WR_R33_IM;         /* Work Register R33 Imaginary */
  SPT_WR_R34_RE_tag WR_R34_RE;         /* Work Register R34 Real */
  SPT_WR_R34_IM_tag WR_R34_IM;         /* Work Register R34 Imaginary */
  SPT_WR_R35_RE_tag WR_R35_RE;         /* Work Register R35 Real */
  SPT_WR_R35_IM_tag WR_R35_IM;         /* Work Register R35 Imaginary */
  SPT_WR_R36_RE_tag WR_R36_RE;         /* Work Register R36 Real */
  SPT_WR_R36_IM_tag WR_R36_IM;         /* Work Register R36 Imaginary */
  SPT_WR_R37_RE_tag WR_R37_RE;         /* Work Register R37 Real */
  SPT_WR_R37_IM_tag WR_R37_IM;         /* Work Register R37 Imaginary */
  SPT_WR_R38_RE_tag WR_R38_RE;         /* Work Register R38 Real */
  SPT_WR_R38_IM_tag WR_R38_IM;         /* Work Register R38 Imaginary */
  SPT_WR_R39_RE_tag WR_R39_RE;         /* Work Register R39 Real */
  SPT_WR_R39_IM_tag WR_R39_IM;         /* Work Register R39 Imaginary */
  SPT_WR_R40_RE_tag WR_R40_RE;         /* Work Register R40 Real */
  SPT_WR_R40_IM_tag WR_R40_IM;         /* Work Register R40 Imaginary */
  SPT_WR_R41_RE_tag WR_R41_RE;         /* Work Register R41 Real */
  SPT_WR_R41_IM_tag WR_R41_IM;         /* Work Register R41 Imaginary */
  SPT_WR_R42_RE_tag WR_R42_RE;         /* Work Register R42 Real */
  SPT_WR_R42_IM_tag WR_R42_IM;         /* Work Register R42 Imaginary */
  SPT_WR_R43_RE_tag WR_R43_RE;         /* Work Register R43 Real */
  SPT_WR_R43_IM_tag WR_R43_IM;         /* Work Register R43 Imaginary */
  SPT_WR_R44_RE_tag WR_R44_RE;         /* Work Register R44 Real */
  SPT_WR_R44_IM_tag WR_R44_IM;         /* Work Register R44 Imaginary */
  SPT_WR_R45_RE_tag WR_R45_RE;         /* Work Register R45 Real */
  SPT_WR_R45_IM_tag WR_R45_IM;         /* Work Register R45 Imaginary */
  SPT_WR_R46_RE_tag WR_R46_RE;         /* Work Register R46 Real */
  SPT_WR_R46_IM_tag WR_R46_IM;         /* Work Register R46 Imaginary */
  SPT_WR_R47_RE_tag WR_R47_RE;         /* Work Register R47 Real */
  SPT_WR_R47_IM_tag WR_R47_IM;         /* Work Register R47 Imaginary */
  SPT_CS_CHRP_CNTR_RST_tag CS_CHRP_CNTR_RST; /* External Events Chirp Counter Reset Mapping */
  SPT_CS_CHRP_CNTR_LD_tag CS_CHRP_CNTR_LD; /* External Events Chirp Counter Load Mapping */
};


/* ============================================================================
   =============================== Module: SRC ================================
   ============================================================================ */

typedef union SRC_BMR1_union_tag {     /* Boot Mode 1 */
  vuint32_t R;
  struct {
    vuint32_t _unused_14:18;
    vuint32_t BOOT_CFG:14;             /* Boot configuration */
  } B;
} SRC_BMR1_tag;

typedef union SRC_BMR2_union_tag {     /* Boot Mode 2 */
  vuint32_t R;
  struct {
    vuint32_t _unused_30:2;
    vuint32_t _unused_29:1;
    vuint32_t _unused_28:1;
    vuint32_t _unused_27:1;
    vuint32_t BOOTMOD1:1;              /* BootROM Boot mode indication */
    vuint32_t BOOTMOD0:1;              /* BootROM Boot mode indication */
    vuint32_t _unused_9:16;
    vuint32_t FUSE_SEL:1;              /* Boot fuse selection */
    vuint32_t _unused_2:6;
    vuint32_t CSE_SEC_BOOT_MODE:2;     /* These bits select the secure boot mode of the CSE. */
  } B;
} SRC_BMR2_tag;

typedef union SRC_LC_union_tag {       /* Life Cycle Latch Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_10:22;
    vuint32_t FA:1;                    /* FA life cycle value latched */
    vuint32_t IN_FIELD:1;              /* IN_FIELD life cycle value latched */
    vuint32_t OEM_PROD:1;              /* OEM_PROD life cycle value latched */
    vuint32_t CUST_DEL:1;              /* CUST_DEL life cycle value latched */
    vuint32_t _unused_4:2;
    vuint32_t _unused_3:1;
    vuint32_t _unused_0:3;
  } B;
} SRC_LC_tag;

typedef union SRC_SEC_BOOT_union_tag { /* Secure Boot */
  vuint32_t R;
  struct {
    vuint32_t _unused_1:31;
    vuint32_t BOOTROM_STAT:1;          /* Boot ROM execution status */
  } B;
} SRC_SEC_BOOT_tag;

struct SRC_tag {
  SRC_BMR1_tag BMR1;                   /* Boot Mode 1 */
  SRC_BMR2_tag BMR2;                   /* Boot Mode 2 */
  SRC_LC_tag LC;                       /* Life Cycle Latch Register */
  SRC_SEC_BOOT_tag SEC_BOOT;           /* Secure Boot */
};


/* ============================================================================
   =============================== Module: STCU2 ==============================
   ============================================================================ */

typedef union STCU2_RUNSW_union_tag {  /* STCU2 Run Software */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:20;            /* Reserved */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:6;            /* Reserved */
    vuint32_t _unused_30:1;            /* Reserved */
    vuint32_t RUNSW:1;
  } B;
} STCU2_RUNSW_tag;

typedef union STCU2_SKC_union_tag {    /* STCU2 SK Code */
  vuint32_t R;
  struct {
    vuint32_t SKC:32;                  /* STCU2 SK Code */
  } B;
} STCU2_SKC_tag;

typedef union STCU2_CFG_union_tag {    /* STCU2 Configuration */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t PTR:10;
    vuint32_t LB_DELAY:8;
    vuint32_t _unused_19:4;            /* Reserved */
    vuint32_t WRP:1;
    vuint32_t _unused_24:2;            /* Reserved */
    vuint32_t _unused_26:1;            /* Reserved */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t CLK_CFG:3;
  } B;
} STCU2_CFG_tag;

typedef union STCU2_WDG_union_tag {    /* STCU2 Watchdog Granularity */
  vuint32_t R;
  struct {
    vuint32_t WDGEOC:32;
  } B;
} STCU2_WDG_tag;

typedef union STCU2_ERR_STAT_union_tag { /* STCU2 Error */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:6;             /* Reserved */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t _unused_8:3;             /* Reserved */
    vuint32_t LOCKESW:1;
    vuint32_t WDTOSW:1;
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t ENGESW:1;
    vuint32_t INVPSW:1;
    vuint32_t _unused_16:6;            /* Reserved */
    vuint32_t UFSF:1;
    vuint32_t RFSF:1;
    vuint32_t _unused_24:3;            /* Reserved */
    vuint32_t _unused_27:5;            /* Reserved */
  } B;
} STCU2_ERR_STAT_tag;

typedef union STCU2_ERR_FM_union_tag { /* STCU2 Error FM */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:27;            /* Reserved */
    vuint32_t LOCKEUFM:1;
    vuint32_t WDTOUFM:1;
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t ENGEUFM:1;
    vuint32_t INVPUFM:1;
  } B;
} STCU2_ERR_FM_tag;

typedef union STCU2_LBSSW0_union_tag { /* STCU2 Online LBIST Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t LBSSW7:1;                /* LBSSW7 */
    vuint32_t LBSSW6:1;                /* LBSSW6 */
    vuint32_t LBSSW5:1;                /* LBSSW5 */
    vuint32_t LBSSW4:1;                /* LBSSW4 */
    vuint32_t LBSSW3:1;                /* LBSSW3 */
    vuint32_t LBSSW2:1;                /* LBSSW2 */
    vuint32_t LBSSW1:1;                /* LBSSW1 */
    vuint32_t LBSSW0:1;                /* LBSSW0 */
  } B;
} STCU2_LBSSW0_tag;

typedef union STCU2_LBESW0_union_tag { /* STCU2 Online LBIST End Flag */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t LBESW7:1;                /* LBESW */
    vuint32_t LBESW6:1;                /* LBESW */
    vuint32_t LBESW5:1;                /* LBESW */
    vuint32_t LBESW4:1;                /* LBESW */
    vuint32_t LBESW3:1;                /* LBESW */
    vuint32_t LBESW2:1;                /* LBESW */
    vuint32_t LBESW1:1;                /* LBESW */
    vuint32_t LBESW0:1;                /* LBESW */
  } B;
} STCU2_LBESW0_tag;

typedef union STCU2_LBUFM0_union_tag { /* STCU2 Online LBIST Unrecoverable FM */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t LBUFM7:1;
    vuint32_t LBUFM6:1;
    vuint32_t LBUFM5:1;
    vuint32_t LBUFM4:1;
    vuint32_t LBUFM3:1;
    vuint32_t LBUFM2:1;
    vuint32_t LBUFM1:1;
    vuint32_t LBUFM0:1;
  } B;
} STCU2_LBUFM0_tag;

typedef union STCU2_MBSSW0_union_tag { /* STCU2 Online MBIST Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved */
    vuint32_t MBSSW29:1;               /* MBSSW */
    vuint32_t MBSSW28:1;               /* MBSSW */
    vuint32_t MBSSW27:1;               /* MBSSW */
    vuint32_t MBSSW26:1;               /* MBSSW */
    vuint32_t MBSSW25:1;               /* MBSSW */
    vuint32_t MBSSW24:1;               /* MBSSW */
    vuint32_t MBSSW23:1;               /* MBSSW */
    vuint32_t MBSSW22:1;               /* MBSSW */
    vuint32_t MBSSW21:1;               /* MBSSW */
    vuint32_t MBSSW20:1;               /* MBSSW */
    vuint32_t MBSSW19:1;               /* MBSSW */
    vuint32_t MBSSW18:1;               /* MBSSW */
    vuint32_t MBSSW17:1;               /* MBSSW */
    vuint32_t MBSSW16:1;               /* MBSSW */
    vuint32_t MBSSW15:1;               /* MBSSW */
    vuint32_t MBSSW14:1;               /* MBSSW */
    vuint32_t MBSSW13:1;               /* MBSSW */
    vuint32_t MBSSW12:1;               /* MBSSW */
    vuint32_t MBSSW11:1;               /* MBSSW */
    vuint32_t MBSSW10:1;               /* MBSSW */
    vuint32_t MBSSW9:1;                /* MBSSW */
    vuint32_t MBSSW8:1;                /* MBSSW */
    vuint32_t MBSSW7:1;                /* MBSSW */
    vuint32_t MBSSW6:1;                /* MBSSW */
    vuint32_t MBSSW5:1;                /* MBSSW */
    vuint32_t MBSSW4:1;                /* MBSSW */
    vuint32_t MBSSW3:1;                /* MBSSW */
    vuint32_t MBSSW2:1;                /* MBSSW */
    vuint32_t MBSSW1:1;                /* MBSSW */
    vuint32_t MBSSW0:1;                /* MBSSW */
  } B;
} STCU2_MBSSW0_tag;

typedef union STCU2_MBESW0_union_tag { /* STCU2 Online MBIST End Flag */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved */
    vuint32_t MBESW29:1;
    vuint32_t MBESW28:1;
    vuint32_t MBESW27:1;
    vuint32_t MBESW26:1;
    vuint32_t MBESW25:1;
    vuint32_t MBESW24:1;
    vuint32_t MBESW23:1;
    vuint32_t MBESW22:1;
    vuint32_t MBESW21:1;
    vuint32_t MBESW20:1;
    vuint32_t MBESW19:1;
    vuint32_t MBESW18:1;
    vuint32_t MBESW17:1;
    vuint32_t MBESW16:1;
    vuint32_t MBESW15:1;
    vuint32_t MBESW14:1;
    vuint32_t MBESW13:1;
    vuint32_t MBESW12:1;
    vuint32_t MBESW11:1;
    vuint32_t MBESW10:1;
    vuint32_t MBESW9:1;
    vuint32_t MBESW8:1;
    vuint32_t MBESW7:1;
    vuint32_t MBESW6:1;
    vuint32_t MBESW5:1;
    vuint32_t MBESW4:1;
    vuint32_t MBESW3:1;
    vuint32_t MBESW2:1;
    vuint32_t MBESW1:1;
    vuint32_t MBESW0:1;
  } B;
} STCU2_MBESW0_tag;

typedef union STCU2_MBUFM0_union_tag { /* STCU2 MBIST Unrecoverable FM */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved */
    vuint32_t MBUFM29:1;               /* MBESW */
    vuint32_t MBUFM28:1;               /* MBESW */
    vuint32_t MBUFM27:1;               /* MBESW */
    vuint32_t MBUFM26:1;               /* MBESW */
    vuint32_t MBUFM25:1;               /* MBESW */
    vuint32_t MBUFM24:1;               /* MBESW */
    vuint32_t MBUFM23:1;               /* MBESW */
    vuint32_t MBUFM22:1;               /* MBESW */
    vuint32_t MBUFM21:1;               /* MBESW */
    vuint32_t MBUFM20:1;               /* MBESW */
    vuint32_t MBUFM19:1;               /* MBESW */
    vuint32_t MBUFM18:1;               /* MBESW */
    vuint32_t MBUFM17:1;               /* MBESW */
    vuint32_t MBUFM16:1;               /* MBESW */
    vuint32_t MBUFM15:1;               /* MBESW */
    vuint32_t MBUFM14:1;               /* MBESW */
    vuint32_t MBUFM13:1;               /* MBESW */
    vuint32_t MBUFM12:1;               /* MBESW */
    vuint32_t MBUFM11:1;               /* MBESW */
    vuint32_t MBUFM10:1;               /* MBESW */
    vuint32_t MBUFM9:1;                /* MBESW */
    vuint32_t MBUFM8:1;                /* MBESW */
    vuint32_t MBUFM7:1;                /* MBESW */
    vuint32_t MBUFM6:1;                /* MBESW */
    vuint32_t MBUFM5:1;                /* MBESW */
    vuint32_t MBUFM4:1;                /* MBESW */
    vuint32_t MBUFM3:1;                /* MBESW */
    vuint32_t MBUFM2:1;                /* MBESW */
    vuint32_t MBUFM1:1;                /* MBESW */
    vuint32_t MBUFM0:1;                /* MBESW */
  } B;
} STCU2_MBUFM0_tag;

typedef union STCU2_LB_CTRL_union_tag { /* STCU2 LBIST Control */
  vuint32_t R;
  struct {
    vuint32_t CSM:1;
    vuint32_t PTR:10;
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t SHS:3;
    vuint32_t SCEN_OFF:4;
    vuint32_t SCEN_ON:4;
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t CWS:6;
  } B;
} STCU2_LB_CTRL_tag;

typedef union STCU2_LB_PCS_union_tag { /* STCU2 LBIST PC Stop */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:6;             /* Reserved */
    vuint32_t PCS:26;                  /* PCS */
  } B;
} STCU2_LB_PCS_tag;

typedef union STCU2_LB_MISRELSW_union_tag { /* STCU2 Online LBIST MISR Expected Low */
  vuint32_t R;
  struct {
    vuint32_t MISRESWX:32;
  } B;
} STCU2_LB_MISRELSW_tag;

typedef union STCU2_LB_MISREHSW_union_tag { /* STCU2 Online LBIST MISR Expected High */
  vuint32_t R;
  struct {
    vuint32_t MISRESWX:32;
  } B;
} STCU2_LB_MISREHSW_tag;

typedef union STCU2_LB_MISRRLSW_union_tag { /* STCU2 Online LBIST MISR Read Low */
  vuint32_t R;
  struct {
    vuint32_t MISRRSWX:32;             /* MISRRSWx */
  } B;
} STCU2_LB_MISRRLSW_tag;

typedef union STCU2_LB_MISRRHSW_union_tag { /* STCU2 Online LBIST MISR Read High */
  vuint32_t R;
  struct {
    vuint32_t MISRRSWX:32;             /* MISRRSWx */
  } B;
} STCU2_LB_MISRRHSW_tag;

typedef struct STCU2_LB_struct_tag {
  STCU2_LB_CTRL_tag CTRL;              /* STCU2 LBIST Control */
  STCU2_LB_PCS_tag PCS;                /* STCU2 LBIST PC Stop */
  uint8_t LB_reserved0[24];
  STCU2_LB_MISRELSW_tag MISRELSW;      /* STCU2 Online LBIST MISR Expected Low */
  STCU2_LB_MISREHSW_tag MISREHSW;      /* STCU2 Online LBIST MISR Expected High */
  STCU2_LB_MISRRLSW_tag MISRRLSW;      /* STCU2 Online LBIST MISR Read Low */
  STCU2_LB_MISRRHSW_tag MISRRHSW;      /* STCU2 Online LBIST MISR Read High */
  uint8_t LB_reserved1[16];
} STCU2_LB_tag;

typedef union STCU2_ALGOSEL_union_tag { /* STCU2 Algorithm Select */
  vuint32_t R;
  struct {
    vuint32_t ALGOSEL31:1;             /* ALGOSELn */
    vuint32_t ALGOSEL30:1;             /* ALGOSELn */
    vuint32_t ALGOSEL29:1;             /* ALGOSELn */
    vuint32_t ALGOSEL28:1;             /* ALGOSELn */
    vuint32_t ALGOSEL27:1;             /* ALGOSELn */
    vuint32_t ALGOSEL26:1;             /* ALGOSELn */
    vuint32_t ALGOSEL25:1;             /* ALGOSELn */
    vuint32_t ALGOSEL24:1;             /* ALGOSELn */
    vuint32_t ALGOSEL23:1;             /* ALGOSELn */
    vuint32_t ALGOSEL22:1;             /* ALGOSELn */
    vuint32_t ALGOSEL21:1;             /* ALGOSELn */
    vuint32_t ALGOSEL20:1;             /* ALGOSELn */
    vuint32_t ALGOSEL19:1;             /* ALGOSELn */
    vuint32_t ALGOSEL18:1;             /* ALGOSELn */
    vuint32_t ALGOSEL17:1;             /* ALGOSELn */
    vuint32_t ALGOSEL16:1;             /* ALGOSELn */
    vuint32_t ALGOSEL15:1;             /* ALGOSELn */
    vuint32_t ALGOSEL14:1;             /* ALGOSELn */
    vuint32_t ALGOSEL13:1;             /* ALGOSELn */
    vuint32_t ALGOSEL12:1;             /* ALGOSELn */
    vuint32_t ALGOSEL11:1;             /* ALGOSELn */
    vuint32_t ALGOSEL10:1;             /* ALGOSELn */
    vuint32_t ALGOSEL9:1;              /* ALGOSELn */
    vuint32_t ALGOSEL8:1;              /* ALGOSELn */
    vuint32_t ALGOSEL7:1;              /* ALGOSELn */
    vuint32_t ALGOSEL6:1;              /* ALGOSELn */
    vuint32_t ALGOSEL5:1;              /* ALGOSELn */
    vuint32_t ALGOSEL4:1;              /* ALGOSELn */
    vuint32_t ALGOSEL3:1;              /* ALGOSELn */
    vuint32_t ALGOSEL2:1;              /* ALGOSELn */
    vuint32_t ALGOSEL1:1;              /* ALGOSELn */
    vuint32_t ALGOSEL0:1;              /* ALGOSELn */
  } B;
} STCU2_ALGOSEL_tag;

typedef union STCU2_STGGR_union_tag {  /* STCU2 MBIST Stagger */
  vuint32_t R;
  struct {
    vuint32_t STAG:32;                 /* STAG */
  } B;
} STCU2_STGGR_tag;

typedef union STCU2_BSTART_union_tag { /* STCU2 BIST Start */
  vuint32_t R;
  struct {
    vuint32_t BSTART31:1;              /* BSTARTn */
    vuint32_t BSTART30:1;              /* BSTARTn */
    vuint32_t BSTART29:1;              /* BSTARTn */
    vuint32_t BSTART28:1;              /* BSTARTn */
    vuint32_t BSTART27:1;              /* BSTARTn */
    vuint32_t BSTART26:1;              /* BSTARTn */
    vuint32_t BSTART25:1;              /* BSTARTn */
    vuint32_t BSTART24:1;              /* BSTARTn */
    vuint32_t BSTART23:1;              /* BSTARTn */
    vuint32_t BSTART22:1;              /* BSTARTn */
    vuint32_t BSTART21:1;              /* BSTARTn */
    vuint32_t BSTART20:1;              /* BSTARTn */
    vuint32_t BSTART19:1;              /* BSTARTn */
    vuint32_t BSTART18:1;              /* BSTARTn */
    vuint32_t BSTART17:1;              /* BSTARTn */
    vuint32_t BSTART16:1;              /* BSTARTn */
    vuint32_t BSTART15:1;              /* BSTARTn */
    vuint32_t BSTART14:1;              /* BSTARTn */
    vuint32_t BSTART13:1;              /* BSTARTn */
    vuint32_t BSTART12:1;              /* BSTARTn */
    vuint32_t BSTART11:1;              /* BSTARTn */
    vuint32_t BSTART10:1;              /* BSTARTn */
    vuint32_t BSTART9:1;               /* BSTARTn */
    vuint32_t BSTART8:1;               /* BSTARTn */
    vuint32_t BSTART7:1;               /* BSTARTn */
    vuint32_t BSTART6:1;               /* BSTARTn */
    vuint32_t BSTART5:1;               /* BSTARTn */
    vuint32_t BSTART4:1;               /* BSTARTn */
    vuint32_t BSTART3:1;               /* BSTARTn */
    vuint32_t BSTART2:1;               /* BSTARTn */
    vuint32_t BSTART1:1;               /* BSTARTn */
    vuint32_t BSTART0:1;               /* BSTARTn */
  } B;
} STCU2_BSTART_tag;

typedef union STCU2_MB_CTRL_union_tag { /* STCU2 MBIST Control */
  vuint32_t R;
  struct {
    vuint32_t CSM:1;                   /* CSM */
    vuint32_t PTR:10;                  /* PTR */
    vuint32_t BSEL:1;                  /* BSEL */
    vuint32_t _unused_12:20;           /* Reserved */
  } B;
} STCU2_MB_CTRL_tag;

struct STCU2_tag {
  uint8_t STCU2_reserved0[4];
  STCU2_RUNSW_tag RUNSW;               /* STCU2 Run Software */
  STCU2_SKC_tag SKC;                   /* STCU2 SK Code */
  STCU2_CFG_tag CFG;                   /* STCU2 Configuration */
  uint8_t STCU2_reserved1[4];
  STCU2_WDG_tag WDG;                   /* STCU2 Watchdog Granularity */
  uint8_t STCU2_reserved2[12];
  STCU2_ERR_STAT_tag ERR_STAT;         /* STCU2 Error */
  STCU2_ERR_FM_tag ERR_FM;             /* STCU2 Error FM */
  uint8_t STCU2_reserved3[32];
  STCU2_LBSSW0_tag LBSSW0;             /* STCU2 Online LBIST Status */
  uint8_t STCU2_reserved4[12];
  STCU2_LBESW0_tag LBESW0;             /* STCU2 Online LBIST End Flag */
  uint8_t STCU2_reserved5[28];
  STCU2_LBUFM0_tag LBUFM0;             /* STCU2 Online LBIST Unrecoverable FM */
  uint8_t STCU2_reserved6[140];
  STCU2_MBSSW0_tag MBSSW0;             /* STCU2 Online MBIST Status */
  uint8_t STCU2_reserved7[60];
  STCU2_MBESW0_tag MBESW0;             /* STCU2 Online MBIST End Flag */
  uint8_t STCU2_reserved8[60];
  STCU2_MBUFM0_tag MBUFM0;             /* STCU2 MBIST Unrecoverable FM */
  uint8_t STCU2_reserved9[112];
  STCU2_LB_tag LB[8];
  uint8_t STCU2_reserved10[7680];
  STCU2_ALGOSEL_tag ALGOSEL;           /* STCU2 Algorithm Select */
  uint8_t STCU2_reserved11[8];
  STCU2_STGGR_tag STGGR;               /* STCU2 MBIST Stagger */
  STCU2_BSTART_tag BSTART;             /* STCU2 BIST Start */
  STCU2_MB_CTRL_tag MB_CTRL[30];       /* STCU2 MBIST Control */
};


/* ============================================================================
   =============================== Module: STM ================================
   ============================================================================ */

typedef union STM_CR_union_tag {       /* Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t CPS:8;                   /* Counter Prescaler */
    vuint32_t _unused_24:6;            /* Reserved */
    vuint32_t FRZ:1;                   /* Freeze */
    vuint32_t TEN:1;                   /* Timer Enable */
  } B;
} STM_CR_tag;

typedef union STM_CNT_union_tag {      /* Count */
  vuint32_t R;
  struct {
    vuint32_t CNT:32;                  /* Timer Count */
  } B;
} STM_CNT_tag;

typedef union STM_CHANNEL_CCR_union_tag { /* Channel Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t CEN:1;                   /* Channel Enable */
  } B;
} STM_CHANNEL_CCR_tag;

typedef union STM_CHANNEL_CIR_union_tag { /* Channel Interrupt */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t CIF:1;                   /* Channel Interrupt Flag */
  } B;
} STM_CHANNEL_CIR_tag;

typedef union STM_CHANNEL_CMP_union_tag { /* Channel Compare */
  vuint32_t R;
  struct {
    vuint32_t CMP:32;                  /* Channel Compare */
  } B;
} STM_CHANNEL_CMP_tag;

typedef struct STM_CHANNEL_struct_tag {
  STM_CHANNEL_CCR_tag CCR;             /* Channel Control */
  STM_CHANNEL_CIR_tag CIR;             /* Channel Interrupt */
  STM_CHANNEL_CMP_tag CMP;             /* Channel Compare */
  uint8_t CHANNEL_reserved0[4];
} STM_CHANNEL_tag;

struct STM_tag {
  STM_CR_tag CR;                       /* Control */
  STM_CNT_tag CNT;                     /* Count */
  uint8_t STM_reserved0[8];
  STM_CHANNEL_tag CHANNEL[4];
};


/* ============================================================================
   =============================== Module: SWT ================================
   ============================================================================ */

typedef union SWT_CR_union_tag {       /* Control */
  vuint32_t R;
  struct {
    vuint32_t MAP0:1;                  /* Master Access Protection For Master 0 */
    vuint32_t MAP1:1;                  /* Master Access Protection For Master 1 */
    vuint32_t MAP2:1;                  /* Master Access Protection For Master 2 */
    vuint32_t MAP3:1;                  /* Master Access Protection For Master 3 */
    vuint32_t MAP4:1;                  /* Master Access Protection For Master 4 */
    vuint32_t MAP5:1;                  /* Master Access Protection For Master 5 */
    vuint32_t MAP6:1;                  /* Master Access Protection For Master 6 */
    vuint32_t MAP7:1;                  /* Master Access Protection For Master 7 */
    vuint32_t _unused_8:13;            /* Reserved */
    vuint32_t SMD:2;                   /* Service Mode */
    vuint32_t RIA:1;                   /* Reset on Invalid Access */
    vuint32_t WND:1;                   /* Window Mode */
    vuint32_t ITR:1;                   /* Interrupt Then Reset Request */
    vuint32_t HLK:1;                   /* Hard Lock */
    vuint32_t SLK:1;                   /* Soft Lock */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t STP:1;                   /* Stop Mode Control */
    vuint32_t FRZ:1;                   /* Debug Mode Control */
    vuint32_t WEN:1;                   /* Watchdog Enable */
  } B;
} SWT_CR_tag;

typedef union SWT_IR_union_tag {       /* Interrupt */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t TIF:1;                   /* Timeout Interrupt Flag */
  } B;
} SWT_IR_tag;

typedef union SWT_TO_union_tag {       /* Timeout */
  vuint32_t R;
  struct {
    vuint32_t WTO:32;                  /* Watchdog Timeout */
  } B;
} SWT_TO_tag;

typedef union SWT_WN_union_tag {       /* Window */
  vuint32_t R;
  struct {
    vuint32_t WST:32;                  /* Window Start Value */
  } B;
} SWT_WN_tag;

typedef union SWT_SR_union_tag {       /* Service */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t WSC:16;                  /* Watchdog Service Code */
  } B;
} SWT_SR_tag;

typedef union SWT_CO_union_tag {       /* Counter Output */
  vuint32_t R;
  struct {
    vuint32_t CNT:32;                  /* Watchdog Count */
  } B;
} SWT_CO_tag;

typedef union SWT_SK_union_tag {       /* Service Key */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t SK:16;                   /* Service Key */
  } B;
} SWT_SK_tag;

struct SWT_tag {
  SWT_CR_tag CR;                       /* Control */
  SWT_IR_tag IR;                       /* Interrupt */
  SWT_TO_tag TO;                       /* Timeout */
  SWT_WN_tag WN;                       /* Window */
  SWT_SR_tag SR;                       /* Service */
  SWT_CO_tag CO;                       /* Counter Output */
  SWT_SK_tag SK;                       /* Service Key */
};


/* ============================================================================
   =============================== Module: Selftest_GPR =======================
   ============================================================================ */

typedef union Selftest_GPR_LBIST0_PROG_REG_union_tag { /* LBIST0 Program */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t LBIST_SHIFT_COUNT:8;     /* LBIST Shift Count */
  } B;
} Selftest_GPR_LBIST0_PROG_REG_tag;

typedef union Selftest_GPR_LBIST1_PROG_REG_union_tag { /* LBIST1 Program */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t LBIST_SHIFT_COUNT:8;     /* LBIST Shift Count */
  } B;
} Selftest_GPR_LBIST1_PROG_REG_tag;

typedef union Selftest_GPR_LBIST2_PROG_REG_union_tag { /* LBIST2 Program */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t LBIST_SHIFT_COUNT:8;     /* LBIST Shift Count */
  } B;
} Selftest_GPR_LBIST2_PROG_REG_tag;

typedef union Selftest_GPR_LBIST3_PROG_REG_union_tag { /* LBIST3 Program */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t LBIST_SHIFT_COUNT:8;     /* LBIST Shift Count */
  } B;
} Selftest_GPR_LBIST3_PROG_REG_tag;

typedef union Selftest_GPR_LBIST4_PROG_REG_union_tag { /* LBIST4 Program */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t LBIST_SHIFT_COUNT:8;     /* LBIST Shift Count */
  } B;
} Selftest_GPR_LBIST4_PROG_REG_tag;

typedef union Selftest_GPR_LBIST5_PROG_REG_union_tag { /* LBIST5 Program */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t LBIST_SHIFT_COUNT:8;     /* LBIST Shift Count */
  } B;
} Selftest_GPR_LBIST5_PROG_REG_tag;

typedef union Selftest_GPR_LBIST6_PROG_REG_union_tag { /* LBIST6 Program */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t LBIST_SHIFT_COUNT:8;     /* LBIST Shift Count */
  } B;
} Selftest_GPR_LBIST6_PROG_REG_tag;

typedef union Selftest_GPR_LBIST7_PROG_REG_union_tag { /* LBIST7 Program */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t LBIST_SHIFT_COUNT:8;     /* LBIST Shift Count */
  } B;
} Selftest_GPR_LBIST7_PROG_REG_tag;

struct Selftest_GPR_tag {
  uint8_t Selftest_GPR_reserved0[20];
  Selftest_GPR_LBIST0_PROG_REG_tag LBIST0_PROG_REG; /* LBIST0 Program */
  Selftest_GPR_LBIST1_PROG_REG_tag LBIST1_PROG_REG; /* LBIST1 Program */
  Selftest_GPR_LBIST2_PROG_REG_tag LBIST2_PROG_REG; /* LBIST2 Program */
  Selftest_GPR_LBIST3_PROG_REG_tag LBIST3_PROG_REG; /* LBIST3 Program */
  Selftest_GPR_LBIST4_PROG_REG_tag LBIST4_PROG_REG; /* LBIST4 Program */
  Selftest_GPR_LBIST5_PROG_REG_tag LBIST5_PROG_REG; /* LBIST5 Program */
  Selftest_GPR_LBIST6_PROG_REG_tag LBIST6_PROG_REG; /* LBIST6 Program */
  Selftest_GPR_LBIST7_PROG_REG_tag LBIST7_PROG_REG; /* LBIST7 Program */
};


/* ============================================================================
   =============================== Module: TMU ================================
   ============================================================================ */

typedef union TMU_TMR_union_tag {      /* Mode */
  vuint32_t R;
  struct {
    vuint32_t MODE:2;                  /* Mode */
    vuint32_t CMD:1;                   /* Central module disable */
    vuint32_t _unused_3:3;
    vuint32_t ALPF:2;                  /* Average low pass filter setting */
    vuint32_t _unused_8:24;
  } B;
} TMU_TMR_tag;

typedef union TMU_TSR_union_tag {      /* Status */
  vuint32_t R;
  struct {
    vuint32_t TB:1;                    /* TMU busy */
    vuint32_t MIE:1;                   /* Monitoring interval exceeded */
    vuint32_t ORL:1;                   /* Out-of-range low temperature measurement */
    vuint32_t ORH:1;                   /* Out-of-range high temperature measurement */
    vuint32_t _unused_4:28;
  } B;
} TMU_TSR_tag;

typedef union TMU_TMSR_union_tag {     /* Monitor Site */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:29;
    vuint32_t SITE:3;                  /* Monitoring site select 2-0 */
  } B;
} TMU_TMSR_tag;

typedef union TMU_TMTMIR_union_tag {   /* Monitor Temperature Measurement Interval */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:28;
    vuint32_t TMI:4;                   /* Temperature monitoring interval in seconds */
  } B;
} TMU_TMTMIR_tag;

typedef union TMU_TIER_union_tag {     /* Interrupt Enable */
  vuint32_t R;
  struct {
    vuint32_t IHTTIE:1;                /* Immediate high temperature threshold interrupt enable */
    vuint32_t AHTTIE:1;                /* Average high temperature threshold interrupt enable */
    vuint32_t AHTCTIE:1;               /* Average high temperature critical threshold interrupt enable */
    vuint32_t ILTTIE:1;                /* Immediate low temperature threshold interrupt enable */
    vuint32_t ALTTIE:1;                /* Average low temperature threshold interrupt enable */
    vuint32_t ALTCTIE:1;               /* Average low temperature critical threshold interrupt enable */
    vuint32_t RTRCTIE:1;               /* Rising temperature rate critical threshold interrupt enable */
    vuint32_t FTRCTIE:1;               /* Falling temperature rate critical threshold interrupt enable */
    vuint32_t _unused_8:24;
  } B;
} TMU_TIER_tag;

typedef union TMU_TIDR_union_tag {     /* Interrupt Detect */
  vuint32_t R;
  struct {
    vuint32_t IHTT:1;                  /* Immediate high temperature threshold exceeded */
    vuint32_t AHTT:1;                  /* Average high temperature threshold exceeded */
    vuint32_t AHTCT:1;                 /* Average high temperature critical threshold exceeded */
    vuint32_t ILTT:1;                  /* Immediate low temperature threshold */
    vuint32_t ALTT:1;                  /* Average low temperature threshold */
    vuint32_t ALTCT:1;                 /* Average low temperature critical threshold */
    vuint32_t RTRCT:1;                 /* Rising temperature rate critical threshold */
    vuint32_t FTRCT:1;                 /* Falling temperature rate critical threshold */
    vuint32_t _unused_8:24;
  } B;
} TMU_TIDR_tag;

typedef union TMU_TIISCR_union_tag {   /* Interrupt Immediate Site Capture */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:29;
    vuint32_t SITE:3;                  /* Temperature sensor site */
  } B;
} TMU_TIISCR_tag;

typedef union TMU_TIASCR_union_tag {   /* Interrupt Average Site Capture */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:29;
    vuint32_t SITE:3;                  /* Temperature sensor site */
  } B;
} TMU_TIASCR_tag;

typedef union TMU_TICSCR_union_tag {   /* Interrupt Critical Site Capture */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:29;
    vuint32_t SITE:3;                  /* Temperature sensor site */
  } B;
} TMU_TICSCR_tag;

typedef union TMU_TMHTCR_union_tag {   /* Monitor High Temperature Capture */
  vuint32_t R;
  struct {
    vuint32_t V:1;                     /* Valid reading */
    vuint32_t _unused_1:21;
    vuint32_t TP5:1;                   /* Highest temperature recorded in Kelvin by any enabled monitored site */
    vuint32_t TEMP:9;                  /* Highest temperature recorded in Kelvin by any enabled monitored site */
  } B;
} TMU_TMHTCR_tag;

typedef union TMU_TMLTCR_union_tag {   /* Monitor Low Temperature Capture */
  vuint32_t R;
  struct {
    vuint32_t V:1;                     /* Valid reading */
    vuint32_t _unused_1:21;
    vuint32_t TP5:1;                   /* Lowest temperature in Kelvin that any enabled monitored site records */
    vuint32_t TEMP:9;                  /* Lowest temperature in Kelvin that any enabled monitored site records */
  } B;
} TMU_TMLTCR_tag;

typedef union TMU_TMRTRCR_union_tag {  /* Monitor Rising Temperature Rate Capture */
  vuint32_t R;
  struct {
    vuint32_t V:1;                     /* Valid reading */
    vuint32_t _unused_1:23;
    vuint32_t TEMP:8;                  /* Highest rising temperature rate change in Kelvin that any enabled monitored site records */
  } B;
} TMU_TMRTRCR_tag;

typedef union TMU_TMFTRCR_union_tag {  /* Monitor Falling Temperature Rate Capture */
  vuint32_t R;
  struct {
    vuint32_t V:1;                     /* Valid reading */
    vuint32_t _unused_1:23;
    vuint32_t TEMP:8;                  /* Highest falling temperature rate change in Kelvin that any enabled monitored site records */
  } B;
} TMU_TMFTRCR_tag;

typedef union TMU_TMHTITR_union_tag {  /* Monitor High Temperature Immediate Threshold */
  vuint32_t R;
  struct {
    vuint32_t EN:1;                    /* Enable threshold */
    vuint32_t _unused_1:22;
    vuint32_t TEMP:9;                  /* High temperature immediate threshold value */
  } B;
} TMU_TMHTITR_tag;

typedef union TMU_TMHTATR_union_tag {  /* Monitor High Temperature Average Threshold */
  vuint32_t R;
  struct {
    vuint32_t EN:1;                    /* Enable threshold */
    vuint32_t _unused_1:22;
    vuint32_t TEMP:9;                  /* High temperature average threshold value */
  } B;
} TMU_TMHTATR_tag;

typedef union TMU_TMHTACTR_union_tag { /* Monitor High Temperature Average Critical Threshold */
  vuint32_t R;
  struct {
    vuint32_t EN:1;                    /* Enable threshold */
    vuint32_t _unused_1:22;
    vuint32_t TEMP:9;                  /* High temperature average critical threshold value */
  } B;
} TMU_TMHTACTR_tag;

typedef union TMU_TMLTITR_union_tag {  /* Monitor Low Temperature Immediate Threshold */
  vuint32_t R;
  struct {
    vuint32_t EN:1;                    /* Enable threshold */
    vuint32_t _unused_1:22;
    vuint32_t TEMP:9;                  /* Low temperature immediate threshold value */
  } B;
} TMU_TMLTITR_tag;

typedef union TMU_TMLTATR_union_tag {  /* Monitor Low Temperature Average Threshold */
  vuint32_t R;
  struct {
    vuint32_t EN:1;                    /* Enable threshold */
    vuint32_t _unused_1:22;
    vuint32_t TEMP:9;                  /* Low temperature average threshold value */
  } B;
} TMU_TMLTATR_tag;

typedef union TMU_TMLTACTR_union_tag { /* Monitor Low Temperature Average Critical Threshold */
  vuint32_t R;
  struct {
    vuint32_t EN:1;                    /* Enable threshold */
    vuint32_t _unused_1:22;
    vuint32_t TEMP:9;                  /* Low temperature average critical threshold value */
  } B;
} TMU_TMLTACTR_tag;

typedef union TMU_TMRTRCTR_union_tag { /* Monitor Rising Temperature Rate Critical Threshold */
  vuint32_t R;
  struct {
    vuint32_t EN:1;                    /* Enable threshold */
    vuint32_t _unused_1:23;
    vuint32_t TEMP:8;                  /* Temperature difference between two measurements from the same site */
  } B;
} TMU_TMRTRCTR_tag;

typedef union TMU_TMFTRCTR_union_tag { /* Monitor Falling Temperature Rate Critical Threshold */
  vuint32_t R;
  struct {
    vuint32_t EN:1;                    /* Enable threshold */
    vuint32_t _unused_1:23;
    vuint32_t TEMP:8;                  /* Temperature difference between two measurements from the same site */
  } B;
} TMU_TMFTRCTR_tag;

typedef union TMU_TTCFGR_union_tag {   /* Temperature Configuration */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:28;
    vuint32_t CAL_PT:4;                /* Calibration point */
  } B;
} TMU_TTCFGR_tag;

typedef union TMU_TSCFGR_union_tag {   /* Sensor Configuration */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:23;
    vuint32_t SENSOR:9;                /* Sensor value */
  } B;
} TMU_TSCFGR_tag;

typedef union TMU_TRITRATSR_TRITSR_union_tag { /* Report Immediate Temperature at Site */
  vuint32_t R;
  struct {
    vuint32_t V:1;                     /* Valid measured temperature */
    vuint32_t _unused_1:21;
    vuint32_t TP5:1;                   /* Last temperature reading in Kelvin at the site */
    vuint32_t TEMP:9;                  /* Last temperature reading in Kelvin at the site */
  } B;
} TMU_TRITRATSR_TRITSR_tag;

typedef union TMU_TRITRATSR_TRATSR_union_tag { /* Report Average Temperature at Site */
  vuint32_t R;
  struct {
    vuint32_t V:1;                     /* Valid measured temperature */
    vuint32_t _unused_1:22;
    vuint32_t TEMP:9;                  /* Average temperature reading in Kelvin at the site */
  } B;
} TMU_TRITRATSR_TRATSR_tag;

typedef struct TMU_TRITRATSR_struct_tag {
  TMU_TRITRATSR_TRITSR_tag TRITSR;     /* Report Immediate Temperature at Site */
  TMU_TRITRATSR_TRATSR_tag TRATSR;     /* Report Average Temperature at Site */
  uint8_t TRITRATSR_reserved0[8];
} TMU_TRITRATSR_tag;

typedef union TMU_TCMCFG_union_tag {   /* Central Module Configuration */
  vuint32_t R;
  struct {
    vuint32_t DPM:1;
    vuint32_t OCM:1;                   /* Offset cancellation mode */
    vuint32_t OCS:1;                   /* Offset cancellation manual setting */
    vuint32_t DEMA:1;                  /* Dynamic element match averaging mode */
    vuint32_t _unused_4:1;
    vuint32_t RCTC:3;                  /* RC time constant setting */
    vuint32_t _unused_8:7;
    vuint32_t SAR_RDY:1;               /* SAR ready */
    vuint32_t CLK_DIV:4;
    vuint32_t DFD:2;                   /* Digital filter depth */
    vuint32_t CMET:2;                  /* Central module enable time */
    vuint32_t _unused_24:1;
    vuint32_t DAC_OFFSET:7;            /* DAC offset */
  } B;
} TMU_TCMCFG_tag;

typedef union TMU_TTRCR_union_tag {    /* Temperature Range Control 0 */
  vuint32_t R;
  struct {
    vuint32_t V:1;                     /* Calibration point is valid */
    vuint32_t _unused_1:22;
    vuint32_t TEMP:9;                  /* Temperature in Kelvin for the calibration point */
  } B;
} TMU_TTRCR_tag;

struct TMU_tag {
  TMU_TMR_tag TMR;                     /* Mode */
  TMU_TSR_tag TSR;                     /* Status */
  TMU_TMSR_tag TMSR;                   /* Monitor Site */
  TMU_TMTMIR_tag TMTMIR;               /* Monitor Temperature Measurement Interval */
  uint8_t TMU_reserved0[16];
  TMU_TIER_tag TIER;                   /* Interrupt Enable */
  TMU_TIDR_tag TIDR;                   /* Interrupt Detect */
  uint8_t TMU_reserved1[8];
  TMU_TIISCR_tag TIISCR;               /* Interrupt Immediate Site Capture */
  TMU_TIASCR_tag TIASCR;               /* Interrupt Average Site Capture */
  TMU_TICSCR_tag TICSCR;               /* Interrupt Critical Site Capture */
  uint8_t TMU_reserved2[4];
  TMU_TMHTCR_tag TMHTCR;               /* Monitor High Temperature Capture */
  TMU_TMLTCR_tag TMLTCR;               /* Monitor Low Temperature Capture */
  TMU_TMRTRCR_tag TMRTRCR;             /* Monitor Rising Temperature Rate Capture */
  TMU_TMFTRCR_tag TMFTRCR;             /* Monitor Falling Temperature Rate Capture */
  TMU_TMHTITR_tag TMHTITR;             /* Monitor High Temperature Immediate Threshold */
  TMU_TMHTATR_tag TMHTATR;             /* Monitor High Temperature Average Threshold */
  TMU_TMHTACTR_tag TMHTACTR;           /* Monitor High Temperature Average Critical Threshold */
  uint8_t TMU_reserved3[4];
  TMU_TMLTITR_tag TMLTITR;             /* Monitor Low Temperature Immediate Threshold */
  TMU_TMLTATR_tag TMLTATR;             /* Monitor Low Temperature Average Threshold */
  TMU_TMLTACTR_tag TMLTACTR;           /* Monitor Low Temperature Average Critical Threshold */
  uint8_t TMU_reserved4[4];
  TMU_TMRTRCTR_tag TMRTRCTR;           /* Monitor Rising Temperature Rate Critical Threshold */
  TMU_TMFTRCTR_tag TMFTRCTR;           /* Monitor Falling Temperature Rate Critical Threshold */
  uint8_t TMU_reserved5[8];
  TMU_TTCFGR_tag TTCFGR;               /* Temperature Configuration */
  TMU_TSCFGR_tag TSCFGR;               /* Sensor Configuration */
  uint8_t TMU_reserved6[120];
  TMU_TRITRATSR_tag TRITRATSR[3];
  uint8_t TMU_reserved7[3536];
  TMU_TCMCFG_tag TCMCFG;               /* Central Module Configuration */
  uint8_t TMU_reserved8[12];
  TMU_TTRCR_tag TTRCR[16];             /* Temperature Range Control 0 */
};


/* ============================================================================
   =============================== Module: WKPU ===============================
   ============================================================================ */

typedef union WKPU_NSR_union_tag {     /* NMI Status Flag Register */
  vuint32_t R;
  struct {
    vuint32_t NIF0:1;                  /* NMI Status Flag 0 */
    vuint32_t NOVF0:1;                 /* NMI Overrun Status Flag 0 */
    vuint32_t _unused_2:6;             /* Reserved */
    vuint32_t NIF1:1;                  /* NMI Status Flag 1 */
    vuint32_t NOVF1:1;                 /* NMI Overrun Status Flag 1 */
    vuint32_t _unused_10:6;            /* Reserved */
    vuint32_t NIF2:1;                  /* NMI Status Flag 2 */
    vuint32_t NOVF2:1;                 /* NMI Overrun Status Flag 2 */
    vuint32_t _unused_18:6;            /* Reserved */
    vuint32_t _unused_24:2;            /* Reserved */
    vuint32_t _unused_26:6;            /* Reserved */
  } B;
} WKPU_NSR_tag;

typedef union WKPU_NCR_union_tag {     /* NMI Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t NLOCK0:1;                /* NMI Configuration Lock Register 0 */
    vuint32_t NDSS0:2;                 /* NMI Destination Source Select 0 */
    vuint32_t NWRE0:1;                 /* NMI Wakeup Request Enable 0 */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t NREE0:1;                 /* NMI Rising-Edge Events Enable 0 */
    vuint32_t NFEE0:1;                 /* NMI Falling-edge Events Enable 0 */
    vuint32_t NFE0:1;                  /* NMI Filter Enable 0 */
    vuint32_t NLOCK1:1;                /* NMI Configuration Lock Register 1 */
    vuint32_t NDSS1:2;                 /* NMI Destination Source Select 1 */
    vuint32_t NWRE1:1;                 /* NMI Wakeup Request Enable 1 */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t NREE1:1;                 /* NMI Rising-Edge Events Enable 1 */
    vuint32_t NFEE1:1;                 /* NMI Falling-Edge Events Enable 1 */
    vuint32_t NFE1:1;                  /* NMI Filter Enable 1 */
    vuint32_t NLOCK2:1;                /* NMI Configuration Lock Register 2 */
    vuint32_t NDSS2:2;                 /* NMI Destination Source Select 2 */
    vuint32_t NWRE2:1;                 /* NMI Wakeup Request Enable 2 */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t NREE2:1;                 /* NMI Rising-Edge Events Enable 2 */
    vuint32_t NFEE2:1;                 /* NMI Falling-Edge Events Enable 2 */
    vuint32_t NFE2:1;                  /* NMI Filter Enable 2 */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} WKPU_NCR_tag;

struct WKPU_tag {
  WKPU_NSR_tag NSR;                    /* NMI Status Flag Register */
  uint8_t WKPU_reserved0[4];
  WKPU_NCR_tag NCR;                    /* NMI Configuration Register */
};


/* ============================================================================
   =============================== Module: XBIC ===============================
   ============================================================================ */

typedef union XBIC_MCR_union_tag {     /* XBIC Module Control */
  vuint32_t R;
  struct {
    vuint32_t SE0:1;
    vuint32_t SE1:1;
    vuint32_t SE2:1;
    vuint32_t SE3:1;
    vuint32_t SE4:1;
    vuint32_t SE5:1;
    vuint32_t SE6:1;
    vuint32_t SE7:1;
    vuint32_t ME0:1;
    vuint32_t ME1:1;
    vuint32_t ME2:1;
    vuint32_t ME3:1;
    vuint32_t ME4:1;
    vuint32_t ME5:1;
    vuint32_t ME6:1;
    vuint32_t ME7:1;
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} XBIC_MCR_tag;

typedef union XBIC_EIR_union_tag {     /* XBIC Error Injection */
  vuint32_t R;
  struct {
    vuint32_t EIE:1;
    vuint32_t _unused_1:16;            /* Reserved */
    vuint32_t SLV:3;                   /* Target Slave Port */
    vuint32_t MST:4;                   /* Target Master ID */
    vuint32_t SYN:8;                   /* Syndrome */
  } B;
} XBIC_EIR_tag;

typedef union XBIC_ESR_union_tag {     /* XBIC Error Status */
  vuint32_t R;
  struct {
    vuint32_t VLD:1;
    vuint32_t DPSE0:1;
    vuint32_t DPSE1:1;
    vuint32_t DPSE2:1;
    vuint32_t DPSE3:1;
    vuint32_t DPSE4:1;
    vuint32_t DPSE5:1;
    vuint32_t DPSE6:1;
    vuint32_t DPSE7:1;
    vuint32_t DPME0:1;
    vuint32_t DPME1:1;
    vuint32_t DPME2:1;
    vuint32_t DPME3:1;
    vuint32_t DPME4:1;
    vuint32_t DPME5:1;
    vuint32_t DPME6:1;
    vuint32_t DPME7:1;
    vuint32_t SLV:3;                   /* Slave Port */
    vuint32_t MST:4;                   /* Master ID */
    vuint32_t SYN:8;                   /* Syndrome */
  } B;
} XBIC_ESR_tag;

typedef union XBIC_EAR_union_tag {     /* XBIC Error Address */
  vuint32_t R;
  struct {
    vuint32_t ADDR:32;                 /* Error Address */
  } B;
} XBIC_EAR_tag;

struct XBIC_tag {
  XBIC_MCR_tag MCR;                    /* XBIC Module Control */
  XBIC_EIR_tag EIR;                    /* XBIC Error Injection */
  XBIC_ESR_tag ESR;                    /* XBIC Error Status */
  XBIC_EAR_tag EAR;                    /* XBIC Error Address */
};


/* ============================================================================
   =============================== Module: eDMA_0_MP ==========================
   ============================================================================ */

typedef union eDMA_0_MP_CSR_union_tag { /* Management Page Control */
  vuint32_t R;
  struct {
    vuint32_t ACTIVE:1;                /* DMA Active Status */
    vuint32_t _unused_1:2;             /* Reserved */
    vuint32_t ACTIVE_ID:5;             /* Active Channel ID */
    vuint32_t _unused_8:8;             /* Reserved */
    vuint32_t _unused_16:6;            /* Reserved */
    vuint32_t CX:1;                    /* Cancel Transfer */
    vuint32_t ECX:1;                   /* Cancel Transfer With Error */
    vuint32_t GMRC:1;                  /* Global Master ID Replication Control */
    vuint32_t GCLC:1;                  /* Global Channel Linking Control */
    vuint32_t HALT:1;                  /* Halt DMA Operations */
    vuint32_t HAE:1;                   /* Halt After Error */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t ERCA:1;                  /* Enable Round Robin Channel Arbitration */
    vuint32_t EDBG:1;                  /* Enable Debug */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} eDMA_0_MP_CSR_tag;

typedef union eDMA_0_MP_ES_union_tag { /* Management Page Error Status */
  vuint32_t R;
  struct {
    vuint32_t VLD:1;                   /* Valid */
    vuint32_t _unused_1:2;             /* Reserved */
    vuint32_t ERRCHN:5;                /* Error Channel Number or Canceled Channel Number */
    vuint32_t _unused_8:14;            /* Reserved */
    vuint32_t UCE:1;                   /* Uncorrectable TCD Error During Channel Execution */
    vuint32_t ECX:1;                   /* Transfer Canceled */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t DBE:1;                   /* Destination Bus Error */
  } B;
} eDMA_0_MP_ES_tag;

typedef union eDMA_0_MP_INT_union_tag { /* Management Page Interrupt Request Status */
  vuint32_t R;
  struct {
    vuint32_t INT:32;                  /* Interrupt Request Status */
  } B;
} eDMA_0_MP_INT_tag;

typedef union eDMA_0_MP_HRS_union_tag { /* Management Page Hardware Request Status */
  vuint32_t R;
  struct {
    vuint32_t HRS:32;                  /* Hardware Request Status */
  } B;
} eDMA_0_MP_HRS_tag;

typedef union eDMA_0_MP_CH_GRPRI_union_tag { /* Channel Arbitration Group */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:27;
    vuint32_t GRPRI:5;                 /* Arbitration Group For Channel n */
  } B;
} eDMA_0_MP_CH_GRPRI_tag;

struct eDMA_0_MP_tag {
  eDMA_0_MP_CSR_tag CSR;               /* Management Page Control */
  eDMA_0_MP_ES_tag ES;                 /* Management Page Error Status */
  eDMA_0_MP_INT_tag INT;               /* Management Page Interrupt Request Status */
  eDMA_0_MP_HRS_tag HRS;               /* Management Page Hardware Request Status */
  uint8_t eDMA_0_MP_reserved0[240];
  eDMA_0_MP_CH_GRPRI_tag CH_GRPRI[32]; /* Channel Arbitration Group */
};


/* ============================================================================
   =============================== Module: eDMA_0_TCD =========================
   ============================================================================ */

typedef union eDMA_0_TCD_CH1_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ACTIVE:1;                /* Channel Active */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t _unused_2:26;            /* Reserved */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t ERQ:1;                   /* Enable DMA Request */
  } B;
} eDMA_0_TCD_CH1_CSR_tag;

typedef union eDMA_0_TCD_CH1_ES_union_tag { /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERR:1;                   /* Error In Channel */
    vuint32_t _unused_1:23;            /* Reserved */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t DBE:1;                   /* Destination Bus Error */
  } B;
} eDMA_0_TCD_CH1_ES_tag;

typedef union eDMA_0_TCD_CH1_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t INT:1;                   /* Interrupt Request */
  } B;
} eDMA_0_TCD_CH1_INT_tag;

typedef union eDMA_0_TCD_CH1_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;            /* Reserved */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t _unused_17:10;           /* Reserved */
    vuint32_t MID:5;                   /* Master ID */
  } B;
} eDMA_0_TCD_CH1_SBR_tag;

typedef union eDMA_0_TCD_CH1_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t _unused_2:27;            /* Reserved */
    vuint32_t APL:3;                   /* Arbitration Priority Level */
  } B;
} eDMA_0_TCD_CH1_PRI_tag;

typedef union eDMA_0_TCD_TCD1_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} eDMA_0_TCD_TCD1_SADDR_tag;

typedef union eDMA_0_TCD_TCD1_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t SMOD:5;                  /* Source Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
  } B;
} eDMA_0_TCD_TCD1_ATTR_tag;

typedef union eDMA_0_TCD_TCD1_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD1_SOFF_tag;

typedef union eDMA_0_TCD_NBYTES1_TCD1_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES1_TCD1_NBYTES_MLOFFNO_tag;

typedef union eDMA_0_TCD_NBYTES1_TCD1_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES1_TCD1_NBYTES_MLOFFYES_tag;

typedef union eDMA_0_TCD_NBYTES1_union_tag {
  eDMA_0_TCD_NBYTES1_TCD1_NBYTES_MLOFFNO_tag TCD1_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  eDMA_0_TCD_NBYTES1_TCD1_NBYTES_MLOFFYES_tag TCD1_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} eDMA_0_TCD_NBYTES1_tag;

typedef union eDMA_0_TCD_TCD1_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} eDMA_0_TCD_TCD1_SLAST_SDA_tag;

typedef union eDMA_0_TCD_TCD1_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} eDMA_0_TCD_TCD1_DADDR_tag;

typedef union eDMA_0_TCD_CITER1_TCD1_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t CITER:15;                /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER1_TCD1_CITER_ELINKNO_tag;

typedef union eDMA_0_TCD_CITER1_TCD1_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER1_TCD1_CITER_ELINKYES_tag;

typedef union eDMA_0_TCD_CITER1_union_tag {
  eDMA_0_TCD_CITER1_TCD1_CITER_ELINKNO_tag TCD1_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_CITER1_TCD1_CITER_ELINKYES_tag TCD1_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_CITER1_tag;

typedef union eDMA_0_TCD_TCD1_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD1_DOFF_tag;

typedef union eDMA_0_TCD_TCD1_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} eDMA_0_TCD_TCD1_DLAST_SGA_tag;

typedef union eDMA_0_TCD_BITER1_TCD1_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enables Link */
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER1_TCD1_BITER_ELINKNO_tag;

typedef union eDMA_0_TCD_BITER1_TCD1_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER1_TCD1_BITER_ELINKYES_tag;

typedef union eDMA_0_TCD_BITER1_union_tag {
  eDMA_0_TCD_BITER1_TCD1_BITER_ELINKNO_tag TCD1_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_BITER1_TCD1_BITER_ELINKYES_tag TCD1_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_BITER1_tag;

typedef union eDMA_0_TCD_TCD1_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t BWC:2;                   /* Bandwidth Control */
    vuint16_t _unused_2:1;             /* Reserved */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t START:1;                 /* Channel Start */
  } B;
} eDMA_0_TCD_TCD1_CSR_tag;

typedef union eDMA_0_TCD_CH2_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ACTIVE:1;                /* Channel Active */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t _unused_2:26;            /* Reserved */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t ERQ:1;                   /* Enable DMA Request */
  } B;
} eDMA_0_TCD_CH2_CSR_tag;

typedef union eDMA_0_TCD_CH2_ES_union_tag { /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERR:1;                   /* Error In Channel */
    vuint32_t _unused_1:23;            /* Reserved */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t DBE:1;                   /* Destination Bus Error */
  } B;
} eDMA_0_TCD_CH2_ES_tag;

typedef union eDMA_0_TCD_CH2_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t INT:1;                   /* Interrupt Request */
  } B;
} eDMA_0_TCD_CH2_INT_tag;

typedef union eDMA_0_TCD_CH2_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;            /* Reserved */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t _unused_17:10;           /* Reserved */
    vuint32_t MID:5;                   /* Master ID */
  } B;
} eDMA_0_TCD_CH2_SBR_tag;

typedef union eDMA_0_TCD_CH2_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t _unused_2:27;            /* Reserved */
    vuint32_t APL:3;                   /* Arbitration Priority Level */
  } B;
} eDMA_0_TCD_CH2_PRI_tag;

typedef union eDMA_0_TCD_TCD2_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} eDMA_0_TCD_TCD2_SADDR_tag;

typedef union eDMA_0_TCD_TCD2_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t SMOD:5;                  /* Source Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
  } B;
} eDMA_0_TCD_TCD2_ATTR_tag;

typedef union eDMA_0_TCD_TCD2_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD2_SOFF_tag;

typedef union eDMA_0_TCD_NBYTES2_TCD2_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES2_TCD2_NBYTES_MLOFFNO_tag;

typedef union eDMA_0_TCD_NBYTES2_TCD2_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES2_TCD2_NBYTES_MLOFFYES_tag;

typedef union eDMA_0_TCD_NBYTES2_union_tag {
  eDMA_0_TCD_NBYTES2_TCD2_NBYTES_MLOFFNO_tag TCD2_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  eDMA_0_TCD_NBYTES2_TCD2_NBYTES_MLOFFYES_tag TCD2_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} eDMA_0_TCD_NBYTES2_tag;

typedef union eDMA_0_TCD_TCD2_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} eDMA_0_TCD_TCD2_SLAST_SDA_tag;

typedef union eDMA_0_TCD_TCD2_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} eDMA_0_TCD_TCD2_DADDR_tag;

typedef union eDMA_0_TCD_CITER2_TCD2_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t CITER:15;                /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER2_TCD2_CITER_ELINKNO_tag;

typedef union eDMA_0_TCD_CITER2_TCD2_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER2_TCD2_CITER_ELINKYES_tag;

typedef union eDMA_0_TCD_CITER2_union_tag {
  eDMA_0_TCD_CITER2_TCD2_CITER_ELINKNO_tag TCD2_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_CITER2_TCD2_CITER_ELINKYES_tag TCD2_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_CITER2_tag;

typedef union eDMA_0_TCD_TCD2_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD2_DOFF_tag;

typedef union eDMA_0_TCD_TCD2_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} eDMA_0_TCD_TCD2_DLAST_SGA_tag;

typedef union eDMA_0_TCD_BITER2_TCD2_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enables Link */
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER2_TCD2_BITER_ELINKNO_tag;

typedef union eDMA_0_TCD_BITER2_TCD2_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER2_TCD2_BITER_ELINKYES_tag;

typedef union eDMA_0_TCD_BITER2_union_tag {
  eDMA_0_TCD_BITER2_TCD2_BITER_ELINKNO_tag TCD2_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_BITER2_TCD2_BITER_ELINKYES_tag TCD2_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_BITER2_tag;

typedef union eDMA_0_TCD_TCD2_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t BWC:2;                   /* Bandwidth Control */
    vuint16_t _unused_2:1;             /* Reserved */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t START:1;                 /* Channel Start */
  } B;
} eDMA_0_TCD_TCD2_CSR_tag;

typedef union eDMA_0_TCD_CH3_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ACTIVE:1;                /* Channel Active */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t _unused_2:26;            /* Reserved */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t ERQ:1;                   /* Enable DMA Request */
  } B;
} eDMA_0_TCD_CH3_CSR_tag;

typedef union eDMA_0_TCD_CH3_ES_union_tag { /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERR:1;                   /* Error In Channel */
    vuint32_t _unused_1:23;            /* Reserved */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t DBE:1;                   /* Destination Bus Error */
  } B;
} eDMA_0_TCD_CH3_ES_tag;

typedef union eDMA_0_TCD_CH3_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t INT:1;                   /* Interrupt Request */
  } B;
} eDMA_0_TCD_CH3_INT_tag;

typedef union eDMA_0_TCD_CH3_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;            /* Reserved */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t _unused_17:10;           /* Reserved */
    vuint32_t MID:5;                   /* Master ID */
  } B;
} eDMA_0_TCD_CH3_SBR_tag;

typedef union eDMA_0_TCD_CH3_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t _unused_2:27;            /* Reserved */
    vuint32_t APL:3;                   /* Arbitration Priority Level */
  } B;
} eDMA_0_TCD_CH3_PRI_tag;

typedef union eDMA_0_TCD_TCD3_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} eDMA_0_TCD_TCD3_SADDR_tag;

typedef union eDMA_0_TCD_TCD3_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t SMOD:5;                  /* Source Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
  } B;
} eDMA_0_TCD_TCD3_ATTR_tag;

typedef union eDMA_0_TCD_TCD3_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD3_SOFF_tag;

typedef union eDMA_0_TCD_NBYTES3_TCD3_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES3_TCD3_NBYTES_MLOFFNO_tag;

typedef union eDMA_0_TCD_NBYTES3_TCD3_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES3_TCD3_NBYTES_MLOFFYES_tag;

typedef union eDMA_0_TCD_NBYTES3_union_tag {
  eDMA_0_TCD_NBYTES3_TCD3_NBYTES_MLOFFNO_tag TCD3_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  eDMA_0_TCD_NBYTES3_TCD3_NBYTES_MLOFFYES_tag TCD3_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} eDMA_0_TCD_NBYTES3_tag;

typedef union eDMA_0_TCD_TCD3_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} eDMA_0_TCD_TCD3_SLAST_SDA_tag;

typedef union eDMA_0_TCD_TCD3_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} eDMA_0_TCD_TCD3_DADDR_tag;

typedef union eDMA_0_TCD_CITER3_TCD3_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t CITER:15;                /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER3_TCD3_CITER_ELINKNO_tag;

typedef union eDMA_0_TCD_CITER3_TCD3_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER3_TCD3_CITER_ELINKYES_tag;

typedef union eDMA_0_TCD_CITER3_union_tag {
  eDMA_0_TCD_CITER3_TCD3_CITER_ELINKNO_tag TCD3_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_CITER3_TCD3_CITER_ELINKYES_tag TCD3_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_CITER3_tag;

typedef union eDMA_0_TCD_TCD3_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD3_DOFF_tag;

typedef union eDMA_0_TCD_TCD3_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} eDMA_0_TCD_TCD3_DLAST_SGA_tag;

typedef union eDMA_0_TCD_BITER3_TCD3_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enables Link */
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER3_TCD3_BITER_ELINKNO_tag;

typedef union eDMA_0_TCD_BITER3_TCD3_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER3_TCD3_BITER_ELINKYES_tag;

typedef union eDMA_0_TCD_BITER3_union_tag {
  eDMA_0_TCD_BITER3_TCD3_BITER_ELINKNO_tag TCD3_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_BITER3_TCD3_BITER_ELINKYES_tag TCD3_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_BITER3_tag;

typedef union eDMA_0_TCD_TCD3_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t BWC:2;                   /* Bandwidth Control */
    vuint16_t _unused_2:1;             /* Reserved */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t START:1;                 /* Channel Start */
  } B;
} eDMA_0_TCD_TCD3_CSR_tag;

typedef union eDMA_0_TCD_CH4_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ACTIVE:1;                /* Channel Active */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t _unused_2:26;            /* Reserved */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t ERQ:1;                   /* Enable DMA Request */
  } B;
} eDMA_0_TCD_CH4_CSR_tag;

typedef union eDMA_0_TCD_CH4_ES_union_tag { /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERR:1;                   /* Error In Channel */
    vuint32_t _unused_1:23;            /* Reserved */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t DBE:1;                   /* Destination Bus Error */
  } B;
} eDMA_0_TCD_CH4_ES_tag;

typedef union eDMA_0_TCD_CH4_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t INT:1;                   /* Interrupt Request */
  } B;
} eDMA_0_TCD_CH4_INT_tag;

typedef union eDMA_0_TCD_CH4_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;            /* Reserved */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t _unused_17:10;           /* Reserved */
    vuint32_t MID:5;                   /* Master ID */
  } B;
} eDMA_0_TCD_CH4_SBR_tag;

typedef union eDMA_0_TCD_CH4_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t _unused_2:27;            /* Reserved */
    vuint32_t APL:3;                   /* Arbitration Priority Level */
  } B;
} eDMA_0_TCD_CH4_PRI_tag;

typedef union eDMA_0_TCD_TCD4_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} eDMA_0_TCD_TCD4_SADDR_tag;

typedef union eDMA_0_TCD_TCD4_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t SMOD:5;                  /* Source Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
  } B;
} eDMA_0_TCD_TCD4_ATTR_tag;

typedef union eDMA_0_TCD_TCD4_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD4_SOFF_tag;

typedef union eDMA_0_TCD_NBYTES4_TCD4_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES4_TCD4_NBYTES_MLOFFNO_tag;

typedef union eDMA_0_TCD_NBYTES4_TCD4_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES4_TCD4_NBYTES_MLOFFYES_tag;

typedef union eDMA_0_TCD_NBYTES4_union_tag {
  eDMA_0_TCD_NBYTES4_TCD4_NBYTES_MLOFFNO_tag TCD4_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  eDMA_0_TCD_NBYTES4_TCD4_NBYTES_MLOFFYES_tag TCD4_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} eDMA_0_TCD_NBYTES4_tag;

typedef union eDMA_0_TCD_TCD4_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} eDMA_0_TCD_TCD4_SLAST_SDA_tag;

typedef union eDMA_0_TCD_TCD4_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} eDMA_0_TCD_TCD4_DADDR_tag;

typedef union eDMA_0_TCD_CITER4_TCD4_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t CITER:15;                /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER4_TCD4_CITER_ELINKNO_tag;

typedef union eDMA_0_TCD_CITER4_TCD4_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER4_TCD4_CITER_ELINKYES_tag;

typedef union eDMA_0_TCD_CITER4_union_tag {
  eDMA_0_TCD_CITER4_TCD4_CITER_ELINKNO_tag TCD4_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_CITER4_TCD4_CITER_ELINKYES_tag TCD4_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_CITER4_tag;

typedef union eDMA_0_TCD_TCD4_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD4_DOFF_tag;

typedef union eDMA_0_TCD_TCD4_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} eDMA_0_TCD_TCD4_DLAST_SGA_tag;

typedef union eDMA_0_TCD_BITER4_TCD4_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enables Link */
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER4_TCD4_BITER_ELINKNO_tag;

typedef union eDMA_0_TCD_BITER4_TCD4_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER4_TCD4_BITER_ELINKYES_tag;

typedef union eDMA_0_TCD_BITER4_union_tag {
  eDMA_0_TCD_BITER4_TCD4_BITER_ELINKNO_tag TCD4_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_BITER4_TCD4_BITER_ELINKYES_tag TCD4_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_BITER4_tag;

typedef union eDMA_0_TCD_TCD4_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t BWC:2;                   /* Bandwidth Control */
    vuint16_t _unused_2:1;             /* Reserved */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t START:1;                 /* Channel Start */
  } B;
} eDMA_0_TCD_TCD4_CSR_tag;

typedef union eDMA_0_TCD_CH5_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ACTIVE:1;                /* Channel Active */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t _unused_2:26;            /* Reserved */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t ERQ:1;                   /* Enable DMA Request */
  } B;
} eDMA_0_TCD_CH5_CSR_tag;

typedef union eDMA_0_TCD_CH5_ES_union_tag { /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERR:1;                   /* Error In Channel */
    vuint32_t _unused_1:23;            /* Reserved */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t DBE:1;                   /* Destination Bus Error */
  } B;
} eDMA_0_TCD_CH5_ES_tag;

typedef union eDMA_0_TCD_CH5_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t INT:1;                   /* Interrupt Request */
  } B;
} eDMA_0_TCD_CH5_INT_tag;

typedef union eDMA_0_TCD_CH5_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;            /* Reserved */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t _unused_17:10;           /* Reserved */
    vuint32_t MID:5;                   /* Master ID */
  } B;
} eDMA_0_TCD_CH5_SBR_tag;

typedef union eDMA_0_TCD_CH5_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t _unused_2:27;            /* Reserved */
    vuint32_t APL:3;                   /* Arbitration Priority Level */
  } B;
} eDMA_0_TCD_CH5_PRI_tag;

typedef union eDMA_0_TCD_TCD5_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} eDMA_0_TCD_TCD5_SADDR_tag;

typedef union eDMA_0_TCD_TCD5_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t SMOD:5;                  /* Source Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
  } B;
} eDMA_0_TCD_TCD5_ATTR_tag;

typedef union eDMA_0_TCD_TCD5_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD5_SOFF_tag;

typedef union eDMA_0_TCD_NBYTES5_TCD5_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES5_TCD5_NBYTES_MLOFFNO_tag;

typedef union eDMA_0_TCD_NBYTES5_TCD5_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES5_TCD5_NBYTES_MLOFFYES_tag;

typedef union eDMA_0_TCD_NBYTES5_union_tag {
  eDMA_0_TCD_NBYTES5_TCD5_NBYTES_MLOFFNO_tag TCD5_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  eDMA_0_TCD_NBYTES5_TCD5_NBYTES_MLOFFYES_tag TCD5_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} eDMA_0_TCD_NBYTES5_tag;

typedef union eDMA_0_TCD_TCD5_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} eDMA_0_TCD_TCD5_SLAST_SDA_tag;

typedef union eDMA_0_TCD_TCD5_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} eDMA_0_TCD_TCD5_DADDR_tag;

typedef union eDMA_0_TCD_CITER5_TCD5_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t CITER:15;                /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER5_TCD5_CITER_ELINKNO_tag;

typedef union eDMA_0_TCD_CITER5_TCD5_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER5_TCD5_CITER_ELINKYES_tag;

typedef union eDMA_0_TCD_CITER5_union_tag {
  eDMA_0_TCD_CITER5_TCD5_CITER_ELINKNO_tag TCD5_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_CITER5_TCD5_CITER_ELINKYES_tag TCD5_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_CITER5_tag;

typedef union eDMA_0_TCD_TCD5_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD5_DOFF_tag;

typedef union eDMA_0_TCD_TCD5_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} eDMA_0_TCD_TCD5_DLAST_SGA_tag;

typedef union eDMA_0_TCD_BITER5_TCD5_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enables Link */
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER5_TCD5_BITER_ELINKNO_tag;

typedef union eDMA_0_TCD_BITER5_TCD5_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER5_TCD5_BITER_ELINKYES_tag;

typedef union eDMA_0_TCD_BITER5_union_tag {
  eDMA_0_TCD_BITER5_TCD5_BITER_ELINKNO_tag TCD5_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_BITER5_TCD5_BITER_ELINKYES_tag TCD5_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_BITER5_tag;

typedef union eDMA_0_TCD_TCD5_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t BWC:2;                   /* Bandwidth Control */
    vuint16_t _unused_2:1;             /* Reserved */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t START:1;                 /* Channel Start */
  } B;
} eDMA_0_TCD_TCD5_CSR_tag;

typedef union eDMA_0_TCD_CH6_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ACTIVE:1;                /* Channel Active */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t _unused_2:26;            /* Reserved */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t ERQ:1;                   /* Enable DMA Request */
  } B;
} eDMA_0_TCD_CH6_CSR_tag;

typedef union eDMA_0_TCD_CH6_ES_union_tag { /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERR:1;                   /* Error In Channel */
    vuint32_t _unused_1:23;            /* Reserved */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t DBE:1;                   /* Destination Bus Error */
  } B;
} eDMA_0_TCD_CH6_ES_tag;

typedef union eDMA_0_TCD_CH6_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t INT:1;                   /* Interrupt Request */
  } B;
} eDMA_0_TCD_CH6_INT_tag;

typedef union eDMA_0_TCD_CH6_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;            /* Reserved */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t _unused_17:10;           /* Reserved */
    vuint32_t MID:5;                   /* Master ID */
  } B;
} eDMA_0_TCD_CH6_SBR_tag;

typedef union eDMA_0_TCD_CH6_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t _unused_2:27;            /* Reserved */
    vuint32_t APL:3;                   /* Arbitration Priority Level */
  } B;
} eDMA_0_TCD_CH6_PRI_tag;

typedef union eDMA_0_TCD_TCD6_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} eDMA_0_TCD_TCD6_SADDR_tag;

typedef union eDMA_0_TCD_TCD6_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t SMOD:5;                  /* Source Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
  } B;
} eDMA_0_TCD_TCD6_ATTR_tag;

typedef union eDMA_0_TCD_TCD6_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD6_SOFF_tag;

typedef union eDMA_0_TCD_NBYTES6_TCD6_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES6_TCD6_NBYTES_MLOFFNO_tag;

typedef union eDMA_0_TCD_NBYTES6_TCD6_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES6_TCD6_NBYTES_MLOFFYES_tag;

typedef union eDMA_0_TCD_NBYTES6_union_tag {
  eDMA_0_TCD_NBYTES6_TCD6_NBYTES_MLOFFNO_tag TCD6_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  eDMA_0_TCD_NBYTES6_TCD6_NBYTES_MLOFFYES_tag TCD6_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} eDMA_0_TCD_NBYTES6_tag;

typedef union eDMA_0_TCD_TCD6_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} eDMA_0_TCD_TCD6_SLAST_SDA_tag;

typedef union eDMA_0_TCD_TCD6_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} eDMA_0_TCD_TCD6_DADDR_tag;

typedef union eDMA_0_TCD_CITER6_TCD6_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t CITER:15;                /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER6_TCD6_CITER_ELINKNO_tag;

typedef union eDMA_0_TCD_CITER6_TCD6_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER6_TCD6_CITER_ELINKYES_tag;

typedef union eDMA_0_TCD_CITER6_union_tag {
  eDMA_0_TCD_CITER6_TCD6_CITER_ELINKNO_tag TCD6_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_CITER6_TCD6_CITER_ELINKYES_tag TCD6_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_CITER6_tag;

typedef union eDMA_0_TCD_TCD6_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD6_DOFF_tag;

typedef union eDMA_0_TCD_TCD6_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} eDMA_0_TCD_TCD6_DLAST_SGA_tag;

typedef union eDMA_0_TCD_BITER6_TCD6_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enables Link */
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER6_TCD6_BITER_ELINKNO_tag;

typedef union eDMA_0_TCD_BITER6_TCD6_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER6_TCD6_BITER_ELINKYES_tag;

typedef union eDMA_0_TCD_BITER6_union_tag {
  eDMA_0_TCD_BITER6_TCD6_BITER_ELINKNO_tag TCD6_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_BITER6_TCD6_BITER_ELINKYES_tag TCD6_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_BITER6_tag;

typedef union eDMA_0_TCD_TCD6_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t BWC:2;                   /* Bandwidth Control */
    vuint16_t _unused_2:1;             /* Reserved */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t START:1;                 /* Channel Start */
  } B;
} eDMA_0_TCD_TCD6_CSR_tag;

typedef union eDMA_0_TCD_CH7_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ACTIVE:1;                /* Channel Active */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t _unused_2:26;            /* Reserved */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t ERQ:1;                   /* Enable DMA Request */
  } B;
} eDMA_0_TCD_CH7_CSR_tag;

typedef union eDMA_0_TCD_CH7_ES_union_tag { /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERR:1;                   /* Error In Channel */
    vuint32_t _unused_1:23;            /* Reserved */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t DBE:1;                   /* Destination Bus Error */
  } B;
} eDMA_0_TCD_CH7_ES_tag;

typedef union eDMA_0_TCD_CH7_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t INT:1;                   /* Interrupt Request */
  } B;
} eDMA_0_TCD_CH7_INT_tag;

typedef union eDMA_0_TCD_CH7_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;            /* Reserved */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t _unused_17:10;           /* Reserved */
    vuint32_t MID:5;                   /* Master ID */
  } B;
} eDMA_0_TCD_CH7_SBR_tag;

typedef union eDMA_0_TCD_CH7_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t _unused_2:27;            /* Reserved */
    vuint32_t APL:3;                   /* Arbitration Priority Level */
  } B;
} eDMA_0_TCD_CH7_PRI_tag;

typedef union eDMA_0_TCD_TCD7_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} eDMA_0_TCD_TCD7_SADDR_tag;

typedef union eDMA_0_TCD_TCD7_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t SMOD:5;                  /* Source Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
  } B;
} eDMA_0_TCD_TCD7_ATTR_tag;

typedef union eDMA_0_TCD_TCD7_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD7_SOFF_tag;

typedef union eDMA_0_TCD_NBYTES7_TCD7_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES7_TCD7_NBYTES_MLOFFNO_tag;

typedef union eDMA_0_TCD_NBYTES7_TCD7_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES7_TCD7_NBYTES_MLOFFYES_tag;

typedef union eDMA_0_TCD_NBYTES7_union_tag {
  eDMA_0_TCD_NBYTES7_TCD7_NBYTES_MLOFFNO_tag TCD7_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  eDMA_0_TCD_NBYTES7_TCD7_NBYTES_MLOFFYES_tag TCD7_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} eDMA_0_TCD_NBYTES7_tag;

typedef union eDMA_0_TCD_TCD7_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} eDMA_0_TCD_TCD7_SLAST_SDA_tag;

typedef union eDMA_0_TCD_TCD7_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} eDMA_0_TCD_TCD7_DADDR_tag;

typedef union eDMA_0_TCD_CITER7_TCD7_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t CITER:15;                /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER7_TCD7_CITER_ELINKNO_tag;

typedef union eDMA_0_TCD_CITER7_TCD7_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER7_TCD7_CITER_ELINKYES_tag;

typedef union eDMA_0_TCD_CITER7_union_tag {
  eDMA_0_TCD_CITER7_TCD7_CITER_ELINKNO_tag TCD7_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_CITER7_TCD7_CITER_ELINKYES_tag TCD7_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_CITER7_tag;

typedef union eDMA_0_TCD_TCD7_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD7_DOFF_tag;

typedef union eDMA_0_TCD_TCD7_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} eDMA_0_TCD_TCD7_DLAST_SGA_tag;

typedef union eDMA_0_TCD_BITER7_TCD7_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enables Link */
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER7_TCD7_BITER_ELINKNO_tag;

typedef union eDMA_0_TCD_BITER7_TCD7_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER7_TCD7_BITER_ELINKYES_tag;

typedef union eDMA_0_TCD_BITER7_union_tag {
  eDMA_0_TCD_BITER7_TCD7_BITER_ELINKNO_tag TCD7_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_BITER7_TCD7_BITER_ELINKYES_tag TCD7_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_BITER7_tag;

typedef union eDMA_0_TCD_TCD7_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t BWC:2;                   /* Bandwidth Control */
    vuint16_t _unused_2:1;             /* Reserved */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t START:1;                 /* Channel Start */
  } B;
} eDMA_0_TCD_TCD7_CSR_tag;

typedef union eDMA_0_TCD_CH8_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ACTIVE:1;                /* Channel Active */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t _unused_2:26;            /* Reserved */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t ERQ:1;                   /* Enable DMA Request */
  } B;
} eDMA_0_TCD_CH8_CSR_tag;

typedef union eDMA_0_TCD_CH8_ES_union_tag { /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERR:1;                   /* Error In Channel */
    vuint32_t _unused_1:23;            /* Reserved */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t DBE:1;                   /* Destination Bus Error */
  } B;
} eDMA_0_TCD_CH8_ES_tag;

typedef union eDMA_0_TCD_CH8_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t INT:1;                   /* Interrupt Request */
  } B;
} eDMA_0_TCD_CH8_INT_tag;

typedef union eDMA_0_TCD_CH8_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;            /* Reserved */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t _unused_17:10;           /* Reserved */
    vuint32_t MID:5;                   /* Master ID */
  } B;
} eDMA_0_TCD_CH8_SBR_tag;

typedef union eDMA_0_TCD_CH8_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t _unused_2:27;            /* Reserved */
    vuint32_t APL:3;                   /* Arbitration Priority Level */
  } B;
} eDMA_0_TCD_CH8_PRI_tag;

typedef union eDMA_0_TCD_TCD8_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} eDMA_0_TCD_TCD8_SADDR_tag;

typedef union eDMA_0_TCD_TCD8_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t SMOD:5;                  /* Source Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
  } B;
} eDMA_0_TCD_TCD8_ATTR_tag;

typedef union eDMA_0_TCD_TCD8_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD8_SOFF_tag;

typedef union eDMA_0_TCD_NBYTES8_TCD8_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES8_TCD8_NBYTES_MLOFFNO_tag;

typedef union eDMA_0_TCD_NBYTES8_TCD8_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES8_TCD8_NBYTES_MLOFFYES_tag;

typedef union eDMA_0_TCD_NBYTES8_union_tag {
  eDMA_0_TCD_NBYTES8_TCD8_NBYTES_MLOFFNO_tag TCD8_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  eDMA_0_TCD_NBYTES8_TCD8_NBYTES_MLOFFYES_tag TCD8_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} eDMA_0_TCD_NBYTES8_tag;

typedef union eDMA_0_TCD_TCD8_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} eDMA_0_TCD_TCD8_SLAST_SDA_tag;

typedef union eDMA_0_TCD_TCD8_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} eDMA_0_TCD_TCD8_DADDR_tag;

typedef union eDMA_0_TCD_CITER8_TCD8_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t CITER:15;                /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER8_TCD8_CITER_ELINKNO_tag;

typedef union eDMA_0_TCD_CITER8_TCD8_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER8_TCD8_CITER_ELINKYES_tag;

typedef union eDMA_0_TCD_CITER8_union_tag {
  eDMA_0_TCD_CITER8_TCD8_CITER_ELINKNO_tag TCD8_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_CITER8_TCD8_CITER_ELINKYES_tag TCD8_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_CITER8_tag;

typedef union eDMA_0_TCD_TCD8_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD8_DOFF_tag;

typedef union eDMA_0_TCD_TCD8_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} eDMA_0_TCD_TCD8_DLAST_SGA_tag;

typedef union eDMA_0_TCD_BITER8_TCD8_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enables Link */
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER8_TCD8_BITER_ELINKNO_tag;

typedef union eDMA_0_TCD_BITER8_TCD8_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER8_TCD8_BITER_ELINKYES_tag;

typedef union eDMA_0_TCD_BITER8_union_tag {
  eDMA_0_TCD_BITER8_TCD8_BITER_ELINKNO_tag TCD8_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_BITER8_TCD8_BITER_ELINKYES_tag TCD8_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_BITER8_tag;

typedef union eDMA_0_TCD_TCD8_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t BWC:2;                   /* Bandwidth Control */
    vuint16_t _unused_2:1;             /* Reserved */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t START:1;                 /* Channel Start */
  } B;
} eDMA_0_TCD_TCD8_CSR_tag;

typedef union eDMA_0_TCD_CH9_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ACTIVE:1;                /* Channel Active */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t _unused_2:26;            /* Reserved */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t ERQ:1;                   /* Enable DMA Request */
  } B;
} eDMA_0_TCD_CH9_CSR_tag;

typedef union eDMA_0_TCD_CH9_ES_union_tag { /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERR:1;                   /* Error In Channel */
    vuint32_t _unused_1:23;            /* Reserved */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t DBE:1;                   /* Destination Bus Error */
  } B;
} eDMA_0_TCD_CH9_ES_tag;

typedef union eDMA_0_TCD_CH9_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t INT:1;                   /* Interrupt Request */
  } B;
} eDMA_0_TCD_CH9_INT_tag;

typedef union eDMA_0_TCD_CH9_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;            /* Reserved */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t _unused_17:10;           /* Reserved */
    vuint32_t MID:5;                   /* Master ID */
  } B;
} eDMA_0_TCD_CH9_SBR_tag;

typedef union eDMA_0_TCD_CH9_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t _unused_2:27;            /* Reserved */
    vuint32_t APL:3;                   /* Arbitration Priority Level */
  } B;
} eDMA_0_TCD_CH9_PRI_tag;

typedef union eDMA_0_TCD_TCD9_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} eDMA_0_TCD_TCD9_SADDR_tag;

typedef union eDMA_0_TCD_TCD9_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t SMOD:5;                  /* Source Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
  } B;
} eDMA_0_TCD_TCD9_ATTR_tag;

typedef union eDMA_0_TCD_TCD9_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD9_SOFF_tag;

typedef union eDMA_0_TCD_NBYTES9_TCD9_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES9_TCD9_NBYTES_MLOFFNO_tag;

typedef union eDMA_0_TCD_NBYTES9_TCD9_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES9_TCD9_NBYTES_MLOFFYES_tag;

typedef union eDMA_0_TCD_NBYTES9_union_tag {
  eDMA_0_TCD_NBYTES9_TCD9_NBYTES_MLOFFNO_tag TCD9_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  eDMA_0_TCD_NBYTES9_TCD9_NBYTES_MLOFFYES_tag TCD9_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} eDMA_0_TCD_NBYTES9_tag;

typedef union eDMA_0_TCD_TCD9_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} eDMA_0_TCD_TCD9_SLAST_SDA_tag;

typedef union eDMA_0_TCD_TCD9_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} eDMA_0_TCD_TCD9_DADDR_tag;

typedef union eDMA_0_TCD_CITER9_TCD9_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t CITER:15;                /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER9_TCD9_CITER_ELINKNO_tag;

typedef union eDMA_0_TCD_CITER9_TCD9_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER9_TCD9_CITER_ELINKYES_tag;

typedef union eDMA_0_TCD_CITER9_union_tag {
  eDMA_0_TCD_CITER9_TCD9_CITER_ELINKNO_tag TCD9_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_CITER9_TCD9_CITER_ELINKYES_tag TCD9_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_CITER9_tag;

typedef union eDMA_0_TCD_TCD9_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD9_DOFF_tag;

typedef union eDMA_0_TCD_TCD9_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} eDMA_0_TCD_TCD9_DLAST_SGA_tag;

typedef union eDMA_0_TCD_BITER9_TCD9_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enables Link */
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER9_TCD9_BITER_ELINKNO_tag;

typedef union eDMA_0_TCD_BITER9_TCD9_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER9_TCD9_BITER_ELINKYES_tag;

typedef union eDMA_0_TCD_BITER9_union_tag {
  eDMA_0_TCD_BITER9_TCD9_BITER_ELINKNO_tag TCD9_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_BITER9_TCD9_BITER_ELINKYES_tag TCD9_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_BITER9_tag;

typedef union eDMA_0_TCD_TCD9_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t BWC:2;                   /* Bandwidth Control */
    vuint16_t _unused_2:1;             /* Reserved */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t START:1;                 /* Channel Start */
  } B;
} eDMA_0_TCD_TCD9_CSR_tag;

typedef union eDMA_0_TCD_CH10_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ACTIVE:1;                /* Channel Active */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t _unused_2:26;            /* Reserved */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t ERQ:1;                   /* Enable DMA Request */
  } B;
} eDMA_0_TCD_CH10_CSR_tag;

typedef union eDMA_0_TCD_CH10_ES_union_tag { /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERR:1;                   /* Error In Channel */
    vuint32_t _unused_1:23;            /* Reserved */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t DBE:1;                   /* Destination Bus Error */
  } B;
} eDMA_0_TCD_CH10_ES_tag;

typedef union eDMA_0_TCD_CH10_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t INT:1;                   /* Interrupt Request */
  } B;
} eDMA_0_TCD_CH10_INT_tag;

typedef union eDMA_0_TCD_CH10_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;            /* Reserved */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t _unused_17:10;           /* Reserved */
    vuint32_t MID:5;                   /* Master ID */
  } B;
} eDMA_0_TCD_CH10_SBR_tag;

typedef union eDMA_0_TCD_CH10_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t _unused_2:27;            /* Reserved */
    vuint32_t APL:3;                   /* Arbitration Priority Level */
  } B;
} eDMA_0_TCD_CH10_PRI_tag;

typedef union eDMA_0_TCD_TCD10_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} eDMA_0_TCD_TCD10_SADDR_tag;

typedef union eDMA_0_TCD_TCD10_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t SMOD:5;                  /* Source Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
  } B;
} eDMA_0_TCD_TCD10_ATTR_tag;

typedef union eDMA_0_TCD_TCD10_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD10_SOFF_tag;

typedef union eDMA_0_TCD_NBYTES10_TCD10_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES10_TCD10_NBYTES_MLOFFNO_tag;

typedef union eDMA_0_TCD_NBYTES10_TCD10_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES10_TCD10_NBYTES_MLOFFYES_tag;

typedef union eDMA_0_TCD_NBYTES10_union_tag {
  eDMA_0_TCD_NBYTES10_TCD10_NBYTES_MLOFFNO_tag TCD10_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  eDMA_0_TCD_NBYTES10_TCD10_NBYTES_MLOFFYES_tag TCD10_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} eDMA_0_TCD_NBYTES10_tag;

typedef union eDMA_0_TCD_TCD10_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} eDMA_0_TCD_TCD10_SLAST_SDA_tag;

typedef union eDMA_0_TCD_TCD10_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} eDMA_0_TCD_TCD10_DADDR_tag;

typedef union eDMA_0_TCD_CITER10_TCD10_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t CITER:15;                /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER10_TCD10_CITER_ELINKNO_tag;

typedef union eDMA_0_TCD_CITER10_TCD10_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER10_TCD10_CITER_ELINKYES_tag;

typedef union eDMA_0_TCD_CITER10_union_tag {
  eDMA_0_TCD_CITER10_TCD10_CITER_ELINKNO_tag TCD10_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_CITER10_TCD10_CITER_ELINKYES_tag TCD10_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_CITER10_tag;

typedef union eDMA_0_TCD_TCD10_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD10_DOFF_tag;

typedef union eDMA_0_TCD_TCD10_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} eDMA_0_TCD_TCD10_DLAST_SGA_tag;

typedef union eDMA_0_TCD_BITER10_TCD10_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enables Link */
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER10_TCD10_BITER_ELINKNO_tag;

typedef union eDMA_0_TCD_BITER10_TCD10_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER10_TCD10_BITER_ELINKYES_tag;

typedef union eDMA_0_TCD_BITER10_union_tag {
  eDMA_0_TCD_BITER10_TCD10_BITER_ELINKNO_tag TCD10_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_BITER10_TCD10_BITER_ELINKYES_tag TCD10_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_BITER10_tag;

typedef union eDMA_0_TCD_TCD10_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t BWC:2;                   /* Bandwidth Control */
    vuint16_t _unused_2:1;             /* Reserved */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t START:1;                 /* Channel Start */
  } B;
} eDMA_0_TCD_TCD10_CSR_tag;

typedef union eDMA_0_TCD_CH11_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ACTIVE:1;                /* Channel Active */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t _unused_2:26;            /* Reserved */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t ERQ:1;                   /* Enable DMA Request */
  } B;
} eDMA_0_TCD_CH11_CSR_tag;

typedef union eDMA_0_TCD_CH11_ES_union_tag { /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERR:1;                   /* Error In Channel */
    vuint32_t _unused_1:23;            /* Reserved */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t DBE:1;                   /* Destination Bus Error */
  } B;
} eDMA_0_TCD_CH11_ES_tag;

typedef union eDMA_0_TCD_CH11_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t INT:1;                   /* Interrupt Request */
  } B;
} eDMA_0_TCD_CH11_INT_tag;

typedef union eDMA_0_TCD_CH11_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;            /* Reserved */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t _unused_17:10;           /* Reserved */
    vuint32_t MID:5;                   /* Master ID */
  } B;
} eDMA_0_TCD_CH11_SBR_tag;

typedef union eDMA_0_TCD_CH11_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t _unused_2:27;            /* Reserved */
    vuint32_t APL:3;                   /* Arbitration Priority Level */
  } B;
} eDMA_0_TCD_CH11_PRI_tag;

typedef union eDMA_0_TCD_TCD11_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} eDMA_0_TCD_TCD11_SADDR_tag;

typedef union eDMA_0_TCD_TCD11_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t SMOD:5;                  /* Source Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
  } B;
} eDMA_0_TCD_TCD11_ATTR_tag;

typedef union eDMA_0_TCD_TCD11_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD11_SOFF_tag;

typedef union eDMA_0_TCD_NBYTES11_TCD11_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES11_TCD11_NBYTES_MLOFFNO_tag;

typedef union eDMA_0_TCD_NBYTES11_TCD11_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES11_TCD11_NBYTES_MLOFFYES_tag;

typedef union eDMA_0_TCD_NBYTES11_union_tag {
  eDMA_0_TCD_NBYTES11_TCD11_NBYTES_MLOFFNO_tag TCD11_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  eDMA_0_TCD_NBYTES11_TCD11_NBYTES_MLOFFYES_tag TCD11_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} eDMA_0_TCD_NBYTES11_tag;

typedef union eDMA_0_TCD_TCD11_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} eDMA_0_TCD_TCD11_SLAST_SDA_tag;

typedef union eDMA_0_TCD_TCD11_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} eDMA_0_TCD_TCD11_DADDR_tag;

typedef union eDMA_0_TCD_CITER11_TCD11_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t CITER:15;                /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER11_TCD11_CITER_ELINKNO_tag;

typedef union eDMA_0_TCD_CITER11_TCD11_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER11_TCD11_CITER_ELINKYES_tag;

typedef union eDMA_0_TCD_CITER11_union_tag {
  eDMA_0_TCD_CITER11_TCD11_CITER_ELINKNO_tag TCD11_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_CITER11_TCD11_CITER_ELINKYES_tag TCD11_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_CITER11_tag;

typedef union eDMA_0_TCD_TCD11_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD11_DOFF_tag;

typedef union eDMA_0_TCD_TCD11_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} eDMA_0_TCD_TCD11_DLAST_SGA_tag;

typedef union eDMA_0_TCD_BITER11_TCD11_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enables Link */
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER11_TCD11_BITER_ELINKNO_tag;

typedef union eDMA_0_TCD_BITER11_TCD11_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER11_TCD11_BITER_ELINKYES_tag;

typedef union eDMA_0_TCD_BITER11_union_tag {
  eDMA_0_TCD_BITER11_TCD11_BITER_ELINKNO_tag TCD11_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_BITER11_TCD11_BITER_ELINKYES_tag TCD11_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_BITER11_tag;

typedef union eDMA_0_TCD_TCD11_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t BWC:2;                   /* Bandwidth Control */
    vuint16_t _unused_2:1;             /* Reserved */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t START:1;                 /* Channel Start */
  } B;
} eDMA_0_TCD_TCD11_CSR_tag;

typedef union eDMA_0_TCD_CH12_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ACTIVE:1;                /* Channel Active */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t _unused_2:26;            /* Reserved */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t ERQ:1;                   /* Enable DMA Request */
  } B;
} eDMA_0_TCD_CH12_CSR_tag;

typedef union eDMA_0_TCD_CH12_ES_union_tag { /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERR:1;                   /* Error In Channel */
    vuint32_t _unused_1:23;            /* Reserved */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t DBE:1;                   /* Destination Bus Error */
  } B;
} eDMA_0_TCD_CH12_ES_tag;

typedef union eDMA_0_TCD_CH12_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t INT:1;                   /* Interrupt Request */
  } B;
} eDMA_0_TCD_CH12_INT_tag;

typedef union eDMA_0_TCD_CH12_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;            /* Reserved */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t _unused_17:10;           /* Reserved */
    vuint32_t MID:5;                   /* Master ID */
  } B;
} eDMA_0_TCD_CH12_SBR_tag;

typedef union eDMA_0_TCD_CH12_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t _unused_2:27;            /* Reserved */
    vuint32_t APL:3;                   /* Arbitration Priority Level */
  } B;
} eDMA_0_TCD_CH12_PRI_tag;

typedef union eDMA_0_TCD_TCD12_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} eDMA_0_TCD_TCD12_SADDR_tag;

typedef union eDMA_0_TCD_TCD12_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t SMOD:5;                  /* Source Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
  } B;
} eDMA_0_TCD_TCD12_ATTR_tag;

typedef union eDMA_0_TCD_TCD12_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD12_SOFF_tag;

typedef union eDMA_0_TCD_NBYTES12_TCD12_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES12_TCD12_NBYTES_MLOFFNO_tag;

typedef union eDMA_0_TCD_NBYTES12_TCD12_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES12_TCD12_NBYTES_MLOFFYES_tag;

typedef union eDMA_0_TCD_NBYTES12_union_tag {
  eDMA_0_TCD_NBYTES12_TCD12_NBYTES_MLOFFNO_tag TCD12_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  eDMA_0_TCD_NBYTES12_TCD12_NBYTES_MLOFFYES_tag TCD12_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} eDMA_0_TCD_NBYTES12_tag;

typedef union eDMA_0_TCD_TCD12_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} eDMA_0_TCD_TCD12_SLAST_SDA_tag;

typedef union eDMA_0_TCD_TCD12_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} eDMA_0_TCD_TCD12_DADDR_tag;

typedef union eDMA_0_TCD_CITER12_TCD12_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t CITER:15;                /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER12_TCD12_CITER_ELINKNO_tag;

typedef union eDMA_0_TCD_CITER12_TCD12_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER12_TCD12_CITER_ELINKYES_tag;

typedef union eDMA_0_TCD_CITER12_union_tag {
  eDMA_0_TCD_CITER12_TCD12_CITER_ELINKNO_tag TCD12_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_CITER12_TCD12_CITER_ELINKYES_tag TCD12_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_CITER12_tag;

typedef union eDMA_0_TCD_TCD12_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD12_DOFF_tag;

typedef union eDMA_0_TCD_TCD12_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} eDMA_0_TCD_TCD12_DLAST_SGA_tag;

typedef union eDMA_0_TCD_BITER12_TCD12_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enables Link */
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER12_TCD12_BITER_ELINKNO_tag;

typedef union eDMA_0_TCD_BITER12_TCD12_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER12_TCD12_BITER_ELINKYES_tag;

typedef union eDMA_0_TCD_BITER12_union_tag {
  eDMA_0_TCD_BITER12_TCD12_BITER_ELINKNO_tag TCD12_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_BITER12_TCD12_BITER_ELINKYES_tag TCD12_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_BITER12_tag;

typedef union eDMA_0_TCD_TCD12_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t BWC:2;                   /* Bandwidth Control */
    vuint16_t _unused_2:1;             /* Reserved */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t START:1;                 /* Channel Start */
  } B;
} eDMA_0_TCD_TCD12_CSR_tag;

typedef union eDMA_0_TCD_CH13_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ACTIVE:1;                /* Channel Active */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t _unused_2:26;            /* Reserved */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t ERQ:1;                   /* Enable DMA Request */
  } B;
} eDMA_0_TCD_CH13_CSR_tag;

typedef union eDMA_0_TCD_CH13_ES_union_tag { /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERR:1;                   /* Error In Channel */
    vuint32_t _unused_1:23;            /* Reserved */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t DBE:1;                   /* Destination Bus Error */
  } B;
} eDMA_0_TCD_CH13_ES_tag;

typedef union eDMA_0_TCD_CH13_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t INT:1;                   /* Interrupt Request */
  } B;
} eDMA_0_TCD_CH13_INT_tag;

typedef union eDMA_0_TCD_CH13_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;            /* Reserved */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t _unused_17:10;           /* Reserved */
    vuint32_t MID:5;                   /* Master ID */
  } B;
} eDMA_0_TCD_CH13_SBR_tag;

typedef union eDMA_0_TCD_CH13_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t _unused_2:27;            /* Reserved */
    vuint32_t APL:3;                   /* Arbitration Priority Level */
  } B;
} eDMA_0_TCD_CH13_PRI_tag;

typedef union eDMA_0_TCD_TCD13_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} eDMA_0_TCD_TCD13_SADDR_tag;

typedef union eDMA_0_TCD_TCD13_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t SMOD:5;                  /* Source Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
  } B;
} eDMA_0_TCD_TCD13_ATTR_tag;

typedef union eDMA_0_TCD_TCD13_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD13_SOFF_tag;

typedef union eDMA_0_TCD_NBYTES13_TCD13_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES13_TCD13_NBYTES_MLOFFNO_tag;

typedef union eDMA_0_TCD_NBYTES13_TCD13_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES13_TCD13_NBYTES_MLOFFYES_tag;

typedef union eDMA_0_TCD_NBYTES13_union_tag {
  eDMA_0_TCD_NBYTES13_TCD13_NBYTES_MLOFFNO_tag TCD13_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  eDMA_0_TCD_NBYTES13_TCD13_NBYTES_MLOFFYES_tag TCD13_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} eDMA_0_TCD_NBYTES13_tag;

typedef union eDMA_0_TCD_TCD13_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} eDMA_0_TCD_TCD13_SLAST_SDA_tag;

typedef union eDMA_0_TCD_TCD13_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} eDMA_0_TCD_TCD13_DADDR_tag;

typedef union eDMA_0_TCD_CITER13_TCD13_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t CITER:15;                /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER13_TCD13_CITER_ELINKNO_tag;

typedef union eDMA_0_TCD_CITER13_TCD13_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER13_TCD13_CITER_ELINKYES_tag;

typedef union eDMA_0_TCD_CITER13_union_tag {
  eDMA_0_TCD_CITER13_TCD13_CITER_ELINKNO_tag TCD13_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_CITER13_TCD13_CITER_ELINKYES_tag TCD13_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_CITER13_tag;

typedef union eDMA_0_TCD_TCD13_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD13_DOFF_tag;

typedef union eDMA_0_TCD_TCD13_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} eDMA_0_TCD_TCD13_DLAST_SGA_tag;

typedef union eDMA_0_TCD_BITER13_TCD13_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enables Link */
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER13_TCD13_BITER_ELINKNO_tag;

typedef union eDMA_0_TCD_BITER13_TCD13_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER13_TCD13_BITER_ELINKYES_tag;

typedef union eDMA_0_TCD_BITER13_union_tag {
  eDMA_0_TCD_BITER13_TCD13_BITER_ELINKNO_tag TCD13_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_BITER13_TCD13_BITER_ELINKYES_tag TCD13_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_BITER13_tag;

typedef union eDMA_0_TCD_TCD13_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t BWC:2;                   /* Bandwidth Control */
    vuint16_t _unused_2:1;             /* Reserved */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t START:1;                 /* Channel Start */
  } B;
} eDMA_0_TCD_TCD13_CSR_tag;

typedef union eDMA_0_TCD_CH14_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ACTIVE:1;                /* Channel Active */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t _unused_2:26;            /* Reserved */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t ERQ:1;                   /* Enable DMA Request */
  } B;
} eDMA_0_TCD_CH14_CSR_tag;

typedef union eDMA_0_TCD_CH14_ES_union_tag { /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERR:1;                   /* Error In Channel */
    vuint32_t _unused_1:23;            /* Reserved */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t DBE:1;                   /* Destination Bus Error */
  } B;
} eDMA_0_TCD_CH14_ES_tag;

typedef union eDMA_0_TCD_CH14_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t INT:1;                   /* Interrupt Request */
  } B;
} eDMA_0_TCD_CH14_INT_tag;

typedef union eDMA_0_TCD_CH14_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;            /* Reserved */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t _unused_17:10;           /* Reserved */
    vuint32_t MID:5;                   /* Master ID */
  } B;
} eDMA_0_TCD_CH14_SBR_tag;

typedef union eDMA_0_TCD_CH14_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t _unused_2:27;            /* Reserved */
    vuint32_t APL:3;                   /* Arbitration Priority Level */
  } B;
} eDMA_0_TCD_CH14_PRI_tag;

typedef union eDMA_0_TCD_TCD14_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} eDMA_0_TCD_TCD14_SADDR_tag;

typedef union eDMA_0_TCD_TCD14_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t SMOD:5;                  /* Source Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
  } B;
} eDMA_0_TCD_TCD14_ATTR_tag;

typedef union eDMA_0_TCD_TCD14_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD14_SOFF_tag;

typedef union eDMA_0_TCD_NBYTES14_TCD14_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES14_TCD14_NBYTES_MLOFFNO_tag;

typedef union eDMA_0_TCD_NBYTES14_TCD14_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES14_TCD14_NBYTES_MLOFFYES_tag;

typedef union eDMA_0_TCD_NBYTES14_union_tag {
  eDMA_0_TCD_NBYTES14_TCD14_NBYTES_MLOFFNO_tag TCD14_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  eDMA_0_TCD_NBYTES14_TCD14_NBYTES_MLOFFYES_tag TCD14_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} eDMA_0_TCD_NBYTES14_tag;

typedef union eDMA_0_TCD_TCD14_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} eDMA_0_TCD_TCD14_SLAST_SDA_tag;

typedef union eDMA_0_TCD_TCD14_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} eDMA_0_TCD_TCD14_DADDR_tag;

typedef union eDMA_0_TCD_CITER14_TCD14_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t CITER:15;                /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER14_TCD14_CITER_ELINKNO_tag;

typedef union eDMA_0_TCD_CITER14_TCD14_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER14_TCD14_CITER_ELINKYES_tag;

typedef union eDMA_0_TCD_CITER14_union_tag {
  eDMA_0_TCD_CITER14_TCD14_CITER_ELINKNO_tag TCD14_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_CITER14_TCD14_CITER_ELINKYES_tag TCD14_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_CITER14_tag;

typedef union eDMA_0_TCD_TCD14_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD14_DOFF_tag;

typedef union eDMA_0_TCD_TCD14_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} eDMA_0_TCD_TCD14_DLAST_SGA_tag;

typedef union eDMA_0_TCD_BITER14_TCD14_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enables Link */
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER14_TCD14_BITER_ELINKNO_tag;

typedef union eDMA_0_TCD_BITER14_TCD14_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER14_TCD14_BITER_ELINKYES_tag;

typedef union eDMA_0_TCD_BITER14_union_tag {
  eDMA_0_TCD_BITER14_TCD14_BITER_ELINKNO_tag TCD14_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_BITER14_TCD14_BITER_ELINKYES_tag TCD14_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_BITER14_tag;

typedef union eDMA_0_TCD_TCD14_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t BWC:2;                   /* Bandwidth Control */
    vuint16_t _unused_2:1;             /* Reserved */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t START:1;                 /* Channel Start */
  } B;
} eDMA_0_TCD_TCD14_CSR_tag;

typedef union eDMA_0_TCD_CH15_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ACTIVE:1;                /* Channel Active */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t _unused_2:26;            /* Reserved */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t ERQ:1;                   /* Enable DMA Request */
  } B;
} eDMA_0_TCD_CH15_CSR_tag;

typedef union eDMA_0_TCD_CH15_ES_union_tag { /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERR:1;                   /* Error In Channel */
    vuint32_t _unused_1:23;            /* Reserved */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t DBE:1;                   /* Destination Bus Error */
  } B;
} eDMA_0_TCD_CH15_ES_tag;

typedef union eDMA_0_TCD_CH15_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t INT:1;                   /* Interrupt Request */
  } B;
} eDMA_0_TCD_CH15_INT_tag;

typedef union eDMA_0_TCD_CH15_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;            /* Reserved */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t _unused_17:10;           /* Reserved */
    vuint32_t MID:5;                   /* Master ID */
  } B;
} eDMA_0_TCD_CH15_SBR_tag;

typedef union eDMA_0_TCD_CH15_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t _unused_2:27;            /* Reserved */
    vuint32_t APL:3;                   /* Arbitration Priority Level */
  } B;
} eDMA_0_TCD_CH15_PRI_tag;

typedef union eDMA_0_TCD_TCD15_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} eDMA_0_TCD_TCD15_SADDR_tag;

typedef union eDMA_0_TCD_TCD15_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t SMOD:5;                  /* Source Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
  } B;
} eDMA_0_TCD_TCD15_ATTR_tag;

typedef union eDMA_0_TCD_TCD15_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD15_SOFF_tag;

typedef union eDMA_0_TCD_NBYTES15_TCD15_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES15_TCD15_NBYTES_MLOFFNO_tag;

typedef union eDMA_0_TCD_NBYTES15_TCD15_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES15_TCD15_NBYTES_MLOFFYES_tag;

typedef union eDMA_0_TCD_NBYTES15_union_tag {
  eDMA_0_TCD_NBYTES15_TCD15_NBYTES_MLOFFNO_tag TCD15_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  eDMA_0_TCD_NBYTES15_TCD15_NBYTES_MLOFFYES_tag TCD15_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} eDMA_0_TCD_NBYTES15_tag;

typedef union eDMA_0_TCD_TCD15_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} eDMA_0_TCD_TCD15_SLAST_SDA_tag;

typedef union eDMA_0_TCD_TCD15_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} eDMA_0_TCD_TCD15_DADDR_tag;

typedef union eDMA_0_TCD_CITER15_TCD15_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t CITER:15;                /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER15_TCD15_CITER_ELINKNO_tag;

typedef union eDMA_0_TCD_CITER15_TCD15_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER15_TCD15_CITER_ELINKYES_tag;

typedef union eDMA_0_TCD_CITER15_union_tag {
  eDMA_0_TCD_CITER15_TCD15_CITER_ELINKNO_tag TCD15_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_CITER15_TCD15_CITER_ELINKYES_tag TCD15_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_CITER15_tag;

typedef union eDMA_0_TCD_TCD15_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD15_DOFF_tag;

typedef union eDMA_0_TCD_TCD15_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} eDMA_0_TCD_TCD15_DLAST_SGA_tag;

typedef union eDMA_0_TCD_BITER15_TCD15_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enables Link */
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER15_TCD15_BITER_ELINKNO_tag;

typedef union eDMA_0_TCD_BITER15_TCD15_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER15_TCD15_BITER_ELINKYES_tag;

typedef union eDMA_0_TCD_BITER15_union_tag {
  eDMA_0_TCD_BITER15_TCD15_BITER_ELINKNO_tag TCD15_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_BITER15_TCD15_BITER_ELINKYES_tag TCD15_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_BITER15_tag;

typedef union eDMA_0_TCD_TCD15_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t BWC:2;                   /* Bandwidth Control */
    vuint16_t _unused_2:1;             /* Reserved */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t START:1;                 /* Channel Start */
  } B;
} eDMA_0_TCD_TCD15_CSR_tag;

typedef union eDMA_0_TCD_CH16_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ACTIVE:1;                /* Channel Active */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t _unused_2:26;            /* Reserved */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t ERQ:1;                   /* Enable DMA Request */
  } B;
} eDMA_0_TCD_CH16_CSR_tag;

typedef union eDMA_0_TCD_CH16_ES_union_tag { /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERR:1;                   /* Error In Channel */
    vuint32_t _unused_1:23;            /* Reserved */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t DBE:1;                   /* Destination Bus Error */
  } B;
} eDMA_0_TCD_CH16_ES_tag;

typedef union eDMA_0_TCD_CH16_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t INT:1;                   /* Interrupt Request */
  } B;
} eDMA_0_TCD_CH16_INT_tag;

typedef union eDMA_0_TCD_CH16_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;            /* Reserved */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t _unused_17:10;           /* Reserved */
    vuint32_t MID:5;                   /* Master ID */
  } B;
} eDMA_0_TCD_CH16_SBR_tag;

typedef union eDMA_0_TCD_CH16_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t _unused_2:27;            /* Reserved */
    vuint32_t APL:3;                   /* Arbitration Priority Level */
  } B;
} eDMA_0_TCD_CH16_PRI_tag;

typedef union eDMA_0_TCD_TCD16_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} eDMA_0_TCD_TCD16_SADDR_tag;

typedef union eDMA_0_TCD_TCD16_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t SMOD:5;                  /* Source Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
  } B;
} eDMA_0_TCD_TCD16_ATTR_tag;

typedef union eDMA_0_TCD_TCD16_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD16_SOFF_tag;

typedef union eDMA_0_TCD_NBYTES16_TCD16_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES16_TCD16_NBYTES_MLOFFNO_tag;

typedef union eDMA_0_TCD_NBYTES16_TCD16_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES16_TCD16_NBYTES_MLOFFYES_tag;

typedef union eDMA_0_TCD_NBYTES16_union_tag {
  eDMA_0_TCD_NBYTES16_TCD16_NBYTES_MLOFFNO_tag TCD16_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  eDMA_0_TCD_NBYTES16_TCD16_NBYTES_MLOFFYES_tag TCD16_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} eDMA_0_TCD_NBYTES16_tag;

typedef union eDMA_0_TCD_TCD16_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} eDMA_0_TCD_TCD16_SLAST_SDA_tag;

typedef union eDMA_0_TCD_TCD16_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} eDMA_0_TCD_TCD16_DADDR_tag;

typedef union eDMA_0_TCD_CITER16_TCD16_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t CITER:15;                /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER16_TCD16_CITER_ELINKNO_tag;

typedef union eDMA_0_TCD_CITER16_TCD16_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER16_TCD16_CITER_ELINKYES_tag;

typedef union eDMA_0_TCD_CITER16_union_tag {
  eDMA_0_TCD_CITER16_TCD16_CITER_ELINKNO_tag TCD16_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_CITER16_TCD16_CITER_ELINKYES_tag TCD16_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_CITER16_tag;

typedef union eDMA_0_TCD_TCD16_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD16_DOFF_tag;

typedef union eDMA_0_TCD_TCD16_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} eDMA_0_TCD_TCD16_DLAST_SGA_tag;

typedef union eDMA_0_TCD_BITER16_TCD16_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enables Link */
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER16_TCD16_BITER_ELINKNO_tag;

typedef union eDMA_0_TCD_BITER16_TCD16_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER16_TCD16_BITER_ELINKYES_tag;

typedef union eDMA_0_TCD_BITER16_union_tag {
  eDMA_0_TCD_BITER16_TCD16_BITER_ELINKNO_tag TCD16_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_BITER16_TCD16_BITER_ELINKYES_tag TCD16_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_BITER16_tag;

typedef union eDMA_0_TCD_TCD16_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t BWC:2;                   /* Bandwidth Control */
    vuint16_t _unused_2:1;             /* Reserved */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t START:1;                 /* Channel Start */
  } B;
} eDMA_0_TCD_TCD16_CSR_tag;

typedef union eDMA_0_TCD_CH17_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ACTIVE:1;                /* Channel Active */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t _unused_2:26;            /* Reserved */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t ERQ:1;                   /* Enable DMA Request */
  } B;
} eDMA_0_TCD_CH17_CSR_tag;

typedef union eDMA_0_TCD_CH17_ES_union_tag { /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERR:1;                   /* Error In Channel */
    vuint32_t _unused_1:23;            /* Reserved */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t DBE:1;                   /* Destination Bus Error */
  } B;
} eDMA_0_TCD_CH17_ES_tag;

typedef union eDMA_0_TCD_CH17_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t INT:1;                   /* Interrupt Request */
  } B;
} eDMA_0_TCD_CH17_INT_tag;

typedef union eDMA_0_TCD_CH17_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;            /* Reserved */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t _unused_17:10;           /* Reserved */
    vuint32_t MID:5;                   /* Master ID */
  } B;
} eDMA_0_TCD_CH17_SBR_tag;

typedef union eDMA_0_TCD_CH17_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t _unused_2:27;            /* Reserved */
    vuint32_t APL:3;                   /* Arbitration Priority Level */
  } B;
} eDMA_0_TCD_CH17_PRI_tag;

typedef union eDMA_0_TCD_TCD17_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} eDMA_0_TCD_TCD17_SADDR_tag;

typedef union eDMA_0_TCD_TCD17_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t SMOD:5;                  /* Source Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
  } B;
} eDMA_0_TCD_TCD17_ATTR_tag;

typedef union eDMA_0_TCD_TCD17_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD17_SOFF_tag;

typedef union eDMA_0_TCD_NBYTES17_TCD17_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES17_TCD17_NBYTES_MLOFFNO_tag;

typedef union eDMA_0_TCD_NBYTES17_TCD17_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES17_TCD17_NBYTES_MLOFFYES_tag;

typedef union eDMA_0_TCD_NBYTES17_union_tag {
  eDMA_0_TCD_NBYTES17_TCD17_NBYTES_MLOFFNO_tag TCD17_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  eDMA_0_TCD_NBYTES17_TCD17_NBYTES_MLOFFYES_tag TCD17_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} eDMA_0_TCD_NBYTES17_tag;

typedef union eDMA_0_TCD_TCD17_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} eDMA_0_TCD_TCD17_SLAST_SDA_tag;

typedef union eDMA_0_TCD_TCD17_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} eDMA_0_TCD_TCD17_DADDR_tag;

typedef union eDMA_0_TCD_CITER17_TCD17_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t CITER:15;                /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER17_TCD17_CITER_ELINKNO_tag;

typedef union eDMA_0_TCD_CITER17_TCD17_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER17_TCD17_CITER_ELINKYES_tag;

typedef union eDMA_0_TCD_CITER17_union_tag {
  eDMA_0_TCD_CITER17_TCD17_CITER_ELINKNO_tag TCD17_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_CITER17_TCD17_CITER_ELINKYES_tag TCD17_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_CITER17_tag;

typedef union eDMA_0_TCD_TCD17_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD17_DOFF_tag;

typedef union eDMA_0_TCD_TCD17_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} eDMA_0_TCD_TCD17_DLAST_SGA_tag;

typedef union eDMA_0_TCD_BITER17_TCD17_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enables Link */
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER17_TCD17_BITER_ELINKNO_tag;

typedef union eDMA_0_TCD_BITER17_TCD17_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER17_TCD17_BITER_ELINKYES_tag;

typedef union eDMA_0_TCD_BITER17_union_tag {
  eDMA_0_TCD_BITER17_TCD17_BITER_ELINKNO_tag TCD17_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_BITER17_TCD17_BITER_ELINKYES_tag TCD17_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_BITER17_tag;

typedef union eDMA_0_TCD_TCD17_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t BWC:2;                   /* Bandwidth Control */
    vuint16_t _unused_2:1;             /* Reserved */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t START:1;                 /* Channel Start */
  } B;
} eDMA_0_TCD_TCD17_CSR_tag;

typedef union eDMA_0_TCD_CH18_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ACTIVE:1;                /* Channel Active */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t _unused_2:26;            /* Reserved */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t ERQ:1;                   /* Enable DMA Request */
  } B;
} eDMA_0_TCD_CH18_CSR_tag;

typedef union eDMA_0_TCD_CH18_ES_union_tag { /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERR:1;                   /* Error In Channel */
    vuint32_t _unused_1:23;            /* Reserved */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t DBE:1;                   /* Destination Bus Error */
  } B;
} eDMA_0_TCD_CH18_ES_tag;

typedef union eDMA_0_TCD_CH18_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t INT:1;                   /* Interrupt Request */
  } B;
} eDMA_0_TCD_CH18_INT_tag;

typedef union eDMA_0_TCD_CH18_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;            /* Reserved */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t _unused_17:10;           /* Reserved */
    vuint32_t MID:5;                   /* Master ID */
  } B;
} eDMA_0_TCD_CH18_SBR_tag;

typedef union eDMA_0_TCD_CH18_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t _unused_2:27;            /* Reserved */
    vuint32_t APL:3;                   /* Arbitration Priority Level */
  } B;
} eDMA_0_TCD_CH18_PRI_tag;

typedef union eDMA_0_TCD_TCD18_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} eDMA_0_TCD_TCD18_SADDR_tag;

typedef union eDMA_0_TCD_TCD18_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t SMOD:5;                  /* Source Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
  } B;
} eDMA_0_TCD_TCD18_ATTR_tag;

typedef union eDMA_0_TCD_TCD18_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD18_SOFF_tag;

typedef union eDMA_0_TCD_NBYTES18_TCD18_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES18_TCD18_NBYTES_MLOFFNO_tag;

typedef union eDMA_0_TCD_NBYTES18_TCD18_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES18_TCD18_NBYTES_MLOFFYES_tag;

typedef union eDMA_0_TCD_NBYTES18_union_tag {
  eDMA_0_TCD_NBYTES18_TCD18_NBYTES_MLOFFNO_tag TCD18_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  eDMA_0_TCD_NBYTES18_TCD18_NBYTES_MLOFFYES_tag TCD18_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} eDMA_0_TCD_NBYTES18_tag;

typedef union eDMA_0_TCD_TCD18_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} eDMA_0_TCD_TCD18_SLAST_SDA_tag;

typedef union eDMA_0_TCD_TCD18_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} eDMA_0_TCD_TCD18_DADDR_tag;

typedef union eDMA_0_TCD_CITER18_TCD18_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t CITER:15;                /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER18_TCD18_CITER_ELINKNO_tag;

typedef union eDMA_0_TCD_CITER18_TCD18_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER18_TCD18_CITER_ELINKYES_tag;

typedef union eDMA_0_TCD_CITER18_union_tag {
  eDMA_0_TCD_CITER18_TCD18_CITER_ELINKNO_tag TCD18_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_CITER18_TCD18_CITER_ELINKYES_tag TCD18_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_CITER18_tag;

typedef union eDMA_0_TCD_TCD18_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD18_DOFF_tag;

typedef union eDMA_0_TCD_TCD18_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} eDMA_0_TCD_TCD18_DLAST_SGA_tag;

typedef union eDMA_0_TCD_BITER18_TCD18_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enables Link */
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER18_TCD18_BITER_ELINKNO_tag;

typedef union eDMA_0_TCD_BITER18_TCD18_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER18_TCD18_BITER_ELINKYES_tag;

typedef union eDMA_0_TCD_BITER18_union_tag {
  eDMA_0_TCD_BITER18_TCD18_BITER_ELINKNO_tag TCD18_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_BITER18_TCD18_BITER_ELINKYES_tag TCD18_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_BITER18_tag;

typedef union eDMA_0_TCD_TCD18_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t BWC:2;                   /* Bandwidth Control */
    vuint16_t _unused_2:1;             /* Reserved */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t START:1;                 /* Channel Start */
  } B;
} eDMA_0_TCD_TCD18_CSR_tag;

typedef union eDMA_0_TCD_CH19_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ACTIVE:1;                /* Channel Active */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t _unused_2:26;            /* Reserved */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t ERQ:1;                   /* Enable DMA Request */
  } B;
} eDMA_0_TCD_CH19_CSR_tag;

typedef union eDMA_0_TCD_CH19_ES_union_tag { /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERR:1;                   /* Error In Channel */
    vuint32_t _unused_1:23;            /* Reserved */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t DBE:1;                   /* Destination Bus Error */
  } B;
} eDMA_0_TCD_CH19_ES_tag;

typedef union eDMA_0_TCD_CH19_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t INT:1;                   /* Interrupt Request */
  } B;
} eDMA_0_TCD_CH19_INT_tag;

typedef union eDMA_0_TCD_CH19_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;            /* Reserved */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t _unused_17:10;           /* Reserved */
    vuint32_t MID:5;                   /* Master ID */
  } B;
} eDMA_0_TCD_CH19_SBR_tag;

typedef union eDMA_0_TCD_CH19_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t _unused_2:27;            /* Reserved */
    vuint32_t APL:3;                   /* Arbitration Priority Level */
  } B;
} eDMA_0_TCD_CH19_PRI_tag;

typedef union eDMA_0_TCD_TCD19_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} eDMA_0_TCD_TCD19_SADDR_tag;

typedef union eDMA_0_TCD_TCD19_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t SMOD:5;                  /* Source Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
  } B;
} eDMA_0_TCD_TCD19_ATTR_tag;

typedef union eDMA_0_TCD_TCD19_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD19_SOFF_tag;

typedef union eDMA_0_TCD_NBYTES19_TCD19_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES19_TCD19_NBYTES_MLOFFNO_tag;

typedef union eDMA_0_TCD_NBYTES19_TCD19_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES19_TCD19_NBYTES_MLOFFYES_tag;

typedef union eDMA_0_TCD_NBYTES19_union_tag {
  eDMA_0_TCD_NBYTES19_TCD19_NBYTES_MLOFFNO_tag TCD19_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  eDMA_0_TCD_NBYTES19_TCD19_NBYTES_MLOFFYES_tag TCD19_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} eDMA_0_TCD_NBYTES19_tag;

typedef union eDMA_0_TCD_TCD19_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} eDMA_0_TCD_TCD19_SLAST_SDA_tag;

typedef union eDMA_0_TCD_TCD19_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} eDMA_0_TCD_TCD19_DADDR_tag;

typedef union eDMA_0_TCD_CITER19_TCD19_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t CITER:15;                /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER19_TCD19_CITER_ELINKNO_tag;

typedef union eDMA_0_TCD_CITER19_TCD19_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER19_TCD19_CITER_ELINKYES_tag;

typedef union eDMA_0_TCD_CITER19_union_tag {
  eDMA_0_TCD_CITER19_TCD19_CITER_ELINKNO_tag TCD19_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_CITER19_TCD19_CITER_ELINKYES_tag TCD19_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_CITER19_tag;

typedef union eDMA_0_TCD_TCD19_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD19_DOFF_tag;

typedef union eDMA_0_TCD_TCD19_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} eDMA_0_TCD_TCD19_DLAST_SGA_tag;

typedef union eDMA_0_TCD_BITER19_TCD19_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enables Link */
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER19_TCD19_BITER_ELINKNO_tag;

typedef union eDMA_0_TCD_BITER19_TCD19_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER19_TCD19_BITER_ELINKYES_tag;

typedef union eDMA_0_TCD_BITER19_union_tag {
  eDMA_0_TCD_BITER19_TCD19_BITER_ELINKNO_tag TCD19_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_BITER19_TCD19_BITER_ELINKYES_tag TCD19_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_BITER19_tag;

typedef union eDMA_0_TCD_TCD19_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t BWC:2;                   /* Bandwidth Control */
    vuint16_t _unused_2:1;             /* Reserved */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t START:1;                 /* Channel Start */
  } B;
} eDMA_0_TCD_TCD19_CSR_tag;

typedef union eDMA_0_TCD_CH20_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ACTIVE:1;                /* Channel Active */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t _unused_2:26;            /* Reserved */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t ERQ:1;                   /* Enable DMA Request */
  } B;
} eDMA_0_TCD_CH20_CSR_tag;

typedef union eDMA_0_TCD_CH20_ES_union_tag { /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERR:1;                   /* Error In Channel */
    vuint32_t _unused_1:23;            /* Reserved */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t DBE:1;                   /* Destination Bus Error */
  } B;
} eDMA_0_TCD_CH20_ES_tag;

typedef union eDMA_0_TCD_CH20_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t INT:1;                   /* Interrupt Request */
  } B;
} eDMA_0_TCD_CH20_INT_tag;

typedef union eDMA_0_TCD_CH20_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;            /* Reserved */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t _unused_17:10;           /* Reserved */
    vuint32_t MID:5;                   /* Master ID */
  } B;
} eDMA_0_TCD_CH20_SBR_tag;

typedef union eDMA_0_TCD_CH20_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t _unused_2:27;            /* Reserved */
    vuint32_t APL:3;                   /* Arbitration Priority Level */
  } B;
} eDMA_0_TCD_CH20_PRI_tag;

typedef union eDMA_0_TCD_TCD20_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} eDMA_0_TCD_TCD20_SADDR_tag;

typedef union eDMA_0_TCD_TCD20_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t SMOD:5;                  /* Source Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
  } B;
} eDMA_0_TCD_TCD20_ATTR_tag;

typedef union eDMA_0_TCD_TCD20_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD20_SOFF_tag;

typedef union eDMA_0_TCD_NBYTES20_TCD20_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES20_TCD20_NBYTES_MLOFFNO_tag;

typedef union eDMA_0_TCD_NBYTES20_TCD20_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES20_TCD20_NBYTES_MLOFFYES_tag;

typedef union eDMA_0_TCD_NBYTES20_union_tag {
  eDMA_0_TCD_NBYTES20_TCD20_NBYTES_MLOFFNO_tag TCD20_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  eDMA_0_TCD_NBYTES20_TCD20_NBYTES_MLOFFYES_tag TCD20_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} eDMA_0_TCD_NBYTES20_tag;

typedef union eDMA_0_TCD_TCD20_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} eDMA_0_TCD_TCD20_SLAST_SDA_tag;

typedef union eDMA_0_TCD_TCD20_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} eDMA_0_TCD_TCD20_DADDR_tag;

typedef union eDMA_0_TCD_CITER20_TCD20_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t CITER:15;                /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER20_TCD20_CITER_ELINKNO_tag;

typedef union eDMA_0_TCD_CITER20_TCD20_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER20_TCD20_CITER_ELINKYES_tag;

typedef union eDMA_0_TCD_CITER20_union_tag {
  eDMA_0_TCD_CITER20_TCD20_CITER_ELINKNO_tag TCD20_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_CITER20_TCD20_CITER_ELINKYES_tag TCD20_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_CITER20_tag;

typedef union eDMA_0_TCD_TCD20_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD20_DOFF_tag;

typedef union eDMA_0_TCD_TCD20_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} eDMA_0_TCD_TCD20_DLAST_SGA_tag;

typedef union eDMA_0_TCD_BITER20_TCD20_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enables Link */
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER20_TCD20_BITER_ELINKNO_tag;

typedef union eDMA_0_TCD_BITER20_TCD20_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER20_TCD20_BITER_ELINKYES_tag;

typedef union eDMA_0_TCD_BITER20_union_tag {
  eDMA_0_TCD_BITER20_TCD20_BITER_ELINKNO_tag TCD20_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_BITER20_TCD20_BITER_ELINKYES_tag TCD20_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_BITER20_tag;

typedef union eDMA_0_TCD_TCD20_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t BWC:2;                   /* Bandwidth Control */
    vuint16_t _unused_2:1;             /* Reserved */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t START:1;                 /* Channel Start */
  } B;
} eDMA_0_TCD_TCD20_CSR_tag;

typedef union eDMA_0_TCD_CH21_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ACTIVE:1;                /* Channel Active */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t _unused_2:26;            /* Reserved */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t ERQ:1;                   /* Enable DMA Request */
  } B;
} eDMA_0_TCD_CH21_CSR_tag;

typedef union eDMA_0_TCD_CH21_ES_union_tag { /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERR:1;                   /* Error In Channel */
    vuint32_t _unused_1:23;            /* Reserved */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t DBE:1;                   /* Destination Bus Error */
  } B;
} eDMA_0_TCD_CH21_ES_tag;

typedef union eDMA_0_TCD_CH21_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t INT:1;                   /* Interrupt Request */
  } B;
} eDMA_0_TCD_CH21_INT_tag;

typedef union eDMA_0_TCD_CH21_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;            /* Reserved */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t _unused_17:10;           /* Reserved */
    vuint32_t MID:5;                   /* Master ID */
  } B;
} eDMA_0_TCD_CH21_SBR_tag;

typedef union eDMA_0_TCD_CH21_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t _unused_2:27;            /* Reserved */
    vuint32_t APL:3;                   /* Arbitration Priority Level */
  } B;
} eDMA_0_TCD_CH21_PRI_tag;

typedef union eDMA_0_TCD_TCD21_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} eDMA_0_TCD_TCD21_SADDR_tag;

typedef union eDMA_0_TCD_TCD21_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t SMOD:5;                  /* Source Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
  } B;
} eDMA_0_TCD_TCD21_ATTR_tag;

typedef union eDMA_0_TCD_TCD21_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD21_SOFF_tag;

typedef union eDMA_0_TCD_NBYTES21_TCD21_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES21_TCD21_NBYTES_MLOFFNO_tag;

typedef union eDMA_0_TCD_NBYTES21_TCD21_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES21_TCD21_NBYTES_MLOFFYES_tag;

typedef union eDMA_0_TCD_NBYTES21_union_tag {
  eDMA_0_TCD_NBYTES21_TCD21_NBYTES_MLOFFNO_tag TCD21_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  eDMA_0_TCD_NBYTES21_TCD21_NBYTES_MLOFFYES_tag TCD21_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} eDMA_0_TCD_NBYTES21_tag;

typedef union eDMA_0_TCD_TCD21_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} eDMA_0_TCD_TCD21_SLAST_SDA_tag;

typedef union eDMA_0_TCD_TCD21_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} eDMA_0_TCD_TCD21_DADDR_tag;

typedef union eDMA_0_TCD_CITER21_TCD21_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t CITER:15;                /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER21_TCD21_CITER_ELINKNO_tag;

typedef union eDMA_0_TCD_CITER21_TCD21_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER21_TCD21_CITER_ELINKYES_tag;

typedef union eDMA_0_TCD_CITER21_union_tag {
  eDMA_0_TCD_CITER21_TCD21_CITER_ELINKNO_tag TCD21_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_CITER21_TCD21_CITER_ELINKYES_tag TCD21_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_CITER21_tag;

typedef union eDMA_0_TCD_TCD21_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD21_DOFF_tag;

typedef union eDMA_0_TCD_TCD21_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} eDMA_0_TCD_TCD21_DLAST_SGA_tag;

typedef union eDMA_0_TCD_BITER21_TCD21_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enables Link */
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER21_TCD21_BITER_ELINKNO_tag;

typedef union eDMA_0_TCD_BITER21_TCD21_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER21_TCD21_BITER_ELINKYES_tag;

typedef union eDMA_0_TCD_BITER21_union_tag {
  eDMA_0_TCD_BITER21_TCD21_BITER_ELINKNO_tag TCD21_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_BITER21_TCD21_BITER_ELINKYES_tag TCD21_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_BITER21_tag;

typedef union eDMA_0_TCD_TCD21_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t BWC:2;                   /* Bandwidth Control */
    vuint16_t _unused_2:1;             /* Reserved */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t START:1;                 /* Channel Start */
  } B;
} eDMA_0_TCD_TCD21_CSR_tag;

typedef union eDMA_0_TCD_CH22_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ACTIVE:1;                /* Channel Active */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t _unused_2:26;            /* Reserved */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t ERQ:1;                   /* Enable DMA Request */
  } B;
} eDMA_0_TCD_CH22_CSR_tag;

typedef union eDMA_0_TCD_CH22_ES_union_tag { /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERR:1;                   /* Error In Channel */
    vuint32_t _unused_1:23;            /* Reserved */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t DBE:1;                   /* Destination Bus Error */
  } B;
} eDMA_0_TCD_CH22_ES_tag;

typedef union eDMA_0_TCD_CH22_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t INT:1;                   /* Interrupt Request */
  } B;
} eDMA_0_TCD_CH22_INT_tag;

typedef union eDMA_0_TCD_CH22_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;            /* Reserved */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t _unused_17:10;           /* Reserved */
    vuint32_t MID:5;                   /* Master ID */
  } B;
} eDMA_0_TCD_CH22_SBR_tag;

typedef union eDMA_0_TCD_CH22_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t _unused_2:27;            /* Reserved */
    vuint32_t APL:3;                   /* Arbitration Priority Level */
  } B;
} eDMA_0_TCD_CH22_PRI_tag;

typedef union eDMA_0_TCD_TCD22_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} eDMA_0_TCD_TCD22_SADDR_tag;

typedef union eDMA_0_TCD_TCD22_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t SMOD:5;                  /* Source Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
  } B;
} eDMA_0_TCD_TCD22_ATTR_tag;

typedef union eDMA_0_TCD_TCD22_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD22_SOFF_tag;

typedef union eDMA_0_TCD_NBYTES22_TCD22_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES22_TCD22_NBYTES_MLOFFNO_tag;

typedef union eDMA_0_TCD_NBYTES22_TCD22_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES22_TCD22_NBYTES_MLOFFYES_tag;

typedef union eDMA_0_TCD_NBYTES22_union_tag {
  eDMA_0_TCD_NBYTES22_TCD22_NBYTES_MLOFFNO_tag TCD22_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  eDMA_0_TCD_NBYTES22_TCD22_NBYTES_MLOFFYES_tag TCD22_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} eDMA_0_TCD_NBYTES22_tag;

typedef union eDMA_0_TCD_TCD22_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} eDMA_0_TCD_TCD22_SLAST_SDA_tag;

typedef union eDMA_0_TCD_TCD22_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} eDMA_0_TCD_TCD22_DADDR_tag;

typedef union eDMA_0_TCD_CITER22_TCD22_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t CITER:15;                /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER22_TCD22_CITER_ELINKNO_tag;

typedef union eDMA_0_TCD_CITER22_TCD22_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER22_TCD22_CITER_ELINKYES_tag;

typedef union eDMA_0_TCD_CITER22_union_tag {
  eDMA_0_TCD_CITER22_TCD22_CITER_ELINKNO_tag TCD22_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_CITER22_TCD22_CITER_ELINKYES_tag TCD22_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_CITER22_tag;

typedef union eDMA_0_TCD_TCD22_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD22_DOFF_tag;

typedef union eDMA_0_TCD_TCD22_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} eDMA_0_TCD_TCD22_DLAST_SGA_tag;

typedef union eDMA_0_TCD_BITER22_TCD22_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enables Link */
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER22_TCD22_BITER_ELINKNO_tag;

typedef union eDMA_0_TCD_BITER22_TCD22_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER22_TCD22_BITER_ELINKYES_tag;

typedef union eDMA_0_TCD_BITER22_union_tag {
  eDMA_0_TCD_BITER22_TCD22_BITER_ELINKNO_tag TCD22_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_BITER22_TCD22_BITER_ELINKYES_tag TCD22_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_BITER22_tag;

typedef union eDMA_0_TCD_TCD22_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t BWC:2;                   /* Bandwidth Control */
    vuint16_t _unused_2:1;             /* Reserved */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t START:1;                 /* Channel Start */
  } B;
} eDMA_0_TCD_TCD22_CSR_tag;

typedef union eDMA_0_TCD_CH23_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ACTIVE:1;                /* Channel Active */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t _unused_2:26;            /* Reserved */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t ERQ:1;                   /* Enable DMA Request */
  } B;
} eDMA_0_TCD_CH23_CSR_tag;

typedef union eDMA_0_TCD_CH23_ES_union_tag { /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERR:1;                   /* Error In Channel */
    vuint32_t _unused_1:23;            /* Reserved */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t DBE:1;                   /* Destination Bus Error */
  } B;
} eDMA_0_TCD_CH23_ES_tag;

typedef union eDMA_0_TCD_CH23_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t INT:1;                   /* Interrupt Request */
  } B;
} eDMA_0_TCD_CH23_INT_tag;

typedef union eDMA_0_TCD_CH23_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;            /* Reserved */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t _unused_17:10;           /* Reserved */
    vuint32_t MID:5;                   /* Master ID */
  } B;
} eDMA_0_TCD_CH23_SBR_tag;

typedef union eDMA_0_TCD_CH23_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t _unused_2:27;            /* Reserved */
    vuint32_t APL:3;                   /* Arbitration Priority Level */
  } B;
} eDMA_0_TCD_CH23_PRI_tag;

typedef union eDMA_0_TCD_TCD23_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} eDMA_0_TCD_TCD23_SADDR_tag;

typedef union eDMA_0_TCD_TCD23_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t SMOD:5;                  /* Source Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
  } B;
} eDMA_0_TCD_TCD23_ATTR_tag;

typedef union eDMA_0_TCD_TCD23_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD23_SOFF_tag;

typedef union eDMA_0_TCD_NBYTES23_TCD23_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES23_TCD23_NBYTES_MLOFFNO_tag;

typedef union eDMA_0_TCD_NBYTES23_TCD23_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES23_TCD23_NBYTES_MLOFFYES_tag;

typedef union eDMA_0_TCD_NBYTES23_union_tag {
  eDMA_0_TCD_NBYTES23_TCD23_NBYTES_MLOFFNO_tag TCD23_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  eDMA_0_TCD_NBYTES23_TCD23_NBYTES_MLOFFYES_tag TCD23_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} eDMA_0_TCD_NBYTES23_tag;

typedef union eDMA_0_TCD_TCD23_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} eDMA_0_TCD_TCD23_SLAST_SDA_tag;

typedef union eDMA_0_TCD_TCD23_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} eDMA_0_TCD_TCD23_DADDR_tag;

typedef union eDMA_0_TCD_CITER23_TCD23_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t CITER:15;                /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER23_TCD23_CITER_ELINKNO_tag;

typedef union eDMA_0_TCD_CITER23_TCD23_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER23_TCD23_CITER_ELINKYES_tag;

typedef union eDMA_0_TCD_CITER23_union_tag {
  eDMA_0_TCD_CITER23_TCD23_CITER_ELINKNO_tag TCD23_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_CITER23_TCD23_CITER_ELINKYES_tag TCD23_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_CITER23_tag;

typedef union eDMA_0_TCD_TCD23_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD23_DOFF_tag;

typedef union eDMA_0_TCD_TCD23_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} eDMA_0_TCD_TCD23_DLAST_SGA_tag;

typedef union eDMA_0_TCD_BITER23_TCD23_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enables Link */
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER23_TCD23_BITER_ELINKNO_tag;

typedef union eDMA_0_TCD_BITER23_TCD23_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER23_TCD23_BITER_ELINKYES_tag;

typedef union eDMA_0_TCD_BITER23_union_tag {
  eDMA_0_TCD_BITER23_TCD23_BITER_ELINKNO_tag TCD23_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_BITER23_TCD23_BITER_ELINKYES_tag TCD23_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_BITER23_tag;

typedef union eDMA_0_TCD_TCD23_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t BWC:2;                   /* Bandwidth Control */
    vuint16_t _unused_2:1;             /* Reserved */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t START:1;                 /* Channel Start */
  } B;
} eDMA_0_TCD_TCD23_CSR_tag;

typedef union eDMA_0_TCD_CH24_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ACTIVE:1;                /* Channel Active */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t _unused_2:26;            /* Reserved */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t ERQ:1;                   /* Enable DMA Request */
  } B;
} eDMA_0_TCD_CH24_CSR_tag;

typedef union eDMA_0_TCD_CH24_ES_union_tag { /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERR:1;                   /* Error In Channel */
    vuint32_t _unused_1:23;            /* Reserved */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t DBE:1;                   /* Destination Bus Error */
  } B;
} eDMA_0_TCD_CH24_ES_tag;

typedef union eDMA_0_TCD_CH24_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t INT:1;                   /* Interrupt Request */
  } B;
} eDMA_0_TCD_CH24_INT_tag;

typedef union eDMA_0_TCD_CH24_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;            /* Reserved */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t _unused_17:10;           /* Reserved */
    vuint32_t MID:5;                   /* Master ID */
  } B;
} eDMA_0_TCD_CH24_SBR_tag;

typedef union eDMA_0_TCD_CH24_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t _unused_2:27;            /* Reserved */
    vuint32_t APL:3;                   /* Arbitration Priority Level */
  } B;
} eDMA_0_TCD_CH24_PRI_tag;

typedef union eDMA_0_TCD_TCD24_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} eDMA_0_TCD_TCD24_SADDR_tag;

typedef union eDMA_0_TCD_TCD24_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t SMOD:5;                  /* Source Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
  } B;
} eDMA_0_TCD_TCD24_ATTR_tag;

typedef union eDMA_0_TCD_TCD24_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD24_SOFF_tag;

typedef union eDMA_0_TCD_NBYTES24_TCD24_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES24_TCD24_NBYTES_MLOFFNO_tag;

typedef union eDMA_0_TCD_NBYTES24_TCD24_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES24_TCD24_NBYTES_MLOFFYES_tag;

typedef union eDMA_0_TCD_NBYTES24_union_tag {
  eDMA_0_TCD_NBYTES24_TCD24_NBYTES_MLOFFNO_tag TCD24_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  eDMA_0_TCD_NBYTES24_TCD24_NBYTES_MLOFFYES_tag TCD24_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} eDMA_0_TCD_NBYTES24_tag;

typedef union eDMA_0_TCD_TCD24_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} eDMA_0_TCD_TCD24_SLAST_SDA_tag;

typedef union eDMA_0_TCD_TCD24_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} eDMA_0_TCD_TCD24_DADDR_tag;

typedef union eDMA_0_TCD_CITER24_TCD24_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t CITER:15;                /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER24_TCD24_CITER_ELINKNO_tag;

typedef union eDMA_0_TCD_CITER24_TCD24_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER24_TCD24_CITER_ELINKYES_tag;

typedef union eDMA_0_TCD_CITER24_union_tag {
  eDMA_0_TCD_CITER24_TCD24_CITER_ELINKNO_tag TCD24_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_CITER24_TCD24_CITER_ELINKYES_tag TCD24_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_CITER24_tag;

typedef union eDMA_0_TCD_TCD24_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD24_DOFF_tag;

typedef union eDMA_0_TCD_TCD24_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} eDMA_0_TCD_TCD24_DLAST_SGA_tag;

typedef union eDMA_0_TCD_BITER24_TCD24_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enables Link */
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER24_TCD24_BITER_ELINKNO_tag;

typedef union eDMA_0_TCD_BITER24_TCD24_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER24_TCD24_BITER_ELINKYES_tag;

typedef union eDMA_0_TCD_BITER24_union_tag {
  eDMA_0_TCD_BITER24_TCD24_BITER_ELINKNO_tag TCD24_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_BITER24_TCD24_BITER_ELINKYES_tag TCD24_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_BITER24_tag;

typedef union eDMA_0_TCD_TCD24_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t BWC:2;                   /* Bandwidth Control */
    vuint16_t _unused_2:1;             /* Reserved */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t START:1;                 /* Channel Start */
  } B;
} eDMA_0_TCD_TCD24_CSR_tag;

typedef union eDMA_0_TCD_CH25_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ACTIVE:1;                /* Channel Active */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t _unused_2:26;            /* Reserved */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t ERQ:1;                   /* Enable DMA Request */
  } B;
} eDMA_0_TCD_CH25_CSR_tag;

typedef union eDMA_0_TCD_CH25_ES_union_tag { /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERR:1;                   /* Error In Channel */
    vuint32_t _unused_1:23;            /* Reserved */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t DBE:1;                   /* Destination Bus Error */
  } B;
} eDMA_0_TCD_CH25_ES_tag;

typedef union eDMA_0_TCD_CH25_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t INT:1;                   /* Interrupt Request */
  } B;
} eDMA_0_TCD_CH25_INT_tag;

typedef union eDMA_0_TCD_CH25_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;            /* Reserved */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t _unused_17:10;           /* Reserved */
    vuint32_t MID:5;                   /* Master ID */
  } B;
} eDMA_0_TCD_CH25_SBR_tag;

typedef union eDMA_0_TCD_CH25_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t _unused_2:27;            /* Reserved */
    vuint32_t APL:3;                   /* Arbitration Priority Level */
  } B;
} eDMA_0_TCD_CH25_PRI_tag;

typedef union eDMA_0_TCD_TCD25_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} eDMA_0_TCD_TCD25_SADDR_tag;

typedef union eDMA_0_TCD_TCD25_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t SMOD:5;                  /* Source Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
  } B;
} eDMA_0_TCD_TCD25_ATTR_tag;

typedef union eDMA_0_TCD_TCD25_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD25_SOFF_tag;

typedef union eDMA_0_TCD_NBYTES25_TCD25_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES25_TCD25_NBYTES_MLOFFNO_tag;

typedef union eDMA_0_TCD_NBYTES25_TCD25_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES25_TCD25_NBYTES_MLOFFYES_tag;

typedef union eDMA_0_TCD_NBYTES25_union_tag {
  eDMA_0_TCD_NBYTES25_TCD25_NBYTES_MLOFFNO_tag TCD25_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  eDMA_0_TCD_NBYTES25_TCD25_NBYTES_MLOFFYES_tag TCD25_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} eDMA_0_TCD_NBYTES25_tag;

typedef union eDMA_0_TCD_TCD25_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} eDMA_0_TCD_TCD25_SLAST_SDA_tag;

typedef union eDMA_0_TCD_TCD25_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} eDMA_0_TCD_TCD25_DADDR_tag;

typedef union eDMA_0_TCD_CITER25_TCD25_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t CITER:15;                /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER25_TCD25_CITER_ELINKNO_tag;

typedef union eDMA_0_TCD_CITER25_TCD25_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER25_TCD25_CITER_ELINKYES_tag;

typedef union eDMA_0_TCD_CITER25_union_tag {
  eDMA_0_TCD_CITER25_TCD25_CITER_ELINKNO_tag TCD25_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_CITER25_TCD25_CITER_ELINKYES_tag TCD25_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_CITER25_tag;

typedef union eDMA_0_TCD_TCD25_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD25_DOFF_tag;

typedef union eDMA_0_TCD_TCD25_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} eDMA_0_TCD_TCD25_DLAST_SGA_tag;

typedef union eDMA_0_TCD_BITER25_TCD25_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enables Link */
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER25_TCD25_BITER_ELINKNO_tag;

typedef union eDMA_0_TCD_BITER25_TCD25_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER25_TCD25_BITER_ELINKYES_tag;

typedef union eDMA_0_TCD_BITER25_union_tag {
  eDMA_0_TCD_BITER25_TCD25_BITER_ELINKNO_tag TCD25_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_BITER25_TCD25_BITER_ELINKYES_tag TCD25_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_BITER25_tag;

typedef union eDMA_0_TCD_TCD25_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t BWC:2;                   /* Bandwidth Control */
    vuint16_t _unused_2:1;             /* Reserved */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t START:1;                 /* Channel Start */
  } B;
} eDMA_0_TCD_TCD25_CSR_tag;

typedef union eDMA_0_TCD_CH26_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ACTIVE:1;                /* Channel Active */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t _unused_2:26;            /* Reserved */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t ERQ:1;                   /* Enable DMA Request */
  } B;
} eDMA_0_TCD_CH26_CSR_tag;

typedef union eDMA_0_TCD_CH26_ES_union_tag { /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERR:1;                   /* Error In Channel */
    vuint32_t _unused_1:23;            /* Reserved */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t DBE:1;                   /* Destination Bus Error */
  } B;
} eDMA_0_TCD_CH26_ES_tag;

typedef union eDMA_0_TCD_CH26_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t INT:1;                   /* Interrupt Request */
  } B;
} eDMA_0_TCD_CH26_INT_tag;

typedef union eDMA_0_TCD_CH26_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;            /* Reserved */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t _unused_17:10;           /* Reserved */
    vuint32_t MID:5;                   /* Master ID */
  } B;
} eDMA_0_TCD_CH26_SBR_tag;

typedef union eDMA_0_TCD_CH26_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t _unused_2:27;            /* Reserved */
    vuint32_t APL:3;                   /* Arbitration Priority Level */
  } B;
} eDMA_0_TCD_CH26_PRI_tag;

typedef union eDMA_0_TCD_TCD26_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} eDMA_0_TCD_TCD26_SADDR_tag;

typedef union eDMA_0_TCD_TCD26_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t SMOD:5;                  /* Source Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
  } B;
} eDMA_0_TCD_TCD26_ATTR_tag;

typedef union eDMA_0_TCD_TCD26_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD26_SOFF_tag;

typedef union eDMA_0_TCD_NBYTES26_TCD26_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES26_TCD26_NBYTES_MLOFFNO_tag;

typedef union eDMA_0_TCD_NBYTES26_TCD26_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES26_TCD26_NBYTES_MLOFFYES_tag;

typedef union eDMA_0_TCD_NBYTES26_union_tag {
  eDMA_0_TCD_NBYTES26_TCD26_NBYTES_MLOFFNO_tag TCD26_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  eDMA_0_TCD_NBYTES26_TCD26_NBYTES_MLOFFYES_tag TCD26_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} eDMA_0_TCD_NBYTES26_tag;

typedef union eDMA_0_TCD_TCD26_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} eDMA_0_TCD_TCD26_SLAST_SDA_tag;

typedef union eDMA_0_TCD_TCD26_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} eDMA_0_TCD_TCD26_DADDR_tag;

typedef union eDMA_0_TCD_CITER26_TCD26_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t CITER:15;                /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER26_TCD26_CITER_ELINKNO_tag;

typedef union eDMA_0_TCD_CITER26_TCD26_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER26_TCD26_CITER_ELINKYES_tag;

typedef union eDMA_0_TCD_CITER26_union_tag {
  eDMA_0_TCD_CITER26_TCD26_CITER_ELINKNO_tag TCD26_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_CITER26_TCD26_CITER_ELINKYES_tag TCD26_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_CITER26_tag;

typedef union eDMA_0_TCD_TCD26_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD26_DOFF_tag;

typedef union eDMA_0_TCD_TCD26_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} eDMA_0_TCD_TCD26_DLAST_SGA_tag;

typedef union eDMA_0_TCD_BITER26_TCD26_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enables Link */
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER26_TCD26_BITER_ELINKNO_tag;

typedef union eDMA_0_TCD_BITER26_TCD26_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER26_TCD26_BITER_ELINKYES_tag;

typedef union eDMA_0_TCD_BITER26_union_tag {
  eDMA_0_TCD_BITER26_TCD26_BITER_ELINKNO_tag TCD26_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_BITER26_TCD26_BITER_ELINKYES_tag TCD26_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_BITER26_tag;

typedef union eDMA_0_TCD_TCD26_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t BWC:2;                   /* Bandwidth Control */
    vuint16_t _unused_2:1;             /* Reserved */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t START:1;                 /* Channel Start */
  } B;
} eDMA_0_TCD_TCD26_CSR_tag;

typedef union eDMA_0_TCD_CH27_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ACTIVE:1;                /* Channel Active */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t _unused_2:26;            /* Reserved */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t ERQ:1;                   /* Enable DMA Request */
  } B;
} eDMA_0_TCD_CH27_CSR_tag;

typedef union eDMA_0_TCD_CH27_ES_union_tag { /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERR:1;                   /* Error In Channel */
    vuint32_t _unused_1:23;            /* Reserved */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t DBE:1;                   /* Destination Bus Error */
  } B;
} eDMA_0_TCD_CH27_ES_tag;

typedef union eDMA_0_TCD_CH27_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t INT:1;                   /* Interrupt Request */
  } B;
} eDMA_0_TCD_CH27_INT_tag;

typedef union eDMA_0_TCD_CH27_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;            /* Reserved */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t _unused_17:10;           /* Reserved */
    vuint32_t MID:5;                   /* Master ID */
  } B;
} eDMA_0_TCD_CH27_SBR_tag;

typedef union eDMA_0_TCD_CH27_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t _unused_2:27;            /* Reserved */
    vuint32_t APL:3;                   /* Arbitration Priority Level */
  } B;
} eDMA_0_TCD_CH27_PRI_tag;

typedef union eDMA_0_TCD_TCD27_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} eDMA_0_TCD_TCD27_SADDR_tag;

typedef union eDMA_0_TCD_TCD27_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t SMOD:5;                  /* Source Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
  } B;
} eDMA_0_TCD_TCD27_ATTR_tag;

typedef union eDMA_0_TCD_TCD27_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD27_SOFF_tag;

typedef union eDMA_0_TCD_NBYTES27_TCD27_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES27_TCD27_NBYTES_MLOFFNO_tag;

typedef union eDMA_0_TCD_NBYTES27_TCD27_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES27_TCD27_NBYTES_MLOFFYES_tag;

typedef union eDMA_0_TCD_NBYTES27_union_tag {
  eDMA_0_TCD_NBYTES27_TCD27_NBYTES_MLOFFNO_tag TCD27_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  eDMA_0_TCD_NBYTES27_TCD27_NBYTES_MLOFFYES_tag TCD27_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} eDMA_0_TCD_NBYTES27_tag;

typedef union eDMA_0_TCD_TCD27_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} eDMA_0_TCD_TCD27_SLAST_SDA_tag;

typedef union eDMA_0_TCD_TCD27_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} eDMA_0_TCD_TCD27_DADDR_tag;

typedef union eDMA_0_TCD_CITER27_TCD27_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t CITER:15;                /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER27_TCD27_CITER_ELINKNO_tag;

typedef union eDMA_0_TCD_CITER27_TCD27_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER27_TCD27_CITER_ELINKYES_tag;

typedef union eDMA_0_TCD_CITER27_union_tag {
  eDMA_0_TCD_CITER27_TCD27_CITER_ELINKNO_tag TCD27_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_CITER27_TCD27_CITER_ELINKYES_tag TCD27_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_CITER27_tag;

typedef union eDMA_0_TCD_TCD27_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD27_DOFF_tag;

typedef union eDMA_0_TCD_TCD27_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} eDMA_0_TCD_TCD27_DLAST_SGA_tag;

typedef union eDMA_0_TCD_BITER27_TCD27_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enables Link */
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER27_TCD27_BITER_ELINKNO_tag;

typedef union eDMA_0_TCD_BITER27_TCD27_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER27_TCD27_BITER_ELINKYES_tag;

typedef union eDMA_0_TCD_BITER27_union_tag {
  eDMA_0_TCD_BITER27_TCD27_BITER_ELINKNO_tag TCD27_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_BITER27_TCD27_BITER_ELINKYES_tag TCD27_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_BITER27_tag;

typedef union eDMA_0_TCD_TCD27_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t BWC:2;                   /* Bandwidth Control */
    vuint16_t _unused_2:1;             /* Reserved */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t START:1;                 /* Channel Start */
  } B;
} eDMA_0_TCD_TCD27_CSR_tag;

typedef union eDMA_0_TCD_CH28_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ACTIVE:1;                /* Channel Active */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t _unused_2:26;            /* Reserved */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t ERQ:1;                   /* Enable DMA Request */
  } B;
} eDMA_0_TCD_CH28_CSR_tag;

typedef union eDMA_0_TCD_CH28_ES_union_tag { /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERR:1;                   /* Error In Channel */
    vuint32_t _unused_1:23;            /* Reserved */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t DBE:1;                   /* Destination Bus Error */
  } B;
} eDMA_0_TCD_CH28_ES_tag;

typedef union eDMA_0_TCD_CH28_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t INT:1;                   /* Interrupt Request */
  } B;
} eDMA_0_TCD_CH28_INT_tag;

typedef union eDMA_0_TCD_CH28_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;            /* Reserved */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t _unused_17:10;           /* Reserved */
    vuint32_t MID:5;                   /* Master ID */
  } B;
} eDMA_0_TCD_CH28_SBR_tag;

typedef union eDMA_0_TCD_CH28_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t _unused_2:27;            /* Reserved */
    vuint32_t APL:3;                   /* Arbitration Priority Level */
  } B;
} eDMA_0_TCD_CH28_PRI_tag;

typedef union eDMA_0_TCD_TCD28_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} eDMA_0_TCD_TCD28_SADDR_tag;

typedef union eDMA_0_TCD_TCD28_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t SMOD:5;                  /* Source Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
  } B;
} eDMA_0_TCD_TCD28_ATTR_tag;

typedef union eDMA_0_TCD_TCD28_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD28_SOFF_tag;

typedef union eDMA_0_TCD_NBYTES28_TCD28_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES28_TCD28_NBYTES_MLOFFNO_tag;

typedef union eDMA_0_TCD_NBYTES28_TCD28_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES28_TCD28_NBYTES_MLOFFYES_tag;

typedef union eDMA_0_TCD_NBYTES28_union_tag {
  eDMA_0_TCD_NBYTES28_TCD28_NBYTES_MLOFFNO_tag TCD28_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  eDMA_0_TCD_NBYTES28_TCD28_NBYTES_MLOFFYES_tag TCD28_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} eDMA_0_TCD_NBYTES28_tag;

typedef union eDMA_0_TCD_TCD28_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} eDMA_0_TCD_TCD28_SLAST_SDA_tag;

typedef union eDMA_0_TCD_TCD28_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} eDMA_0_TCD_TCD28_DADDR_tag;

typedef union eDMA_0_TCD_CITER28_TCD28_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t CITER:15;                /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER28_TCD28_CITER_ELINKNO_tag;

typedef union eDMA_0_TCD_CITER28_TCD28_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER28_TCD28_CITER_ELINKYES_tag;

typedef union eDMA_0_TCD_CITER28_union_tag {
  eDMA_0_TCD_CITER28_TCD28_CITER_ELINKNO_tag TCD28_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_CITER28_TCD28_CITER_ELINKYES_tag TCD28_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_CITER28_tag;

typedef union eDMA_0_TCD_TCD28_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD28_DOFF_tag;

typedef union eDMA_0_TCD_TCD28_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} eDMA_0_TCD_TCD28_DLAST_SGA_tag;

typedef union eDMA_0_TCD_BITER28_TCD28_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enables Link */
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER28_TCD28_BITER_ELINKNO_tag;

typedef union eDMA_0_TCD_BITER28_TCD28_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER28_TCD28_BITER_ELINKYES_tag;

typedef union eDMA_0_TCD_BITER28_union_tag {
  eDMA_0_TCD_BITER28_TCD28_BITER_ELINKNO_tag TCD28_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_BITER28_TCD28_BITER_ELINKYES_tag TCD28_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_BITER28_tag;

typedef union eDMA_0_TCD_TCD28_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t BWC:2;                   /* Bandwidth Control */
    vuint16_t _unused_2:1;             /* Reserved */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t START:1;                 /* Channel Start */
  } B;
} eDMA_0_TCD_TCD28_CSR_tag;

typedef union eDMA_0_TCD_CH29_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ACTIVE:1;                /* Channel Active */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t _unused_2:26;            /* Reserved */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t ERQ:1;                   /* Enable DMA Request */
  } B;
} eDMA_0_TCD_CH29_CSR_tag;

typedef union eDMA_0_TCD_CH29_ES_union_tag { /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERR:1;                   /* Error In Channel */
    vuint32_t _unused_1:23;            /* Reserved */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t DBE:1;                   /* Destination Bus Error */
  } B;
} eDMA_0_TCD_CH29_ES_tag;

typedef union eDMA_0_TCD_CH29_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t INT:1;                   /* Interrupt Request */
  } B;
} eDMA_0_TCD_CH29_INT_tag;

typedef union eDMA_0_TCD_CH29_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;            /* Reserved */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t _unused_17:10;           /* Reserved */
    vuint32_t MID:5;                   /* Master ID */
  } B;
} eDMA_0_TCD_CH29_SBR_tag;

typedef union eDMA_0_TCD_CH29_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t _unused_2:27;            /* Reserved */
    vuint32_t APL:3;                   /* Arbitration Priority Level */
  } B;
} eDMA_0_TCD_CH29_PRI_tag;

typedef union eDMA_0_TCD_TCD29_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} eDMA_0_TCD_TCD29_SADDR_tag;

typedef union eDMA_0_TCD_TCD29_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t SMOD:5;                  /* Source Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
  } B;
} eDMA_0_TCD_TCD29_ATTR_tag;

typedef union eDMA_0_TCD_TCD29_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD29_SOFF_tag;

typedef union eDMA_0_TCD_NBYTES29_TCD29_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES29_TCD29_NBYTES_MLOFFNO_tag;

typedef union eDMA_0_TCD_NBYTES29_TCD29_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES29_TCD29_NBYTES_MLOFFYES_tag;

typedef union eDMA_0_TCD_NBYTES29_union_tag {
  eDMA_0_TCD_NBYTES29_TCD29_NBYTES_MLOFFNO_tag TCD29_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  eDMA_0_TCD_NBYTES29_TCD29_NBYTES_MLOFFYES_tag TCD29_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} eDMA_0_TCD_NBYTES29_tag;

typedef union eDMA_0_TCD_TCD29_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} eDMA_0_TCD_TCD29_SLAST_SDA_tag;

typedef union eDMA_0_TCD_TCD29_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} eDMA_0_TCD_TCD29_DADDR_tag;

typedef union eDMA_0_TCD_CITER29_TCD29_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t CITER:15;                /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER29_TCD29_CITER_ELINKNO_tag;

typedef union eDMA_0_TCD_CITER29_TCD29_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER29_TCD29_CITER_ELINKYES_tag;

typedef union eDMA_0_TCD_CITER29_union_tag {
  eDMA_0_TCD_CITER29_TCD29_CITER_ELINKNO_tag TCD29_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_CITER29_TCD29_CITER_ELINKYES_tag TCD29_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_CITER29_tag;

typedef union eDMA_0_TCD_TCD29_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD29_DOFF_tag;

typedef union eDMA_0_TCD_TCD29_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} eDMA_0_TCD_TCD29_DLAST_SGA_tag;

typedef union eDMA_0_TCD_BITER29_TCD29_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enables Link */
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER29_TCD29_BITER_ELINKNO_tag;

typedef union eDMA_0_TCD_BITER29_TCD29_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER29_TCD29_BITER_ELINKYES_tag;

typedef union eDMA_0_TCD_BITER29_union_tag {
  eDMA_0_TCD_BITER29_TCD29_BITER_ELINKNO_tag TCD29_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_BITER29_TCD29_BITER_ELINKYES_tag TCD29_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_BITER29_tag;

typedef union eDMA_0_TCD_TCD29_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t BWC:2;                   /* Bandwidth Control */
    vuint16_t _unused_2:1;             /* Reserved */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t START:1;                 /* Channel Start */
  } B;
} eDMA_0_TCD_TCD29_CSR_tag;

typedef union eDMA_0_TCD_CH30_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ACTIVE:1;                /* Channel Active */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t _unused_2:26;            /* Reserved */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t ERQ:1;                   /* Enable DMA Request */
  } B;
} eDMA_0_TCD_CH30_CSR_tag;

typedef union eDMA_0_TCD_CH30_ES_union_tag { /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERR:1;                   /* Error In Channel */
    vuint32_t _unused_1:23;            /* Reserved */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t DBE:1;                   /* Destination Bus Error */
  } B;
} eDMA_0_TCD_CH30_ES_tag;

typedef union eDMA_0_TCD_CH30_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t INT:1;                   /* Interrupt Request */
  } B;
} eDMA_0_TCD_CH30_INT_tag;

typedef union eDMA_0_TCD_CH30_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;            /* Reserved */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t _unused_17:10;           /* Reserved */
    vuint32_t MID:5;                   /* Master ID */
  } B;
} eDMA_0_TCD_CH30_SBR_tag;

typedef union eDMA_0_TCD_CH30_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t _unused_2:27;            /* Reserved */
    vuint32_t APL:3;                   /* Arbitration Priority Level */
  } B;
} eDMA_0_TCD_CH30_PRI_tag;

typedef union eDMA_0_TCD_TCD30_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} eDMA_0_TCD_TCD30_SADDR_tag;

typedef union eDMA_0_TCD_TCD30_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t SMOD:5;                  /* Source Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
  } B;
} eDMA_0_TCD_TCD30_ATTR_tag;

typedef union eDMA_0_TCD_TCD30_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD30_SOFF_tag;

typedef union eDMA_0_TCD_NBYTES30_TCD30_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES30_TCD30_NBYTES_MLOFFNO_tag;

typedef union eDMA_0_TCD_NBYTES30_TCD30_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES30_TCD30_NBYTES_MLOFFYES_tag;

typedef union eDMA_0_TCD_NBYTES30_union_tag {
  eDMA_0_TCD_NBYTES30_TCD30_NBYTES_MLOFFNO_tag TCD30_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  eDMA_0_TCD_NBYTES30_TCD30_NBYTES_MLOFFYES_tag TCD30_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} eDMA_0_TCD_NBYTES30_tag;

typedef union eDMA_0_TCD_TCD30_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} eDMA_0_TCD_TCD30_SLAST_SDA_tag;

typedef union eDMA_0_TCD_TCD30_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} eDMA_0_TCD_TCD30_DADDR_tag;

typedef union eDMA_0_TCD_CITER30_TCD30_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t CITER:15;                /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER30_TCD30_CITER_ELINKNO_tag;

typedef union eDMA_0_TCD_CITER30_TCD30_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER30_TCD30_CITER_ELINKYES_tag;

typedef union eDMA_0_TCD_CITER30_union_tag {
  eDMA_0_TCD_CITER30_TCD30_CITER_ELINKNO_tag TCD30_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_CITER30_TCD30_CITER_ELINKYES_tag TCD30_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_CITER30_tag;

typedef union eDMA_0_TCD_TCD30_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD30_DOFF_tag;

typedef union eDMA_0_TCD_TCD30_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} eDMA_0_TCD_TCD30_DLAST_SGA_tag;

typedef union eDMA_0_TCD_BITER30_TCD30_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enables Link */
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER30_TCD30_BITER_ELINKNO_tag;

typedef union eDMA_0_TCD_BITER30_TCD30_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER30_TCD30_BITER_ELINKYES_tag;

typedef union eDMA_0_TCD_BITER30_union_tag {
  eDMA_0_TCD_BITER30_TCD30_BITER_ELINKNO_tag TCD30_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_BITER30_TCD30_BITER_ELINKYES_tag TCD30_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_BITER30_tag;

typedef union eDMA_0_TCD_TCD30_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t BWC:2;                   /* Bandwidth Control */
    vuint16_t _unused_2:1;             /* Reserved */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t START:1;                 /* Channel Start */
  } B;
} eDMA_0_TCD_TCD30_CSR_tag;

typedef union eDMA_0_TCD_CH31_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ACTIVE:1;                /* Channel Active */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t _unused_2:26;            /* Reserved */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t ERQ:1;                   /* Enable DMA Request */
  } B;
} eDMA_0_TCD_CH31_CSR_tag;

typedef union eDMA_0_TCD_CH31_ES_union_tag { /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERR:1;                   /* Error In Channel */
    vuint32_t _unused_1:23;            /* Reserved */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t DBE:1;                   /* Destination Bus Error */
  } B;
} eDMA_0_TCD_CH31_ES_tag;

typedef union eDMA_0_TCD_CH31_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t INT:1;                   /* Interrupt Request */
  } B;
} eDMA_0_TCD_CH31_INT_tag;

typedef union eDMA_0_TCD_CH31_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;            /* Reserved */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t _unused_17:10;           /* Reserved */
    vuint32_t MID:5;                   /* Master ID */
  } B;
} eDMA_0_TCD_CH31_SBR_tag;

typedef union eDMA_0_TCD_CH31_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t _unused_2:27;            /* Reserved */
    vuint32_t APL:3;                   /* Arbitration Priority Level */
  } B;
} eDMA_0_TCD_CH31_PRI_tag;

typedef union eDMA_0_TCD_TCD31_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} eDMA_0_TCD_TCD31_SADDR_tag;

typedef union eDMA_0_TCD_TCD31_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t SMOD:5;                  /* Source Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
  } B;
} eDMA_0_TCD_TCD31_ATTR_tag;

typedef union eDMA_0_TCD_TCD31_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD31_SOFF_tag;

typedef union eDMA_0_TCD_NBYTES31_TCD31_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES31_TCD31_NBYTES_MLOFFNO_tag;

typedef union eDMA_0_TCD_NBYTES31_TCD31_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES31_TCD31_NBYTES_MLOFFYES_tag;

typedef union eDMA_0_TCD_NBYTES31_union_tag {
  eDMA_0_TCD_NBYTES31_TCD31_NBYTES_MLOFFNO_tag TCD31_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  eDMA_0_TCD_NBYTES31_TCD31_NBYTES_MLOFFYES_tag TCD31_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} eDMA_0_TCD_NBYTES31_tag;

typedef union eDMA_0_TCD_TCD31_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} eDMA_0_TCD_TCD31_SLAST_SDA_tag;

typedef union eDMA_0_TCD_TCD31_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} eDMA_0_TCD_TCD31_DADDR_tag;

typedef union eDMA_0_TCD_CITER31_TCD31_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t CITER:15;                /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER31_TCD31_CITER_ELINKNO_tag;

typedef union eDMA_0_TCD_CITER31_TCD31_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER31_TCD31_CITER_ELINKYES_tag;

typedef union eDMA_0_TCD_CITER31_union_tag {
  eDMA_0_TCD_CITER31_TCD31_CITER_ELINKNO_tag TCD31_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_CITER31_TCD31_CITER_ELINKYES_tag TCD31_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_CITER31_tag;

typedef union eDMA_0_TCD_TCD31_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD31_DOFF_tag;

typedef union eDMA_0_TCD_TCD31_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} eDMA_0_TCD_TCD31_DLAST_SGA_tag;

typedef union eDMA_0_TCD_BITER31_TCD31_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enables Link */
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER31_TCD31_BITER_ELINKNO_tag;

typedef union eDMA_0_TCD_BITER31_TCD31_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER31_TCD31_BITER_ELINKYES_tag;

typedef union eDMA_0_TCD_BITER31_union_tag {
  eDMA_0_TCD_BITER31_TCD31_BITER_ELINKNO_tag TCD31_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_BITER31_TCD31_BITER_ELINKYES_tag TCD31_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_BITER31_tag;

typedef union eDMA_0_TCD_TCD31_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t BWC:2;                   /* Bandwidth Control */
    vuint16_t _unused_2:1;             /* Reserved */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t START:1;                 /* Channel Start */
  } B;
} eDMA_0_TCD_TCD31_CSR_tag;

typedef union eDMA_0_TCD_CH0_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ACTIVE:1;                /* Channel Active */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t _unused_2:26;            /* Reserved */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t ERQ:1;                   /* Enable DMA Request */
  } B;
} eDMA_0_TCD_CH0_CSR_tag;

typedef union eDMA_0_TCD_CH0_ES_union_tag { /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t ERR:1;                   /* Error In Channel */
    vuint32_t _unused_1:23;            /* Reserved */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t DBE:1;                   /* Destination Bus Error */
  } B;
} eDMA_0_TCD_CH0_ES_tag;

typedef union eDMA_0_TCD_CH0_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t INT:1;                   /* Interrupt Request */
  } B;
} eDMA_0_TCD_CH0_INT_tag;

typedef union eDMA_0_TCD_CH0_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;            /* Reserved */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t _unused_17:10;           /* Reserved */
    vuint32_t MID:5;                   /* Master ID */
  } B;
} eDMA_0_TCD_CH0_SBR_tag;

typedef union eDMA_0_TCD_CH0_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t _unused_2:27;            /* Reserved */
    vuint32_t APL:3;                   /* Arbitration Priority Level */
  } B;
} eDMA_0_TCD_CH0_PRI_tag;

typedef union eDMA_0_TCD_TCD0_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} eDMA_0_TCD_TCD0_SADDR_tag;

typedef union eDMA_0_TCD_TCD0_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t SMOD:5;                  /* Source Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
  } B;
} eDMA_0_TCD_TCD0_ATTR_tag;

typedef union eDMA_0_TCD_TCD0_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD0_SOFF_tag;

typedef union eDMA_0_TCD_NBYTES0_TCD0_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES0_TCD0_NBYTES_MLOFFNO_tag;

typedef union eDMA_0_TCD_NBYTES0_TCD0_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
  } B;
} eDMA_0_TCD_NBYTES0_TCD0_NBYTES_MLOFFYES_tag;

typedef union eDMA_0_TCD_NBYTES0_union_tag {
  eDMA_0_TCD_NBYTES0_TCD0_NBYTES_MLOFFNO_tag TCD0_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  eDMA_0_TCD_NBYTES0_TCD0_NBYTES_MLOFFYES_tag TCD0_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} eDMA_0_TCD_NBYTES0_tag;

typedef union eDMA_0_TCD_TCD0_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} eDMA_0_TCD_TCD0_SLAST_SDA_tag;

typedef union eDMA_0_TCD_TCD0_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} eDMA_0_TCD_TCD0_DADDR_tag;

typedef union eDMA_0_TCD_CITER0_TCD0_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t CITER:15;                /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER0_TCD0_CITER_ELINKNO_tag;

typedef union eDMA_0_TCD_CITER0_TCD0_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
  } B;
} eDMA_0_TCD_CITER0_TCD0_CITER_ELINKYES_tag;

typedef union eDMA_0_TCD_CITER0_union_tag {
  eDMA_0_TCD_CITER0_TCD0_CITER_ELINKNO_tag TCD0_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_CITER0_TCD0_CITER_ELINKYES_tag TCD0_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_CITER0_tag;

typedef union eDMA_0_TCD_TCD0_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} eDMA_0_TCD_TCD0_DOFF_tag;

typedef union eDMA_0_TCD_TCD0_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} eDMA_0_TCD_TCD0_DLAST_SGA_tag;

typedef union eDMA_0_TCD_BITER0_TCD0_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enables Link */
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER0_TCD0_BITER_ELINKNO_tag;

typedef union eDMA_0_TCD_BITER0_TCD0_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t ELINK:1;                 /* Enable Link */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
  } B;
} eDMA_0_TCD_BITER0_TCD0_BITER_ELINKYES_tag;

typedef union eDMA_0_TCD_BITER0_union_tag {
  eDMA_0_TCD_BITER0_TCD0_BITER_ELINKNO_tag TCD0_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  eDMA_0_TCD_BITER0_TCD0_BITER_ELINKYES_tag TCD0_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} eDMA_0_TCD_BITER0_tag;

typedef union eDMA_0_TCD_TCD0_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t BWC:2;                   /* Bandwidth Control */
    vuint16_t _unused_2:1;             /* Reserved */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t START:1;                 /* Channel Start */
  } B;
} eDMA_0_TCD_TCD0_CSR_tag;

struct eDMA_0_TCD_tag {
  eDMA_0_TCD_CH1_CSR_tag CH1_CSR;      /* Channel Control and Status */
  eDMA_0_TCD_CH1_ES_tag CH1_ES;        /* Channel Error Status */
  eDMA_0_TCD_CH1_INT_tag CH1_INT;      /* Channel Interrupt Status */
  eDMA_0_TCD_CH1_SBR_tag CH1_SBR;      /* Channel System Bus */
  eDMA_0_TCD_CH1_PRI_tag CH1_PRI;      /* Channel Priority */
  uint8_t eDMA_0_TCD_reserved0[12];
  eDMA_0_TCD_TCD1_SADDR_tag TCD1_SADDR; /* TCD Source Address */
  eDMA_0_TCD_TCD1_ATTR_tag TCD1_ATTR;  /* TCD Transfer Attributes */
  eDMA_0_TCD_TCD1_SOFF_tag TCD1_SOFF;  /* TCD Signed Source Address Offset */
  eDMA_0_TCD_NBYTES1_tag NBYTES1;
  eDMA_0_TCD_TCD1_SLAST_SDA_tag TCD1_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  eDMA_0_TCD_TCD1_DADDR_tag TCD1_DADDR; /* TCD Destination Address */
  eDMA_0_TCD_CITER1_tag CITER1;
  eDMA_0_TCD_TCD1_DOFF_tag TCD1_DOFF;  /* TCD Signed Destination Address Offset */
  eDMA_0_TCD_TCD1_DLAST_SGA_tag TCD1_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  eDMA_0_TCD_BITER1_tag BITER1;
  eDMA_0_TCD_TCD1_CSR_tag TCD1_CSR;    /* TCD Control and Status */
  uint8_t eDMA_0_TCD_reserved1[16320];
  eDMA_0_TCD_CH2_CSR_tag CH2_CSR;      /* Channel Control and Status */
  eDMA_0_TCD_CH2_ES_tag CH2_ES;        /* Channel Error Status */
  eDMA_0_TCD_CH2_INT_tag CH2_INT;      /* Channel Interrupt Status */
  eDMA_0_TCD_CH2_SBR_tag CH2_SBR;      /* Channel System Bus */
  eDMA_0_TCD_CH2_PRI_tag CH2_PRI;      /* Channel Priority */
  uint8_t eDMA_0_TCD_reserved2[12];
  eDMA_0_TCD_TCD2_SADDR_tag TCD2_SADDR; /* TCD Source Address */
  eDMA_0_TCD_TCD2_ATTR_tag TCD2_ATTR;  /* TCD Transfer Attributes */
  eDMA_0_TCD_TCD2_SOFF_tag TCD2_SOFF;  /* TCD Signed Source Address Offset */
  eDMA_0_TCD_NBYTES2_tag NBYTES2;
  eDMA_0_TCD_TCD2_SLAST_SDA_tag TCD2_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  eDMA_0_TCD_TCD2_DADDR_tag TCD2_DADDR; /* TCD Destination Address */
  eDMA_0_TCD_CITER2_tag CITER2;
  eDMA_0_TCD_TCD2_DOFF_tag TCD2_DOFF;  /* TCD Signed Destination Address Offset */
  eDMA_0_TCD_TCD2_DLAST_SGA_tag TCD2_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  eDMA_0_TCD_BITER2_tag BITER2;
  eDMA_0_TCD_TCD2_CSR_tag TCD2_CSR;    /* TCD Control and Status */
  uint8_t eDMA_0_TCD_reserved3[16320];
  eDMA_0_TCD_CH3_CSR_tag CH3_CSR;      /* Channel Control and Status */
  eDMA_0_TCD_CH3_ES_tag CH3_ES;        /* Channel Error Status */
  eDMA_0_TCD_CH3_INT_tag CH3_INT;      /* Channel Interrupt Status */
  eDMA_0_TCD_CH3_SBR_tag CH3_SBR;      /* Channel System Bus */
  eDMA_0_TCD_CH3_PRI_tag CH3_PRI;      /* Channel Priority */
  uint8_t eDMA_0_TCD_reserved4[12];
  eDMA_0_TCD_TCD3_SADDR_tag TCD3_SADDR; /* TCD Source Address */
  eDMA_0_TCD_TCD3_ATTR_tag TCD3_ATTR;  /* TCD Transfer Attributes */
  eDMA_0_TCD_TCD3_SOFF_tag TCD3_SOFF;  /* TCD Signed Source Address Offset */
  eDMA_0_TCD_NBYTES3_tag NBYTES3;
  eDMA_0_TCD_TCD3_SLAST_SDA_tag TCD3_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  eDMA_0_TCD_TCD3_DADDR_tag TCD3_DADDR; /* TCD Destination Address */
  eDMA_0_TCD_CITER3_tag CITER3;
  eDMA_0_TCD_TCD3_DOFF_tag TCD3_DOFF;  /* TCD Signed Destination Address Offset */
  eDMA_0_TCD_TCD3_DLAST_SGA_tag TCD3_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  eDMA_0_TCD_BITER3_tag BITER3;
  eDMA_0_TCD_TCD3_CSR_tag TCD3_CSR;    /* TCD Control and Status */
  uint8_t eDMA_0_TCD_reserved5[16320];
  eDMA_0_TCD_CH4_CSR_tag CH4_CSR;      /* Channel Control and Status */
  eDMA_0_TCD_CH4_ES_tag CH4_ES;        /* Channel Error Status */
  eDMA_0_TCD_CH4_INT_tag CH4_INT;      /* Channel Interrupt Status */
  eDMA_0_TCD_CH4_SBR_tag CH4_SBR;      /* Channel System Bus */
  eDMA_0_TCD_CH4_PRI_tag CH4_PRI;      /* Channel Priority */
  uint8_t eDMA_0_TCD_reserved6[12];
  eDMA_0_TCD_TCD4_SADDR_tag TCD4_SADDR; /* TCD Source Address */
  eDMA_0_TCD_TCD4_ATTR_tag TCD4_ATTR;  /* TCD Transfer Attributes */
  eDMA_0_TCD_TCD4_SOFF_tag TCD4_SOFF;  /* TCD Signed Source Address Offset */
  eDMA_0_TCD_NBYTES4_tag NBYTES4;
  eDMA_0_TCD_TCD4_SLAST_SDA_tag TCD4_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  eDMA_0_TCD_TCD4_DADDR_tag TCD4_DADDR; /* TCD Destination Address */
  eDMA_0_TCD_CITER4_tag CITER4;
  eDMA_0_TCD_TCD4_DOFF_tag TCD4_DOFF;  /* TCD Signed Destination Address Offset */
  eDMA_0_TCD_TCD4_DLAST_SGA_tag TCD4_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  eDMA_0_TCD_BITER4_tag BITER4;
  eDMA_0_TCD_TCD4_CSR_tag TCD4_CSR;    /* TCD Control and Status */
  uint8_t eDMA_0_TCD_reserved7[16320];
  eDMA_0_TCD_CH5_CSR_tag CH5_CSR;      /* Channel Control and Status */
  eDMA_0_TCD_CH5_ES_tag CH5_ES;        /* Channel Error Status */
  eDMA_0_TCD_CH5_INT_tag CH5_INT;      /* Channel Interrupt Status */
  eDMA_0_TCD_CH5_SBR_tag CH5_SBR;      /* Channel System Bus */
  eDMA_0_TCD_CH5_PRI_tag CH5_PRI;      /* Channel Priority */
  uint8_t eDMA_0_TCD_reserved8[12];
  eDMA_0_TCD_TCD5_SADDR_tag TCD5_SADDR; /* TCD Source Address */
  eDMA_0_TCD_TCD5_ATTR_tag TCD5_ATTR;  /* TCD Transfer Attributes */
  eDMA_0_TCD_TCD5_SOFF_tag TCD5_SOFF;  /* TCD Signed Source Address Offset */
  eDMA_0_TCD_NBYTES5_tag NBYTES5;
  eDMA_0_TCD_TCD5_SLAST_SDA_tag TCD5_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  eDMA_0_TCD_TCD5_DADDR_tag TCD5_DADDR; /* TCD Destination Address */
  eDMA_0_TCD_CITER5_tag CITER5;
  eDMA_0_TCD_TCD5_DOFF_tag TCD5_DOFF;  /* TCD Signed Destination Address Offset */
  eDMA_0_TCD_TCD5_DLAST_SGA_tag TCD5_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  eDMA_0_TCD_BITER5_tag BITER5;
  eDMA_0_TCD_TCD5_CSR_tag TCD5_CSR;    /* TCD Control and Status */
  uint8_t eDMA_0_TCD_reserved9[16320];
  eDMA_0_TCD_CH6_CSR_tag CH6_CSR;      /* Channel Control and Status */
  eDMA_0_TCD_CH6_ES_tag CH6_ES;        /* Channel Error Status */
  eDMA_0_TCD_CH6_INT_tag CH6_INT;      /* Channel Interrupt Status */
  eDMA_0_TCD_CH6_SBR_tag CH6_SBR;      /* Channel System Bus */
  eDMA_0_TCD_CH6_PRI_tag CH6_PRI;      /* Channel Priority */
  uint8_t eDMA_0_TCD_reserved10[12];
  eDMA_0_TCD_TCD6_SADDR_tag TCD6_SADDR; /* TCD Source Address */
  eDMA_0_TCD_TCD6_ATTR_tag TCD6_ATTR;  /* TCD Transfer Attributes */
  eDMA_0_TCD_TCD6_SOFF_tag TCD6_SOFF;  /* TCD Signed Source Address Offset */
  eDMA_0_TCD_NBYTES6_tag NBYTES6;
  eDMA_0_TCD_TCD6_SLAST_SDA_tag TCD6_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  eDMA_0_TCD_TCD6_DADDR_tag TCD6_DADDR; /* TCD Destination Address */
  eDMA_0_TCD_CITER6_tag CITER6;
  eDMA_0_TCD_TCD6_DOFF_tag TCD6_DOFF;  /* TCD Signed Destination Address Offset */
  eDMA_0_TCD_TCD6_DLAST_SGA_tag TCD6_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  eDMA_0_TCD_BITER6_tag BITER6;
  eDMA_0_TCD_TCD6_CSR_tag TCD6_CSR;    /* TCD Control and Status */
  uint8_t eDMA_0_TCD_reserved11[16320];
  eDMA_0_TCD_CH7_CSR_tag CH7_CSR;      /* Channel Control and Status */
  eDMA_0_TCD_CH7_ES_tag CH7_ES;        /* Channel Error Status */
  eDMA_0_TCD_CH7_INT_tag CH7_INT;      /* Channel Interrupt Status */
  eDMA_0_TCD_CH7_SBR_tag CH7_SBR;      /* Channel System Bus */
  eDMA_0_TCD_CH7_PRI_tag CH7_PRI;      /* Channel Priority */
  uint8_t eDMA_0_TCD_reserved12[12];
  eDMA_0_TCD_TCD7_SADDR_tag TCD7_SADDR; /* TCD Source Address */
  eDMA_0_TCD_TCD7_ATTR_tag TCD7_ATTR;  /* TCD Transfer Attributes */
  eDMA_0_TCD_TCD7_SOFF_tag TCD7_SOFF;  /* TCD Signed Source Address Offset */
  eDMA_0_TCD_NBYTES7_tag NBYTES7;
  eDMA_0_TCD_TCD7_SLAST_SDA_tag TCD7_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  eDMA_0_TCD_TCD7_DADDR_tag TCD7_DADDR; /* TCD Destination Address */
  eDMA_0_TCD_CITER7_tag CITER7;
  eDMA_0_TCD_TCD7_DOFF_tag TCD7_DOFF;  /* TCD Signed Destination Address Offset */
  eDMA_0_TCD_TCD7_DLAST_SGA_tag TCD7_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  eDMA_0_TCD_BITER7_tag BITER7;
  eDMA_0_TCD_TCD7_CSR_tag TCD7_CSR;    /* TCD Control and Status */
  uint8_t eDMA_0_TCD_reserved13[16320];
  eDMA_0_TCD_CH8_CSR_tag CH8_CSR;      /* Channel Control and Status */
  eDMA_0_TCD_CH8_ES_tag CH8_ES;        /* Channel Error Status */
  eDMA_0_TCD_CH8_INT_tag CH8_INT;      /* Channel Interrupt Status */
  eDMA_0_TCD_CH8_SBR_tag CH8_SBR;      /* Channel System Bus */
  eDMA_0_TCD_CH8_PRI_tag CH8_PRI;      /* Channel Priority */
  uint8_t eDMA_0_TCD_reserved14[12];
  eDMA_0_TCD_TCD8_SADDR_tag TCD8_SADDR; /* TCD Source Address */
  eDMA_0_TCD_TCD8_ATTR_tag TCD8_ATTR;  /* TCD Transfer Attributes */
  eDMA_0_TCD_TCD8_SOFF_tag TCD8_SOFF;  /* TCD Signed Source Address Offset */
  eDMA_0_TCD_NBYTES8_tag NBYTES8;
  eDMA_0_TCD_TCD8_SLAST_SDA_tag TCD8_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  eDMA_0_TCD_TCD8_DADDR_tag TCD8_DADDR; /* TCD Destination Address */
  eDMA_0_TCD_CITER8_tag CITER8;
  eDMA_0_TCD_TCD8_DOFF_tag TCD8_DOFF;  /* TCD Signed Destination Address Offset */
  eDMA_0_TCD_TCD8_DLAST_SGA_tag TCD8_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  eDMA_0_TCD_BITER8_tag BITER8;
  eDMA_0_TCD_TCD8_CSR_tag TCD8_CSR;    /* TCD Control and Status */
  uint8_t eDMA_0_TCD_reserved15[16320];
  eDMA_0_TCD_CH9_CSR_tag CH9_CSR;      /* Channel Control and Status */
  eDMA_0_TCD_CH9_ES_tag CH9_ES;        /* Channel Error Status */
  eDMA_0_TCD_CH9_INT_tag CH9_INT;      /* Channel Interrupt Status */
  eDMA_0_TCD_CH9_SBR_tag CH9_SBR;      /* Channel System Bus */
  eDMA_0_TCD_CH9_PRI_tag CH9_PRI;      /* Channel Priority */
  uint8_t eDMA_0_TCD_reserved16[12];
  eDMA_0_TCD_TCD9_SADDR_tag TCD9_SADDR; /* TCD Source Address */
  eDMA_0_TCD_TCD9_ATTR_tag TCD9_ATTR;  /* TCD Transfer Attributes */
  eDMA_0_TCD_TCD9_SOFF_tag TCD9_SOFF;  /* TCD Signed Source Address Offset */
  eDMA_0_TCD_NBYTES9_tag NBYTES9;
  eDMA_0_TCD_TCD9_SLAST_SDA_tag TCD9_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  eDMA_0_TCD_TCD9_DADDR_tag TCD9_DADDR; /* TCD Destination Address */
  eDMA_0_TCD_CITER9_tag CITER9;
  eDMA_0_TCD_TCD9_DOFF_tag TCD9_DOFF;  /* TCD Signed Destination Address Offset */
  eDMA_0_TCD_TCD9_DLAST_SGA_tag TCD9_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  eDMA_0_TCD_BITER9_tag BITER9;
  eDMA_0_TCD_TCD9_CSR_tag TCD9_CSR;    /* TCD Control and Status */
  uint8_t eDMA_0_TCD_reserved17[16320];
  eDMA_0_TCD_CH10_CSR_tag CH10_CSR;    /* Channel Control and Status */
  eDMA_0_TCD_CH10_ES_tag CH10_ES;      /* Channel Error Status */
  eDMA_0_TCD_CH10_INT_tag CH10_INT;    /* Channel Interrupt Status */
  eDMA_0_TCD_CH10_SBR_tag CH10_SBR;    /* Channel System Bus */
  eDMA_0_TCD_CH10_PRI_tag CH10_PRI;    /* Channel Priority */
  uint8_t eDMA_0_TCD_reserved18[12];
  eDMA_0_TCD_TCD10_SADDR_tag TCD10_SADDR; /* TCD Source Address */
  eDMA_0_TCD_TCD10_ATTR_tag TCD10_ATTR; /* TCD Transfer Attributes */
  eDMA_0_TCD_TCD10_SOFF_tag TCD10_SOFF; /* TCD Signed Source Address Offset */
  eDMA_0_TCD_NBYTES10_tag NBYTES10;
  eDMA_0_TCD_TCD10_SLAST_SDA_tag TCD10_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  eDMA_0_TCD_TCD10_DADDR_tag TCD10_DADDR; /* TCD Destination Address */
  eDMA_0_TCD_CITER10_tag CITER10;
  eDMA_0_TCD_TCD10_DOFF_tag TCD10_DOFF; /* TCD Signed Destination Address Offset */
  eDMA_0_TCD_TCD10_DLAST_SGA_tag TCD10_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  eDMA_0_TCD_BITER10_tag BITER10;
  eDMA_0_TCD_TCD10_CSR_tag TCD10_CSR;  /* TCD Control and Status */
  uint8_t eDMA_0_TCD_reserved19[16320];
  eDMA_0_TCD_CH11_CSR_tag CH11_CSR;    /* Channel Control and Status */
  eDMA_0_TCD_CH11_ES_tag CH11_ES;      /* Channel Error Status */
  eDMA_0_TCD_CH11_INT_tag CH11_INT;    /* Channel Interrupt Status */
  eDMA_0_TCD_CH11_SBR_tag CH11_SBR;    /* Channel System Bus */
  eDMA_0_TCD_CH11_PRI_tag CH11_PRI;    /* Channel Priority */
  uint8_t eDMA_0_TCD_reserved20[12];
  eDMA_0_TCD_TCD11_SADDR_tag TCD11_SADDR; /* TCD Source Address */
  eDMA_0_TCD_TCD11_ATTR_tag TCD11_ATTR; /* TCD Transfer Attributes */
  eDMA_0_TCD_TCD11_SOFF_tag TCD11_SOFF; /* TCD Signed Source Address Offset */
  eDMA_0_TCD_NBYTES11_tag NBYTES11;
  eDMA_0_TCD_TCD11_SLAST_SDA_tag TCD11_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  eDMA_0_TCD_TCD11_DADDR_tag TCD11_DADDR; /* TCD Destination Address */
  eDMA_0_TCD_CITER11_tag CITER11;
  eDMA_0_TCD_TCD11_DOFF_tag TCD11_DOFF; /* TCD Signed Destination Address Offset */
  eDMA_0_TCD_TCD11_DLAST_SGA_tag TCD11_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  eDMA_0_TCD_BITER11_tag BITER11;
  eDMA_0_TCD_TCD11_CSR_tag TCD11_CSR;  /* TCD Control and Status */
  uint8_t eDMA_0_TCD_reserved21[16320];
  eDMA_0_TCD_CH12_CSR_tag CH12_CSR;    /* Channel Control and Status */
  eDMA_0_TCD_CH12_ES_tag CH12_ES;      /* Channel Error Status */
  eDMA_0_TCD_CH12_INT_tag CH12_INT;    /* Channel Interrupt Status */
  eDMA_0_TCD_CH12_SBR_tag CH12_SBR;    /* Channel System Bus */
  eDMA_0_TCD_CH12_PRI_tag CH12_PRI;    /* Channel Priority */
  uint8_t eDMA_0_TCD_reserved22[12];
  eDMA_0_TCD_TCD12_SADDR_tag TCD12_SADDR; /* TCD Source Address */
  eDMA_0_TCD_TCD12_ATTR_tag TCD12_ATTR; /* TCD Transfer Attributes */
  eDMA_0_TCD_TCD12_SOFF_tag TCD12_SOFF; /* TCD Signed Source Address Offset */
  eDMA_0_TCD_NBYTES12_tag NBYTES12;
  eDMA_0_TCD_TCD12_SLAST_SDA_tag TCD12_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  eDMA_0_TCD_TCD12_DADDR_tag TCD12_DADDR; /* TCD Destination Address */
  eDMA_0_TCD_CITER12_tag CITER12;
  eDMA_0_TCD_TCD12_DOFF_tag TCD12_DOFF; /* TCD Signed Destination Address Offset */
  eDMA_0_TCD_TCD12_DLAST_SGA_tag TCD12_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  eDMA_0_TCD_BITER12_tag BITER12;
  eDMA_0_TCD_TCD12_CSR_tag TCD12_CSR;  /* TCD Control and Status */
  uint8_t eDMA_0_TCD_reserved23[16320];
  eDMA_0_TCD_CH13_CSR_tag CH13_CSR;    /* Channel Control and Status */
  eDMA_0_TCD_CH13_ES_tag CH13_ES;      /* Channel Error Status */
  eDMA_0_TCD_CH13_INT_tag CH13_INT;    /* Channel Interrupt Status */
  eDMA_0_TCD_CH13_SBR_tag CH13_SBR;    /* Channel System Bus */
  eDMA_0_TCD_CH13_PRI_tag CH13_PRI;    /* Channel Priority */
  uint8_t eDMA_0_TCD_reserved24[12];
  eDMA_0_TCD_TCD13_SADDR_tag TCD13_SADDR; /* TCD Source Address */
  eDMA_0_TCD_TCD13_ATTR_tag TCD13_ATTR; /* TCD Transfer Attributes */
  eDMA_0_TCD_TCD13_SOFF_tag TCD13_SOFF; /* TCD Signed Source Address Offset */
  eDMA_0_TCD_NBYTES13_tag NBYTES13;
  eDMA_0_TCD_TCD13_SLAST_SDA_tag TCD13_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  eDMA_0_TCD_TCD13_DADDR_tag TCD13_DADDR; /* TCD Destination Address */
  eDMA_0_TCD_CITER13_tag CITER13;
  eDMA_0_TCD_TCD13_DOFF_tag TCD13_DOFF; /* TCD Signed Destination Address Offset */
  eDMA_0_TCD_TCD13_DLAST_SGA_tag TCD13_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  eDMA_0_TCD_BITER13_tag BITER13;
  eDMA_0_TCD_TCD13_CSR_tag TCD13_CSR;  /* TCD Control and Status */
  uint8_t eDMA_0_TCD_reserved25[16320];
  eDMA_0_TCD_CH14_CSR_tag CH14_CSR;    /* Channel Control and Status */
  eDMA_0_TCD_CH14_ES_tag CH14_ES;      /* Channel Error Status */
  eDMA_0_TCD_CH14_INT_tag CH14_INT;    /* Channel Interrupt Status */
  eDMA_0_TCD_CH14_SBR_tag CH14_SBR;    /* Channel System Bus */
  eDMA_0_TCD_CH14_PRI_tag CH14_PRI;    /* Channel Priority */
  uint8_t eDMA_0_TCD_reserved26[12];
  eDMA_0_TCD_TCD14_SADDR_tag TCD14_SADDR; /* TCD Source Address */
  eDMA_0_TCD_TCD14_ATTR_tag TCD14_ATTR; /* TCD Transfer Attributes */
  eDMA_0_TCD_TCD14_SOFF_tag TCD14_SOFF; /* TCD Signed Source Address Offset */
  eDMA_0_TCD_NBYTES14_tag NBYTES14;
  eDMA_0_TCD_TCD14_SLAST_SDA_tag TCD14_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  eDMA_0_TCD_TCD14_DADDR_tag TCD14_DADDR; /* TCD Destination Address */
  eDMA_0_TCD_CITER14_tag CITER14;
  eDMA_0_TCD_TCD14_DOFF_tag TCD14_DOFF; /* TCD Signed Destination Address Offset */
  eDMA_0_TCD_TCD14_DLAST_SGA_tag TCD14_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  eDMA_0_TCD_BITER14_tag BITER14;
  eDMA_0_TCD_TCD14_CSR_tag TCD14_CSR;  /* TCD Control and Status */
  uint8_t eDMA_0_TCD_reserved27[16320];
  eDMA_0_TCD_CH15_CSR_tag CH15_CSR;    /* Channel Control and Status */
  eDMA_0_TCD_CH15_ES_tag CH15_ES;      /* Channel Error Status */
  eDMA_0_TCD_CH15_INT_tag CH15_INT;    /* Channel Interrupt Status */
  eDMA_0_TCD_CH15_SBR_tag CH15_SBR;    /* Channel System Bus */
  eDMA_0_TCD_CH15_PRI_tag CH15_PRI;    /* Channel Priority */
  uint8_t eDMA_0_TCD_reserved28[12];
  eDMA_0_TCD_TCD15_SADDR_tag TCD15_SADDR; /* TCD Source Address */
  eDMA_0_TCD_TCD15_ATTR_tag TCD15_ATTR; /* TCD Transfer Attributes */
  eDMA_0_TCD_TCD15_SOFF_tag TCD15_SOFF; /* TCD Signed Source Address Offset */
  eDMA_0_TCD_NBYTES15_tag NBYTES15;
  eDMA_0_TCD_TCD15_SLAST_SDA_tag TCD15_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  eDMA_0_TCD_TCD15_DADDR_tag TCD15_DADDR; /* TCD Destination Address */
  eDMA_0_TCD_CITER15_tag CITER15;
  eDMA_0_TCD_TCD15_DOFF_tag TCD15_DOFF; /* TCD Signed Destination Address Offset */
  eDMA_0_TCD_TCD15_DLAST_SGA_tag TCD15_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  eDMA_0_TCD_BITER15_tag BITER15;
  eDMA_0_TCD_TCD15_CSR_tag TCD15_CSR;  /* TCD Control and Status */
  uint8_t eDMA_0_TCD_reserved29[16320];
  eDMA_0_TCD_CH16_CSR_tag CH16_CSR;    /* Channel Control and Status */
  eDMA_0_TCD_CH16_ES_tag CH16_ES;      /* Channel Error Status */
  eDMA_0_TCD_CH16_INT_tag CH16_INT;    /* Channel Interrupt Status */
  eDMA_0_TCD_CH16_SBR_tag CH16_SBR;    /* Channel System Bus */
  eDMA_0_TCD_CH16_PRI_tag CH16_PRI;    /* Channel Priority */
  uint8_t eDMA_0_TCD_reserved30[12];
  eDMA_0_TCD_TCD16_SADDR_tag TCD16_SADDR; /* TCD Source Address */
  eDMA_0_TCD_TCD16_ATTR_tag TCD16_ATTR; /* TCD Transfer Attributes */
  eDMA_0_TCD_TCD16_SOFF_tag TCD16_SOFF; /* TCD Signed Source Address Offset */
  eDMA_0_TCD_NBYTES16_tag NBYTES16;
  eDMA_0_TCD_TCD16_SLAST_SDA_tag TCD16_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  eDMA_0_TCD_TCD16_DADDR_tag TCD16_DADDR; /* TCD Destination Address */
  eDMA_0_TCD_CITER16_tag CITER16;
  eDMA_0_TCD_TCD16_DOFF_tag TCD16_DOFF; /* TCD Signed Destination Address Offset */
  eDMA_0_TCD_TCD16_DLAST_SGA_tag TCD16_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  eDMA_0_TCD_BITER16_tag BITER16;
  eDMA_0_TCD_TCD16_CSR_tag TCD16_CSR;  /* TCD Control and Status */
  uint8_t eDMA_0_TCD_reserved31[16320];
  eDMA_0_TCD_CH17_CSR_tag CH17_CSR;    /* Channel Control and Status */
  eDMA_0_TCD_CH17_ES_tag CH17_ES;      /* Channel Error Status */
  eDMA_0_TCD_CH17_INT_tag CH17_INT;    /* Channel Interrupt Status */
  eDMA_0_TCD_CH17_SBR_tag CH17_SBR;    /* Channel System Bus */
  eDMA_0_TCD_CH17_PRI_tag CH17_PRI;    /* Channel Priority */
  uint8_t eDMA_0_TCD_reserved32[12];
  eDMA_0_TCD_TCD17_SADDR_tag TCD17_SADDR; /* TCD Source Address */
  eDMA_0_TCD_TCD17_ATTR_tag TCD17_ATTR; /* TCD Transfer Attributes */
  eDMA_0_TCD_TCD17_SOFF_tag TCD17_SOFF; /* TCD Signed Source Address Offset */
  eDMA_0_TCD_NBYTES17_tag NBYTES17;
  eDMA_0_TCD_TCD17_SLAST_SDA_tag TCD17_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  eDMA_0_TCD_TCD17_DADDR_tag TCD17_DADDR; /* TCD Destination Address */
  eDMA_0_TCD_CITER17_tag CITER17;
  eDMA_0_TCD_TCD17_DOFF_tag TCD17_DOFF; /* TCD Signed Destination Address Offset */
  eDMA_0_TCD_TCD17_DLAST_SGA_tag TCD17_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  eDMA_0_TCD_BITER17_tag BITER17;
  eDMA_0_TCD_TCD17_CSR_tag TCD17_CSR;  /* TCD Control and Status */
  uint8_t eDMA_0_TCD_reserved33[16320];
  eDMA_0_TCD_CH18_CSR_tag CH18_CSR;    /* Channel Control and Status */
  eDMA_0_TCD_CH18_ES_tag CH18_ES;      /* Channel Error Status */
  eDMA_0_TCD_CH18_INT_tag CH18_INT;    /* Channel Interrupt Status */
  eDMA_0_TCD_CH18_SBR_tag CH18_SBR;    /* Channel System Bus */
  eDMA_0_TCD_CH18_PRI_tag CH18_PRI;    /* Channel Priority */
  uint8_t eDMA_0_TCD_reserved34[12];
  eDMA_0_TCD_TCD18_SADDR_tag TCD18_SADDR; /* TCD Source Address */
  eDMA_0_TCD_TCD18_ATTR_tag TCD18_ATTR; /* TCD Transfer Attributes */
  eDMA_0_TCD_TCD18_SOFF_tag TCD18_SOFF; /* TCD Signed Source Address Offset */
  eDMA_0_TCD_NBYTES18_tag NBYTES18;
  eDMA_0_TCD_TCD18_SLAST_SDA_tag TCD18_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  eDMA_0_TCD_TCD18_DADDR_tag TCD18_DADDR; /* TCD Destination Address */
  eDMA_0_TCD_CITER18_tag CITER18;
  eDMA_0_TCD_TCD18_DOFF_tag TCD18_DOFF; /* TCD Signed Destination Address Offset */
  eDMA_0_TCD_TCD18_DLAST_SGA_tag TCD18_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  eDMA_0_TCD_BITER18_tag BITER18;
  eDMA_0_TCD_TCD18_CSR_tag TCD18_CSR;  /* TCD Control and Status */
  uint8_t eDMA_0_TCD_reserved35[16320];
  eDMA_0_TCD_CH19_CSR_tag CH19_CSR;    /* Channel Control and Status */
  eDMA_0_TCD_CH19_ES_tag CH19_ES;      /* Channel Error Status */
  eDMA_0_TCD_CH19_INT_tag CH19_INT;    /* Channel Interrupt Status */
  eDMA_0_TCD_CH19_SBR_tag CH19_SBR;    /* Channel System Bus */
  eDMA_0_TCD_CH19_PRI_tag CH19_PRI;    /* Channel Priority */
  uint8_t eDMA_0_TCD_reserved36[12];
  eDMA_0_TCD_TCD19_SADDR_tag TCD19_SADDR; /* TCD Source Address */
  eDMA_0_TCD_TCD19_ATTR_tag TCD19_ATTR; /* TCD Transfer Attributes */
  eDMA_0_TCD_TCD19_SOFF_tag TCD19_SOFF; /* TCD Signed Source Address Offset */
  eDMA_0_TCD_NBYTES19_tag NBYTES19;
  eDMA_0_TCD_TCD19_SLAST_SDA_tag TCD19_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  eDMA_0_TCD_TCD19_DADDR_tag TCD19_DADDR; /* TCD Destination Address */
  eDMA_0_TCD_CITER19_tag CITER19;
  eDMA_0_TCD_TCD19_DOFF_tag TCD19_DOFF; /* TCD Signed Destination Address Offset */
  eDMA_0_TCD_TCD19_DLAST_SGA_tag TCD19_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  eDMA_0_TCD_BITER19_tag BITER19;
  eDMA_0_TCD_TCD19_CSR_tag TCD19_CSR;  /* TCD Control and Status */
  uint8_t eDMA_0_TCD_reserved37[16320];
  eDMA_0_TCD_CH20_CSR_tag CH20_CSR;    /* Channel Control and Status */
  eDMA_0_TCD_CH20_ES_tag CH20_ES;      /* Channel Error Status */
  eDMA_0_TCD_CH20_INT_tag CH20_INT;    /* Channel Interrupt Status */
  eDMA_0_TCD_CH20_SBR_tag CH20_SBR;    /* Channel System Bus */
  eDMA_0_TCD_CH20_PRI_tag CH20_PRI;    /* Channel Priority */
  uint8_t eDMA_0_TCD_reserved38[12];
  eDMA_0_TCD_TCD20_SADDR_tag TCD20_SADDR; /* TCD Source Address */
  eDMA_0_TCD_TCD20_ATTR_tag TCD20_ATTR; /* TCD Transfer Attributes */
  eDMA_0_TCD_TCD20_SOFF_tag TCD20_SOFF; /* TCD Signed Source Address Offset */
  eDMA_0_TCD_NBYTES20_tag NBYTES20;
  eDMA_0_TCD_TCD20_SLAST_SDA_tag TCD20_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  eDMA_0_TCD_TCD20_DADDR_tag TCD20_DADDR; /* TCD Destination Address */
  eDMA_0_TCD_CITER20_tag CITER20;
  eDMA_0_TCD_TCD20_DOFF_tag TCD20_DOFF; /* TCD Signed Destination Address Offset */
  eDMA_0_TCD_TCD20_DLAST_SGA_tag TCD20_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  eDMA_0_TCD_BITER20_tag BITER20;
  eDMA_0_TCD_TCD20_CSR_tag TCD20_CSR;  /* TCD Control and Status */
  uint8_t eDMA_0_TCD_reserved39[16320];
  eDMA_0_TCD_CH21_CSR_tag CH21_CSR;    /* Channel Control and Status */
  eDMA_0_TCD_CH21_ES_tag CH21_ES;      /* Channel Error Status */
  eDMA_0_TCD_CH21_INT_tag CH21_INT;    /* Channel Interrupt Status */
  eDMA_0_TCD_CH21_SBR_tag CH21_SBR;    /* Channel System Bus */
  eDMA_0_TCD_CH21_PRI_tag CH21_PRI;    /* Channel Priority */
  uint8_t eDMA_0_TCD_reserved40[12];
  eDMA_0_TCD_TCD21_SADDR_tag TCD21_SADDR; /* TCD Source Address */
  eDMA_0_TCD_TCD21_ATTR_tag TCD21_ATTR; /* TCD Transfer Attributes */
  eDMA_0_TCD_TCD21_SOFF_tag TCD21_SOFF; /* TCD Signed Source Address Offset */
  eDMA_0_TCD_NBYTES21_tag NBYTES21;
  eDMA_0_TCD_TCD21_SLAST_SDA_tag TCD21_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  eDMA_0_TCD_TCD21_DADDR_tag TCD21_DADDR; /* TCD Destination Address */
  eDMA_0_TCD_CITER21_tag CITER21;
  eDMA_0_TCD_TCD21_DOFF_tag TCD21_DOFF; /* TCD Signed Destination Address Offset */
  eDMA_0_TCD_TCD21_DLAST_SGA_tag TCD21_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  eDMA_0_TCD_BITER21_tag BITER21;
  eDMA_0_TCD_TCD21_CSR_tag TCD21_CSR;  /* TCD Control and Status */
  uint8_t eDMA_0_TCD_reserved41[16320];
  eDMA_0_TCD_CH22_CSR_tag CH22_CSR;    /* Channel Control and Status */
  eDMA_0_TCD_CH22_ES_tag CH22_ES;      /* Channel Error Status */
  eDMA_0_TCD_CH22_INT_tag CH22_INT;    /* Channel Interrupt Status */
  eDMA_0_TCD_CH22_SBR_tag CH22_SBR;    /* Channel System Bus */
  eDMA_0_TCD_CH22_PRI_tag CH22_PRI;    /* Channel Priority */
  uint8_t eDMA_0_TCD_reserved42[12];
  eDMA_0_TCD_TCD22_SADDR_tag TCD22_SADDR; /* TCD Source Address */
  eDMA_0_TCD_TCD22_ATTR_tag TCD22_ATTR; /* TCD Transfer Attributes */
  eDMA_0_TCD_TCD22_SOFF_tag TCD22_SOFF; /* TCD Signed Source Address Offset */
  eDMA_0_TCD_NBYTES22_tag NBYTES22;
  eDMA_0_TCD_TCD22_SLAST_SDA_tag TCD22_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  eDMA_0_TCD_TCD22_DADDR_tag TCD22_DADDR; /* TCD Destination Address */
  eDMA_0_TCD_CITER22_tag CITER22;
  eDMA_0_TCD_TCD22_DOFF_tag TCD22_DOFF; /* TCD Signed Destination Address Offset */
  eDMA_0_TCD_TCD22_DLAST_SGA_tag TCD22_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  eDMA_0_TCD_BITER22_tag BITER22;
  eDMA_0_TCD_TCD22_CSR_tag TCD22_CSR;  /* TCD Control and Status */
  uint8_t eDMA_0_TCD_reserved43[16320];
  eDMA_0_TCD_CH23_CSR_tag CH23_CSR;    /* Channel Control and Status */
  eDMA_0_TCD_CH23_ES_tag CH23_ES;      /* Channel Error Status */
  eDMA_0_TCD_CH23_INT_tag CH23_INT;    /* Channel Interrupt Status */
  eDMA_0_TCD_CH23_SBR_tag CH23_SBR;    /* Channel System Bus */
  eDMA_0_TCD_CH23_PRI_tag CH23_PRI;    /* Channel Priority */
  uint8_t eDMA_0_TCD_reserved44[12];
  eDMA_0_TCD_TCD23_SADDR_tag TCD23_SADDR; /* TCD Source Address */
  eDMA_0_TCD_TCD23_ATTR_tag TCD23_ATTR; /* TCD Transfer Attributes */
  eDMA_0_TCD_TCD23_SOFF_tag TCD23_SOFF; /* TCD Signed Source Address Offset */
  eDMA_0_TCD_NBYTES23_tag NBYTES23;
  eDMA_0_TCD_TCD23_SLAST_SDA_tag TCD23_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  eDMA_0_TCD_TCD23_DADDR_tag TCD23_DADDR; /* TCD Destination Address */
  eDMA_0_TCD_CITER23_tag CITER23;
  eDMA_0_TCD_TCD23_DOFF_tag TCD23_DOFF; /* TCD Signed Destination Address Offset */
  eDMA_0_TCD_TCD23_DLAST_SGA_tag TCD23_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  eDMA_0_TCD_BITER23_tag BITER23;
  eDMA_0_TCD_TCD23_CSR_tag TCD23_CSR;  /* TCD Control and Status */
  uint8_t eDMA_0_TCD_reserved45[16320];
  eDMA_0_TCD_CH24_CSR_tag CH24_CSR;    /* Channel Control and Status */
  eDMA_0_TCD_CH24_ES_tag CH24_ES;      /* Channel Error Status */
  eDMA_0_TCD_CH24_INT_tag CH24_INT;    /* Channel Interrupt Status */
  eDMA_0_TCD_CH24_SBR_tag CH24_SBR;    /* Channel System Bus */
  eDMA_0_TCD_CH24_PRI_tag CH24_PRI;    /* Channel Priority */
  uint8_t eDMA_0_TCD_reserved46[12];
  eDMA_0_TCD_TCD24_SADDR_tag TCD24_SADDR; /* TCD Source Address */
  eDMA_0_TCD_TCD24_ATTR_tag TCD24_ATTR; /* TCD Transfer Attributes */
  eDMA_0_TCD_TCD24_SOFF_tag TCD24_SOFF; /* TCD Signed Source Address Offset */
  eDMA_0_TCD_NBYTES24_tag NBYTES24;
  eDMA_0_TCD_TCD24_SLAST_SDA_tag TCD24_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  eDMA_0_TCD_TCD24_DADDR_tag TCD24_DADDR; /* TCD Destination Address */
  eDMA_0_TCD_CITER24_tag CITER24;
  eDMA_0_TCD_TCD24_DOFF_tag TCD24_DOFF; /* TCD Signed Destination Address Offset */
  eDMA_0_TCD_TCD24_DLAST_SGA_tag TCD24_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  eDMA_0_TCD_BITER24_tag BITER24;
  eDMA_0_TCD_TCD24_CSR_tag TCD24_CSR;  /* TCD Control and Status */
  uint8_t eDMA_0_TCD_reserved47[16320];
  eDMA_0_TCD_CH25_CSR_tag CH25_CSR;    /* Channel Control and Status */
  eDMA_0_TCD_CH25_ES_tag CH25_ES;      /* Channel Error Status */
  eDMA_0_TCD_CH25_INT_tag CH25_INT;    /* Channel Interrupt Status */
  eDMA_0_TCD_CH25_SBR_tag CH25_SBR;    /* Channel System Bus */
  eDMA_0_TCD_CH25_PRI_tag CH25_PRI;    /* Channel Priority */
  uint8_t eDMA_0_TCD_reserved48[12];
  eDMA_0_TCD_TCD25_SADDR_tag TCD25_SADDR; /* TCD Source Address */
  eDMA_0_TCD_TCD25_ATTR_tag TCD25_ATTR; /* TCD Transfer Attributes */
  eDMA_0_TCD_TCD25_SOFF_tag TCD25_SOFF; /* TCD Signed Source Address Offset */
  eDMA_0_TCD_NBYTES25_tag NBYTES25;
  eDMA_0_TCD_TCD25_SLAST_SDA_tag TCD25_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  eDMA_0_TCD_TCD25_DADDR_tag TCD25_DADDR; /* TCD Destination Address */
  eDMA_0_TCD_CITER25_tag CITER25;
  eDMA_0_TCD_TCD25_DOFF_tag TCD25_DOFF; /* TCD Signed Destination Address Offset */
  eDMA_0_TCD_TCD25_DLAST_SGA_tag TCD25_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  eDMA_0_TCD_BITER25_tag BITER25;
  eDMA_0_TCD_TCD25_CSR_tag TCD25_CSR;  /* TCD Control and Status */
  uint8_t eDMA_0_TCD_reserved49[16320];
  eDMA_0_TCD_CH26_CSR_tag CH26_CSR;    /* Channel Control and Status */
  eDMA_0_TCD_CH26_ES_tag CH26_ES;      /* Channel Error Status */
  eDMA_0_TCD_CH26_INT_tag CH26_INT;    /* Channel Interrupt Status */
  eDMA_0_TCD_CH26_SBR_tag CH26_SBR;    /* Channel System Bus */
  eDMA_0_TCD_CH26_PRI_tag CH26_PRI;    /* Channel Priority */
  uint8_t eDMA_0_TCD_reserved50[12];
  eDMA_0_TCD_TCD26_SADDR_tag TCD26_SADDR; /* TCD Source Address */
  eDMA_0_TCD_TCD26_ATTR_tag TCD26_ATTR; /* TCD Transfer Attributes */
  eDMA_0_TCD_TCD26_SOFF_tag TCD26_SOFF; /* TCD Signed Source Address Offset */
  eDMA_0_TCD_NBYTES26_tag NBYTES26;
  eDMA_0_TCD_TCD26_SLAST_SDA_tag TCD26_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  eDMA_0_TCD_TCD26_DADDR_tag TCD26_DADDR; /* TCD Destination Address */
  eDMA_0_TCD_CITER26_tag CITER26;
  eDMA_0_TCD_TCD26_DOFF_tag TCD26_DOFF; /* TCD Signed Destination Address Offset */
  eDMA_0_TCD_TCD26_DLAST_SGA_tag TCD26_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  eDMA_0_TCD_BITER26_tag BITER26;
  eDMA_0_TCD_TCD26_CSR_tag TCD26_CSR;  /* TCD Control and Status */
  uint8_t eDMA_0_TCD_reserved51[16320];
  eDMA_0_TCD_CH27_CSR_tag CH27_CSR;    /* Channel Control and Status */
  eDMA_0_TCD_CH27_ES_tag CH27_ES;      /* Channel Error Status */
  eDMA_0_TCD_CH27_INT_tag CH27_INT;    /* Channel Interrupt Status */
  eDMA_0_TCD_CH27_SBR_tag CH27_SBR;    /* Channel System Bus */
  eDMA_0_TCD_CH27_PRI_tag CH27_PRI;    /* Channel Priority */
  uint8_t eDMA_0_TCD_reserved52[12];
  eDMA_0_TCD_TCD27_SADDR_tag TCD27_SADDR; /* TCD Source Address */
  eDMA_0_TCD_TCD27_ATTR_tag TCD27_ATTR; /* TCD Transfer Attributes */
  eDMA_0_TCD_TCD27_SOFF_tag TCD27_SOFF; /* TCD Signed Source Address Offset */
  eDMA_0_TCD_NBYTES27_tag NBYTES27;
  eDMA_0_TCD_TCD27_SLAST_SDA_tag TCD27_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  eDMA_0_TCD_TCD27_DADDR_tag TCD27_DADDR; /* TCD Destination Address */
  eDMA_0_TCD_CITER27_tag CITER27;
  eDMA_0_TCD_TCD27_DOFF_tag TCD27_DOFF; /* TCD Signed Destination Address Offset */
  eDMA_0_TCD_TCD27_DLAST_SGA_tag TCD27_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  eDMA_0_TCD_BITER27_tag BITER27;
  eDMA_0_TCD_TCD27_CSR_tag TCD27_CSR;  /* TCD Control and Status */
  uint8_t eDMA_0_TCD_reserved53[16320];
  eDMA_0_TCD_CH28_CSR_tag CH28_CSR;    /* Channel Control and Status */
  eDMA_0_TCD_CH28_ES_tag CH28_ES;      /* Channel Error Status */
  eDMA_0_TCD_CH28_INT_tag CH28_INT;    /* Channel Interrupt Status */
  eDMA_0_TCD_CH28_SBR_tag CH28_SBR;    /* Channel System Bus */
  eDMA_0_TCD_CH28_PRI_tag CH28_PRI;    /* Channel Priority */
  uint8_t eDMA_0_TCD_reserved54[12];
  eDMA_0_TCD_TCD28_SADDR_tag TCD28_SADDR; /* TCD Source Address */
  eDMA_0_TCD_TCD28_ATTR_tag TCD28_ATTR; /* TCD Transfer Attributes */
  eDMA_0_TCD_TCD28_SOFF_tag TCD28_SOFF; /* TCD Signed Source Address Offset */
  eDMA_0_TCD_NBYTES28_tag NBYTES28;
  eDMA_0_TCD_TCD28_SLAST_SDA_tag TCD28_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  eDMA_0_TCD_TCD28_DADDR_tag TCD28_DADDR; /* TCD Destination Address */
  eDMA_0_TCD_CITER28_tag CITER28;
  eDMA_0_TCD_TCD28_DOFF_tag TCD28_DOFF; /* TCD Signed Destination Address Offset */
  eDMA_0_TCD_TCD28_DLAST_SGA_tag TCD28_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  eDMA_0_TCD_BITER28_tag BITER28;
  eDMA_0_TCD_TCD28_CSR_tag TCD28_CSR;  /* TCD Control and Status */
  uint8_t eDMA_0_TCD_reserved55[16320];
  eDMA_0_TCD_CH29_CSR_tag CH29_CSR;    /* Channel Control and Status */
  eDMA_0_TCD_CH29_ES_tag CH29_ES;      /* Channel Error Status */
  eDMA_0_TCD_CH29_INT_tag CH29_INT;    /* Channel Interrupt Status */
  eDMA_0_TCD_CH29_SBR_tag CH29_SBR;    /* Channel System Bus */
  eDMA_0_TCD_CH29_PRI_tag CH29_PRI;    /* Channel Priority */
  uint8_t eDMA_0_TCD_reserved56[12];
  eDMA_0_TCD_TCD29_SADDR_tag TCD29_SADDR; /* TCD Source Address */
  eDMA_0_TCD_TCD29_ATTR_tag TCD29_ATTR; /* TCD Transfer Attributes */
  eDMA_0_TCD_TCD29_SOFF_tag TCD29_SOFF; /* TCD Signed Source Address Offset */
  eDMA_0_TCD_NBYTES29_tag NBYTES29;
  eDMA_0_TCD_TCD29_SLAST_SDA_tag TCD29_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  eDMA_0_TCD_TCD29_DADDR_tag TCD29_DADDR; /* TCD Destination Address */
  eDMA_0_TCD_CITER29_tag CITER29;
  eDMA_0_TCD_TCD29_DOFF_tag TCD29_DOFF; /* TCD Signed Destination Address Offset */
  eDMA_0_TCD_TCD29_DLAST_SGA_tag TCD29_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  eDMA_0_TCD_BITER29_tag BITER29;
  eDMA_0_TCD_TCD29_CSR_tag TCD29_CSR;  /* TCD Control and Status */
  uint8_t eDMA_0_TCD_reserved57[16320];
  eDMA_0_TCD_CH30_CSR_tag CH30_CSR;    /* Channel Control and Status */
  eDMA_0_TCD_CH30_ES_tag CH30_ES;      /* Channel Error Status */
  eDMA_0_TCD_CH30_INT_tag CH30_INT;    /* Channel Interrupt Status */
  eDMA_0_TCD_CH30_SBR_tag CH30_SBR;    /* Channel System Bus */
  eDMA_0_TCD_CH30_PRI_tag CH30_PRI;    /* Channel Priority */
  uint8_t eDMA_0_TCD_reserved58[12];
  eDMA_0_TCD_TCD30_SADDR_tag TCD30_SADDR; /* TCD Source Address */
  eDMA_0_TCD_TCD30_ATTR_tag TCD30_ATTR; /* TCD Transfer Attributes */
  eDMA_0_TCD_TCD30_SOFF_tag TCD30_SOFF; /* TCD Signed Source Address Offset */
  eDMA_0_TCD_NBYTES30_tag NBYTES30;
  eDMA_0_TCD_TCD30_SLAST_SDA_tag TCD30_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  eDMA_0_TCD_TCD30_DADDR_tag TCD30_DADDR; /* TCD Destination Address */
  eDMA_0_TCD_CITER30_tag CITER30;
  eDMA_0_TCD_TCD30_DOFF_tag TCD30_DOFF; /* TCD Signed Destination Address Offset */
  eDMA_0_TCD_TCD30_DLAST_SGA_tag TCD30_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  eDMA_0_TCD_BITER30_tag BITER30;
  eDMA_0_TCD_TCD30_CSR_tag TCD30_CSR;  /* TCD Control and Status */
  uint8_t eDMA_0_TCD_reserved59[16320];
  eDMA_0_TCD_CH31_CSR_tag CH31_CSR;    /* Channel Control and Status */
  eDMA_0_TCD_CH31_ES_tag CH31_ES;      /* Channel Error Status */
  eDMA_0_TCD_CH31_INT_tag CH31_INT;    /* Channel Interrupt Status */
  eDMA_0_TCD_CH31_SBR_tag CH31_SBR;    /* Channel System Bus */
  eDMA_0_TCD_CH31_PRI_tag CH31_PRI;    /* Channel Priority */
  uint8_t eDMA_0_TCD_reserved60[12];
  eDMA_0_TCD_TCD31_SADDR_tag TCD31_SADDR; /* TCD Source Address */
  eDMA_0_TCD_TCD31_ATTR_tag TCD31_ATTR; /* TCD Transfer Attributes */
  eDMA_0_TCD_TCD31_SOFF_tag TCD31_SOFF; /* TCD Signed Source Address Offset */
  eDMA_0_TCD_NBYTES31_tag NBYTES31;
  eDMA_0_TCD_TCD31_SLAST_SDA_tag TCD31_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  eDMA_0_TCD_TCD31_DADDR_tag TCD31_DADDR; /* TCD Destination Address */
  eDMA_0_TCD_CITER31_tag CITER31;
  eDMA_0_TCD_TCD31_DOFF_tag TCD31_DOFF; /* TCD Signed Destination Address Offset */
  eDMA_0_TCD_TCD31_DLAST_SGA_tag TCD31_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  eDMA_0_TCD_BITER31_tag BITER31;
  eDMA_0_TCD_TCD31_CSR_tag TCD31_CSR;  /* TCD Control and Status */
  uint8_t eDMA_0_TCD_reserved61[245696];
  eDMA_0_TCD_CH0_CSR_tag CH0_CSR;      /* Channel Control and Status */
  eDMA_0_TCD_CH0_ES_tag CH0_ES;        /* Channel Error Status */
  eDMA_0_TCD_CH0_INT_tag CH0_INT;      /* Channel Interrupt Status */
  eDMA_0_TCD_CH0_SBR_tag CH0_SBR;      /* Channel System Bus */
  eDMA_0_TCD_CH0_PRI_tag CH0_PRI;      /* Channel Priority */
  uint8_t eDMA_0_TCD_reserved62[12];
  eDMA_0_TCD_TCD0_SADDR_tag TCD0_SADDR; /* TCD Source Address */
  eDMA_0_TCD_TCD0_ATTR_tag TCD0_ATTR;  /* TCD Transfer Attributes */
  eDMA_0_TCD_TCD0_SOFF_tag TCD0_SOFF;  /* TCD Signed Source Address Offset */
  eDMA_0_TCD_NBYTES0_tag NBYTES0;
  eDMA_0_TCD_TCD0_SLAST_SDA_tag TCD0_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  eDMA_0_TCD_TCD0_DADDR_tag TCD0_DADDR; /* TCD Destination Address */
  eDMA_0_TCD_CITER0_tag CITER0;
  eDMA_0_TCD_TCD0_DOFF_tag TCD0_DOFF;  /* TCD Signed Destination Address Offset */
  eDMA_0_TCD_TCD0_DLAST_SGA_tag TCD0_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  eDMA_0_TCD_BITER0_tag BITER0;
  eDMA_0_TCD_TCD0_CSR_tag TCD0_CSR;    /* TCD Control and Status */
};

#define ADC_0 (*(volatile struct ADC_tag *) 0xFBE00000UL)
#define ADC_1 (*(volatile struct ADC_tag *) 0xFFE04000UL)
#define AIPS_0 (*(volatile struct AIPS_tag *) 0xFC000000UL)
#define AIPS_1 (*(volatile struct AIPS_tag *) 0xF8000000UL)
#define AXBS_0 (*(volatile struct AXBS_tag *) 0xFC004000UL)
#define AXBS_1 (*(volatile struct AXBS_tag *) 0xFC008000UL)
#define CAN_0 (*(volatile struct CAN_FD_tag *) 0xFFEC0000UL)
#define CAN_1 (*(volatile struct CAN_FD_tag *) 0xFFEC4000UL)
#define CAN_2 (*(volatile struct CAN_FD_tag *) 0xFBEC0000UL)
#define CMU_FC_0_0 (*(volatile struct CMU_FC_tag *) 0xFBFB0200UL)
#define CMU_FC_0_1 (*(volatile struct CMU_FC_tag *) 0xFBFB0218UL)
#define CMU_FC_6 (*(volatile struct CMU_FC_tag *) 0xFBFB0380UL)
#define CMU_FC_10 (*(volatile struct CMU_FC_tag *) 0xFBFB0480UL)
#define CMU_FC_9 (*(volatile struct CMU_FC_tag *) 0xFBFB0440UL)
#define CMU_FC_11 (*(volatile struct CMU_FC_tag *) 0xFBFB04C0UL)
#define CMU_FC_13 (*(volatile struct CMU_FC_tag *) 0xFBFB0540UL)
#define CMU_FC_14 (*(volatile struct CMU_FC_tag *) 0xFBFB0580UL)
#define CMU_FC_2 (*(volatile struct CMU_FC_tag *) 0xFBFB0280UL)
#define CMU_FC_3 (*(volatile struct CMU_FC_tag *) 0xFBFB02C0UL)
#define CMU_FC_4 (*(volatile struct CMU_FC_tag *) 0xFBFB0300UL)
#define CMU_FC_5 (*(volatile struct CMU_FC_tag *) 0xFBFB0340UL)
#define CMU_FC_8 (*(volatile struct CMU_FC_tag *) 0xFBFB0400UL)
#define CMU_FC_1 (*(volatile struct CMU_FC_tag *) 0xFBFB0240UL)
#define CMU_FC_12 (*(volatile struct CMU_FC_tag *) 0xFBFB0500UL)
#define CMU_FC_7 (*(volatile struct CMU_FC_tag *) 0xFBFB03C0UL)
#define CMU_FM_0 (*(volatile struct CMU_FM_tag *) 0xFBFB0230UL)
#define CORE_PLL (*(volatile struct CORE_PLL_tag *) 0xFBFBC000UL)
#define CRC_0 (*(volatile struct CRC_tag *) 0xFFF64000UL)
#define CRC_1 (*(volatile struct CRC_tag *) 0xFBF64000UL)
#define MIPICSI_0 (*(volatile struct CSI_tag *) 0xFBF08000UL)
#define MIPICSI_1 (*(volatile struct CSI_tag *) 0xFBF10000UL)
#define CTE (*(volatile struct CTE_tag *) 0xFFD0C000UL)
#define CTU (*(volatile struct CTU_tag *) 0xFBC10000UL)
#define DFS (*(volatile struct DFS_tag *) 0xFBFB8000UL)
#define DMAMUX_1 (*(volatile struct DMAMUX_tag *) 0xFBF6C000UL)
#define DMAMUX_0 (*(volatile struct DMAMUX_tag *) 0xFFF6C000UL)
#define DMA_CRC (*(volatile struct DMA_CRC_tag *) 0xF80C0000UL)
#define DTS (*(volatile struct DTS_tag *) 0xFFF38000UL)
#define EIM (*(volatile struct EIM_tag *) 0xFC07C000UL)
#define ENET_0 (*(volatile struct ENET_tag *) 0xFC0B0000UL)
#define ETIMER_1 (*(volatile struct ETIMER_tag *) 0xFFC24000UL)
#define ETIMER_2 (*(volatile struct ETIMER_tag *) 0xFBC28000UL)
#define FBXC (*(volatile struct FBXC_tag *) 0xFFC30100UL)
#define FCCU (*(volatile struct FCCU_tag *) 0xFBF58000UL)
#define FLEXPWM_0 (*(volatile struct FLEXPWM_tag *) 0xFBC00000UL)
#define FR (*(volatile struct FR_tag *) 0xFFE50000UL)
#define FXOSC (*(volatile struct FXOSC_tag *) 0xFBFB0040UL)
#define I2C_1 (*(volatile struct I2C_tag *) 0xFBE68000UL)
#define I2C_2 (*(volatile struct I2C_tag *) 0xFBE6C000UL)
#define INTC (*(volatile struct INTC_tag *) 0xFC040000UL)
#define JTAGM (*(volatile struct JTAGM_tag *) 0xFFF48000UL)
#define LFAST (*(volatile struct LFAST_tag *) 0xFFFD8000UL)
#define LINFLEXD_1 (*(volatile struct LINFLEXD_tag *) 0xFFE90000UL)
#define MCB (*(volatile struct MCB_tag *) 0xFFC0C000UL)
#define MC_CGM (*(volatile struct MC_CGM_tag *) 0xFFFB0000UL)
#define MC_ME (*(volatile struct MC_ME_tag *) 0xFFFB8000UL)
#define MC_RGM (*(volatile struct MC_RGM_tag *) 0xFFFA8000UL)
#define MEMU (*(volatile struct MEMU_tag *) 0xFFF50000UL)
#define OCOTP (*(volatile struct OCOTP_tag *) 0xFFC30000UL)
#define PCM (*(volatile struct PCM_tag *) 0xFC028000UL)
#define PERIPH_PLL (*(volatile struct PERIPH_PLL_tag *) 0xFBFC0000UL)
#define PIT_0 (*(volatile struct PIT_tag *) 0xFFF84000UL)
#define PIT_1 (*(volatile struct PIT_tag *) 0xFFF80000UL)
#define PMC (*(volatile struct PMC_tag *) 0xFFFA0400UL)
#define IRAM0 (*(volatile struct PRAMC_tag *) 0xFC0C0000UL)
#define IRAM1 (*(volatile struct PRAMC_tag *) 0xFC0C4000UL)
#define IRAM2 (*(volatile struct PRAMC_tag *) 0xFC0C8000UL)
#define IRAM3 (*(volatile struct PRAMC_tag *) 0xFC0CC000UL)
#define IRAM4 (*(volatile struct PRAMC_tag *) 0xFC0D0000UL)
#define PRAMC (*(volatile struct PRAMC_tag *) 0xFC020000UL)
#define PRAM_XBAR (*(volatile struct PRAM_XBAR_tag *) 0xFC00C000UL)
#define QUADSPI (*(volatile struct QuadSPI_tag *) 0xFFC28000UL)
#define QUADSPI_ARDB (*(volatile struct QuadSPI_ARDB_tag *) 0x30000000UL)
#define REG_PROT (*(volatile struct REG_PROT_tag *) 0UL)
#define SEMA42 (*(volatile struct SEMA42_tag *) 0xFC03C000UL)
#define SIPI_0 (*(volatile struct SIPI_tag *) 0xFFFD0000UL)
#define SIUL2 (*(volatile struct SIUL2_tag *) 0xFFFC0000UL)
#define SMPU_0 (*(volatile struct SMPU_0_tag *) 0xFC010000UL)
#define SMPU_1 (*(volatile struct SMPU_1_tag *) 0xFC014000UL)
#define SPI_1 (*(volatile struct SPI_1_tag *) 0xFFE74000UL)
#define SPI_2 (*(volatile struct SPI_2_tag *) 0xFBE70000UL)
#define SPI_3 (*(volatile struct SPI_3_tag *) 0xFFE78000UL)
#define SPI_4 (*(volatile struct SPI_4_tag *) 0xFBE74000UL)
#define SPT (*(volatile struct SPT_tag *) 0xFFD10000UL)
#define SRC (*(volatile struct SRC_tag *) 0xFBFC4000UL)
#define STCU2 (*(volatile struct STCU2_tag *) 0xFFF44000UL)
#define STM_0 (*(volatile struct STM_tag *) 0xFC068000UL)
#define STM_1 (*(volatile struct STM_tag *) 0xFC06C000UL)
#define STM_2 (*(volatile struct STM_tag *) 0xFC070000UL)
#define SWT_2 (*(volatile struct SWT_tag *) 0xFC058000UL)
#define SWT_0 (*(volatile struct SWT_tag *) 0xFC050000UL)
#define SWT_1 (*(volatile struct SWT_tag *) 0xFC054000UL)
#define SELFTEST_GPR (*(volatile struct Selftest_GPR_tag *) 0xFFF7C000UL)
#define TMU (*(volatile struct TMU_tag *) 0xFFC38000UL)
#define WKPU (*(volatile struct WKPU_tag *) 0xFFF98000UL)
#define XBIC_6 (*(volatile struct XBIC_tag *) 0xFC048000UL)
#define XBIC_0 (*(volatile struct XBIC_tag *) 0xFC01C000UL)
#define XBIC_1 (*(volatile struct XBIC_tag *) 0xFC018000UL)
#define XBIC_3 (*(volatile struct XBIC_tag *) 0xFC034000UL)
#define XBIC_5 (*(volatile struct XBIC_tag *) 0xFC038000UL)
#define XBIC_4 (*(volatile struct XBIC_tag *) 0xFC044000UL)
#define XBIC_2 (*(volatile struct XBIC_tag *) 0xFC024000UL)
#define EDMA_0_MP (*(volatile struct eDMA_0_MP_tag *) 0xF80BC000UL)
#define EDMA_0_TCD (*(volatile struct eDMA_0_TCD_tag *) 0xF8004000UL)

/* ADC */
#define ADC_0_MCR            ADC_0.MCR.R                   /* Main Configuration Register */
#define ADC_0_MSR            ADC_0.MSR.R                   /* Main Status Register */
#define ADC_0_ISR            ADC_0.ISR.R                   /* Interrupt Status Register */
#define ADC_0_CEOCFR0        ADC_0.CEOCFR0.R               /* Channel Pending Register */
#define ADC_0_CEOCFR1        ADC_0.CEOCFR1.R               /* Channel Pending Register 1 */
#define ADC_0_IMR            ADC_0.IMR.R                   /* Interrupt Mask Register */
#define ADC_0_CIMR0          ADC_0.CIMR0.R                 /* Channel Interrupt Mask Register 0 */
#define ADC_0_CIMR1          ADC_0.CIMR1.R                 /* Channel Interrupt Mask Register 1 */
#define ADC_0_WTISR          ADC_0.WTISR.R                 /* Watchdog Threshold Interrupt Status Register */
#define ADC_0_WTIMR          ADC_0.WTIMR.R                 /* Watchdog Threshold Interrupt Mask Register */
#define ADC_0_DMAE           ADC_0.DMAE.R                  /* DMAE Register */
#define ADC_0_DMAR0          ADC_0.DMAR0.R                 /* DMA Register 0 */
#define ADC_0_DMAR1          ADC_0.DMAR1.R                 /* DMA Register 1 */
#define ADC_0_THRHLR0        ADC_0.THRHLR0.R               /* Analog Watchdog Threshold Register 0 */
#define ADC_0_THRHLR1        ADC_0.THRHLR1.R               /* Analog Watchdog Threshold Register 1 */
#define ADC_0_THRHLR2        ADC_0.THRHLR2.R               /* Analog Watchdog Threshold Register 2 */
#define ADC_0_THRHLR3        ADC_0.THRHLR3.R               /* Analog Watchdog Threshold Register 2 */
#define ADC_0_PSCR           ADC_0.PSCR.R                  /* Presampling Control Register */
#define ADC_0_PSR0           ADC_0.PSR0.R                  /* Presampling Register 0 */
#define ADC_0_PSR1           ADC_0.PSR1.R                  /* Presampling Register 1 */
#define ADC_0_CTR0           ADC_0.CTR0.R                  /* Conversion Timing Register 0 */
#define ADC_0_CTR1           ADC_0.CTR1.R                  /* Conversion Timing Register 1 */
#define ADC_0_NCMR0          ADC_0.NCMR0.R                 /* Normal Conversion Mask Register */
#define ADC_0_NCMR1          ADC_0.NCMR1.R                 /* Normal Conversion Mask Register */
#define ADC_0_JCMR0          ADC_0.JCMR0.R                 /* Injected Conversion Mask Register */
#define ADC_0_JCMR1          ADC_0.JCMR1.R                 /* Injected Conversion Mask Register */
#define ADC_0_USROFSGN       ADC_0.USROFSGN.R              /* User OFFSET and Gain Register */
#define ADC_0_PDEDR          ADC_0.PDEDR.R                 /* Power Down Exit Delay Register */
#define ADC_0_PCDR0          ADC_0.PCDR[0].R               /* Precision Channel n Data Register */
#define ADC_0_PCDR1          ADC_0.PCDR[1].R               /* Precision Channel n Data Register */
#define ADC_0_PCDR2          ADC_0.PCDR[2].R               /* Precision Channel n Data Register */
#define ADC_0_PCDR3          ADC_0.PCDR[3].R               /* Precision Channel n Data Register */
#define ADC_0_PCDR4          ADC_0.PCDR[4].R               /* Precision Channel n Data Register */
#define ADC_0_PCDR5          ADC_0.PCDR[5].R               /* Precision Channel n Data Register */
#define ADC_0_PCDR6          ADC_0.PCDR[6].R               /* Precision Channel n Data Register */
#define ADC_0_PCDR7          ADC_0.PCDR[7].R               /* Precision Channel n Data Register */
#define ADC_0_ICDR32         ADC_0.ICDR[0].R               /* Internal Channel n Data Register */
#define ADC_0_ICDR33         ADC_0.ICDR[1].R               /* Internal Channel n Data Register */
#define ADC_0_ICDR34         ADC_0.ICDR[2].R               /* Internal Channel n Data Register */
#define ADC_0_ICDR35         ADC_0.ICDR[3].R               /* Internal Channel n Data Register */
#define ADC_0_ICDR36         ADC_0.ICDR[4].R               /* Internal Channel n Data Register */
#define ADC_0_ICDR37         ADC_0.ICDR[5].R               /* Internal Channel n Data Register */
#define ADC_0_ICDR38         ADC_0.ICDR[6].R               /* Internal Channel n Data Register */
#define ADC_0_ICDR39         ADC_0.ICDR[7].R               /* Internal Channel n Data Register */
#define ADC_0_THRHLR4        ADC_0.THRHLR4.R               /* Analog Watchdog Threshold Register 4 */
#define ADC_0_THRHLR5        ADC_0.THRHLR5.R               /* Analog Watchdog Threshold Register 5 */
#define ADC_0_THRHLR6        ADC_0.THRHLR6.R               /* Analog Watchdog Threshold Register 6 */
#define ADC_0_THRHLR7        ADC_0.THRHLR7.R               /* Analog Watchdog Threshold Register 7 */
#define ADC_0_CWSELR0        ADC_0.CWSELR0.R               /* Channel Watchdog Select Register 0 */
#define ADC_0_CWSELR4        ADC_0.CWSELR4.R               /* Channel Watchdog Select Register 4 */
#define ADC_0_CWENR0         ADC_0.CWENR0.R                /* Channel Watchdog Enable Register */
#define ADC_0_CWENR1         ADC_0.CWENR1.R                /* Channel Watchdog Enable Register */
#define ADC_0_AWORR0         ADC_0.AWORR0.R                /* Analog Watchdog Out of Range Register */
#define ADC_0_AWORR1         ADC_0.AWORR1.R                /* Analog Watchdog Out of Range Register */
#define ADC_0_STCR1          ADC_0.STCR1.R                 /* Self-Test Configuration Register 1 */
#define ADC_0_STCR2          ADC_0.STCR2.R                 /* Self-Test Configuration Register 2 */
#define ADC_0_STCR3          ADC_0.STCR3.R                 /* Self-Test Configuration Register 3 */
#define ADC_0_STBRR          ADC_0.STBRR.R                 /* Self-Test Baud Rate Register */
#define ADC_0_STSR1          ADC_0.STSR1.R                 /* Self-Test Status Register 1 */
#define ADC_0_STSR2          ADC_0.STSR2.R                 /* Self-Test Status Register 2 */
#define ADC_0_STSR3          ADC_0.STSR3.R                 /* Self-Test Status Register 3 */
#define ADC_0_STSR4          ADC_0.STSR4.R                 /* Self-Test Status Register 4 */
#define ADC_0_STDR1          ADC_0.STDR1.R                 /* Self-Test Data Register 1 */
#define ADC_0_STDR2          ADC_0.STDR2.R                 /* Self-Test Data Register 2 */
#define ADC_0_STAW0R         ADC_0.STAW0R.R                /* Self-Test Analog Watchdog Register */
#define ADC_0_STAW1AR        ADC_0.STAW1AR.R               /* Self-Test Analog Watchdog Register */
#define ADC_0_STAW1BR        ADC_0.STAW1BR.R               /* Self-Test Analog Watchdog Register 1B */
#define ADC_0_STAW2R         ADC_0.STAW2R.R                /* Self-Test Analog Watchdog Register 2 */
#define ADC_0_STAW3R         ADC_0.STAW3R.R                /* Self-Test Analog Watchdog Register 3 */
#define ADC_0_STAW4R         ADC_0.STAW4R.R                /* Self-Test Analog Watchdog Register 4 */
#define ADC_0_STAW5R         ADC_0.STAW5R.R                /* Self-Test Analog Watchdog Register 5 */
#define ADC_0_CALSTAT        ADC_0.CALSTAT.R               /* Calibration Status register */

#define ADC_1_MCR            ADC_1.MCR.R                   /* Main Configuration Register */
#define ADC_1_MSR            ADC_1.MSR.R                   /* Main Status Register */
#define ADC_1_ISR            ADC_1.ISR.R                   /* Interrupt Status Register */
#define ADC_1_CEOCFR0        ADC_1.CEOCFR0.R               /* Channel Pending Register */
#define ADC_1_CEOCFR1        ADC_1.CEOCFR1.R               /* Channel Pending Register 1 */
#define ADC_1_IMR            ADC_1.IMR.R                   /* Interrupt Mask Register */
#define ADC_1_CIMR0          ADC_1.CIMR0.R                 /* Channel Interrupt Mask Register 0 */
#define ADC_1_CIMR1          ADC_1.CIMR1.R                 /* Channel Interrupt Mask Register 1 */
#define ADC_1_WTISR          ADC_1.WTISR.R                 /* Watchdog Threshold Interrupt Status Register */
#define ADC_1_WTIMR          ADC_1.WTIMR.R                 /* Watchdog Threshold Interrupt Mask Register */
#define ADC_1_DMAE           ADC_1.DMAE.R                  /* DMAE Register */
#define ADC_1_DMAR0          ADC_1.DMAR0.R                 /* DMA Register 0 */
#define ADC_1_DMAR1          ADC_1.DMAR1.R                 /* DMA Register 1 */
#define ADC_1_THRHLR0        ADC_1.THRHLR0.R               /* Analog Watchdog Threshold Register 0 */
#define ADC_1_THRHLR1        ADC_1.THRHLR1.R               /* Analog Watchdog Threshold Register 1 */
#define ADC_1_THRHLR2        ADC_1.THRHLR2.R               /* Analog Watchdog Threshold Register 2 */
#define ADC_1_THRHLR3        ADC_1.THRHLR3.R               /* Analog Watchdog Threshold Register 2 */
#define ADC_1_PSCR           ADC_1.PSCR.R                  /* Presampling Control Register */
#define ADC_1_PSR0           ADC_1.PSR0.R                  /* Presampling Register 0 */
#define ADC_1_PSR1           ADC_1.PSR1.R                  /* Presampling Register 1 */
#define ADC_1_CTR0           ADC_1.CTR0.R                  /* Conversion Timing Register 0 */
#define ADC_1_CTR1           ADC_1.CTR1.R                  /* Conversion Timing Register 1 */
#define ADC_1_NCMR0          ADC_1.NCMR0.R                 /* Normal Conversion Mask Register */
#define ADC_1_NCMR1          ADC_1.NCMR1.R                 /* Normal Conversion Mask Register */
#define ADC_1_JCMR0          ADC_1.JCMR0.R                 /* Injected Conversion Mask Register */
#define ADC_1_JCMR1          ADC_1.JCMR1.R                 /* Injected Conversion Mask Register */
#define ADC_1_USROFSGN       ADC_1.USROFSGN.R              /* User OFFSET and Gain Register */
#define ADC_1_PDEDR          ADC_1.PDEDR.R                 /* Power Down Exit Delay Register */
#define ADC_1_PCDR0          ADC_1.PCDR[0].R               /* Precision Channel n Data Register */
#define ADC_1_PCDR1          ADC_1.PCDR[1].R               /* Precision Channel n Data Register */
#define ADC_1_PCDR2          ADC_1.PCDR[2].R               /* Precision Channel n Data Register */
#define ADC_1_PCDR3          ADC_1.PCDR[3].R               /* Precision Channel n Data Register */
#define ADC_1_PCDR4          ADC_1.PCDR[4].R               /* Precision Channel n Data Register */
#define ADC_1_PCDR5          ADC_1.PCDR[5].R               /* Precision Channel n Data Register */
#define ADC_1_PCDR6          ADC_1.PCDR[6].R               /* Precision Channel n Data Register */
#define ADC_1_PCDR7          ADC_1.PCDR[7].R               /* Precision Channel n Data Register */
#define ADC_1_ICDR32         ADC_1.ICDR[0].R               /* Internal Channel n Data Register */
#define ADC_1_ICDR33         ADC_1.ICDR[1].R               /* Internal Channel n Data Register */
#define ADC_1_ICDR34         ADC_1.ICDR[2].R               /* Internal Channel n Data Register */
#define ADC_1_ICDR35         ADC_1.ICDR[3].R               /* Internal Channel n Data Register */
#define ADC_1_ICDR36         ADC_1.ICDR[4].R               /* Internal Channel n Data Register */
#define ADC_1_ICDR37         ADC_1.ICDR[5].R               /* Internal Channel n Data Register */
#define ADC_1_ICDR38         ADC_1.ICDR[6].R               /* Internal Channel n Data Register */
#define ADC_1_ICDR39         ADC_1.ICDR[7].R               /* Internal Channel n Data Register */
#define ADC_1_THRHLR4        ADC_1.THRHLR4.R               /* Analog Watchdog Threshold Register 4 */
#define ADC_1_THRHLR5        ADC_1.THRHLR5.R               /* Analog Watchdog Threshold Register 5 */
#define ADC_1_THRHLR6        ADC_1.THRHLR6.R               /* Analog Watchdog Threshold Register 6 */
#define ADC_1_THRHLR7        ADC_1.THRHLR7.R               /* Analog Watchdog Threshold Register 7 */
#define ADC_1_CWSELR0        ADC_1.CWSELR0.R               /* Channel Watchdog Select Register 0 */
#define ADC_1_CWSELR4        ADC_1.CWSELR4.R               /* Channel Watchdog Select Register 4 */
#define ADC_1_CWENR0         ADC_1.CWENR0.R                /* Channel Watchdog Enable Register */
#define ADC_1_CWENR1         ADC_1.CWENR1.R                /* Channel Watchdog Enable Register */
#define ADC_1_AWORR0         ADC_1.AWORR0.R                /* Analog Watchdog Out of Range Register */
#define ADC_1_AWORR1         ADC_1.AWORR1.R                /* Analog Watchdog Out of Range Register */
#define ADC_1_STCR1          ADC_1.STCR1.R                 /* Self-Test Configuration Register 1 */
#define ADC_1_STCR2          ADC_1.STCR2.R                 /* Self-Test Configuration Register 2 */
#define ADC_1_STCR3          ADC_1.STCR3.R                 /* Self-Test Configuration Register 3 */
#define ADC_1_STBRR          ADC_1.STBRR.R                 /* Self-Test Baud Rate Register */
#define ADC_1_STSR1          ADC_1.STSR1.R                 /* Self-Test Status Register 1 */
#define ADC_1_STSR2          ADC_1.STSR2.R                 /* Self-Test Status Register 2 */
#define ADC_1_STSR3          ADC_1.STSR3.R                 /* Self-Test Status Register 3 */
#define ADC_1_STSR4          ADC_1.STSR4.R                 /* Self-Test Status Register 4 */
#define ADC_1_STDR1          ADC_1.STDR1.R                 /* Self-Test Data Register 1 */
#define ADC_1_STDR2          ADC_1.STDR2.R                 /* Self-Test Data Register 2 */
#define ADC_1_STAW0R         ADC_1.STAW0R.R                /* Self-Test Analog Watchdog Register */
#define ADC_1_STAW1AR        ADC_1.STAW1AR.R               /* Self-Test Analog Watchdog Register */
#define ADC_1_STAW1BR        ADC_1.STAW1BR.R               /* Self-Test Analog Watchdog Register 1B */
#define ADC_1_STAW2R         ADC_1.STAW2R.R                /* Self-Test Analog Watchdog Register 2 */
#define ADC_1_STAW3R         ADC_1.STAW3R.R                /* Self-Test Analog Watchdog Register 3 */
#define ADC_1_STAW4R         ADC_1.STAW4R.R                /* Self-Test Analog Watchdog Register 4 */
#define ADC_1_STAW5R         ADC_1.STAW5R.R                /* Self-Test Analog Watchdog Register 5 */
#define ADC_1_CALSTAT        ADC_1.CALSTAT.R               /* Calibration Status register */

/* AIPS */
#define AIPS_0_MPRA          AIPS_0.MPRA.R                 /* Master Privilege A */
#define AIPS_0_MPRB          AIPS_0.MPRB.R                 /* Master Privilege B */
#define AIPS_0_PACRA         AIPS_0.PACR[0].R              /* Peripheral Access Control */
#define AIPS_0_PACRB         AIPS_0.PACR[1].R              /* Peripheral Access Control */
#define AIPS_0_PACRC         AIPS_0.PACR[2].R              /* Peripheral Access Control */
#define AIPS_0_PACRD         AIPS_0.PACR[3].R              /* Peripheral Access Control */
#define AIPS_0_PACRE         AIPS_0.PACR[4].R              /* Peripheral Access Control */
#define AIPS_0_PACRF         AIPS_0.PACR[5].R              /* Peripheral Access Control */
#define AIPS_0_PACRG         AIPS_0.PACR[6].R              /* Peripheral Access Control */
#define AIPS_0_PACRH         AIPS_0.PACR[7].R              /* Peripheral Access Control */
#define AIPS_0_OPACRA        AIPS_0.OPACR[0].R             /* Off-Platform Peripheral Access Control */
#define AIPS_0_OPACRB        AIPS_0.OPACR[1].R             /* Off-Platform Peripheral Access Control */
#define AIPS_0_OPACRC        AIPS_0.OPACR[2].R             /* Off-Platform Peripheral Access Control */
#define AIPS_0_OPACRD        AIPS_0.OPACR[3].R             /* Off-Platform Peripheral Access Control */
#define AIPS_0_OPACRE        AIPS_0.OPACR[4].R             /* Off-Platform Peripheral Access Control */
#define AIPS_0_OPACRF        AIPS_0.OPACR[5].R             /* Off-Platform Peripheral Access Control */
#define AIPS_0_OPACRG        AIPS_0.OPACR[6].R             /* Off-Platform Peripheral Access Control */
#define AIPS_0_OPACRH        AIPS_0.OPACR[7].R             /* Off-Platform Peripheral Access Control */
#define AIPS_0_OPACRI        AIPS_0.OPACR[8].R             /* Off-Platform Peripheral Access Control */
#define AIPS_0_OPACRJ        AIPS_0.OPACR[9].R             /* Off-Platform Peripheral Access Control */
#define AIPS_0_OPACRK        AIPS_0.OPACR[10].R            /* Off-Platform Peripheral Access Control */
#define AIPS_0_OPACRL        AIPS_0.OPACR[11].R            /* Off-Platform Peripheral Access Control */
#define AIPS_0_OPACRM        AIPS_0.OPACR[12].R            /* Off-Platform Peripheral Access Control */
#define AIPS_0_OPACRN        AIPS_0.OPACR[13].R            /* Off-Platform Peripheral Access Control */
#define AIPS_0_OPACRO        AIPS_0.OPACR[14].R            /* Off-Platform Peripheral Access Control */
#define AIPS_0_OPACRP        AIPS_0.OPACR[15].R            /* Off-Platform Peripheral Access Control */
#define AIPS_0_OPACRQ        AIPS_0.OPACR[16].R            /* Off-Platform Peripheral Access Control */
#define AIPS_0_OPACRR        AIPS_0.OPACR[17].R            /* Off-Platform Peripheral Access Control */
#define AIPS_0_OPACRS        AIPS_0.OPACR[18].R            /* Off-Platform Peripheral Access Control */
#define AIPS_0_OPACRT        AIPS_0.OPACR[19].R            /* Off-Platform Peripheral Access Control */
#define AIPS_0_OPACRU        AIPS_0.OPACR[20].R            /* Off-Platform Peripheral Access Control */
#define AIPS_0_OPACRV        AIPS_0.OPACR[21].R            /* Off-Platform Peripheral Access Control */
#define AIPS_0_OPACRW        AIPS_0.OPACR[22].R            /* Off-Platform Peripheral Access Control */
#define AIPS_0_OPACRX        AIPS_0.OPACR[23].R            /* Off-Platform Peripheral Access Control */
#define AIPS_0_OPACRY        AIPS_0.OPACR[24].R            /* Off-Platform Peripheral Access Control */
#define AIPS_0_OPACRZ        AIPS_0.OPACR[25].R            /* Off-Platform Peripheral Access Control */
#define AIPS_0_OPACRAA       AIPS_0.OPACR[26].R            /* Off-Platform Peripheral Access Control */
#define AIPS_0_OPACRAB       AIPS_0.OPACR[27].R            /* Off-Platform Peripheral Access Control */
#define AIPS_0_OPACRAC       AIPS_0.OPACR[28].R            /* Off-Platform Peripheral Access Control */
#define AIPS_0_OPACRAD       AIPS_0.OPACR[29].R            /* Off-Platform Peripheral Access Control */
#define AIPS_0_OPACRAE       AIPS_0.OPACR[30].R            /* Off-Platform Peripheral Access Control */
#define AIPS_0_OPACRAF       AIPS_0.OPACR[31].R            /* Off-Platform Peripheral Access Control */

#define AIPS_1_MPRA          AIPS_1.MPRA.R                 /* Master Privilege A */
#define AIPS_1_MPRB          AIPS_1.MPRB.R                 /* Master Privilege B */
#define AIPS_1_PACRA         AIPS_1.PACR[0].R              /* Peripheral Access Control */
#define AIPS_1_PACRB         AIPS_1.PACR[1].R              /* Peripheral Access Control */
#define AIPS_1_PACRC         AIPS_1.PACR[2].R              /* Peripheral Access Control */
#define AIPS_1_PACRD         AIPS_1.PACR[3].R              /* Peripheral Access Control */
#define AIPS_1_PACRE         AIPS_1.PACR[4].R              /* Peripheral Access Control */
#define AIPS_1_PACRF         AIPS_1.PACR[5].R              /* Peripheral Access Control */
#define AIPS_1_PACRG         AIPS_1.PACR[6].R              /* Peripheral Access Control */
#define AIPS_1_PACRH         AIPS_1.PACR[7].R              /* Peripheral Access Control */
#define AIPS_1_OPACRA        AIPS_1.OPACR[0].R             /* Off-Platform Peripheral Access Control */
#define AIPS_1_OPACRB        AIPS_1.OPACR[1].R             /* Off-Platform Peripheral Access Control */
#define AIPS_1_OPACRC        AIPS_1.OPACR[2].R             /* Off-Platform Peripheral Access Control */
#define AIPS_1_OPACRD        AIPS_1.OPACR[3].R             /* Off-Platform Peripheral Access Control */
#define AIPS_1_OPACRE        AIPS_1.OPACR[4].R             /* Off-Platform Peripheral Access Control */
#define AIPS_1_OPACRF        AIPS_1.OPACR[5].R             /* Off-Platform Peripheral Access Control */
#define AIPS_1_OPACRG        AIPS_1.OPACR[6].R             /* Off-Platform Peripheral Access Control */
#define AIPS_1_OPACRH        AIPS_1.OPACR[7].R             /* Off-Platform Peripheral Access Control */
#define AIPS_1_OPACRI        AIPS_1.OPACR[8].R             /* Off-Platform Peripheral Access Control */
#define AIPS_1_OPACRJ        AIPS_1.OPACR[9].R             /* Off-Platform Peripheral Access Control */
#define AIPS_1_OPACRK        AIPS_1.OPACR[10].R            /* Off-Platform Peripheral Access Control */
#define AIPS_1_OPACRL        AIPS_1.OPACR[11].R            /* Off-Platform Peripheral Access Control */
#define AIPS_1_OPACRM        AIPS_1.OPACR[12].R            /* Off-Platform Peripheral Access Control */
#define AIPS_1_OPACRN        AIPS_1.OPACR[13].R            /* Off-Platform Peripheral Access Control */
#define AIPS_1_OPACRO        AIPS_1.OPACR[14].R            /* Off-Platform Peripheral Access Control */
#define AIPS_1_OPACRP        AIPS_1.OPACR[15].R            /* Off-Platform Peripheral Access Control */
#define AIPS_1_OPACRQ        AIPS_1.OPACR[16].R            /* Off-Platform Peripheral Access Control */
#define AIPS_1_OPACRR        AIPS_1.OPACR[17].R            /* Off-Platform Peripheral Access Control */
#define AIPS_1_OPACRS        AIPS_1.OPACR[18].R            /* Off-Platform Peripheral Access Control */
#define AIPS_1_OPACRT        AIPS_1.OPACR[19].R            /* Off-Platform Peripheral Access Control */
#define AIPS_1_OPACRU        AIPS_1.OPACR[20].R            /* Off-Platform Peripheral Access Control */
#define AIPS_1_OPACRV        AIPS_1.OPACR[21].R            /* Off-Platform Peripheral Access Control */
#define AIPS_1_OPACRW        AIPS_1.OPACR[22].R            /* Off-Platform Peripheral Access Control */
#define AIPS_1_OPACRX        AIPS_1.OPACR[23].R            /* Off-Platform Peripheral Access Control */
#define AIPS_1_OPACRY        AIPS_1.OPACR[24].R            /* Off-Platform Peripheral Access Control */
#define AIPS_1_OPACRZ        AIPS_1.OPACR[25].R            /* Off-Platform Peripheral Access Control */
#define AIPS_1_OPACRAA       AIPS_1.OPACR[26].R            /* Off-Platform Peripheral Access Control */
#define AIPS_1_OPACRAB       AIPS_1.OPACR[27].R            /* Off-Platform Peripheral Access Control */
#define AIPS_1_OPACRAC       AIPS_1.OPACR[28].R            /* Off-Platform Peripheral Access Control */
#define AIPS_1_OPACRAD       AIPS_1.OPACR[29].R            /* Off-Platform Peripheral Access Control */
#define AIPS_1_OPACRAE       AIPS_1.OPACR[30].R            /* Off-Platform Peripheral Access Control */
#define AIPS_1_OPACRAF       AIPS_1.OPACR[31].R            /* Off-Platform Peripheral Access Control */

/* AXBS */
#define AXBS_0_PRS0          AXBS_0.PORT[0].PRS.R          /* Priority Slave Registers */
#define AXBS_0_CRS0          AXBS_0.PORT[0].CRS.R          /* Control Register */
#define AXBS_0_PRS1          AXBS_0.PORT[1].PRS.R          /* Priority Slave Registers */
#define AXBS_0_CRS1          AXBS_0.PORT[1].CRS.R          /* Control Register */
#define AXBS_0_PRS2          AXBS_0.PORT[2].PRS.R          /* Priority Slave Registers */
#define AXBS_0_CRS2          AXBS_0.PORT[2].CRS.R          /* Control Register */
#define AXBS_0_PRS3          AXBS_0.PORT[3].PRS.R          /* Priority Slave Registers */
#define AXBS_0_CRS3          AXBS_0.PORT[3].CRS.R          /* Control Register */
#define AXBS_0_PRS4          AXBS_0.PORT[4].PRS.R          /* Priority Slave Registers */
#define AXBS_0_CRS4          AXBS_0.PORT[4].CRS.R          /* Control Register */
#define AXBS_0_PRS5          AXBS_0.PORT[5].PRS.R          /* Priority Slave Registers */
#define AXBS_0_CRS5          AXBS_0.PORT[5].CRS.R          /* Control Register */
#define AXBS_0_PRS6          AXBS_0.PORT[6].PRS.R          /* Priority Slave Registers */
#define AXBS_0_CRS6          AXBS_0.PORT[6].CRS.R          /* Control Register */
#define AXBS_0_PRS7          AXBS_0.PORT[7].PRS.R          /* Priority Slave Registers */
#define AXBS_0_CRS7          AXBS_0.PORT[7].CRS.R          /* Control Register */
#define AXBS_0_MGPCR0        AXBS_0.MGPCR0.R               /* Master General Purpose Control Register */
#define AXBS_0_MGPCR1        AXBS_0.MGPCR1.R               /* Master General Purpose Control Register */
#define AXBS_0_MGPCR2        AXBS_0.MGPCR2.R               /* Master General Purpose Control Register */
#define AXBS_0_MGPCR3        AXBS_0.MGPCR3.R               /* Master General Purpose Control Register */
#define AXBS_0_MGPCR4        AXBS_0.MGPCR4.R               /* Master General Purpose Control Register */
#define AXBS_0_MGPCR5        AXBS_0.MGPCR5.R               /* Master General Purpose Control Register */
#define AXBS_0_MGPCR6        AXBS_0.MGPCR6.R               /* Master General Purpose Control Register */
#define AXBS_0_MGPCR7        AXBS_0.MGPCR7.R               /* Master General Purpose Control Register */

#define AXBS_1_PRS0          AXBS_1.PORT[0].PRS.R          /* Priority Slave Registers */
#define AXBS_1_CRS0          AXBS_1.PORT[0].CRS.R          /* Control Register */
#define AXBS_1_PRS1          AXBS_1.PORT[1].PRS.R          /* Priority Slave Registers */
#define AXBS_1_CRS1          AXBS_1.PORT[1].CRS.R          /* Control Register */
#define AXBS_1_PRS2          AXBS_1.PORT[2].PRS.R          /* Priority Slave Registers */
#define AXBS_1_CRS2          AXBS_1.PORT[2].CRS.R          /* Control Register */
#define AXBS_1_PRS3          AXBS_1.PORT[3].PRS.R          /* Priority Slave Registers */
#define AXBS_1_CRS3          AXBS_1.PORT[3].CRS.R          /* Control Register */
#define AXBS_1_PRS4          AXBS_1.PORT[4].PRS.R          /* Priority Slave Registers */
#define AXBS_1_CRS4          AXBS_1.PORT[4].CRS.R          /* Control Register */
#define AXBS_1_PRS5          AXBS_1.PORT[5].PRS.R          /* Priority Slave Registers */
#define AXBS_1_CRS5          AXBS_1.PORT[5].CRS.R          /* Control Register */
#define AXBS_1_PRS6          AXBS_1.PORT[6].PRS.R          /* Priority Slave Registers */
#define AXBS_1_CRS6          AXBS_1.PORT[6].CRS.R          /* Control Register */
#define AXBS_1_PRS7          AXBS_1.PORT[7].PRS.R          /* Priority Slave Registers */
#define AXBS_1_CRS7          AXBS_1.PORT[7].CRS.R          /* Control Register */
#define AXBS_1_MGPCR0        AXBS_1.MGPCR0.R               /* Master General Purpose Control Register */
#define AXBS_1_MGPCR1        AXBS_1.MGPCR1.R               /* Master General Purpose Control Register */
#define AXBS_1_MGPCR2        AXBS_1.MGPCR2.R               /* Master General Purpose Control Register */
#define AXBS_1_MGPCR3        AXBS_1.MGPCR3.R               /* Master General Purpose Control Register */
#define AXBS_1_MGPCR4        AXBS_1.MGPCR4.R               /* Master General Purpose Control Register */
#define AXBS_1_MGPCR5        AXBS_1.MGPCR5.R               /* Master General Purpose Control Register */
#define AXBS_1_MGPCR6        AXBS_1.MGPCR6.R               /* Master General Purpose Control Register */

/* CAN_FD */
#define CAN_0_MCR            CAN_0.MCR.R                   /* Module Configuration register */
#define CAN_0_CTRL1          CAN_0.CTRL1.R                 /* Control 1 register */
#define CAN_0_TIMER          CAN_0.TIMER.R                 /* Free Running Timer */
#define CAN_0_RXMGMASK       CAN_0.RXMGMASK.R              /* Rx Mailboxes Global Mask register */
#define CAN_0_RX14MASK       CAN_0.RX14MASK.R              /* Rx 14 Mask register */
#define CAN_0_RX15MASK       CAN_0.RX15MASK.R              /* Rx 15 Mask register */
#define CAN_0_ECR            CAN_0.ECR.R                   /* Error Counter */
#define CAN_0_ESR1           CAN_0.ESR1.R                  /* Error and Status 1 register */
#define CAN_0_IMASK2         CAN_0.IMASK2.R                /* Interrupt Masks 2 register */
#define CAN_0_IMASK1         CAN_0.IMASK1.R                /* Interrupt Masks 1 register */
#define CAN_0_IFLAG2         CAN_0.IFLAG2.R                /* Interrupt Flags 2 register */
#define CAN_0_IFLAG1         CAN_0.IFLAG1.R                /* Interrupt Flags 1 register */
#define CAN_0_CTRL2          CAN_0.CTRL2.R                 /* Control 2 register */
#define CAN_0_ESR2           CAN_0.ESR2.R                  /* Error and Status 2 register */
#define CAN_0_CRCR           CAN_0.CRCR.R                  /* CRC register */
#define CAN_0_RXFGMASK       CAN_0.RXFGMASK.R              /* Rx FIFO Global Mask register */
#define CAN_0_RXFIR          CAN_0.RXFIR.R                 /* Rx FIFO Information register */
#define CAN_0_CBT            CAN_0.CBT.R                   /* CAN Bit Timing register */
#define CAN_0_IMASK3         CAN_0.IMASK3.R                /* Interrupt Masks 3 register */
#define CAN_0_IFLAG3         CAN_0.IFLAG3.R                /* Interrupt Flags 3 register */
#define CAN_0_ID0            CAN_0.MB[0].ID.R              /* Message Buffer 0 ID Register */
#define CAN_0_B0             CAN_0.MB[0].DATA.B            /* Message Buffer 0 B Register */
#define CAN_0_H0             CAN_0.MB[0].DATA.H            /* Message Buffer 0 H Register */
#define CAN_0_W0             CAN_0.MB[0].DATA.W            /* Message Buffer 0 W Register */
#define CAN_0_CS1            CAN_0.MB[1].CS.R              /* Message Buffer 1 CS Register */
#define CAN_0_ID1            CAN_0.MB[1].ID.R              /* Message Buffer 1 ID Register */
#define CAN_0_B1             CAN_0.MB[1].DATA.B            /* Message Buffer 1 B Register */
#define CAN_0_H1             CAN_0.MB[1].DATA.H            /* Message Buffer 1 H Register */
#define CAN_0_W1             CAN_0.MB[1].DATA.W            /* Message Buffer 1 W Register */
#define CAN_0_CS2            CAN_0.MB[2].CS.R              /* Message Buffer 2 CS Register */
#define CAN_0_ID2            CAN_0.MB[2].ID.R              /* Message Buffer 2 ID Register */
#define CAN_0_B2             CAN_0.MB[2].DATA.B            /* Message Buffer 2 B Register */
#define CAN_0_H2             CAN_0.MB[2].DATA.H            /* Message Buffer 2 H Register */
#define CAN_0_W2             CAN_0.MB[2].DATA.W            /* Message Buffer 2 W Register */
#define CAN_0_CS3            CAN_0.MB[3].CS.R              /* Message Buffer 3 CS Register */
#define CAN_0_ID3            CAN_0.MB[3].ID.R              /* Message Buffer 3 ID Register */
#define CAN_0_B3             CAN_0.MB[3].DATA.B            /* Message Buffer 3 B Register */
#define CAN_0_H3             CAN_0.MB[3].DATA.H            /* Message Buffer 3 H Register */
#define CAN_0_W3             CAN_0.MB[3].DATA.W            /* Message Buffer 3 W Register */
#define CAN_0_CS4            CAN_0.MB[4].CS.R              /* Message Buffer 4 CS Register */
#define CAN_0_ID4            CAN_0.MB[4].ID.R              /* Message Buffer 4 ID Register */
#define CAN_0_B4             CAN_0.MB[4].DATA.B            /* Message Buffer 4 B Register */
#define CAN_0_H4             CAN_0.MB[4].DATA.H            /* Message Buffer 4 H Register */
#define CAN_0_W4             CAN_0.MB[4].DATA.W            /* Message Buffer 4 W Register */
#define CAN_0_CS5            CAN_0.MB[5].CS.R              /* Message Buffer 5 CS Register */
#define CAN_0_ID5            CAN_0.MB[5].ID.R              /* Message Buffer 5 ID Register */
#define CAN_0_B5             CAN_0.MB[5].DATA.B            /* Message Buffer 5 B Register */
#define CAN_0_H5             CAN_0.MB[5].DATA.H            /* Message Buffer 5 H Register */
#define CAN_0_W5             CAN_0.MB[5].DATA.W            /* Message Buffer 5 W Register */
#define CAN_0_CS6            CAN_0.MB[6].CS.R              /* Message Buffer 6 CS Register */
#define CAN_0_ID6            CAN_0.MB[6].ID.R              /* Message Buffer 6 ID Register */
#define CAN_0_B6             CAN_0.MB[6].DATA.B            /* Message Buffer 6 B Register */
#define CAN_0_H6             CAN_0.MB[6].DATA.H            /* Message Buffer 6 H Register */
#define CAN_0_W6             CAN_0.MB[6].DATA.W            /* Message Buffer 6 W Register */
#define CAN_0_CS7            CAN_0.MB[7].CS.R              /* Message Buffer 7 CS Register */
#define CAN_0_ID7            CAN_0.MB[7].ID.R              /* Message Buffer 7 ID Register */
#define CAN_0_B7             CAN_0.MB[7].DATA.B            /* Message Buffer 7 B Register */
#define CAN_0_H7             CAN_0.MB[7].DATA.H            /* Message Buffer 7 H Register */
#define CAN_0_W7             CAN_0.MB[7].DATA.W            /* Message Buffer 7 W Register */
#define CAN_0_CS8            CAN_0.MB[8].CS.R              /* Message Buffer 8 CS Register */
#define CAN_0_ID8            CAN_0.MB[8].ID.R              /* Message Buffer 8 ID Register */
#define CAN_0_B8             CAN_0.MB[8].DATA.B            /* Message Buffer 8 B Register */
#define CAN_0_H8             CAN_0.MB[8].DATA.H            /* Message Buffer 8 H Register */
#define CAN_0_W8             CAN_0.MB[8].DATA.W            /* Message Buffer 8 W Register */
#define CAN_0_CS9            CAN_0.MB[9].CS.R              /* Message Buffer 9 CS Register */
#define CAN_0_ID9            CAN_0.MB[9].ID.R              /* Message Buffer 9 ID Register */
#define CAN_0_B9             CAN_0.MB[9].DATA.B            /* Message Buffer 9 B Register */
#define CAN_0_H9             CAN_0.MB[9].DATA.H            /* Message Buffer 9 H Register */
#define CAN_0_W9             CAN_0.MB[9].DATA.W            /* Message Buffer 9 W Register */
#define CAN_0_CS10           CAN_0.MB[10].CS.R             /* Message Buffer 10 CS Register */
#define CAN_0_ID10           CAN_0.MB[10].ID.R             /* Message Buffer 10 ID Register */
#define CAN_0_B10            CAN_0.MB[10].DATA.B           /* Message Buffer 10 B Register */
#define CAN_0_H10            CAN_0.MB[10].DATA.H           /* Message Buffer 10 H Register */
#define CAN_0_W10            CAN_0.MB[10].DATA.W           /* Message Buffer 10 W Register */
#define CAN_0_CS11           CAN_0.MB[11].CS.R             /* Message Buffer 11 CS Register */
#define CAN_0_ID11           CAN_0.MB[11].ID.R             /* Message Buffer 11 ID Register */
#define CAN_0_B11            CAN_0.MB[11].DATA.B           /* Message Buffer 11 B Register */
#define CAN_0_H11            CAN_0.MB[11].DATA.H           /* Message Buffer 11 H Register */
#define CAN_0_W11            CAN_0.MB[11].DATA.W           /* Message Buffer 11 W Register */
#define CAN_0_CS12           CAN_0.MB[12].CS.R             /* Message Buffer 12 CS Register */
#define CAN_0_ID12           CAN_0.MB[12].ID.R             /* Message Buffer 12 ID Register */
#define CAN_0_B12            CAN_0.MB[12].DATA.B           /* Message Buffer 12 B Register */
#define CAN_0_H12            CAN_0.MB[12].DATA.H           /* Message Buffer 12 H Register */
#define CAN_0_W12            CAN_0.MB[12].DATA.W           /* Message Buffer 12 W Register */
#define CAN_0_CS13           CAN_0.MB[13].CS.R             /* Message Buffer 13 CS Register */
#define CAN_0_ID13           CAN_0.MB[13].ID.R             /* Message Buffer 13 ID Register */
#define CAN_0_B13            CAN_0.MB[13].DATA.B           /* Message Buffer 13 B Register */
#define CAN_0_H13            CAN_0.MB[13].DATA.H           /* Message Buffer 13 H Register */
#define CAN_0_W13            CAN_0.MB[13].DATA.W           /* Message Buffer 13 W Register */
#define CAN_0_CS14           CAN_0.MB[14].CS.R             /* Message Buffer 14 CS Register */
#define CAN_0_ID14           CAN_0.MB[14].ID.R             /* Message Buffer 14 ID Register */
#define CAN_0_B14            CAN_0.MB[14].DATA.B           /* Message Buffer 14 B Register */
#define CAN_0_H14            CAN_0.MB[14].DATA.H           /* Message Buffer 14 H Register */
#define CAN_0_W14            CAN_0.MB[14].DATA.W           /* Message Buffer 14 W Register */
#define CAN_0_CS15           CAN_0.MB[15].CS.R             /* Message Buffer 15 CS Register */
#define CAN_0_ID15           CAN_0.MB[15].ID.R             /* Message Buffer 15 ID Register */
#define CAN_0_B15            CAN_0.MB[15].DATA.B           /* Message Buffer 15 B Register */
#define CAN_0_H15            CAN_0.MB[15].DATA.H           /* Message Buffer 15 H Register */
#define CAN_0_W15            CAN_0.MB[15].DATA.W           /* Message Buffer 15 W Register */
#define CAN_0_CS16           CAN_0.MB[16].CS.R             /* Message Buffer 16 CS Register */
#define CAN_0_ID16           CAN_0.MB[16].ID.R             /* Message Buffer 16 ID Register */
#define CAN_0_B16            CAN_0.MB[16].DATA.B           /* Message Buffer 16 B Register */
#define CAN_0_H16            CAN_0.MB[16].DATA.H           /* Message Buffer 16 H Register */
#define CAN_0_W16            CAN_0.MB[16].DATA.W           /* Message Buffer 16 W Register */
#define CAN_0_CS17           CAN_0.MB[17].CS.R             /* Message Buffer 17 CS Register */
#define CAN_0_ID17           CAN_0.MB[17].ID.R             /* Message Buffer 17 ID Register */
#define CAN_0_B17            CAN_0.MB[17].DATA.B           /* Message Buffer 17 B Register */
#define CAN_0_H17            CAN_0.MB[17].DATA.H           /* Message Buffer 17 H Register */
#define CAN_0_W17            CAN_0.MB[17].DATA.W           /* Message Buffer 17 W Register */
#define CAN_0_CS18           CAN_0.MB[18].CS.R             /* Message Buffer 18 CS Register */
#define CAN_0_ID18           CAN_0.MB[18].ID.R             /* Message Buffer 18 ID Register */
#define CAN_0_B18            CAN_0.MB[18].DATA.B           /* Message Buffer 18 B Register */
#define CAN_0_H18            CAN_0.MB[18].DATA.H           /* Message Buffer 18 H Register */
#define CAN_0_W18            CAN_0.MB[18].DATA.W           /* Message Buffer 18 W Register */
#define CAN_0_CS19           CAN_0.MB[19].CS.R             /* Message Buffer 19 CS Register */
#define CAN_0_ID19           CAN_0.MB[19].ID.R             /* Message Buffer 19 ID Register */
#define CAN_0_B19            CAN_0.MB[19].DATA.B           /* Message Buffer 19 B Register */
#define CAN_0_H19            CAN_0.MB[19].DATA.H           /* Message Buffer 19 H Register */
#define CAN_0_W19            CAN_0.MB[19].DATA.W           /* Message Buffer 19 W Register */
#define CAN_0_CS20           CAN_0.MB[20].CS.R             /* Message Buffer 20 CS Register */
#define CAN_0_ID20           CAN_0.MB[20].ID.R             /* Message Buffer 20 ID Register */
#define CAN_0_B20            CAN_0.MB[20].DATA.B           /* Message Buffer 20 B Register */
#define CAN_0_H20            CAN_0.MB[20].DATA.H           /* Message Buffer 20 H Register */
#define CAN_0_W20            CAN_0.MB[20].DATA.W           /* Message Buffer 20 W Register */
#define CAN_0_CS21           CAN_0.MB[21].CS.R             /* Message Buffer 21 CS Register */
#define CAN_0_ID21           CAN_0.MB[21].ID.R             /* Message Buffer 21 ID Register */
#define CAN_0_B21            CAN_0.MB[21].DATA.B           /* Message Buffer 21 B Register */
#define CAN_0_H21            CAN_0.MB[21].DATA.H           /* Message Buffer 21 H Register */
#define CAN_0_W21            CAN_0.MB[21].DATA.W           /* Message Buffer 21 W Register */
#define CAN_0_CS22           CAN_0.MB[22].CS.R             /* Message Buffer 22 CS Register */
#define CAN_0_ID22           CAN_0.MB[22].ID.R             /* Message Buffer 22 ID Register */
#define CAN_0_B22            CAN_0.MB[22].DATA.B           /* Message Buffer 22 B Register */
#define CAN_0_H22            CAN_0.MB[22].DATA.H           /* Message Buffer 22 H Register */
#define CAN_0_W22            CAN_0.MB[22].DATA.W           /* Message Buffer 22 W Register */
#define CAN_0_CS23           CAN_0.MB[23].CS.R             /* Message Buffer 23 CS Register */
#define CAN_0_ID23           CAN_0.MB[23].ID.R             /* Message Buffer 23 ID Register */
#define CAN_0_B23            CAN_0.MB[23].DATA.B           /* Message Buffer 23 B Register */
#define CAN_0_H23            CAN_0.MB[23].DATA.H           /* Message Buffer 23 H Register */
#define CAN_0_W23            CAN_0.MB[23].DATA.W           /* Message Buffer 23 W Register */
#define CAN_0_CS24           CAN_0.MB[24].CS.R             /* Message Buffer 24 CS Register */
#define CAN_0_ID24           CAN_0.MB[24].ID.R             /* Message Buffer 24 ID Register */
#define CAN_0_B24            CAN_0.MB[24].DATA.B           /* Message Buffer 24 B Register */
#define CAN_0_H24            CAN_0.MB[24].DATA.H           /* Message Buffer 24 H Register */
#define CAN_0_W24            CAN_0.MB[24].DATA.W           /* Message Buffer 24 W Register */
#define CAN_0_CS25           CAN_0.MB[25].CS.R             /* Message Buffer 25 CS Register */
#define CAN_0_ID25           CAN_0.MB[25].ID.R             /* Message Buffer 25 ID Register */
#define CAN_0_B25            CAN_0.MB[25].DATA.B           /* Message Buffer 25 B Register */
#define CAN_0_H25            CAN_0.MB[25].DATA.H           /* Message Buffer 25 H Register */
#define CAN_0_W25            CAN_0.MB[25].DATA.W           /* Message Buffer 25 W Register */
#define CAN_0_CS26           CAN_0.MB[26].CS.R             /* Message Buffer 26 CS Register */
#define CAN_0_ID26           CAN_0.MB[26].ID.R             /* Message Buffer 26 ID Register */
#define CAN_0_B26            CAN_0.MB[26].DATA.B           /* Message Buffer 26 B Register */
#define CAN_0_H26            CAN_0.MB[26].DATA.H           /* Message Buffer 26 H Register */
#define CAN_0_W26            CAN_0.MB[26].DATA.W           /* Message Buffer 26 W Register */
#define CAN_0_CS27           CAN_0.MB[27].CS.R             /* Message Buffer 27 CS Register */
#define CAN_0_ID27           CAN_0.MB[27].ID.R             /* Message Buffer 27 ID Register */
#define CAN_0_B27            CAN_0.MB[27].DATA.B           /* Message Buffer 27 B Register */
#define CAN_0_H27            CAN_0.MB[27].DATA.H           /* Message Buffer 27 H Register */
#define CAN_0_W27            CAN_0.MB[27].DATA.W           /* Message Buffer 27 W Register */
#define CAN_0_CS28           CAN_0.MB[28].CS.R             /* Message Buffer 28 CS Register */
#define CAN_0_ID28           CAN_0.MB[28].ID.R             /* Message Buffer 28 ID Register */
#define CAN_0_B28            CAN_0.MB[28].DATA.B           /* Message Buffer 28 B Register */
#define CAN_0_H28            CAN_0.MB[28].DATA.H           /* Message Buffer 28 H Register */
#define CAN_0_W28            CAN_0.MB[28].DATA.W           /* Message Buffer 28 W Register */
#define CAN_0_CS29           CAN_0.MB[29].CS.R             /* Message Buffer 29 CS Register */
#define CAN_0_ID29           CAN_0.MB[29].ID.R             /* Message Buffer 29 ID Register */
#define CAN_0_B29            CAN_0.MB[29].DATA.B           /* Message Buffer 29 B Register */
#define CAN_0_H29            CAN_0.MB[29].DATA.H           /* Message Buffer 29 H Register */
#define CAN_0_W29            CAN_0.MB[29].DATA.W           /* Message Buffer 29 W Register */
#define CAN_0_CS30           CAN_0.MB[30].CS.R             /* Message Buffer 30 CS Register */
#define CAN_0_ID30           CAN_0.MB[30].ID.R             /* Message Buffer 30 ID Register */
#define CAN_0_B30            CAN_0.MB[30].DATA.B           /* Message Buffer 30 B Register */
#define CAN_0_H30            CAN_0.MB[30].DATA.H           /* Message Buffer 30 H Register */
#define CAN_0_W30            CAN_0.MB[30].DATA.W           /* Message Buffer 30 W Register */
#define CAN_0_CS31           CAN_0.MB[31].CS.R             /* Message Buffer 31 CS Register */
#define CAN_0_ID31           CAN_0.MB[31].ID.R             /* Message Buffer 31 ID Register */
#define CAN_0_B31            CAN_0.MB[31].DATA.B           /* Message Buffer 31 B Register */
#define CAN_0_H31            CAN_0.MB[31].DATA.H           /* Message Buffer 31 H Register */
#define CAN_0_W31            CAN_0.MB[31].DATA.W           /* Message Buffer 31 W Register */
#define CAN_0_CS32           CAN_0.MB[32].CS.R             /* Message Buffer 32 CS Register */
#define CAN_0_ID32           CAN_0.MB[32].ID.R             /* Message Buffer 32 ID Register */
#define CAN_0_B32            CAN_0.MB[32].DATA.B           /* Message Buffer 32 B Register */
#define CAN_0_H32            CAN_0.MB[32].DATA.H           /* Message Buffer 32 H Register */
#define CAN_0_W32            CAN_0.MB[32].DATA.W           /* Message Buffer 32 W Register */
#define CAN_0_CS33           CAN_0.MB[33].CS.R             /* Message Buffer 33 CS Register */
#define CAN_0_ID33           CAN_0.MB[33].ID.R             /* Message Buffer 33 ID Register */
#define CAN_0_B33            CAN_0.MB[33].DATA.B           /* Message Buffer 33 B Register */
#define CAN_0_H33            CAN_0.MB[33].DATA.H           /* Message Buffer 33 H Register */
#define CAN_0_W33            CAN_0.MB[33].DATA.W           /* Message Buffer 33 W Register */
#define CAN_0_CS34           CAN_0.MB[34].CS.R             /* Message Buffer 34 CS Register */
#define CAN_0_ID34           CAN_0.MB[34].ID.R             /* Message Buffer 34 ID Register */
#define CAN_0_B34            CAN_0.MB[34].DATA.B           /* Message Buffer 34 B Register */
#define CAN_0_H34            CAN_0.MB[34].DATA.H           /* Message Buffer 34 H Register */
#define CAN_0_W34            CAN_0.MB[34].DATA.W           /* Message Buffer 34 W Register */
#define CAN_0_CS35           CAN_0.MB[35].CS.R             /* Message Buffer 35 CS Register */
#define CAN_0_ID35           CAN_0.MB[35].ID.R             /* Message Buffer 35 ID Register */
#define CAN_0_B35            CAN_0.MB[35].DATA.B           /* Message Buffer 35 B Register */
#define CAN_0_H35            CAN_0.MB[35].DATA.H           /* Message Buffer 35 H Register */
#define CAN_0_W35            CAN_0.MB[35].DATA.W           /* Message Buffer 35 W Register */
#define CAN_0_CS36           CAN_0.MB[36].CS.R             /* Message Buffer 36 CS Register */
#define CAN_0_ID36           CAN_0.MB[36].ID.R             /* Message Buffer 36 ID Register */
#define CAN_0_B36            CAN_0.MB[36].DATA.B           /* Message Buffer 36 B Register */
#define CAN_0_H36            CAN_0.MB[36].DATA.H           /* Message Buffer 36 H Register */
#define CAN_0_W36            CAN_0.MB[36].DATA.W           /* Message Buffer 36 W Register */
#define CAN_0_CS37           CAN_0.MB[37].CS.R             /* Message Buffer 37 CS Register */
#define CAN_0_ID37           CAN_0.MB[37].ID.R             /* Message Buffer 37 ID Register */
#define CAN_0_B37            CAN_0.MB[37].DATA.B           /* Message Buffer 37 B Register */
#define CAN_0_H37            CAN_0.MB[37].DATA.H           /* Message Buffer 37 H Register */
#define CAN_0_W37            CAN_0.MB[37].DATA.W           /* Message Buffer 37 W Register */
#define CAN_0_CS38           CAN_0.MB[38].CS.R             /* Message Buffer 38 CS Register */
#define CAN_0_ID38           CAN_0.MB[38].ID.R             /* Message Buffer 38 ID Register */
#define CAN_0_B38            CAN_0.MB[38].DATA.B           /* Message Buffer 38 B Register */
#define CAN_0_H38            CAN_0.MB[38].DATA.H           /* Message Buffer 38 H Register */
#define CAN_0_W38            CAN_0.MB[38].DATA.W           /* Message Buffer 38 W Register */
#define CAN_0_CS39           CAN_0.MB[39].CS.R             /* Message Buffer 39 CS Register */
#define CAN_0_ID39           CAN_0.MB[39].ID.R             /* Message Buffer 39 ID Register */
#define CAN_0_B39            CAN_0.MB[39].DATA.B           /* Message Buffer 39 B Register */
#define CAN_0_H39            CAN_0.MB[39].DATA.H           /* Message Buffer 39 H Register */
#define CAN_0_W39            CAN_0.MB[39].DATA.W           /* Message Buffer 39 W Register */
#define CAN_0_CS40           CAN_0.MB[40].CS.R             /* Message Buffer 40 CS Register */
#define CAN_0_ID40           CAN_0.MB[40].ID.R             /* Message Buffer 40 ID Register */
#define CAN_0_B40            CAN_0.MB[40].DATA.B           /* Message Buffer 40 B Register */
#define CAN_0_H40            CAN_0.MB[40].DATA.H           /* Message Buffer 40 H Register */
#define CAN_0_W40            CAN_0.MB[40].DATA.W           /* Message Buffer 40 W Register */
#define CAN_0_CS41           CAN_0.MB[41].CS.R             /* Message Buffer 41 CS Register */
#define CAN_0_ID41           CAN_0.MB[41].ID.R             /* Message Buffer 41 ID Register */
#define CAN_0_B41            CAN_0.MB[41].DATA.B           /* Message Buffer 41 B Register */
#define CAN_0_H41            CAN_0.MB[41].DATA.H           /* Message Buffer 41 H Register */
#define CAN_0_W41            CAN_0.MB[41].DATA.W           /* Message Buffer 41 W Register */
#define CAN_0_CS42           CAN_0.MB[42].CS.R             /* Message Buffer 42 CS Register */
#define CAN_0_ID42           CAN_0.MB[42].ID.R             /* Message Buffer 42 ID Register */
#define CAN_0_B42            CAN_0.MB[42].DATA.B           /* Message Buffer 42 B Register */
#define CAN_0_H42            CAN_0.MB[42].DATA.H           /* Message Buffer 42 H Register */
#define CAN_0_W42            CAN_0.MB[42].DATA.W           /* Message Buffer 42 W Register */
#define CAN_0_CS43           CAN_0.MB[43].CS.R             /* Message Buffer 43 CS Register */
#define CAN_0_ID43           CAN_0.MB[43].ID.R             /* Message Buffer 43 ID Register */
#define CAN_0_B43            CAN_0.MB[43].DATA.B           /* Message Buffer 43 B Register */
#define CAN_0_H43            CAN_0.MB[43].DATA.H           /* Message Buffer 43 H Register */
#define CAN_0_W43            CAN_0.MB[43].DATA.W           /* Message Buffer 43 W Register */
#define CAN_0_CS44           CAN_0.MB[44].CS.R             /* Message Buffer 44 CS Register */
#define CAN_0_ID44           CAN_0.MB[44].ID.R             /* Message Buffer 44 ID Register */
#define CAN_0_B44            CAN_0.MB[44].DATA.B           /* Message Buffer 44 B Register */
#define CAN_0_H44            CAN_0.MB[44].DATA.H           /* Message Buffer 44 H Register */
#define CAN_0_W44            CAN_0.MB[44].DATA.W           /* Message Buffer 44 W Register */
#define CAN_0_CS45           CAN_0.MB[45].CS.R             /* Message Buffer 45 CS Register */
#define CAN_0_ID45           CAN_0.MB[45].ID.R             /* Message Buffer 45 ID Register */
#define CAN_0_B45            CAN_0.MB[45].DATA.B           /* Message Buffer 45 B Register */
#define CAN_0_H45            CAN_0.MB[45].DATA.H           /* Message Buffer 45 H Register */
#define CAN_0_W45            CAN_0.MB[45].DATA.W           /* Message Buffer 45 W Register */
#define CAN_0_CS46           CAN_0.MB[46].CS.R             /* Message Buffer 46 CS Register */
#define CAN_0_ID46           CAN_0.MB[46].ID.R             /* Message Buffer 46 ID Register */
#define CAN_0_B46            CAN_0.MB[46].DATA.B           /* Message Buffer 46 B Register */
#define CAN_0_H46            CAN_0.MB[46].DATA.H           /* Message Buffer 46 H Register */
#define CAN_0_W46            CAN_0.MB[46].DATA.W           /* Message Buffer 46 W Register */
#define CAN_0_CS47           CAN_0.MB[47].CS.R             /* Message Buffer 47 CS Register */
#define CAN_0_ID47           CAN_0.MB[47].ID.R             /* Message Buffer 47 ID Register */
#define CAN_0_B47            CAN_0.MB[47].DATA.B           /* Message Buffer 47 B Register */
#define CAN_0_H47            CAN_0.MB[47].DATA.H           /* Message Buffer 47 H Register */
#define CAN_0_W47            CAN_0.MB[47].DATA.W           /* Message Buffer 47 W Register */
#define CAN_0_CS48           CAN_0.MB[48].CS.R             /* Message Buffer 48 CS Register */
#define CAN_0_ID48           CAN_0.MB[48].ID.R             /* Message Buffer 48 ID Register */
#define CAN_0_B48            CAN_0.MB[48].DATA.B           /* Message Buffer 48 B Register */
#define CAN_0_H48            CAN_0.MB[48].DATA.H           /* Message Buffer 48 H Register */
#define CAN_0_W48            CAN_0.MB[48].DATA.W           /* Message Buffer 48 W Register */
#define CAN_0_CS49           CAN_0.MB[49].CS.R             /* Message Buffer 49 CS Register */
#define CAN_0_ID49           CAN_0.MB[49].ID.R             /* Message Buffer 49 ID Register */
#define CAN_0_B49            CAN_0.MB[49].DATA.B           /* Message Buffer 49 B Register */
#define CAN_0_H49            CAN_0.MB[49].DATA.H           /* Message Buffer 49 H Register */
#define CAN_0_W49            CAN_0.MB[49].DATA.W           /* Message Buffer 49 W Register */
#define CAN_0_CS50           CAN_0.MB[50].CS.R             /* Message Buffer 50 CS Register */
#define CAN_0_ID50           CAN_0.MB[50].ID.R             /* Message Buffer 50 ID Register */
#define CAN_0_B50            CAN_0.MB[50].DATA.B           /* Message Buffer 50 B Register */
#define CAN_0_H50            CAN_0.MB[50].DATA.H           /* Message Buffer 50 H Register */
#define CAN_0_W50            CAN_0.MB[50].DATA.W           /* Message Buffer 50 W Register */
#define CAN_0_CS51           CAN_0.MB[51].CS.R             /* Message Buffer 51 CS Register */
#define CAN_0_ID51           CAN_0.MB[51].ID.R             /* Message Buffer 51 ID Register */
#define CAN_0_B51            CAN_0.MB[51].DATA.B           /* Message Buffer 51 B Register */
#define CAN_0_H51            CAN_0.MB[51].DATA.H           /* Message Buffer 51 H Register */
#define CAN_0_W51            CAN_0.MB[51].DATA.W           /* Message Buffer 51 W Register */
#define CAN_0_CS52           CAN_0.MB[52].CS.R             /* Message Buffer 52 CS Register */
#define CAN_0_ID52           CAN_0.MB[52].ID.R             /* Message Buffer 52 ID Register */
#define CAN_0_B52            CAN_0.MB[52].DATA.B           /* Message Buffer 52 B Register */
#define CAN_0_H52            CAN_0.MB[52].DATA.H           /* Message Buffer 52 H Register */
#define CAN_0_W52            CAN_0.MB[52].DATA.W           /* Message Buffer 52 W Register */
#define CAN_0_CS53           CAN_0.MB[53].CS.R             /* Message Buffer 53 CS Register */
#define CAN_0_ID53           CAN_0.MB[53].ID.R             /* Message Buffer 53 ID Register */
#define CAN_0_B53            CAN_0.MB[53].DATA.B           /* Message Buffer 53 B Register */
#define CAN_0_H53            CAN_0.MB[53].DATA.H           /* Message Buffer 53 H Register */
#define CAN_0_W53            CAN_0.MB[53].DATA.W           /* Message Buffer 53 W Register */
#define CAN_0_CS54           CAN_0.MB[54].CS.R             /* Message Buffer 54 CS Register */
#define CAN_0_ID54           CAN_0.MB[54].ID.R             /* Message Buffer 54 ID Register */
#define CAN_0_B54            CAN_0.MB[54].DATA.B           /* Message Buffer 54 B Register */
#define CAN_0_H54            CAN_0.MB[54].DATA.H           /* Message Buffer 54 H Register */
#define CAN_0_W54            CAN_0.MB[54].DATA.W           /* Message Buffer 54 W Register */
#define CAN_0_CS55           CAN_0.MB[55].CS.R             /* Message Buffer 55 CS Register */
#define CAN_0_ID55           CAN_0.MB[55].ID.R             /* Message Buffer 55 ID Register */
#define CAN_0_B55            CAN_0.MB[55].DATA.B           /* Message Buffer 55 B Register */
#define CAN_0_H55            CAN_0.MB[55].DATA.H           /* Message Buffer 55 H Register */
#define CAN_0_W55            CAN_0.MB[55].DATA.W           /* Message Buffer 55 W Register */
#define CAN_0_CS56           CAN_0.MB[56].CS.R             /* Message Buffer 56 CS Register */
#define CAN_0_ID56           CAN_0.MB[56].ID.R             /* Message Buffer 56 ID Register */
#define CAN_0_B56            CAN_0.MB[56].DATA.B           /* Message Buffer 56 B Register */
#define CAN_0_H56            CAN_0.MB[56].DATA.H           /* Message Buffer 56 H Register */
#define CAN_0_W56            CAN_0.MB[56].DATA.W           /* Message Buffer 56 W Register */
#define CAN_0_CS57           CAN_0.MB[57].CS.R             /* Message Buffer 57 CS Register */
#define CAN_0_ID57           CAN_0.MB[57].ID.R             /* Message Buffer 57 ID Register */
#define CAN_0_B57            CAN_0.MB[57].DATA.B           /* Message Buffer 57 B Register */
#define CAN_0_H57            CAN_0.MB[57].DATA.H           /* Message Buffer 57 H Register */
#define CAN_0_W57            CAN_0.MB[57].DATA.W           /* Message Buffer 57 W Register */
#define CAN_0_CS58           CAN_0.MB[58].CS.R             /* Message Buffer 58 CS Register */
#define CAN_0_ID58           CAN_0.MB[58].ID.R             /* Message Buffer 58 ID Register */
#define CAN_0_B58            CAN_0.MB[58].DATA.B           /* Message Buffer 58 B Register */
#define CAN_0_H58            CAN_0.MB[58].DATA.H           /* Message Buffer 58 H Register */
#define CAN_0_W58            CAN_0.MB[58].DATA.W           /* Message Buffer 58 W Register */
#define CAN_0_CS59           CAN_0.MB[59].CS.R             /* Message Buffer 59 CS Register */
#define CAN_0_ID59           CAN_0.MB[59].ID.R             /* Message Buffer 59 ID Register */
#define CAN_0_B59            CAN_0.MB[59].DATA.B           /* Message Buffer 59 B Register */
#define CAN_0_H59            CAN_0.MB[59].DATA.H           /* Message Buffer 59 H Register */
#define CAN_0_W59            CAN_0.MB[59].DATA.W           /* Message Buffer 59 W Register */
#define CAN_0_CS60           CAN_0.MB[60].CS.R             /* Message Buffer 60 CS Register */
#define CAN_0_ID60           CAN_0.MB[60].ID.R             /* Message Buffer 60 ID Register */
#define CAN_0_B60            CAN_0.MB[60].DATA.B           /* Message Buffer 60 B Register */
#define CAN_0_H60            CAN_0.MB[60].DATA.H           /* Message Buffer 60 H Register */
#define CAN_0_W60            CAN_0.MB[60].DATA.W           /* Message Buffer 60 W Register */
#define CAN_0_CS61           CAN_0.MB[61].CS.R             /* Message Buffer 61 CS Register */
#define CAN_0_ID61           CAN_0.MB[61].ID.R             /* Message Buffer 61 ID Register */
#define CAN_0_B61            CAN_0.MB[61].DATA.B           /* Message Buffer 61 B Register */
#define CAN_0_H61            CAN_0.MB[61].DATA.H           /* Message Buffer 61 H Register */
#define CAN_0_W61            CAN_0.MB[61].DATA.W           /* Message Buffer 61 W Register */
#define CAN_0_CS62           CAN_0.MB[62].CS.R             /* Message Buffer 62 CS Register */
#define CAN_0_ID62           CAN_0.MB[62].ID.R             /* Message Buffer 62 ID Register */
#define CAN_0_B62            CAN_0.MB[62].DATA.B           /* Message Buffer 62 B Register */
#define CAN_0_H62            CAN_0.MB[62].DATA.H           /* Message Buffer 62 H Register */
#define CAN_0_W62            CAN_0.MB[62].DATA.W           /* Message Buffer 62 W Register */
#define CAN_0_CS63           CAN_0.MB[63].CS.R             /* Message Buffer 63 CS Register */
#define CAN_0_ID63           CAN_0.MB[63].ID.R             /* Message Buffer 63 ID Register */
#define CAN_0_B63            CAN_0.MB[63].DATA.B           /* Message Buffer 63 B Register */
#define CAN_0_H63            CAN_0.MB[63].DATA.H           /* Message Buffer 63 H Register */
#define CAN_0_W63            CAN_0.MB[63].DATA.W           /* Message Buffer 63 W Register */
#define CAN_0_CS64           CAN_0.MB[64].CS.R             /* Message Buffer 64 CS Register */
#define CAN_0_ID64           CAN_0.MB[64].ID.R             /* Message Buffer 64 ID Register */
#define CAN_0_B64            CAN_0.MB[64].DATA.B           /* Message Buffer 64 B Register */
#define CAN_0_H64            CAN_0.MB[64].DATA.H           /* Message Buffer 64 H Register */
#define CAN_0_W64            CAN_0.MB[64].DATA.W           /* Message Buffer 64 W Register */
#define CAN_0_CS65           CAN_0.MB[65].CS.R             /* Message Buffer 65 CS Register */
#define CAN_0_ID65           CAN_0.MB[65].ID.R             /* Message Buffer 65 ID Register */
#define CAN_0_B65            CAN_0.MB[65].DATA.B           /* Message Buffer 65 B Register */
#define CAN_0_H65            CAN_0.MB[65].DATA.H           /* Message Buffer 65 H Register */
#define CAN_0_W65            CAN_0.MB[65].DATA.W           /* Message Buffer 65 W Register */
#define CAN_0_CS66           CAN_0.MB[66].CS.R             /* Message Buffer 66 CS Register */
#define CAN_0_ID66           CAN_0.MB[66].ID.R             /* Message Buffer 66 ID Register */
#define CAN_0_B66            CAN_0.MB[66].DATA.B           /* Message Buffer 66 B Register */
#define CAN_0_H66            CAN_0.MB[66].DATA.H           /* Message Buffer 66 H Register */
#define CAN_0_W66            CAN_0.MB[66].DATA.W           /* Message Buffer 66 W Register */
#define CAN_0_CS67           CAN_0.MB[67].CS.R             /* Message Buffer 67 CS Register */
#define CAN_0_ID67           CAN_0.MB[67].ID.R             /* Message Buffer 67 ID Register */
#define CAN_0_B67            CAN_0.MB[67].DATA.B           /* Message Buffer 67 B Register */
#define CAN_0_H67            CAN_0.MB[67].DATA.H           /* Message Buffer 67 H Register */
#define CAN_0_W67            CAN_0.MB[67].DATA.W           /* Message Buffer 67 W Register */
#define CAN_0_CS68           CAN_0.MB[68].CS.R             /* Message Buffer 68 CS Register */
#define CAN_0_ID68           CAN_0.MB[68].ID.R             /* Message Buffer 68 ID Register */
#define CAN_0_B68            CAN_0.MB[68].DATA.B           /* Message Buffer 68 B Register */
#define CAN_0_H68            CAN_0.MB[68].DATA.H           /* Message Buffer 68 H Register */
#define CAN_0_W68            CAN_0.MB[68].DATA.W           /* Message Buffer 68 W Register */
#define CAN_0_CS69           CAN_0.MB[69].CS.R             /* Message Buffer 69 CS Register */
#define CAN_0_ID69           CAN_0.MB[69].ID.R             /* Message Buffer 69 ID Register */
#define CAN_0_B69            CAN_0.MB[69].DATA.B           /* Message Buffer 69 B Register */
#define CAN_0_H69            CAN_0.MB[69].DATA.H           /* Message Buffer 69 H Register */
#define CAN_0_W69            CAN_0.MB[69].DATA.W           /* Message Buffer 69 W Register */
#define CAN_0_CS70           CAN_0.MB[70].CS.R             /* Message Buffer 70 CS Register */
#define CAN_0_ID70           CAN_0.MB[70].ID.R             /* Message Buffer 70 ID Register */
#define CAN_0_B70            CAN_0.MB[70].DATA.B           /* Message Buffer 70 B Register */
#define CAN_0_H70            CAN_0.MB[70].DATA.H           /* Message Buffer 70 H Register */
#define CAN_0_W70            CAN_0.MB[70].DATA.W           /* Message Buffer 70 W Register */
#define CAN_0_CS71           CAN_0.MB[71].CS.R             /* Message Buffer 71 CS Register */
#define CAN_0_ID71           CAN_0.MB[71].ID.R             /* Message Buffer 71 ID Register */
#define CAN_0_B71            CAN_0.MB[71].DATA.B           /* Message Buffer 71 B Register */
#define CAN_0_H71            CAN_0.MB[71].DATA.H           /* Message Buffer 71 H Register */
#define CAN_0_W71            CAN_0.MB[71].DATA.W           /* Message Buffer 71 W Register */
#define CAN_0_CS72           CAN_0.MB[72].CS.R             /* Message Buffer 72 CS Register */
#define CAN_0_ID72           CAN_0.MB[72].ID.R             /* Message Buffer 72 ID Register */
#define CAN_0_B72            CAN_0.MB[72].DATA.B           /* Message Buffer 72 B Register */
#define CAN_0_H72            CAN_0.MB[72].DATA.H           /* Message Buffer 72 H Register */
#define CAN_0_W72            CAN_0.MB[72].DATA.W           /* Message Buffer 72 W Register */
#define CAN_0_CS73           CAN_0.MB[73].CS.R             /* Message Buffer 73 CS Register */
#define CAN_0_ID73           CAN_0.MB[73].ID.R             /* Message Buffer 73 ID Register */
#define CAN_0_B73            CAN_0.MB[73].DATA.B           /* Message Buffer 73 B Register */
#define CAN_0_H73            CAN_0.MB[73].DATA.H           /* Message Buffer 73 H Register */
#define CAN_0_W73            CAN_0.MB[73].DATA.W           /* Message Buffer 73 W Register */
#define CAN_0_CS74           CAN_0.MB[74].CS.R             /* Message Buffer 74 CS Register */
#define CAN_0_ID74           CAN_0.MB[74].ID.R             /* Message Buffer 74 ID Register */
#define CAN_0_B74            CAN_0.MB[74].DATA.B           /* Message Buffer 74 B Register */
#define CAN_0_H74            CAN_0.MB[74].DATA.H           /* Message Buffer 74 H Register */
#define CAN_0_W74            CAN_0.MB[74].DATA.W           /* Message Buffer 74 W Register */
#define CAN_0_CS75           CAN_0.MB[75].CS.R             /* Message Buffer 75 CS Register */
#define CAN_0_ID75           CAN_0.MB[75].ID.R             /* Message Buffer 75 ID Register */
#define CAN_0_B75            CAN_0.MB[75].DATA.B           /* Message Buffer 75 B Register */
#define CAN_0_H75            CAN_0.MB[75].DATA.H           /* Message Buffer 75 H Register */
#define CAN_0_W75            CAN_0.MB[75].DATA.W           /* Message Buffer 75 W Register */
#define CAN_0_CS76           CAN_0.MB[76].CS.R             /* Message Buffer 76 CS Register */
#define CAN_0_ID76           CAN_0.MB[76].ID.R             /* Message Buffer 76 ID Register */
#define CAN_0_B76            CAN_0.MB[76].DATA.B           /* Message Buffer 76 B Register */
#define CAN_0_H76            CAN_0.MB[76].DATA.H           /* Message Buffer 76 H Register */
#define CAN_0_W76            CAN_0.MB[76].DATA.W           /* Message Buffer 76 W Register */
#define CAN_0_CS77           CAN_0.MB[77].CS.R             /* Message Buffer 77 CS Register */
#define CAN_0_ID77           CAN_0.MB[77].ID.R             /* Message Buffer 77 ID Register */
#define CAN_0_B77            CAN_0.MB[77].DATA.B           /* Message Buffer 77 B Register */
#define CAN_0_H77            CAN_0.MB[77].DATA.H           /* Message Buffer 77 H Register */
#define CAN_0_W77            CAN_0.MB[77].DATA.W           /* Message Buffer 77 W Register */
#define CAN_0_CS78           CAN_0.MB[78].CS.R             /* Message Buffer 78 CS Register */
#define CAN_0_ID78           CAN_0.MB[78].ID.R             /* Message Buffer 78 ID Register */
#define CAN_0_B78            CAN_0.MB[78].DATA.B           /* Message Buffer 78 B Register */
#define CAN_0_H78            CAN_0.MB[78].DATA.H           /* Message Buffer 78 H Register */
#define CAN_0_W78            CAN_0.MB[78].DATA.W           /* Message Buffer 78 W Register */
#define CAN_0_CS79           CAN_0.MB[79].CS.R             /* Message Buffer 79 CS Register */
#define CAN_0_ID79           CAN_0.MB[79].ID.R             /* Message Buffer 79 ID Register */
#define CAN_0_B79            CAN_0.MB[79].DATA.B           /* Message Buffer 79 B Register */
#define CAN_0_H79            CAN_0.MB[79].DATA.H           /* Message Buffer 79 H Register */
#define CAN_0_W79            CAN_0.MB[79].DATA.W           /* Message Buffer 79 W Register */
#define CAN_0_CS80           CAN_0.MB[80].CS.R             /* Message Buffer 80 CS Register */
#define CAN_0_ID80           CAN_0.MB[80].ID.R             /* Message Buffer 80 ID Register */
#define CAN_0_B80            CAN_0.MB[80].DATA.B           /* Message Buffer 80 B Register */
#define CAN_0_H80            CAN_0.MB[80].DATA.H           /* Message Buffer 80 H Register */
#define CAN_0_W80            CAN_0.MB[80].DATA.W           /* Message Buffer 80 W Register */
#define CAN_0_CS81           CAN_0.MB[81].CS.R             /* Message Buffer 81 CS Register */
#define CAN_0_ID81           CAN_0.MB[81].ID.R             /* Message Buffer 81 ID Register */
#define CAN_0_B81            CAN_0.MB[81].DATA.B           /* Message Buffer 81 B Register */
#define CAN_0_H81            CAN_0.MB[81].DATA.H           /* Message Buffer 81 H Register */
#define CAN_0_W81            CAN_0.MB[81].DATA.W           /* Message Buffer 81 W Register */
#define CAN_0_CS82           CAN_0.MB[82].CS.R             /* Message Buffer 82 CS Register */
#define CAN_0_ID82           CAN_0.MB[82].ID.R             /* Message Buffer 82 ID Register */
#define CAN_0_B82            CAN_0.MB[82].DATA.B           /* Message Buffer 82 B Register */
#define CAN_0_H82            CAN_0.MB[82].DATA.H           /* Message Buffer 82 H Register */
#define CAN_0_W82            CAN_0.MB[82].DATA.W           /* Message Buffer 82 W Register */
#define CAN_0_CS83           CAN_0.MB[83].CS.R             /* Message Buffer 83 CS Register */
#define CAN_0_ID83           CAN_0.MB[83].ID.R             /* Message Buffer 83 ID Register */
#define CAN_0_B83            CAN_0.MB[83].DATA.B           /* Message Buffer 83 B Register */
#define CAN_0_H83            CAN_0.MB[83].DATA.H           /* Message Buffer 83 H Register */
#define CAN_0_W83            CAN_0.MB[83].DATA.W           /* Message Buffer 83 W Register */
#define CAN_0_CS84           CAN_0.MB[84].CS.R             /* Message Buffer 84 CS Register */
#define CAN_0_ID84           CAN_0.MB[84].ID.R             /* Message Buffer 84 ID Register */
#define CAN_0_B84            CAN_0.MB[84].DATA.B           /* Message Buffer 84 B Register */
#define CAN_0_H84            CAN_0.MB[84].DATA.H           /* Message Buffer 84 H Register */
#define CAN_0_W84            CAN_0.MB[84].DATA.W           /* Message Buffer 84 W Register */
#define CAN_0_CS85           CAN_0.MB[85].CS.R             /* Message Buffer 85 CS Register */
#define CAN_0_ID85           CAN_0.MB[85].ID.R             /* Message Buffer 85 ID Register */
#define CAN_0_B85            CAN_0.MB[85].DATA.B           /* Message Buffer 85 B Register */
#define CAN_0_H85            CAN_0.MB[85].DATA.H           /* Message Buffer 85 H Register */
#define CAN_0_W85            CAN_0.MB[85].DATA.W           /* Message Buffer 85 W Register */
#define CAN_0_CS86           CAN_0.MB[86].CS.R             /* Message Buffer 86 CS Register */
#define CAN_0_ID86           CAN_0.MB[86].ID.R             /* Message Buffer 86 ID Register */
#define CAN_0_B86            CAN_0.MB[86].DATA.B           /* Message Buffer 86 B Register */
#define CAN_0_H86            CAN_0.MB[86].DATA.H           /* Message Buffer 86 H Register */
#define CAN_0_W86            CAN_0.MB[86].DATA.W           /* Message Buffer 86 W Register */
#define CAN_0_CS87           CAN_0.MB[87].CS.R             /* Message Buffer 87 CS Register */
#define CAN_0_ID87           CAN_0.MB[87].ID.R             /* Message Buffer 87 ID Register */
#define CAN_0_B87            CAN_0.MB[87].DATA.B           /* Message Buffer 87 B Register */
#define CAN_0_H87            CAN_0.MB[87].DATA.H           /* Message Buffer 87 H Register */
#define CAN_0_W87            CAN_0.MB[87].DATA.W           /* Message Buffer 87 W Register */
#define CAN_0_CS88           CAN_0.MB[88].CS.R             /* Message Buffer 88 CS Register */
#define CAN_0_ID88           CAN_0.MB[88].ID.R             /* Message Buffer 88 ID Register */
#define CAN_0_B88            CAN_0.MB[88].DATA.B           /* Message Buffer 88 B Register */
#define CAN_0_H88            CAN_0.MB[88].DATA.H           /* Message Buffer 88 H Register */
#define CAN_0_W848           CAN_0.MB[88].DATA.W           /* Message Buffer 88 W Register */
#define CAN_0_CS89           CAN_0.MB[89].CS.R             /* Message Buffer 89 CS Register */
#define CAN_0_ID89           CAN_0.MB[89].ID.R             /* Message Buffer 89 ID Register */
#define CAN_0_B89            CAN_0.MB[89].DATA.B           /* Message Buffer 89 B Register */
#define CAN_0_H89            CAN_0.MB[89].DATA.H           /* Message Buffer 89 H Register */
#define CAN_0_W89            CAN_0.MB[89].DATA.W           /* Message Buffer 89 W Register */
#define CAN_0_CS90           CAN_0.MB[90].CS.R             /* Message Buffer 90 CS Register */
#define CAN_0_ID90           CAN_0.MB[90].ID.R             /* Message Buffer 90 ID Register */
#define CAN_0_B90            CAN_0.MB[90].DATA.B           /* Message Buffer 90 B Register */
#define CAN_0_H90            CAN_0.MB[90].DATA.H           /* Message Buffer 90 H Register */
#define CAN_0_W90            CAN_0.MB[90].DATA.W           /* Message Buffer 90 W Register */
#define CAN_0_CS91           CAN_0.MB[91].CS.R             /* Message Buffer 91 CS Register */
#define CAN_0_ID91           CAN_0.MB[91].ID.R             /* Message Buffer 91 ID Register */
#define CAN_0_B91            CAN_0.MB[91].DATA.B           /* Message Buffer 91 B Register */
#define CAN_0_H91            CAN_0.MB[91].DATA.H           /* Message Buffer 91 H Register */
#define CAN_0_W91            CAN_0.MB[91].DATA.W           /* Message Buffer 91 W Register */
#define CAN_0_CS92           CAN_0.MB[92].CS.R             /* Message Buffer 92 CS Register */
#define CAN_0_ID92           CAN_0.MB[92].ID.R             /* Message Buffer 92 ID Register */
#define CAN_0_B92            CAN_0.MB[92].DATA.B           /* Message Buffer 92 B Register */
#define CAN_0_H92            CAN_0.MB[92].DATA.H           /* Message Buffer 92 H Register */
#define CAN_0_W92            CAN_0.MB[92].DATA.W           /* Message Buffer 92 W Register */
#define CAN_0_CS93           CAN_0.MB[93].CS.R             /* Message Buffer 93 CS Register */
#define CAN_0_ID93           CAN_0.MB[93].ID.R             /* Message Buffer 93 ID Register */
#define CAN_0_B93            CAN_0.MB[93].DATA.B           /* Message Buffer 93 B Register */
#define CAN_0_H93            CAN_0.MB[93].DATA.H           /* Message Buffer 93 H Register */
#define CAN_0_W93            CAN_0.MB[93].DATA.W           /* Message Buffer 93 W Register */
#define CAN_0_CS94           CAN_0.MB[94].CS.R             /* Message Buffer 94 CS Register */
#define CAN_0_ID94           CAN_0.MB[94].ID.R             /* Message Buffer 94 ID Register */
#define CAN_0_B94            CAN_0.MB[94].DATA.B           /* Message Buffer 94 B Register */
#define CAN_0_H94            CAN_0.MB[94].DATA.H           /* Message Buffer 94 H Register */
#define CAN_0_W94            CAN_0.MB[94].DATA.W           /* Message Buffer 94 W Register */
#define CAN_0_CS95           CAN_0.MB[95].CS.R             /* Message Buffer 95 CS Register */
#define CAN_0_ID95           CAN_0.MB[95].ID.R             /* Message Buffer 95 ID Register */
#define CAN_0_B95            CAN_0.MB[95].DATA.B           /* Message Buffer 95 B Register */
#define CAN_0_H95            CAN_0.MB[95].DATA.H           /* Message Buffer 95 H Register */
#define CAN_0_W95            CAN_0.MB[95].DATA.W           /* Message Buffer 95 W Register */
#define CAN_0_RXIMR0         CAN_0.RXIMR[0].R              /* Rx Individual Mask registers */
#define CAN_0_RXIMR1         CAN_0.RXIMR[1].R              /* Rx Individual Mask registers */
#define CAN_0_RXIMR2         CAN_0.RXIMR[2].R              /* Rx Individual Mask registers */
#define CAN_0_RXIMR3         CAN_0.RXIMR[3].R              /* Rx Individual Mask registers */
#define CAN_0_RXIMR4         CAN_0.RXIMR[4].R              /* Rx Individual Mask registers */
#define CAN_0_RXIMR5         CAN_0.RXIMR[5].R              /* Rx Individual Mask registers */
#define CAN_0_RXIMR6         CAN_0.RXIMR[6].R              /* Rx Individual Mask registers */
#define CAN_0_RXIMR7         CAN_0.RXIMR[7].R              /* Rx Individual Mask registers */
#define CAN_0_RXIMR8         CAN_0.RXIMR[8].R              /* Rx Individual Mask registers */
#define CAN_0_RXIMR9         CAN_0.RXIMR[9].R              /* Rx Individual Mask registers */
#define CAN_0_RXIMR10        CAN_0.RXIMR[10].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR11        CAN_0.RXIMR[11].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR12        CAN_0.RXIMR[12].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR13        CAN_0.RXIMR[13].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR14        CAN_0.RXIMR[14].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR15        CAN_0.RXIMR[15].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR16        CAN_0.RXIMR[16].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR17        CAN_0.RXIMR[17].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR18        CAN_0.RXIMR[18].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR19        CAN_0.RXIMR[19].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR20        CAN_0.RXIMR[20].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR21        CAN_0.RXIMR[21].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR22        CAN_0.RXIMR[22].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR23        CAN_0.RXIMR[23].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR24        CAN_0.RXIMR[24].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR25        CAN_0.RXIMR[25].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR26        CAN_0.RXIMR[26].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR27        CAN_0.RXIMR[27].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR28        CAN_0.RXIMR[28].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR29        CAN_0.RXIMR[29].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR30        CAN_0.RXIMR[30].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR31        CAN_0.RXIMR[31].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR32        CAN_0.RXIMR[32].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR33        CAN_0.RXIMR[33].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR34        CAN_0.RXIMR[34].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR35        CAN_0.RXIMR[35].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR36        CAN_0.RXIMR[36].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR37        CAN_0.RXIMR[37].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR38        CAN_0.RXIMR[38].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR39        CAN_0.RXIMR[39].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR40        CAN_0.RXIMR[40].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR41        CAN_0.RXIMR[41].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR42        CAN_0.RXIMR[42].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR43        CAN_0.RXIMR[43].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR44        CAN_0.RXIMR[44].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR45        CAN_0.RXIMR[45].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR46        CAN_0.RXIMR[46].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR47        CAN_0.RXIMR[47].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR48        CAN_0.RXIMR[48].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR49        CAN_0.RXIMR[49].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR50        CAN_0.RXIMR[50].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR51        CAN_0.RXIMR[51].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR52        CAN_0.RXIMR[52].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR53        CAN_0.RXIMR[53].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR54        CAN_0.RXIMR[54].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR55        CAN_0.RXIMR[55].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR56        CAN_0.RXIMR[56].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR57        CAN_0.RXIMR[57].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR58        CAN_0.RXIMR[58].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR59        CAN_0.RXIMR[59].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR60        CAN_0.RXIMR[60].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR61        CAN_0.RXIMR[61].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR62        CAN_0.RXIMR[62].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR63        CAN_0.RXIMR[63].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR64        CAN_0.RXIMR[64].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR65        CAN_0.RXIMR[65].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR66        CAN_0.RXIMR[66].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR67        CAN_0.RXIMR[67].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR68        CAN_0.RXIMR[68].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR69        CAN_0.RXIMR[69].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR70        CAN_0.RXIMR[70].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR71        CAN_0.RXIMR[71].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR72        CAN_0.RXIMR[72].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR73        CAN_0.RXIMR[73].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR74        CAN_0.RXIMR[74].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR75        CAN_0.RXIMR[75].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR76        CAN_0.RXIMR[76].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR77        CAN_0.RXIMR[77].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR78        CAN_0.RXIMR[78].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR79        CAN_0.RXIMR[79].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR80        CAN_0.RXIMR[80].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR81        CAN_0.RXIMR[81].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR82        CAN_0.RXIMR[82].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR83        CAN_0.RXIMR[83].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR84        CAN_0.RXIMR[84].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR85        CAN_0.RXIMR[85].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR86        CAN_0.RXIMR[86].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR87        CAN_0.RXIMR[87].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR88        CAN_0.RXIMR[88].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR89        CAN_0.RXIMR[89].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR90        CAN_0.RXIMR[90].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR91        CAN_0.RXIMR[91].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR92        CAN_0.RXIMR[92].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR93        CAN_0.RXIMR[93].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR94        CAN_0.RXIMR[94].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR95        CAN_0.RXIMR[95].R             /* Rx Individual Mask registers */
#define CAN_0_MECR           CAN_0.MECR.R                  /* Memory Error Control register */
#define CAN_0_ERRIAR         CAN_0.ERRIAR.R                /* Error Injection Address register */
#define CAN_0_ERRIDPR        CAN_0.ERRIDPR.R               /* Error Injection Data Pattern register */
#define CAN_0_ERRIPPR        CAN_0.ERRIPPR.R               /* Error Injection Parity Pattern register */
#define CAN_0_RERRAR         CAN_0.RERRAR.R                /* Error Report Address register */
#define CAN_0_RERRDR         CAN_0.RERRDR.R                /* Error Report Data register */
#define CAN_0_RERRSYNR       CAN_0.RERRSYNR.R              /* Error Report Syndrome register */
#define CAN_0_ERRSR          CAN_0.ERRSR.R                 /* Error Status register */
#define CAN_0_FDCTRL         CAN_0.FDCTRL.R                /* CAN FD Control register */
#define CAN_0_FDCBT          CAN_0.FDCBT.R                 /* CAN FD Bit Timing register */
#define CAN_0_FDCRC          CAN_0.FDCRC.R                 /* CAN FD CRC register */
#define CAN_0_HR_TIME_STAMP0 CAN_0.HR_TIME_STAMP[0].R      /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP1 CAN_0.HR_TIME_STAMP[1].R      /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP2 CAN_0.HR_TIME_STAMP[2].R      /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP3 CAN_0.HR_TIME_STAMP[3].R      /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP4 CAN_0.HR_TIME_STAMP[4].R      /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP5 CAN_0.HR_TIME_STAMP[5].R      /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP6 CAN_0.HR_TIME_STAMP[6].R      /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP7 CAN_0.HR_TIME_STAMP[7].R      /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP8 CAN_0.HR_TIME_STAMP[8].R      /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP9 CAN_0.HR_TIME_STAMP[9].R      /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP10 CAN_0.HR_TIME_STAMP[10].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP11 CAN_0.HR_TIME_STAMP[11].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP12 CAN_0.HR_TIME_STAMP[12].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP13 CAN_0.HR_TIME_STAMP[13].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP14 CAN_0.HR_TIME_STAMP[14].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP15 CAN_0.HR_TIME_STAMP[15].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP16 CAN_0.HR_TIME_STAMP[16].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP17 CAN_0.HR_TIME_STAMP[17].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP18 CAN_0.HR_TIME_STAMP[18].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP19 CAN_0.HR_TIME_STAMP[19].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP20 CAN_0.HR_TIME_STAMP[20].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP21 CAN_0.HR_TIME_STAMP[21].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP22 CAN_0.HR_TIME_STAMP[22].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP23 CAN_0.HR_TIME_STAMP[23].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP24 CAN_0.HR_TIME_STAMP[24].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP25 CAN_0.HR_TIME_STAMP[25].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP26 CAN_0.HR_TIME_STAMP[26].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP27 CAN_0.HR_TIME_STAMP[27].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP28 CAN_0.HR_TIME_STAMP[28].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP29 CAN_0.HR_TIME_STAMP[29].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP30 CAN_0.HR_TIME_STAMP[30].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP31 CAN_0.HR_TIME_STAMP[31].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP32 CAN_0.HR_TIME_STAMP[32].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP33 CAN_0.HR_TIME_STAMP[33].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP34 CAN_0.HR_TIME_STAMP[34].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP35 CAN_0.HR_TIME_STAMP[35].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP36 CAN_0.HR_TIME_STAMP[36].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP37 CAN_0.HR_TIME_STAMP[37].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP38 CAN_0.HR_TIME_STAMP[38].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP39 CAN_0.HR_TIME_STAMP[39].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP40 CAN_0.HR_TIME_STAMP[40].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP41 CAN_0.HR_TIME_STAMP[41].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP42 CAN_0.HR_TIME_STAMP[42].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP43 CAN_0.HR_TIME_STAMP[43].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP44 CAN_0.HR_TIME_STAMP[44].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP45 CAN_0.HR_TIME_STAMP[45].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP46 CAN_0.HR_TIME_STAMP[46].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP47 CAN_0.HR_TIME_STAMP[47].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP48 CAN_0.HR_TIME_STAMP[48].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP49 CAN_0.HR_TIME_STAMP[49].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP50 CAN_0.HR_TIME_STAMP[50].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP51 CAN_0.HR_TIME_STAMP[51].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP52 CAN_0.HR_TIME_STAMP[52].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP53 CAN_0.HR_TIME_STAMP[53].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP54 CAN_0.HR_TIME_STAMP[54].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP55 CAN_0.HR_TIME_STAMP[55].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP56 CAN_0.HR_TIME_STAMP[56].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP57 CAN_0.HR_TIME_STAMP[57].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP58 CAN_0.HR_TIME_STAMP[58].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP59 CAN_0.HR_TIME_STAMP[59].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP60 CAN_0.HR_TIME_STAMP[60].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP61 CAN_0.HR_TIME_STAMP[61].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP62 CAN_0.HR_TIME_STAMP[62].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP63 CAN_0.HR_TIME_STAMP[63].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP64 CAN_0.HR_TIME_STAMP[64].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP65 CAN_0.HR_TIME_STAMP[65].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP66 CAN_0.HR_TIME_STAMP[66].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP67 CAN_0.HR_TIME_STAMP[67].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP68 CAN_0.HR_TIME_STAMP[68].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP69 CAN_0.HR_TIME_STAMP[69].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP70 CAN_0.HR_TIME_STAMP[70].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP71 CAN_0.HR_TIME_STAMP[71].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP72 CAN_0.HR_TIME_STAMP[72].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP73 CAN_0.HR_TIME_STAMP[73].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP74 CAN_0.HR_TIME_STAMP[74].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP75 CAN_0.HR_TIME_STAMP[75].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP76 CAN_0.HR_TIME_STAMP[76].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP77 CAN_0.HR_TIME_STAMP[77].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP78 CAN_0.HR_TIME_STAMP[78].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP79 CAN_0.HR_TIME_STAMP[79].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP80 CAN_0.HR_TIME_STAMP[80].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP81 CAN_0.HR_TIME_STAMP[81].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP82 CAN_0.HR_TIME_STAMP[82].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP83 CAN_0.HR_TIME_STAMP[83].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP84 CAN_0.HR_TIME_STAMP[84].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP85 CAN_0.HR_TIME_STAMP[85].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP86 CAN_0.HR_TIME_STAMP[86].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP87 CAN_0.HR_TIME_STAMP[87].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP88 CAN_0.HR_TIME_STAMP[88].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP89 CAN_0.HR_TIME_STAMP[89].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP90 CAN_0.HR_TIME_STAMP[90].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP91 CAN_0.HR_TIME_STAMP[91].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP92 CAN_0.HR_TIME_STAMP[92].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP93 CAN_0.HR_TIME_STAMP[93].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP94 CAN_0.HR_TIME_STAMP[94].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP95 CAN_0.HR_TIME_STAMP[95].R    /* High Resolution Time Stamp */

#define CAN_1_MCR            CAN_1.MCR.R                   /* Module Configuration register */
#define CAN_1_CTRL1          CAN_1.CTRL1.R                 /* Control 1 register */
#define CAN_1_TIMER          CAN_1.TIMER.R                 /* Free Running Timer */
#define CAN_1_RXMGMASK       CAN_1.RXMGMASK.R              /* Rx Mailboxes Global Mask register */
#define CAN_1_RX14MASK       CAN_1.RX14MASK.R              /* Rx 14 Mask register */
#define CAN_1_RX15MASK       CAN_1.RX15MASK.R              /* Rx 15 Mask register */
#define CAN_1_ECR            CAN_1.ECR.R                   /* Error Counter */
#define CAN_1_ESR1           CAN_1.ESR1.R                  /* Error and Status 1 register */
#define CAN_1_IMASK2         CAN_1.IMASK2.R                /* Interrupt Masks 2 register */
#define CAN_1_IMASK1         CAN_1.IMASK1.R                /* Interrupt Masks 1 register */
#define CAN_1_IFLAG2         CAN_1.IFLAG2.R                /* Interrupt Flags 2 register */
#define CAN_1_IFLAG1         CAN_1.IFLAG1.R                /* Interrupt Flags 1 register */
#define CAN_1_CTRL2          CAN_1.CTRL2.R                 /* Control 2 register */
#define CAN_1_ESR2           CAN_1.ESR2.R                  /* Error and Status 2 register */
#define CAN_1_CRCR           CAN_1.CRCR.R                  /* CRC register */
#define CAN_1_RXFGMASK       CAN_1.RXFGMASK.R              /* Rx FIFO Global Mask register */
#define CAN_1_RXFIR          CAN_1.RXFIR.R                 /* Rx FIFO Information register */
#define CAN_1_CBT            CAN_1.CBT.R                   /* CAN Bit Timing register */
#define CAN_1_IMASK3         CAN_1.IMASK3.R                /* Interrupt Masks 3 register */
#define CAN_1_IFLAG3         CAN_1.IFLAG3.R                /* Interrupt Flags 3 register */
#define CAN_1_ID0            CAN_1.MB[0].ID.R              /* Message Buffer 0 ID Register */
#define CAN_1_B0             CAN_1.MB[0].DATA.B            /* Message Buffer 0 B Register */
#define CAN_1_H0             CAN_1.MB[0].DATA.H            /* Message Buffer 0 H Register */
#define CAN_1_W0             CAN_1.MB[0].DATA.W            /* Message Buffer 0 W Register */
#define CAN_1_CS1            CAN_1.MB[1].CS.R              /* Message Buffer 1 CS Register */
#define CAN_1_ID1            CAN_1.MB[1].ID.R              /* Message Buffer 1 ID Register */
#define CAN_1_B1             CAN_1.MB[1].DATA.B            /* Message Buffer 1 B Register */
#define CAN_1_H1             CAN_1.MB[1].DATA.H            /* Message Buffer 1 H Register */
#define CAN_1_W1             CAN_1.MB[1].DATA.W            /* Message Buffer 1 W Register */
#define CAN_1_CS2            CAN_1.MB[2].CS.R              /* Message Buffer 2 CS Register */
#define CAN_1_ID2            CAN_1.MB[2].ID.R              /* Message Buffer 2 ID Register */
#define CAN_1_B2             CAN_1.MB[2].DATA.B            /* Message Buffer 2 B Register */
#define CAN_1_H2             CAN_1.MB[2].DATA.H            /* Message Buffer 2 H Register */
#define CAN_1_W2             CAN_1.MB[2].DATA.W            /* Message Buffer 2 W Register */
#define CAN_1_CS3            CAN_1.MB[3].CS.R              /* Message Buffer 3 CS Register */
#define CAN_1_ID3            CAN_1.MB[3].ID.R              /* Message Buffer 3 ID Register */
#define CAN_1_B3             CAN_1.MB[3].DATA.B            /* Message Buffer 3 B Register */
#define CAN_1_H3             CAN_1.MB[3].DATA.H            /* Message Buffer 3 H Register */
#define CAN_1_W3             CAN_1.MB[3].DATA.W            /* Message Buffer 3 W Register */
#define CAN_1_CS4            CAN_1.MB[4].CS.R              /* Message Buffer 4 CS Register */
#define CAN_1_ID4            CAN_1.MB[4].ID.R              /* Message Buffer 4 ID Register */
#define CAN_1_B4             CAN_1.MB[4].DATA.B            /* Message Buffer 4 B Register */
#define CAN_1_H4             CAN_1.MB[4].DATA.H            /* Message Buffer 4 H Register */
#define CAN_1_W4             CAN_1.MB[4].DATA.W            /* Message Buffer 4 W Register */
#define CAN_1_CS5            CAN_1.MB[5].CS.R              /* Message Buffer 5 CS Register */
#define CAN_1_ID5            CAN_1.MB[5].ID.R              /* Message Buffer 5 ID Register */
#define CAN_1_B5             CAN_1.MB[5].DATA.B            /* Message Buffer 5 B Register */
#define CAN_1_H5             CAN_1.MB[5].DATA.H            /* Message Buffer 5 H Register */
#define CAN_1_W5             CAN_1.MB[5].DATA.W            /* Message Buffer 5 W Register */
#define CAN_1_CS6            CAN_1.MB[6].CS.R              /* Message Buffer 6 CS Register */
#define CAN_1_ID6            CAN_1.MB[6].ID.R              /* Message Buffer 6 ID Register */
#define CAN_1_B6             CAN_1.MB[6].DATA.B            /* Message Buffer 6 B Register */
#define CAN_1_H6             CAN_1.MB[6].DATA.H            /* Message Buffer 6 H Register */
#define CAN_1_W6             CAN_1.MB[6].DATA.W            /* Message Buffer 6 W Register */
#define CAN_1_CS7            CAN_1.MB[7].CS.R              /* Message Buffer 7 CS Register */
#define CAN_1_ID7            CAN_1.MB[7].ID.R              /* Message Buffer 7 ID Register */
#define CAN_1_B7             CAN_1.MB[7].DATA.B            /* Message Buffer 7 B Register */
#define CAN_1_H7             CAN_1.MB[7].DATA.H            /* Message Buffer 7 H Register */
#define CAN_1_W7             CAN_1.MB[7].DATA.W            /* Message Buffer 7 W Register */
#define CAN_1_CS8            CAN_1.MB[8].CS.R              /* Message Buffer 8 CS Register */
#define CAN_1_ID8            CAN_1.MB[8].ID.R              /* Message Buffer 8 ID Register */
#define CAN_1_B8             CAN_1.MB[8].DATA.B            /* Message Buffer 8 B Register */
#define CAN_1_H8             CAN_1.MB[8].DATA.H            /* Message Buffer 8 H Register */
#define CAN_1_W8             CAN_1.MB[8].DATA.W            /* Message Buffer 8 W Register */
#define CAN_1_CS9            CAN_1.MB[9].CS.R              /* Message Buffer 9 CS Register */
#define CAN_1_ID9            CAN_1.MB[9].ID.R              /* Message Buffer 9 ID Register */
#define CAN_1_B9             CAN_1.MB[9].DATA.B            /* Message Buffer 9 B Register */
#define CAN_1_H9             CAN_1.MB[9].DATA.H            /* Message Buffer 9 H Register */
#define CAN_1_W9             CAN_1.MB[9].DATA.W            /* Message Buffer 9 W Register */
#define CAN_1_CS10           CAN_1.MB[10].CS.R             /* Message Buffer 10 CS Register */
#define CAN_1_ID10           CAN_1.MB[10].ID.R             /* Message Buffer 10 ID Register */
#define CAN_1_B10            CAN_1.MB[10].DATA.B           /* Message Buffer 10 B Register */
#define CAN_1_H10            CAN_1.MB[10].DATA.H           /* Message Buffer 10 H Register */
#define CAN_1_W10            CAN_1.MB[10].DATA.W           /* Message Buffer 10 W Register */
#define CAN_1_CS11           CAN_1.MB[11].CS.R             /* Message Buffer 11 CS Register */
#define CAN_1_ID11           CAN_1.MB[11].ID.R             /* Message Buffer 11 ID Register */
#define CAN_1_B11            CAN_1.MB[11].DATA.B           /* Message Buffer 11 B Register */
#define CAN_1_H11            CAN_1.MB[11].DATA.H           /* Message Buffer 11 H Register */
#define CAN_1_W11            CAN_1.MB[11].DATA.W           /* Message Buffer 11 W Register */
#define CAN_1_CS12           CAN_1.MB[12].CS.R             /* Message Buffer 12 CS Register */
#define CAN_1_ID12           CAN_1.MB[12].ID.R             /* Message Buffer 12 ID Register */
#define CAN_1_B12            CAN_1.MB[12].DATA.B           /* Message Buffer 12 B Register */
#define CAN_1_H12            CAN_1.MB[12].DATA.H           /* Message Buffer 12 H Register */
#define CAN_1_W12            CAN_1.MB[12].DATA.W           /* Message Buffer 12 W Register */
#define CAN_1_CS13           CAN_1.MB[13].CS.R             /* Message Buffer 13 CS Register */
#define CAN_1_ID13           CAN_1.MB[13].ID.R             /* Message Buffer 13 ID Register */
#define CAN_1_B13            CAN_1.MB[13].DATA.B           /* Message Buffer 13 B Register */
#define CAN_1_H13            CAN_1.MB[13].DATA.H           /* Message Buffer 13 H Register */
#define CAN_1_W13            CAN_1.MB[13].DATA.W           /* Message Buffer 13 W Register */
#define CAN_1_CS14           CAN_1.MB[14].CS.R             /* Message Buffer 14 CS Register */
#define CAN_1_ID14           CAN_1.MB[14].ID.R             /* Message Buffer 14 ID Register */
#define CAN_1_B14            CAN_1.MB[14].DATA.B           /* Message Buffer 14 B Register */
#define CAN_1_H14            CAN_1.MB[14].DATA.H           /* Message Buffer 14 H Register */
#define CAN_1_W14            CAN_1.MB[14].DATA.W           /* Message Buffer 14 W Register */
#define CAN_1_CS15           CAN_1.MB[15].CS.R             /* Message Buffer 15 CS Register */
#define CAN_1_ID15           CAN_1.MB[15].ID.R             /* Message Buffer 15 ID Register */
#define CAN_1_B15            CAN_1.MB[15].DATA.B           /* Message Buffer 15 B Register */
#define CAN_1_H15            CAN_1.MB[15].DATA.H           /* Message Buffer 15 H Register */
#define CAN_1_W15            CAN_1.MB[15].DATA.W           /* Message Buffer 15 W Register */
#define CAN_1_CS16           CAN_1.MB[16].CS.R             /* Message Buffer 16 CS Register */
#define CAN_1_ID16           CAN_1.MB[16].ID.R             /* Message Buffer 16 ID Register */
#define CAN_1_B16            CAN_1.MB[16].DATA.B           /* Message Buffer 16 B Register */
#define CAN_1_H16            CAN_1.MB[16].DATA.H           /* Message Buffer 16 H Register */
#define CAN_1_W16            CAN_1.MB[16].DATA.W           /* Message Buffer 16 W Register */
#define CAN_1_CS17           CAN_1.MB[17].CS.R             /* Message Buffer 17 CS Register */
#define CAN_1_ID17           CAN_1.MB[17].ID.R             /* Message Buffer 17 ID Register */
#define CAN_1_B17            CAN_1.MB[17].DATA.B           /* Message Buffer 17 B Register */
#define CAN_1_H17            CAN_1.MB[17].DATA.H           /* Message Buffer 17 H Register */
#define CAN_1_W17            CAN_1.MB[17].DATA.W           /* Message Buffer 17 W Register */
#define CAN_1_CS18           CAN_1.MB[18].CS.R             /* Message Buffer 18 CS Register */
#define CAN_1_ID18           CAN_1.MB[18].ID.R             /* Message Buffer 18 ID Register */
#define CAN_1_B18            CAN_1.MB[18].DATA.B           /* Message Buffer 18 B Register */
#define CAN_1_H18            CAN_1.MB[18].DATA.H           /* Message Buffer 18 H Register */
#define CAN_1_W18            CAN_1.MB[18].DATA.W           /* Message Buffer 18 W Register */
#define CAN_1_CS19           CAN_1.MB[19].CS.R             /* Message Buffer 19 CS Register */
#define CAN_1_ID19           CAN_1.MB[19].ID.R             /* Message Buffer 19 ID Register */
#define CAN_1_B19            CAN_1.MB[19].DATA.B           /* Message Buffer 19 B Register */
#define CAN_1_H19            CAN_1.MB[19].DATA.H           /* Message Buffer 19 H Register */
#define CAN_1_W19            CAN_1.MB[19].DATA.W           /* Message Buffer 19 W Register */
#define CAN_1_CS20           CAN_1.MB[20].CS.R             /* Message Buffer 20 CS Register */
#define CAN_1_ID20           CAN_1.MB[20].ID.R             /* Message Buffer 20 ID Register */
#define CAN_1_B20            CAN_1.MB[20].DATA.B           /* Message Buffer 20 B Register */
#define CAN_1_H20            CAN_1.MB[20].DATA.H           /* Message Buffer 20 H Register */
#define CAN_1_W20            CAN_1.MB[20].DATA.W           /* Message Buffer 20 W Register */
#define CAN_1_CS21           CAN_1.MB[21].CS.R             /* Message Buffer 21 CS Register */
#define CAN_1_ID21           CAN_1.MB[21].ID.R             /* Message Buffer 21 ID Register */
#define CAN_1_B21            CAN_1.MB[21].DATA.B           /* Message Buffer 21 B Register */
#define CAN_1_H21            CAN_1.MB[21].DATA.H           /* Message Buffer 21 H Register */
#define CAN_1_W21            CAN_1.MB[21].DATA.W           /* Message Buffer 21 W Register */
#define CAN_1_CS22           CAN_1.MB[22].CS.R             /* Message Buffer 22 CS Register */
#define CAN_1_ID22           CAN_1.MB[22].ID.R             /* Message Buffer 22 ID Register */
#define CAN_1_B22            CAN_1.MB[22].DATA.B           /* Message Buffer 22 B Register */
#define CAN_1_H22            CAN_1.MB[22].DATA.H           /* Message Buffer 22 H Register */
#define CAN_1_W22            CAN_1.MB[22].DATA.W           /* Message Buffer 22 W Register */
#define CAN_1_CS23           CAN_1.MB[23].CS.R             /* Message Buffer 23 CS Register */
#define CAN_1_ID23           CAN_1.MB[23].ID.R             /* Message Buffer 23 ID Register */
#define CAN_1_B23            CAN_1.MB[23].DATA.B           /* Message Buffer 23 B Register */
#define CAN_1_H23            CAN_1.MB[23].DATA.H           /* Message Buffer 23 H Register */
#define CAN_1_W23            CAN_1.MB[23].DATA.W           /* Message Buffer 23 W Register */
#define CAN_1_CS24           CAN_1.MB[24].CS.R             /* Message Buffer 24 CS Register */
#define CAN_1_ID24           CAN_1.MB[24].ID.R             /* Message Buffer 24 ID Register */
#define CAN_1_B24            CAN_1.MB[24].DATA.B           /* Message Buffer 24 B Register */
#define CAN_1_H24            CAN_1.MB[24].DATA.H           /* Message Buffer 24 H Register */
#define CAN_1_W24            CAN_1.MB[24].DATA.W           /* Message Buffer 24 W Register */
#define CAN_1_CS25           CAN_1.MB[25].CS.R             /* Message Buffer 25 CS Register */
#define CAN_1_ID25           CAN_1.MB[25].ID.R             /* Message Buffer 25 ID Register */
#define CAN_1_B25            CAN_1.MB[25].DATA.B           /* Message Buffer 25 B Register */
#define CAN_1_H25            CAN_1.MB[25].DATA.H           /* Message Buffer 25 H Register */
#define CAN_1_W25            CAN_1.MB[25].DATA.W           /* Message Buffer 25 W Register */
#define CAN_1_CS26           CAN_1.MB[26].CS.R             /* Message Buffer 26 CS Register */
#define CAN_1_ID26           CAN_1.MB[26].ID.R             /* Message Buffer 26 ID Register */
#define CAN_1_B26            CAN_1.MB[26].DATA.B           /* Message Buffer 26 B Register */
#define CAN_1_H26            CAN_1.MB[26].DATA.H           /* Message Buffer 26 H Register */
#define CAN_1_W26            CAN_1.MB[26].DATA.W           /* Message Buffer 26 W Register */
#define CAN_1_CS27           CAN_1.MB[27].CS.R             /* Message Buffer 27 CS Register */
#define CAN_1_ID27           CAN_1.MB[27].ID.R             /* Message Buffer 27 ID Register */
#define CAN_1_B27            CAN_1.MB[27].DATA.B           /* Message Buffer 27 B Register */
#define CAN_1_H27            CAN_1.MB[27].DATA.H           /* Message Buffer 27 H Register */
#define CAN_1_W27            CAN_1.MB[27].DATA.W           /* Message Buffer 27 W Register */
#define CAN_1_CS28           CAN_1.MB[28].CS.R             /* Message Buffer 28 CS Register */
#define CAN_1_ID28           CAN_1.MB[28].ID.R             /* Message Buffer 28 ID Register */
#define CAN_1_B28            CAN_1.MB[28].DATA.B           /* Message Buffer 28 B Register */
#define CAN_1_H28            CAN_1.MB[28].DATA.H           /* Message Buffer 28 H Register */
#define CAN_1_W28            CAN_1.MB[28].DATA.W           /* Message Buffer 28 W Register */
#define CAN_1_CS29           CAN_1.MB[29].CS.R             /* Message Buffer 29 CS Register */
#define CAN_1_ID29           CAN_1.MB[29].ID.R             /* Message Buffer 29 ID Register */
#define CAN_1_B29            CAN_1.MB[29].DATA.B           /* Message Buffer 29 B Register */
#define CAN_1_H29            CAN_1.MB[29].DATA.H           /* Message Buffer 29 H Register */
#define CAN_1_W29            CAN_1.MB[29].DATA.W           /* Message Buffer 29 W Register */
#define CAN_1_CS30           CAN_1.MB[30].CS.R             /* Message Buffer 30 CS Register */
#define CAN_1_ID30           CAN_1.MB[30].ID.R             /* Message Buffer 30 ID Register */
#define CAN_1_B30            CAN_1.MB[30].DATA.B           /* Message Buffer 30 B Register */
#define CAN_1_H30            CAN_1.MB[30].DATA.H           /* Message Buffer 30 H Register */
#define CAN_1_W30            CAN_1.MB[30].DATA.W           /* Message Buffer 30 W Register */
#define CAN_1_CS31           CAN_1.MB[31].CS.R             /* Message Buffer 31 CS Register */
#define CAN_1_ID31           CAN_1.MB[31].ID.R             /* Message Buffer 31 ID Register */
#define CAN_1_B31            CAN_1.MB[31].DATA.B           /* Message Buffer 31 B Register */
#define CAN_1_H31            CAN_1.MB[31].DATA.H           /* Message Buffer 31 H Register */
#define CAN_1_W31            CAN_1.MB[31].DATA.W           /* Message Buffer 31 W Register */
#define CAN_1_CS32           CAN_1.MB[32].CS.R             /* Message Buffer 32 CS Register */
#define CAN_1_ID32           CAN_1.MB[32].ID.R             /* Message Buffer 32 ID Register */
#define CAN_1_B32            CAN_1.MB[32].DATA.B           /* Message Buffer 32 B Register */
#define CAN_1_H32            CAN_1.MB[32].DATA.H           /* Message Buffer 32 H Register */
#define CAN_1_W32            CAN_1.MB[32].DATA.W           /* Message Buffer 32 W Register */
#define CAN_1_CS33           CAN_1.MB[33].CS.R             /* Message Buffer 33 CS Register */
#define CAN_1_ID33           CAN_1.MB[33].ID.R             /* Message Buffer 33 ID Register */
#define CAN_1_B33            CAN_1.MB[33].DATA.B           /* Message Buffer 33 B Register */
#define CAN_1_H33            CAN_1.MB[33].DATA.H           /* Message Buffer 33 H Register */
#define CAN_1_W33            CAN_1.MB[33].DATA.W           /* Message Buffer 33 W Register */
#define CAN_1_CS34           CAN_1.MB[34].CS.R             /* Message Buffer 34 CS Register */
#define CAN_1_ID34           CAN_1.MB[34].ID.R             /* Message Buffer 34 ID Register */
#define CAN_1_B34            CAN_1.MB[34].DATA.B           /* Message Buffer 34 B Register */
#define CAN_1_H34            CAN_1.MB[34].DATA.H           /* Message Buffer 34 H Register */
#define CAN_1_W34            CAN_1.MB[34].DATA.W           /* Message Buffer 34 W Register */
#define CAN_1_CS35           CAN_1.MB[35].CS.R             /* Message Buffer 35 CS Register */
#define CAN_1_ID35           CAN_1.MB[35].ID.R             /* Message Buffer 35 ID Register */
#define CAN_1_B35            CAN_1.MB[35].DATA.B           /* Message Buffer 35 B Register */
#define CAN_1_H35            CAN_1.MB[35].DATA.H           /* Message Buffer 35 H Register */
#define CAN_1_W35            CAN_1.MB[35].DATA.W           /* Message Buffer 35 W Register */
#define CAN_1_CS36           CAN_1.MB[36].CS.R             /* Message Buffer 36 CS Register */
#define CAN_1_ID36           CAN_1.MB[36].ID.R             /* Message Buffer 36 ID Register */
#define CAN_1_B36            CAN_1.MB[36].DATA.B           /* Message Buffer 36 B Register */
#define CAN_1_H36            CAN_1.MB[36].DATA.H           /* Message Buffer 36 H Register */
#define CAN_1_W36            CAN_1.MB[36].DATA.W           /* Message Buffer 36 W Register */
#define CAN_1_CS37           CAN_1.MB[37].CS.R             /* Message Buffer 37 CS Register */
#define CAN_1_ID37           CAN_1.MB[37].ID.R             /* Message Buffer 37 ID Register */
#define CAN_1_B37            CAN_1.MB[37].DATA.B           /* Message Buffer 37 B Register */
#define CAN_1_H37            CAN_1.MB[37].DATA.H           /* Message Buffer 37 H Register */
#define CAN_1_W37            CAN_1.MB[37].DATA.W           /* Message Buffer 37 W Register */
#define CAN_1_CS38           CAN_1.MB[38].CS.R             /* Message Buffer 38 CS Register */
#define CAN_1_ID38           CAN_1.MB[38].ID.R             /* Message Buffer 38 ID Register */
#define CAN_1_B38            CAN_1.MB[38].DATA.B           /* Message Buffer 38 B Register */
#define CAN_1_H38            CAN_1.MB[38].DATA.H           /* Message Buffer 38 H Register */
#define CAN_1_W38            CAN_1.MB[38].DATA.W           /* Message Buffer 38 W Register */
#define CAN_1_CS39           CAN_1.MB[39].CS.R             /* Message Buffer 39 CS Register */
#define CAN_1_ID39           CAN_1.MB[39].ID.R             /* Message Buffer 39 ID Register */
#define CAN_1_B39            CAN_1.MB[39].DATA.B           /* Message Buffer 39 B Register */
#define CAN_1_H39            CAN_1.MB[39].DATA.H           /* Message Buffer 39 H Register */
#define CAN_1_W39            CAN_1.MB[39].DATA.W           /* Message Buffer 39 W Register */
#define CAN_1_CS40           CAN_1.MB[40].CS.R             /* Message Buffer 40 CS Register */
#define CAN_1_ID40           CAN_1.MB[40].ID.R             /* Message Buffer 40 ID Register */
#define CAN_1_B40            CAN_1.MB[40].DATA.B           /* Message Buffer 40 B Register */
#define CAN_1_H40            CAN_1.MB[40].DATA.H           /* Message Buffer 40 H Register */
#define CAN_1_W40            CAN_1.MB[40].DATA.W           /* Message Buffer 40 W Register */
#define CAN_1_CS41           CAN_1.MB[41].CS.R             /* Message Buffer 41 CS Register */
#define CAN_1_ID41           CAN_1.MB[41].ID.R             /* Message Buffer 41 ID Register */
#define CAN_1_B41            CAN_1.MB[41].DATA.B           /* Message Buffer 41 B Register */
#define CAN_1_H41            CAN_1.MB[41].DATA.H           /* Message Buffer 41 H Register */
#define CAN_1_W41            CAN_1.MB[41].DATA.W           /* Message Buffer 41 W Register */
#define CAN_1_CS42           CAN_1.MB[42].CS.R             /* Message Buffer 42 CS Register */
#define CAN_1_ID42           CAN_1.MB[42].ID.R             /* Message Buffer 42 ID Register */
#define CAN_1_B42            CAN_1.MB[42].DATA.B           /* Message Buffer 42 B Register */
#define CAN_1_H42            CAN_1.MB[42].DATA.H           /* Message Buffer 42 H Register */
#define CAN_1_W42            CAN_1.MB[42].DATA.W           /* Message Buffer 42 W Register */
#define CAN_1_CS43           CAN_1.MB[43].CS.R             /* Message Buffer 43 CS Register */
#define CAN_1_ID43           CAN_1.MB[43].ID.R             /* Message Buffer 43 ID Register */
#define CAN_1_B43            CAN_1.MB[43].DATA.B           /* Message Buffer 43 B Register */
#define CAN_1_H43            CAN_1.MB[43].DATA.H           /* Message Buffer 43 H Register */
#define CAN_1_W43            CAN_1.MB[43].DATA.W           /* Message Buffer 43 W Register */
#define CAN_1_CS44           CAN_1.MB[44].CS.R             /* Message Buffer 44 CS Register */
#define CAN_1_ID44           CAN_1.MB[44].ID.R             /* Message Buffer 44 ID Register */
#define CAN_1_B44            CAN_1.MB[44].DATA.B           /* Message Buffer 44 B Register */
#define CAN_1_H44            CAN_1.MB[44].DATA.H           /* Message Buffer 44 H Register */
#define CAN_1_W44            CAN_1.MB[44].DATA.W           /* Message Buffer 44 W Register */
#define CAN_1_CS45           CAN_1.MB[45].CS.R             /* Message Buffer 45 CS Register */
#define CAN_1_ID45           CAN_1.MB[45].ID.R             /* Message Buffer 45 ID Register */
#define CAN_1_B45            CAN_1.MB[45].DATA.B           /* Message Buffer 45 B Register */
#define CAN_1_H45            CAN_1.MB[45].DATA.H           /* Message Buffer 45 H Register */
#define CAN_1_W45            CAN_1.MB[45].DATA.W           /* Message Buffer 45 W Register */
#define CAN_1_CS46           CAN_1.MB[46].CS.R             /* Message Buffer 46 CS Register */
#define CAN_1_ID46           CAN_1.MB[46].ID.R             /* Message Buffer 46 ID Register */
#define CAN_1_B46            CAN_1.MB[46].DATA.B           /* Message Buffer 46 B Register */
#define CAN_1_H46            CAN_1.MB[46].DATA.H           /* Message Buffer 46 H Register */
#define CAN_1_W46            CAN_1.MB[46].DATA.W           /* Message Buffer 46 W Register */
#define CAN_1_CS47           CAN_1.MB[47].CS.R             /* Message Buffer 47 CS Register */
#define CAN_1_ID47           CAN_1.MB[47].ID.R             /* Message Buffer 47 ID Register */
#define CAN_1_B47            CAN_1.MB[47].DATA.B           /* Message Buffer 47 B Register */
#define CAN_1_H47            CAN_1.MB[47].DATA.H           /* Message Buffer 47 H Register */
#define CAN_1_W47            CAN_1.MB[47].DATA.W           /* Message Buffer 47 W Register */
#define CAN_1_CS48           CAN_1.MB[48].CS.R             /* Message Buffer 48 CS Register */
#define CAN_1_ID48           CAN_1.MB[48].ID.R             /* Message Buffer 48 ID Register */
#define CAN_1_B48            CAN_1.MB[48].DATA.B           /* Message Buffer 48 B Register */
#define CAN_1_H48            CAN_1.MB[48].DATA.H           /* Message Buffer 48 H Register */
#define CAN_1_W48            CAN_1.MB[48].DATA.W           /* Message Buffer 48 W Register */
#define CAN_1_CS49           CAN_1.MB[49].CS.R             /* Message Buffer 49 CS Register */
#define CAN_1_ID49           CAN_1.MB[49].ID.R             /* Message Buffer 49 ID Register */
#define CAN_1_B49            CAN_1.MB[49].DATA.B           /* Message Buffer 49 B Register */
#define CAN_1_H49            CAN_1.MB[49].DATA.H           /* Message Buffer 49 H Register */
#define CAN_1_W49            CAN_1.MB[49].DATA.W           /* Message Buffer 49 W Register */
#define CAN_1_CS50           CAN_1.MB[50].CS.R             /* Message Buffer 50 CS Register */
#define CAN_1_ID50           CAN_1.MB[50].ID.R             /* Message Buffer 50 ID Register */
#define CAN_1_B50            CAN_1.MB[50].DATA.B           /* Message Buffer 50 B Register */
#define CAN_1_H50            CAN_1.MB[50].DATA.H           /* Message Buffer 50 H Register */
#define CAN_1_W50            CAN_1.MB[50].DATA.W           /* Message Buffer 50 W Register */
#define CAN_1_CS51           CAN_1.MB[51].CS.R             /* Message Buffer 51 CS Register */
#define CAN_1_ID51           CAN_1.MB[51].ID.R             /* Message Buffer 51 ID Register */
#define CAN_1_B51            CAN_1.MB[51].DATA.B           /* Message Buffer 51 B Register */
#define CAN_1_H51            CAN_1.MB[51].DATA.H           /* Message Buffer 51 H Register */
#define CAN_1_W51            CAN_1.MB[51].DATA.W           /* Message Buffer 51 W Register */
#define CAN_1_CS52           CAN_1.MB[52].CS.R             /* Message Buffer 52 CS Register */
#define CAN_1_ID52           CAN_1.MB[52].ID.R             /* Message Buffer 52 ID Register */
#define CAN_1_B52            CAN_1.MB[52].DATA.B           /* Message Buffer 52 B Register */
#define CAN_1_H52            CAN_1.MB[52].DATA.H           /* Message Buffer 52 H Register */
#define CAN_1_W52            CAN_1.MB[52].DATA.W           /* Message Buffer 52 W Register */
#define CAN_1_CS53           CAN_1.MB[53].CS.R             /* Message Buffer 53 CS Register */
#define CAN_1_ID53           CAN_1.MB[53].ID.R             /* Message Buffer 53 ID Register */
#define CAN_1_B53            CAN_1.MB[53].DATA.B           /* Message Buffer 53 B Register */
#define CAN_1_H53            CAN_1.MB[53].DATA.H           /* Message Buffer 53 H Register */
#define CAN_1_W53            CAN_1.MB[53].DATA.W           /* Message Buffer 53 W Register */
#define CAN_1_CS54           CAN_1.MB[54].CS.R             /* Message Buffer 54 CS Register */
#define CAN_1_ID54           CAN_1.MB[54].ID.R             /* Message Buffer 54 ID Register */
#define CAN_1_B54            CAN_1.MB[54].DATA.B           /* Message Buffer 54 B Register */
#define CAN_1_H54            CAN_1.MB[54].DATA.H           /* Message Buffer 54 H Register */
#define CAN_1_W54            CAN_1.MB[54].DATA.W           /* Message Buffer 54 W Register */
#define CAN_1_CS55           CAN_1.MB[55].CS.R             /* Message Buffer 55 CS Register */
#define CAN_1_ID55           CAN_1.MB[55].ID.R             /* Message Buffer 55 ID Register */
#define CAN_1_B55            CAN_1.MB[55].DATA.B           /* Message Buffer 55 B Register */
#define CAN_1_H55            CAN_1.MB[55].DATA.H           /* Message Buffer 55 H Register */
#define CAN_1_W55            CAN_1.MB[55].DATA.W           /* Message Buffer 55 W Register */
#define CAN_1_CS56           CAN_1.MB[56].CS.R             /* Message Buffer 56 CS Register */
#define CAN_1_ID56           CAN_1.MB[56].ID.R             /* Message Buffer 56 ID Register */
#define CAN_1_B56            CAN_1.MB[56].DATA.B           /* Message Buffer 56 B Register */
#define CAN_1_H56            CAN_1.MB[56].DATA.H           /* Message Buffer 56 H Register */
#define CAN_1_W56            CAN_1.MB[56].DATA.W           /* Message Buffer 56 W Register */
#define CAN_1_CS57           CAN_1.MB[57].CS.R             /* Message Buffer 57 CS Register */
#define CAN_1_ID57           CAN_1.MB[57].ID.R             /* Message Buffer 57 ID Register */
#define CAN_1_B57            CAN_1.MB[57].DATA.B           /* Message Buffer 57 B Register */
#define CAN_1_H57            CAN_1.MB[57].DATA.H           /* Message Buffer 57 H Register */
#define CAN_1_W57            CAN_1.MB[57].DATA.W           /* Message Buffer 57 W Register */
#define CAN_1_CS58           CAN_1.MB[58].CS.R             /* Message Buffer 58 CS Register */
#define CAN_1_ID58           CAN_1.MB[58].ID.R             /* Message Buffer 58 ID Register */
#define CAN_1_B58            CAN_1.MB[58].DATA.B           /* Message Buffer 58 B Register */
#define CAN_1_H58            CAN_1.MB[58].DATA.H           /* Message Buffer 58 H Register */
#define CAN_1_W58            CAN_1.MB[58].DATA.W           /* Message Buffer 58 W Register */
#define CAN_1_CS59           CAN_1.MB[59].CS.R             /* Message Buffer 59 CS Register */
#define CAN_1_ID59           CAN_1.MB[59].ID.R             /* Message Buffer 59 ID Register */
#define CAN_1_B59            CAN_1.MB[59].DATA.B           /* Message Buffer 59 B Register */
#define CAN_1_H59            CAN_1.MB[59].DATA.H           /* Message Buffer 59 H Register */
#define CAN_1_W59            CAN_1.MB[59].DATA.W           /* Message Buffer 59 W Register */
#define CAN_1_CS60           CAN_1.MB[60].CS.R             /* Message Buffer 60 CS Register */
#define CAN_1_ID60           CAN_1.MB[60].ID.R             /* Message Buffer 60 ID Register */
#define CAN_1_B60            CAN_1.MB[60].DATA.B           /* Message Buffer 60 B Register */
#define CAN_1_H60            CAN_1.MB[60].DATA.H           /* Message Buffer 60 H Register */
#define CAN_1_W60            CAN_1.MB[60].DATA.W           /* Message Buffer 60 W Register */
#define CAN_1_CS61           CAN_1.MB[61].CS.R             /* Message Buffer 61 CS Register */
#define CAN_1_ID61           CAN_1.MB[61].ID.R             /* Message Buffer 61 ID Register */
#define CAN_1_B61            CAN_1.MB[61].DATA.B           /* Message Buffer 61 B Register */
#define CAN_1_H61            CAN_1.MB[61].DATA.H           /* Message Buffer 61 H Register */
#define CAN_1_W61            CAN_1.MB[61].DATA.W           /* Message Buffer 61 W Register */
#define CAN_1_CS62           CAN_1.MB[62].CS.R             /* Message Buffer 62 CS Register */
#define CAN_1_ID62           CAN_1.MB[62].ID.R             /* Message Buffer 62 ID Register */
#define CAN_1_B62            CAN_1.MB[62].DATA.B           /* Message Buffer 62 B Register */
#define CAN_1_H62            CAN_1.MB[62].DATA.H           /* Message Buffer 62 H Register */
#define CAN_1_W62            CAN_1.MB[62].DATA.W           /* Message Buffer 62 W Register */
#define CAN_1_CS63           CAN_1.MB[63].CS.R             /* Message Buffer 63 CS Register */
#define CAN_1_ID63           CAN_1.MB[63].ID.R             /* Message Buffer 63 ID Register */
#define CAN_1_B63            CAN_1.MB[63].DATA.B           /* Message Buffer 63 B Register */
#define CAN_1_H63            CAN_1.MB[63].DATA.H           /* Message Buffer 63 H Register */
#define CAN_1_W63            CAN_1.MB[63].DATA.W           /* Message Buffer 63 W Register */
#define CAN_1_CS64           CAN_1.MB[64].CS.R             /* Message Buffer 64 CS Register */
#define CAN_1_ID64           CAN_1.MB[64].ID.R             /* Message Buffer 64 ID Register */
#define CAN_1_B64            CAN_1.MB[64].DATA.B           /* Message Buffer 64 B Register */
#define CAN_1_H64            CAN_1.MB[64].DATA.H           /* Message Buffer 64 H Register */
#define CAN_1_W64            CAN_1.MB[64].DATA.W           /* Message Buffer 64 W Register */
#define CAN_1_CS65           CAN_1.MB[65].CS.R             /* Message Buffer 65 CS Register */
#define CAN_1_ID65           CAN_1.MB[65].ID.R             /* Message Buffer 65 ID Register */
#define CAN_1_B65            CAN_1.MB[65].DATA.B           /* Message Buffer 65 B Register */
#define CAN_1_H65            CAN_1.MB[65].DATA.H           /* Message Buffer 65 H Register */
#define CAN_1_W65            CAN_1.MB[65].DATA.W           /* Message Buffer 65 W Register */
#define CAN_1_CS66           CAN_1.MB[66].CS.R             /* Message Buffer 66 CS Register */
#define CAN_1_ID66           CAN_1.MB[66].ID.R             /* Message Buffer 66 ID Register */
#define CAN_1_B66            CAN_1.MB[66].DATA.B           /* Message Buffer 66 B Register */
#define CAN_1_H66            CAN_1.MB[66].DATA.H           /* Message Buffer 66 H Register */
#define CAN_1_W66            CAN_1.MB[66].DATA.W           /* Message Buffer 66 W Register */
#define CAN_1_CS67           CAN_1.MB[67].CS.R             /* Message Buffer 67 CS Register */
#define CAN_1_ID67           CAN_1.MB[67].ID.R             /* Message Buffer 67 ID Register */
#define CAN_1_B67            CAN_1.MB[67].DATA.B           /* Message Buffer 67 B Register */
#define CAN_1_H67            CAN_1.MB[67].DATA.H           /* Message Buffer 67 H Register */
#define CAN_1_W67            CAN_1.MB[67].DATA.W           /* Message Buffer 67 W Register */
#define CAN_1_CS68           CAN_1.MB[68].CS.R             /* Message Buffer 68 CS Register */
#define CAN_1_ID68           CAN_1.MB[68].ID.R             /* Message Buffer 68 ID Register */
#define CAN_1_B68            CAN_1.MB[68].DATA.B           /* Message Buffer 68 B Register */
#define CAN_1_H68            CAN_1.MB[68].DATA.H           /* Message Buffer 68 H Register */
#define CAN_1_W68            CAN_1.MB[68].DATA.W           /* Message Buffer 68 W Register */
#define CAN_1_CS69           CAN_1.MB[69].CS.R             /* Message Buffer 69 CS Register */
#define CAN_1_ID69           CAN_1.MB[69].ID.R             /* Message Buffer 69 ID Register */
#define CAN_1_B69            CAN_1.MB[69].DATA.B           /* Message Buffer 69 B Register */
#define CAN_1_H69            CAN_1.MB[69].DATA.H           /* Message Buffer 69 H Register */
#define CAN_1_W69            CAN_1.MB[69].DATA.W           /* Message Buffer 69 W Register */
#define CAN_1_CS70           CAN_1.MB[70].CS.R             /* Message Buffer 70 CS Register */
#define CAN_1_ID70           CAN_1.MB[70].ID.R             /* Message Buffer 70 ID Register */
#define CAN_1_B70            CAN_1.MB[70].DATA.B           /* Message Buffer 70 B Register */
#define CAN_1_H70            CAN_1.MB[70].DATA.H           /* Message Buffer 70 H Register */
#define CAN_1_W70            CAN_1.MB[70].DATA.W           /* Message Buffer 70 W Register */
#define CAN_1_CS71           CAN_1.MB[71].CS.R             /* Message Buffer 71 CS Register */
#define CAN_1_ID71           CAN_1.MB[71].ID.R             /* Message Buffer 71 ID Register */
#define CAN_1_B71            CAN_1.MB[71].DATA.B           /* Message Buffer 71 B Register */
#define CAN_1_H71            CAN_1.MB[71].DATA.H           /* Message Buffer 71 H Register */
#define CAN_1_W71            CAN_1.MB[71].DATA.W           /* Message Buffer 71 W Register */
#define CAN_1_CS72           CAN_1.MB[72].CS.R             /* Message Buffer 72 CS Register */
#define CAN_1_ID72           CAN_1.MB[72].ID.R             /* Message Buffer 72 ID Register */
#define CAN_1_B72            CAN_1.MB[72].DATA.B           /* Message Buffer 72 B Register */
#define CAN_1_H72            CAN_1.MB[72].DATA.H           /* Message Buffer 72 H Register */
#define CAN_1_W72            CAN_1.MB[72].DATA.W           /* Message Buffer 72 W Register */
#define CAN_1_CS73           CAN_1.MB[73].CS.R             /* Message Buffer 73 CS Register */
#define CAN_1_ID73           CAN_1.MB[73].ID.R             /* Message Buffer 73 ID Register */
#define CAN_1_B73            CAN_1.MB[73].DATA.B           /* Message Buffer 73 B Register */
#define CAN_1_H73            CAN_1.MB[73].DATA.H           /* Message Buffer 73 H Register */
#define CAN_1_W73            CAN_1.MB[73].DATA.W           /* Message Buffer 73 W Register */
#define CAN_1_CS74           CAN_1.MB[74].CS.R             /* Message Buffer 74 CS Register */
#define CAN_1_ID74           CAN_1.MB[74].ID.R             /* Message Buffer 74 ID Register */
#define CAN_1_B74            CAN_1.MB[74].DATA.B           /* Message Buffer 74 B Register */
#define CAN_1_H74            CAN_1.MB[74].DATA.H           /* Message Buffer 74 H Register */
#define CAN_1_W74            CAN_1.MB[74].DATA.W           /* Message Buffer 74 W Register */
#define CAN_1_CS75           CAN_1.MB[75].CS.R             /* Message Buffer 75 CS Register */
#define CAN_1_ID75           CAN_1.MB[75].ID.R             /* Message Buffer 75 ID Register */
#define CAN_1_B75            CAN_1.MB[75].DATA.B           /* Message Buffer 75 B Register */
#define CAN_1_H75            CAN_1.MB[75].DATA.H           /* Message Buffer 75 H Register */
#define CAN_1_W75            CAN_1.MB[75].DATA.W           /* Message Buffer 75 W Register */
#define CAN_1_CS76           CAN_1.MB[76].CS.R             /* Message Buffer 76 CS Register */
#define CAN_1_ID76           CAN_1.MB[76].ID.R             /* Message Buffer 76 ID Register */
#define CAN_1_B76            CAN_1.MB[76].DATA.B           /* Message Buffer 76 B Register */
#define CAN_1_H76            CAN_1.MB[76].DATA.H           /* Message Buffer 76 H Register */
#define CAN_1_W76            CAN_1.MB[76].DATA.W           /* Message Buffer 76 W Register */
#define CAN_1_CS77           CAN_1.MB[77].CS.R             /* Message Buffer 77 CS Register */
#define CAN_1_ID77           CAN_1.MB[77].ID.R             /* Message Buffer 77 ID Register */
#define CAN_1_B77            CAN_1.MB[77].DATA.B           /* Message Buffer 77 B Register */
#define CAN_1_H77            CAN_1.MB[77].DATA.H           /* Message Buffer 77 H Register */
#define CAN_1_W77            CAN_1.MB[77].DATA.W           /* Message Buffer 77 W Register */
#define CAN_1_CS78           CAN_1.MB[78].CS.R             /* Message Buffer 78 CS Register */
#define CAN_1_ID78           CAN_1.MB[78].ID.R             /* Message Buffer 78 ID Register */
#define CAN_1_B78            CAN_1.MB[78].DATA.B           /* Message Buffer 78 B Register */
#define CAN_1_H78            CAN_1.MB[78].DATA.H           /* Message Buffer 78 H Register */
#define CAN_1_W78            CAN_1.MB[78].DATA.W           /* Message Buffer 78 W Register */
#define CAN_1_CS79           CAN_1.MB[79].CS.R             /* Message Buffer 79 CS Register */
#define CAN_1_ID79           CAN_1.MB[79].ID.R             /* Message Buffer 79 ID Register */
#define CAN_1_B79            CAN_1.MB[79].DATA.B           /* Message Buffer 79 B Register */
#define CAN_1_H79            CAN_1.MB[79].DATA.H           /* Message Buffer 79 H Register */
#define CAN_1_W79            CAN_1.MB[79].DATA.W           /* Message Buffer 79 W Register */
#define CAN_1_CS80           CAN_1.MB[80].CS.R             /* Message Buffer 80 CS Register */
#define CAN_1_ID80           CAN_1.MB[80].ID.R             /* Message Buffer 80 ID Register */
#define CAN_1_B80            CAN_1.MB[80].DATA.B           /* Message Buffer 80 B Register */
#define CAN_1_H80            CAN_1.MB[80].DATA.H           /* Message Buffer 80 H Register */
#define CAN_1_W80            CAN_1.MB[80].DATA.W           /* Message Buffer 80 W Register */
#define CAN_1_CS81           CAN_1.MB[81].CS.R             /* Message Buffer 81 CS Register */
#define CAN_1_ID81           CAN_1.MB[81].ID.R             /* Message Buffer 81 ID Register */
#define CAN_1_B81            CAN_1.MB[81].DATA.B           /* Message Buffer 81 B Register */
#define CAN_1_H81            CAN_1.MB[81].DATA.H           /* Message Buffer 81 H Register */
#define CAN_1_W81            CAN_1.MB[81].DATA.W           /* Message Buffer 81 W Register */
#define CAN_1_CS82           CAN_1.MB[82].CS.R             /* Message Buffer 82 CS Register */
#define CAN_1_ID82           CAN_1.MB[82].ID.R             /* Message Buffer 82 ID Register */
#define CAN_1_B82            CAN_1.MB[82].DATA.B           /* Message Buffer 82 B Register */
#define CAN_1_H82            CAN_1.MB[82].DATA.H           /* Message Buffer 82 H Register */
#define CAN_1_W82            CAN_1.MB[82].DATA.W           /* Message Buffer 82 W Register */
#define CAN_1_CS83           CAN_1.MB[83].CS.R             /* Message Buffer 83 CS Register */
#define CAN_1_ID83           CAN_1.MB[83].ID.R             /* Message Buffer 83 ID Register */
#define CAN_1_B83            CAN_1.MB[83].DATA.B           /* Message Buffer 83 B Register */
#define CAN_1_H83            CAN_1.MB[83].DATA.H           /* Message Buffer 83 H Register */
#define CAN_1_W83            CAN_1.MB[83].DATA.W           /* Message Buffer 83 W Register */
#define CAN_1_CS84           CAN_1.MB[84].CS.R             /* Message Buffer 84 CS Register */
#define CAN_1_ID84           CAN_1.MB[84].ID.R             /* Message Buffer 84 ID Register */
#define CAN_1_B84            CAN_1.MB[84].DATA.B           /* Message Buffer 84 B Register */
#define CAN_1_H84            CAN_1.MB[84].DATA.H           /* Message Buffer 84 H Register */
#define CAN_1_W84            CAN_1.MB[84].DATA.W           /* Message Buffer 84 W Register */
#define CAN_1_CS85           CAN_1.MB[85].CS.R             /* Message Buffer 85 CS Register */
#define CAN_1_ID85           CAN_1.MB[85].ID.R             /* Message Buffer 85 ID Register */
#define CAN_1_B85            CAN_1.MB[85].DATA.B           /* Message Buffer 85 B Register */
#define CAN_1_H85            CAN_1.MB[85].DATA.H           /* Message Buffer 85 H Register */
#define CAN_1_W85            CAN_1.MB[85].DATA.W           /* Message Buffer 85 W Register */
#define CAN_1_CS86           CAN_1.MB[86].CS.R             /* Message Buffer 86 CS Register */
#define CAN_1_ID86           CAN_1.MB[86].ID.R             /* Message Buffer 86 ID Register */
#define CAN_1_B86            CAN_1.MB[86].DATA.B           /* Message Buffer 86 B Register */
#define CAN_1_H86            CAN_1.MB[86].DATA.H           /* Message Buffer 86 H Register */
#define CAN_1_W86            CAN_1.MB[86].DATA.W           /* Message Buffer 86 W Register */
#define CAN_1_CS87           CAN_1.MB[87].CS.R             /* Message Buffer 87 CS Register */
#define CAN_1_ID87           CAN_1.MB[87].ID.R             /* Message Buffer 87 ID Register */
#define CAN_1_B87            CAN_1.MB[87].DATA.B           /* Message Buffer 87 B Register */
#define CAN_1_H87            CAN_1.MB[87].DATA.H           /* Message Buffer 87 H Register */
#define CAN_1_W87            CAN_1.MB[87].DATA.W           /* Message Buffer 87 W Register */
#define CAN_1_CS88           CAN_1.MB[88].CS.R             /* Message Buffer 88 CS Register */
#define CAN_1_ID88           CAN_1.MB[88].ID.R             /* Message Buffer 88 ID Register */
#define CAN_1_B88            CAN_1.MB[88].DATA.B           /* Message Buffer 88 B Register */
#define CAN_1_H88            CAN_1.MB[88].DATA.H           /* Message Buffer 88 H Register */
#define CAN_1_W848           CAN_1.MB[88].DATA.W           /* Message Buffer 88 W Register */
#define CAN_1_CS89           CAN_1.MB[89].CS.R             /* Message Buffer 89 CS Register */
#define CAN_1_ID89           CAN_1.MB[89].ID.R             /* Message Buffer 89 ID Register */
#define CAN_1_B89            CAN_1.MB[89].DATA.B           /* Message Buffer 89 B Register */
#define CAN_1_H89            CAN_1.MB[89].DATA.H           /* Message Buffer 89 H Register */
#define CAN_1_W89            CAN_1.MB[89].DATA.W           /* Message Buffer 89 W Register */
#define CAN_1_CS90           CAN_1.MB[90].CS.R             /* Message Buffer 90 CS Register */
#define CAN_1_ID90           CAN_1.MB[90].ID.R             /* Message Buffer 90 ID Register */
#define CAN_1_B90            CAN_1.MB[90].DATA.B           /* Message Buffer 90 B Register */
#define CAN_1_H90            CAN_1.MB[90].DATA.H           /* Message Buffer 90 H Register */
#define CAN_1_W90            CAN_1.MB[90].DATA.W           /* Message Buffer 90 W Register */
#define CAN_1_CS91           CAN_1.MB[91].CS.R             /* Message Buffer 91 CS Register */
#define CAN_1_ID91           CAN_1.MB[91].ID.R             /* Message Buffer 91 ID Register */
#define CAN_1_B91            CAN_1.MB[91].DATA.B           /* Message Buffer 91 B Register */
#define CAN_1_H91            CAN_1.MB[91].DATA.H           /* Message Buffer 91 H Register */
#define CAN_1_W91            CAN_1.MB[91].DATA.W           /* Message Buffer 91 W Register */
#define CAN_1_CS92           CAN_1.MB[92].CS.R             /* Message Buffer 92 CS Register */
#define CAN_1_ID92           CAN_1.MB[92].ID.R             /* Message Buffer 92 ID Register */
#define CAN_1_B92            CAN_1.MB[92].DATA.B           /* Message Buffer 92 B Register */
#define CAN_1_H92            CAN_1.MB[92].DATA.H           /* Message Buffer 92 H Register */
#define CAN_1_W92            CAN_1.MB[92].DATA.W           /* Message Buffer 92 W Register */
#define CAN_1_CS93           CAN_1.MB[93].CS.R             /* Message Buffer 93 CS Register */
#define CAN_1_ID93           CAN_1.MB[93].ID.R             /* Message Buffer 93 ID Register */
#define CAN_1_B93            CAN_1.MB[93].DATA.B           /* Message Buffer 93 B Register */
#define CAN_1_H93            CAN_1.MB[93].DATA.H           /* Message Buffer 93 H Register */
#define CAN_1_W93            CAN_1.MB[93].DATA.W           /* Message Buffer 93 W Register */
#define CAN_1_CS94           CAN_1.MB[94].CS.R             /* Message Buffer 94 CS Register */
#define CAN_1_ID94           CAN_1.MB[94].ID.R             /* Message Buffer 94 ID Register */
#define CAN_1_B94            CAN_1.MB[94].DATA.B           /* Message Buffer 94 B Register */
#define CAN_1_H94            CAN_1.MB[94].DATA.H           /* Message Buffer 94 H Register */
#define CAN_1_W94            CAN_1.MB[94].DATA.W           /* Message Buffer 94 W Register */
#define CAN_1_CS95           CAN_1.MB[95].CS.R             /* Message Buffer 95 CS Register */
#define CAN_1_ID95           CAN_1.MB[95].ID.R             /* Message Buffer 95 ID Register */
#define CAN_1_B95            CAN_1.MB[95].DATA.B           /* Message Buffer 95 B Register */
#define CAN_1_H95            CAN_1.MB[95].DATA.H           /* Message Buffer 95 H Register */
#define CAN_1_W95            CAN_1.MB[95].DATA.W           /* Message Buffer 95 W Register */
#define CAN_1_RXIMR0         CAN_1.RXIMR[0].R              /* Rx Individual Mask registers */
#define CAN_1_RXIMR1         CAN_1.RXIMR[1].R              /* Rx Individual Mask registers */
#define CAN_1_RXIMR2         CAN_1.RXIMR[2].R              /* Rx Individual Mask registers */
#define CAN_1_RXIMR3         CAN_1.RXIMR[3].R              /* Rx Individual Mask registers */
#define CAN_1_RXIMR4         CAN_1.RXIMR[4].R              /* Rx Individual Mask registers */
#define CAN_1_RXIMR5         CAN_1.RXIMR[5].R              /* Rx Individual Mask registers */
#define CAN_1_RXIMR6         CAN_1.RXIMR[6].R              /* Rx Individual Mask registers */
#define CAN_1_RXIMR7         CAN_1.RXIMR[7].R              /* Rx Individual Mask registers */
#define CAN_1_RXIMR8         CAN_1.RXIMR[8].R              /* Rx Individual Mask registers */
#define CAN_1_RXIMR9         CAN_1.RXIMR[9].R              /* Rx Individual Mask registers */
#define CAN_1_RXIMR10        CAN_1.RXIMR[10].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR11        CAN_1.RXIMR[11].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR12        CAN_1.RXIMR[12].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR13        CAN_1.RXIMR[13].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR14        CAN_1.RXIMR[14].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR15        CAN_1.RXIMR[15].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR16        CAN_1.RXIMR[16].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR17        CAN_1.RXIMR[17].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR18        CAN_1.RXIMR[18].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR19        CAN_1.RXIMR[19].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR20        CAN_1.RXIMR[20].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR21        CAN_1.RXIMR[21].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR22        CAN_1.RXIMR[22].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR23        CAN_1.RXIMR[23].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR24        CAN_1.RXIMR[24].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR25        CAN_1.RXIMR[25].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR26        CAN_1.RXIMR[26].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR27        CAN_1.RXIMR[27].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR28        CAN_1.RXIMR[28].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR29        CAN_1.RXIMR[29].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR30        CAN_1.RXIMR[30].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR31        CAN_1.RXIMR[31].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR32        CAN_1.RXIMR[32].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR33        CAN_1.RXIMR[33].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR34        CAN_1.RXIMR[34].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR35        CAN_1.RXIMR[35].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR36        CAN_1.RXIMR[36].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR37        CAN_1.RXIMR[37].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR38        CAN_1.RXIMR[38].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR39        CAN_1.RXIMR[39].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR40        CAN_1.RXIMR[40].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR41        CAN_1.RXIMR[41].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR42        CAN_1.RXIMR[42].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR43        CAN_1.RXIMR[43].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR44        CAN_1.RXIMR[44].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR45        CAN_1.RXIMR[45].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR46        CAN_1.RXIMR[46].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR47        CAN_1.RXIMR[47].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR48        CAN_1.RXIMR[48].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR49        CAN_1.RXIMR[49].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR50        CAN_1.RXIMR[50].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR51        CAN_1.RXIMR[51].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR52        CAN_1.RXIMR[52].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR53        CAN_1.RXIMR[53].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR54        CAN_1.RXIMR[54].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR55        CAN_1.RXIMR[55].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR56        CAN_1.RXIMR[56].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR57        CAN_1.RXIMR[57].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR58        CAN_1.RXIMR[58].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR59        CAN_1.RXIMR[59].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR60        CAN_1.RXIMR[60].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR61        CAN_1.RXIMR[61].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR62        CAN_1.RXIMR[62].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR63        CAN_1.RXIMR[63].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR64        CAN_1.RXIMR[64].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR65        CAN_1.RXIMR[65].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR66        CAN_1.RXIMR[66].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR67        CAN_1.RXIMR[67].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR68        CAN_1.RXIMR[68].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR69        CAN_1.RXIMR[69].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR70        CAN_1.RXIMR[70].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR71        CAN_1.RXIMR[71].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR72        CAN_1.RXIMR[72].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR73        CAN_1.RXIMR[73].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR74        CAN_1.RXIMR[74].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR75        CAN_1.RXIMR[75].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR76        CAN_1.RXIMR[76].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR77        CAN_1.RXIMR[77].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR78        CAN_1.RXIMR[78].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR79        CAN_1.RXIMR[79].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR80        CAN_1.RXIMR[80].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR81        CAN_1.RXIMR[81].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR82        CAN_1.RXIMR[82].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR83        CAN_1.RXIMR[83].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR84        CAN_1.RXIMR[84].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR85        CAN_1.RXIMR[85].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR86        CAN_1.RXIMR[86].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR87        CAN_1.RXIMR[87].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR88        CAN_1.RXIMR[88].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR89        CAN_1.RXIMR[89].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR90        CAN_1.RXIMR[90].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR91        CAN_1.RXIMR[91].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR92        CAN_1.RXIMR[92].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR93        CAN_1.RXIMR[93].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR94        CAN_1.RXIMR[94].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR95        CAN_1.RXIMR[95].R             /* Rx Individual Mask registers */
#define CAN_1_MECR           CAN_1.MECR.R                  /* Memory Error Control register */
#define CAN_1_ERRIAR         CAN_1.ERRIAR.R                /* Error Injection Address register */
#define CAN_1_ERRIDPR        CAN_1.ERRIDPR.R               /* Error Injection Data Pattern register */
#define CAN_1_ERRIPPR        CAN_1.ERRIPPR.R               /* Error Injection Parity Pattern register */
#define CAN_1_RERRAR         CAN_1.RERRAR.R                /* Error Report Address register */
#define CAN_1_RERRDR         CAN_1.RERRDR.R                /* Error Report Data register */
#define CAN_1_RERRSYNR       CAN_1.RERRSYNR.R              /* Error Report Syndrome register */
#define CAN_1_ERRSR          CAN_1.ERRSR.R                 /* Error Status register */
#define CAN_1_FDCTRL         CAN_1.FDCTRL.R                /* CAN FD Control register */
#define CAN_1_FDCBT          CAN_1.FDCBT.R                 /* CAN FD Bit Timing register */
#define CAN_1_FDCRC          CAN_1.FDCRC.R                 /* CAN FD CRC register */
#define CAN_1_HR_TIME_STAMP0 CAN_1.HR_TIME_STAMP[0].R      /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP1 CAN_1.HR_TIME_STAMP[1].R      /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP2 CAN_1.HR_TIME_STAMP[2].R      /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP3 CAN_1.HR_TIME_STAMP[3].R      /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP4 CAN_1.HR_TIME_STAMP[4].R      /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP5 CAN_1.HR_TIME_STAMP[5].R      /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP6 CAN_1.HR_TIME_STAMP[6].R      /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP7 CAN_1.HR_TIME_STAMP[7].R      /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP8 CAN_1.HR_TIME_STAMP[8].R      /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP9 CAN_1.HR_TIME_STAMP[9].R      /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP10 CAN_1.HR_TIME_STAMP[10].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP11 CAN_1.HR_TIME_STAMP[11].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP12 CAN_1.HR_TIME_STAMP[12].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP13 CAN_1.HR_TIME_STAMP[13].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP14 CAN_1.HR_TIME_STAMP[14].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP15 CAN_1.HR_TIME_STAMP[15].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP16 CAN_1.HR_TIME_STAMP[16].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP17 CAN_1.HR_TIME_STAMP[17].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP18 CAN_1.HR_TIME_STAMP[18].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP19 CAN_1.HR_TIME_STAMP[19].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP20 CAN_1.HR_TIME_STAMP[20].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP21 CAN_1.HR_TIME_STAMP[21].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP22 CAN_1.HR_TIME_STAMP[22].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP23 CAN_1.HR_TIME_STAMP[23].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP24 CAN_1.HR_TIME_STAMP[24].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP25 CAN_1.HR_TIME_STAMP[25].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP26 CAN_1.HR_TIME_STAMP[26].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP27 CAN_1.HR_TIME_STAMP[27].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP28 CAN_1.HR_TIME_STAMP[28].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP29 CAN_1.HR_TIME_STAMP[29].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP30 CAN_1.HR_TIME_STAMP[30].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP31 CAN_1.HR_TIME_STAMP[31].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP32 CAN_1.HR_TIME_STAMP[32].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP33 CAN_1.HR_TIME_STAMP[33].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP34 CAN_1.HR_TIME_STAMP[34].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP35 CAN_1.HR_TIME_STAMP[35].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP36 CAN_1.HR_TIME_STAMP[36].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP37 CAN_1.HR_TIME_STAMP[37].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP38 CAN_1.HR_TIME_STAMP[38].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP39 CAN_1.HR_TIME_STAMP[39].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP40 CAN_1.HR_TIME_STAMP[40].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP41 CAN_1.HR_TIME_STAMP[41].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP42 CAN_1.HR_TIME_STAMP[42].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP43 CAN_1.HR_TIME_STAMP[43].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP44 CAN_1.HR_TIME_STAMP[44].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP45 CAN_1.HR_TIME_STAMP[45].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP46 CAN_1.HR_TIME_STAMP[46].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP47 CAN_1.HR_TIME_STAMP[47].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP48 CAN_1.HR_TIME_STAMP[48].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP49 CAN_1.HR_TIME_STAMP[49].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP50 CAN_1.HR_TIME_STAMP[50].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP51 CAN_1.HR_TIME_STAMP[51].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP52 CAN_1.HR_TIME_STAMP[52].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP53 CAN_1.HR_TIME_STAMP[53].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP54 CAN_1.HR_TIME_STAMP[54].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP55 CAN_1.HR_TIME_STAMP[55].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP56 CAN_1.HR_TIME_STAMP[56].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP57 CAN_1.HR_TIME_STAMP[57].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP58 CAN_1.HR_TIME_STAMP[58].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP59 CAN_1.HR_TIME_STAMP[59].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP60 CAN_1.HR_TIME_STAMP[60].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP61 CAN_1.HR_TIME_STAMP[61].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP62 CAN_1.HR_TIME_STAMP[62].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP63 CAN_1.HR_TIME_STAMP[63].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP64 CAN_1.HR_TIME_STAMP[64].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP65 CAN_1.HR_TIME_STAMP[65].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP66 CAN_1.HR_TIME_STAMP[66].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP67 CAN_1.HR_TIME_STAMP[67].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP68 CAN_1.HR_TIME_STAMP[68].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP69 CAN_1.HR_TIME_STAMP[69].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP70 CAN_1.HR_TIME_STAMP[70].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP71 CAN_1.HR_TIME_STAMP[71].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP72 CAN_1.HR_TIME_STAMP[72].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP73 CAN_1.HR_TIME_STAMP[73].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP74 CAN_1.HR_TIME_STAMP[74].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP75 CAN_1.HR_TIME_STAMP[75].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP76 CAN_1.HR_TIME_STAMP[76].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP77 CAN_1.HR_TIME_STAMP[77].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP78 CAN_1.HR_TIME_STAMP[78].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP79 CAN_1.HR_TIME_STAMP[79].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP80 CAN_1.HR_TIME_STAMP[80].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP81 CAN_1.HR_TIME_STAMP[81].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP82 CAN_1.HR_TIME_STAMP[82].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP83 CAN_1.HR_TIME_STAMP[83].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP84 CAN_1.HR_TIME_STAMP[84].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP85 CAN_1.HR_TIME_STAMP[85].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP86 CAN_1.HR_TIME_STAMP[86].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP87 CAN_1.HR_TIME_STAMP[87].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP88 CAN_1.HR_TIME_STAMP[88].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP89 CAN_1.HR_TIME_STAMP[89].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP90 CAN_1.HR_TIME_STAMP[90].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP91 CAN_1.HR_TIME_STAMP[91].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP92 CAN_1.HR_TIME_STAMP[92].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP93 CAN_1.HR_TIME_STAMP[93].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP94 CAN_1.HR_TIME_STAMP[94].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP95 CAN_1.HR_TIME_STAMP[95].R    /* High Resolution Time Stamp */

#define CAN_2_MCR            CAN_2.MCR.R                   /* Module Configuration register */
#define CAN_2_CTRL1          CAN_2.CTRL1.R                 /* Control 1 register */
#define CAN_2_TIMER          CAN_2.TIMER.R                 /* Free Running Timer */
#define CAN_2_RXMGMASK       CAN_2.RXMGMASK.R              /* Rx Mailboxes Global Mask register */
#define CAN_2_RX14MASK       CAN_2.RX14MASK.R              /* Rx 14 Mask register */
#define CAN_2_RX15MASK       CAN_2.RX15MASK.R              /* Rx 15 Mask register */
#define CAN_2_ECR            CAN_2.ECR.R                   /* Error Counter */
#define CAN_2_ESR1           CAN_2.ESR1.R                  /* Error and Status 1 register */
#define CAN_2_IMASK2         CAN_2.IMASK2.R                /* Interrupt Masks 2 register */
#define CAN_2_IMASK1         CAN_2.IMASK1.R                /* Interrupt Masks 1 register */
#define CAN_2_IFLAG2         CAN_2.IFLAG2.R                /* Interrupt Flags 2 register */
#define CAN_2_IFLAG1         CAN_2.IFLAG1.R                /* Interrupt Flags 1 register */
#define CAN_2_CTRL2          CAN_2.CTRL2.R                 /* Control 2 register */
#define CAN_2_ESR2           CAN_2.ESR2.R                  /* Error and Status 2 register */
#define CAN_2_CRCR           CAN_2.CRCR.R                  /* CRC register */
#define CAN_2_RXFGMASK       CAN_2.RXFGMASK.R              /* Rx FIFO Global Mask register */
#define CAN_2_RXFIR          CAN_2.RXFIR.R                 /* Rx FIFO Information register */
#define CAN_2_CBT            CAN_2.CBT.R                   /* CAN Bit Timing register */
#define CAN_2_IMASK3         CAN_2.IMASK3.R                /* Interrupt Masks 3 register */
#define CAN_2_IFLAG3         CAN_2.IFLAG3.R                /* Interrupt Flags 3 register */
#define CAN_2_ID0            CAN_2.MB[0].ID.R              /* Message Buffer 0 ID Register */
#define CAN_2_B0             CAN_2.MB[0].DATA.B            /* Message Buffer 0 B Register */
#define CAN_2_H0             CAN_2.MB[0].DATA.H            /* Message Buffer 0 H Register */
#define CAN_2_W0             CAN_2.MB[0].DATA.W            /* Message Buffer 0 W Register */
#define CAN_2_CS1            CAN_2.MB[1].CS.R              /* Message Buffer 1 CS Register */
#define CAN_2_ID1            CAN_2.MB[1].ID.R              /* Message Buffer 1 ID Register */
#define CAN_2_B1             CAN_2.MB[1].DATA.B            /* Message Buffer 1 B Register */
#define CAN_2_H1             CAN_2.MB[1].DATA.H            /* Message Buffer 1 H Register */
#define CAN_2_W1             CAN_2.MB[1].DATA.W            /* Message Buffer 1 W Register */
#define CAN_2_CS2            CAN_2.MB[2].CS.R              /* Message Buffer 2 CS Register */
#define CAN_2_ID2            CAN_2.MB[2].ID.R              /* Message Buffer 2 ID Register */
#define CAN_2_B2             CAN_2.MB[2].DATA.B            /* Message Buffer 2 B Register */
#define CAN_2_H2             CAN_2.MB[2].DATA.H            /* Message Buffer 2 H Register */
#define CAN_2_W2             CAN_2.MB[2].DATA.W            /* Message Buffer 2 W Register */
#define CAN_2_CS3            CAN_2.MB[3].CS.R              /* Message Buffer 3 CS Register */
#define CAN_2_ID3            CAN_2.MB[3].ID.R              /* Message Buffer 3 ID Register */
#define CAN_2_B3             CAN_2.MB[3].DATA.B            /* Message Buffer 3 B Register */
#define CAN_2_H3             CAN_2.MB[3].DATA.H            /* Message Buffer 3 H Register */
#define CAN_2_W3             CAN_2.MB[3].DATA.W            /* Message Buffer 3 W Register */
#define CAN_2_CS4            CAN_2.MB[4].CS.R              /* Message Buffer 4 CS Register */
#define CAN_2_ID4            CAN_2.MB[4].ID.R              /* Message Buffer 4 ID Register */
#define CAN_2_B4             CAN_2.MB[4].DATA.B            /* Message Buffer 4 B Register */
#define CAN_2_H4             CAN_2.MB[4].DATA.H            /* Message Buffer 4 H Register */
#define CAN_2_W4             CAN_2.MB[4].DATA.W            /* Message Buffer 4 W Register */
#define CAN_2_CS5            CAN_2.MB[5].CS.R              /* Message Buffer 5 CS Register */
#define CAN_2_ID5            CAN_2.MB[5].ID.R              /* Message Buffer 5 ID Register */
#define CAN_2_B5             CAN_2.MB[5].DATA.B            /* Message Buffer 5 B Register */
#define CAN_2_H5             CAN_2.MB[5].DATA.H            /* Message Buffer 5 H Register */
#define CAN_2_W5             CAN_2.MB[5].DATA.W            /* Message Buffer 5 W Register */
#define CAN_2_CS6            CAN_2.MB[6].CS.R              /* Message Buffer 6 CS Register */
#define CAN_2_ID6            CAN_2.MB[6].ID.R              /* Message Buffer 6 ID Register */
#define CAN_2_B6             CAN_2.MB[6].DATA.B            /* Message Buffer 6 B Register */
#define CAN_2_H6             CAN_2.MB[6].DATA.H            /* Message Buffer 6 H Register */
#define CAN_2_W6             CAN_2.MB[6].DATA.W            /* Message Buffer 6 W Register */
#define CAN_2_CS7            CAN_2.MB[7].CS.R              /* Message Buffer 7 CS Register */
#define CAN_2_ID7            CAN_2.MB[7].ID.R              /* Message Buffer 7 ID Register */
#define CAN_2_B7             CAN_2.MB[7].DATA.B            /* Message Buffer 7 B Register */
#define CAN_2_H7             CAN_2.MB[7].DATA.H            /* Message Buffer 7 H Register */
#define CAN_2_W7             CAN_2.MB[7].DATA.W            /* Message Buffer 7 W Register */
#define CAN_2_CS8            CAN_2.MB[8].CS.R              /* Message Buffer 8 CS Register */
#define CAN_2_ID8            CAN_2.MB[8].ID.R              /* Message Buffer 8 ID Register */
#define CAN_2_B8             CAN_2.MB[8].DATA.B            /* Message Buffer 8 B Register */
#define CAN_2_H8             CAN_2.MB[8].DATA.H            /* Message Buffer 8 H Register */
#define CAN_2_W8             CAN_2.MB[8].DATA.W            /* Message Buffer 8 W Register */
#define CAN_2_CS9            CAN_2.MB[9].CS.R              /* Message Buffer 9 CS Register */
#define CAN_2_ID9            CAN_2.MB[9].ID.R              /* Message Buffer 9 ID Register */
#define CAN_2_B9             CAN_2.MB[9].DATA.B            /* Message Buffer 9 B Register */
#define CAN_2_H9             CAN_2.MB[9].DATA.H            /* Message Buffer 9 H Register */
#define CAN_2_W9             CAN_2.MB[9].DATA.W            /* Message Buffer 9 W Register */
#define CAN_2_CS10           CAN_2.MB[10].CS.R             /* Message Buffer 10 CS Register */
#define CAN_2_ID10           CAN_2.MB[10].ID.R             /* Message Buffer 10 ID Register */
#define CAN_2_B10            CAN_2.MB[10].DATA.B           /* Message Buffer 10 B Register */
#define CAN_2_H10            CAN_2.MB[10].DATA.H           /* Message Buffer 10 H Register */
#define CAN_2_W10            CAN_2.MB[10].DATA.W           /* Message Buffer 10 W Register */
#define CAN_2_CS11           CAN_2.MB[11].CS.R             /* Message Buffer 11 CS Register */
#define CAN_2_ID11           CAN_2.MB[11].ID.R             /* Message Buffer 11 ID Register */
#define CAN_2_B11            CAN_2.MB[11].DATA.B           /* Message Buffer 11 B Register */
#define CAN_2_H11            CAN_2.MB[11].DATA.H           /* Message Buffer 11 H Register */
#define CAN_2_W11            CAN_2.MB[11].DATA.W           /* Message Buffer 11 W Register */
#define CAN_2_CS12           CAN_2.MB[12].CS.R             /* Message Buffer 12 CS Register */
#define CAN_2_ID12           CAN_2.MB[12].ID.R             /* Message Buffer 12 ID Register */
#define CAN_2_B12            CAN_2.MB[12].DATA.B           /* Message Buffer 12 B Register */
#define CAN_2_H12            CAN_2.MB[12].DATA.H           /* Message Buffer 12 H Register */
#define CAN_2_W12            CAN_2.MB[12].DATA.W           /* Message Buffer 12 W Register */
#define CAN_2_CS13           CAN_2.MB[13].CS.R             /* Message Buffer 13 CS Register */
#define CAN_2_ID13           CAN_2.MB[13].ID.R             /* Message Buffer 13 ID Register */
#define CAN_2_B13            CAN_2.MB[13].DATA.B           /* Message Buffer 13 B Register */
#define CAN_2_H13            CAN_2.MB[13].DATA.H           /* Message Buffer 13 H Register */
#define CAN_2_W13            CAN_2.MB[13].DATA.W           /* Message Buffer 13 W Register */
#define CAN_2_CS14           CAN_2.MB[14].CS.R             /* Message Buffer 14 CS Register */
#define CAN_2_ID14           CAN_2.MB[14].ID.R             /* Message Buffer 14 ID Register */
#define CAN_2_B14            CAN_2.MB[14].DATA.B           /* Message Buffer 14 B Register */
#define CAN_2_H14            CAN_2.MB[14].DATA.H           /* Message Buffer 14 H Register */
#define CAN_2_W14            CAN_2.MB[14].DATA.W           /* Message Buffer 14 W Register */
#define CAN_2_CS15           CAN_2.MB[15].CS.R             /* Message Buffer 15 CS Register */
#define CAN_2_ID15           CAN_2.MB[15].ID.R             /* Message Buffer 15 ID Register */
#define CAN_2_B15            CAN_2.MB[15].DATA.B           /* Message Buffer 15 B Register */
#define CAN_2_H15            CAN_2.MB[15].DATA.H           /* Message Buffer 15 H Register */
#define CAN_2_W15            CAN_2.MB[15].DATA.W           /* Message Buffer 15 W Register */
#define CAN_2_CS16           CAN_2.MB[16].CS.R             /* Message Buffer 16 CS Register */
#define CAN_2_ID16           CAN_2.MB[16].ID.R             /* Message Buffer 16 ID Register */
#define CAN_2_B16            CAN_2.MB[16].DATA.B           /* Message Buffer 16 B Register */
#define CAN_2_H16            CAN_2.MB[16].DATA.H           /* Message Buffer 16 H Register */
#define CAN_2_W16            CAN_2.MB[16].DATA.W           /* Message Buffer 16 W Register */
#define CAN_2_CS17           CAN_2.MB[17].CS.R             /* Message Buffer 17 CS Register */
#define CAN_2_ID17           CAN_2.MB[17].ID.R             /* Message Buffer 17 ID Register */
#define CAN_2_B17            CAN_2.MB[17].DATA.B           /* Message Buffer 17 B Register */
#define CAN_2_H17            CAN_2.MB[17].DATA.H           /* Message Buffer 17 H Register */
#define CAN_2_W17            CAN_2.MB[17].DATA.W           /* Message Buffer 17 W Register */
#define CAN_2_CS18           CAN_2.MB[18].CS.R             /* Message Buffer 18 CS Register */
#define CAN_2_ID18           CAN_2.MB[18].ID.R             /* Message Buffer 18 ID Register */
#define CAN_2_B18            CAN_2.MB[18].DATA.B           /* Message Buffer 18 B Register */
#define CAN_2_H18            CAN_2.MB[18].DATA.H           /* Message Buffer 18 H Register */
#define CAN_2_W18            CAN_2.MB[18].DATA.W           /* Message Buffer 18 W Register */
#define CAN_2_CS19           CAN_2.MB[19].CS.R             /* Message Buffer 19 CS Register */
#define CAN_2_ID19           CAN_2.MB[19].ID.R             /* Message Buffer 19 ID Register */
#define CAN_2_B19            CAN_2.MB[19].DATA.B           /* Message Buffer 19 B Register */
#define CAN_2_H19            CAN_2.MB[19].DATA.H           /* Message Buffer 19 H Register */
#define CAN_2_W19            CAN_2.MB[19].DATA.W           /* Message Buffer 19 W Register */
#define CAN_2_CS20           CAN_2.MB[20].CS.R             /* Message Buffer 20 CS Register */
#define CAN_2_ID20           CAN_2.MB[20].ID.R             /* Message Buffer 20 ID Register */
#define CAN_2_B20            CAN_2.MB[20].DATA.B           /* Message Buffer 20 B Register */
#define CAN_2_H20            CAN_2.MB[20].DATA.H           /* Message Buffer 20 H Register */
#define CAN_2_W20            CAN_2.MB[20].DATA.W           /* Message Buffer 20 W Register */
#define CAN_2_CS21           CAN_2.MB[21].CS.R             /* Message Buffer 21 CS Register */
#define CAN_2_ID21           CAN_2.MB[21].ID.R             /* Message Buffer 21 ID Register */
#define CAN_2_B21            CAN_2.MB[21].DATA.B           /* Message Buffer 21 B Register */
#define CAN_2_H21            CAN_2.MB[21].DATA.H           /* Message Buffer 21 H Register */
#define CAN_2_W21            CAN_2.MB[21].DATA.W           /* Message Buffer 21 W Register */
#define CAN_2_CS22           CAN_2.MB[22].CS.R             /* Message Buffer 22 CS Register */
#define CAN_2_ID22           CAN_2.MB[22].ID.R             /* Message Buffer 22 ID Register */
#define CAN_2_B22            CAN_2.MB[22].DATA.B           /* Message Buffer 22 B Register */
#define CAN_2_H22            CAN_2.MB[22].DATA.H           /* Message Buffer 22 H Register */
#define CAN_2_W22            CAN_2.MB[22].DATA.W           /* Message Buffer 22 W Register */
#define CAN_2_CS23           CAN_2.MB[23].CS.R             /* Message Buffer 23 CS Register */
#define CAN_2_ID23           CAN_2.MB[23].ID.R             /* Message Buffer 23 ID Register */
#define CAN_2_B23            CAN_2.MB[23].DATA.B           /* Message Buffer 23 B Register */
#define CAN_2_H23            CAN_2.MB[23].DATA.H           /* Message Buffer 23 H Register */
#define CAN_2_W23            CAN_2.MB[23].DATA.W           /* Message Buffer 23 W Register */
#define CAN_2_CS24           CAN_2.MB[24].CS.R             /* Message Buffer 24 CS Register */
#define CAN_2_ID24           CAN_2.MB[24].ID.R             /* Message Buffer 24 ID Register */
#define CAN_2_B24            CAN_2.MB[24].DATA.B           /* Message Buffer 24 B Register */
#define CAN_2_H24            CAN_2.MB[24].DATA.H           /* Message Buffer 24 H Register */
#define CAN_2_W24            CAN_2.MB[24].DATA.W           /* Message Buffer 24 W Register */
#define CAN_2_CS25           CAN_2.MB[25].CS.R             /* Message Buffer 25 CS Register */
#define CAN_2_ID25           CAN_2.MB[25].ID.R             /* Message Buffer 25 ID Register */
#define CAN_2_B25            CAN_2.MB[25].DATA.B           /* Message Buffer 25 B Register */
#define CAN_2_H25            CAN_2.MB[25].DATA.H           /* Message Buffer 25 H Register */
#define CAN_2_W25            CAN_2.MB[25].DATA.W           /* Message Buffer 25 W Register */
#define CAN_2_CS26           CAN_2.MB[26].CS.R             /* Message Buffer 26 CS Register */
#define CAN_2_ID26           CAN_2.MB[26].ID.R             /* Message Buffer 26 ID Register */
#define CAN_2_B26            CAN_2.MB[26].DATA.B           /* Message Buffer 26 B Register */
#define CAN_2_H26            CAN_2.MB[26].DATA.H           /* Message Buffer 26 H Register */
#define CAN_2_W26            CAN_2.MB[26].DATA.W           /* Message Buffer 26 W Register */
#define CAN_2_CS27           CAN_2.MB[27].CS.R             /* Message Buffer 27 CS Register */
#define CAN_2_ID27           CAN_2.MB[27].ID.R             /* Message Buffer 27 ID Register */
#define CAN_2_B27            CAN_2.MB[27].DATA.B           /* Message Buffer 27 B Register */
#define CAN_2_H27            CAN_2.MB[27].DATA.H           /* Message Buffer 27 H Register */
#define CAN_2_W27            CAN_2.MB[27].DATA.W           /* Message Buffer 27 W Register */
#define CAN_2_CS28           CAN_2.MB[28].CS.R             /* Message Buffer 28 CS Register */
#define CAN_2_ID28           CAN_2.MB[28].ID.R             /* Message Buffer 28 ID Register */
#define CAN_2_B28            CAN_2.MB[28].DATA.B           /* Message Buffer 28 B Register */
#define CAN_2_H28            CAN_2.MB[28].DATA.H           /* Message Buffer 28 H Register */
#define CAN_2_W28            CAN_2.MB[28].DATA.W           /* Message Buffer 28 W Register */
#define CAN_2_CS29           CAN_2.MB[29].CS.R             /* Message Buffer 29 CS Register */
#define CAN_2_ID29           CAN_2.MB[29].ID.R             /* Message Buffer 29 ID Register */
#define CAN_2_B29            CAN_2.MB[29].DATA.B           /* Message Buffer 29 B Register */
#define CAN_2_H29            CAN_2.MB[29].DATA.H           /* Message Buffer 29 H Register */
#define CAN_2_W29            CAN_2.MB[29].DATA.W           /* Message Buffer 29 W Register */
#define CAN_2_CS30           CAN_2.MB[30].CS.R             /* Message Buffer 30 CS Register */
#define CAN_2_ID30           CAN_2.MB[30].ID.R             /* Message Buffer 30 ID Register */
#define CAN_2_B30            CAN_2.MB[30].DATA.B           /* Message Buffer 30 B Register */
#define CAN_2_H30            CAN_2.MB[30].DATA.H           /* Message Buffer 30 H Register */
#define CAN_2_W30            CAN_2.MB[30].DATA.W           /* Message Buffer 30 W Register */
#define CAN_2_CS31           CAN_2.MB[31].CS.R             /* Message Buffer 31 CS Register */
#define CAN_2_ID31           CAN_2.MB[31].ID.R             /* Message Buffer 31 ID Register */
#define CAN_2_B31            CAN_2.MB[31].DATA.B           /* Message Buffer 31 B Register */
#define CAN_2_H31            CAN_2.MB[31].DATA.H           /* Message Buffer 31 H Register */
#define CAN_2_W31            CAN_2.MB[31].DATA.W           /* Message Buffer 31 W Register */
#define CAN_2_CS32           CAN_2.MB[32].CS.R             /* Message Buffer 32 CS Register */
#define CAN_2_ID32           CAN_2.MB[32].ID.R             /* Message Buffer 32 ID Register */
#define CAN_2_B32            CAN_2.MB[32].DATA.B           /* Message Buffer 32 B Register */
#define CAN_2_H32            CAN_2.MB[32].DATA.H           /* Message Buffer 32 H Register */
#define CAN_2_W32            CAN_2.MB[32].DATA.W           /* Message Buffer 32 W Register */
#define CAN_2_CS33           CAN_2.MB[33].CS.R             /* Message Buffer 33 CS Register */
#define CAN_2_ID33           CAN_2.MB[33].ID.R             /* Message Buffer 33 ID Register */
#define CAN_2_B33            CAN_2.MB[33].DATA.B           /* Message Buffer 33 B Register */
#define CAN_2_H33            CAN_2.MB[33].DATA.H           /* Message Buffer 33 H Register */
#define CAN_2_W33            CAN_2.MB[33].DATA.W           /* Message Buffer 33 W Register */
#define CAN_2_CS34           CAN_2.MB[34].CS.R             /* Message Buffer 34 CS Register */
#define CAN_2_ID34           CAN_2.MB[34].ID.R             /* Message Buffer 34 ID Register */
#define CAN_2_B34            CAN_2.MB[34].DATA.B           /* Message Buffer 34 B Register */
#define CAN_2_H34            CAN_2.MB[34].DATA.H           /* Message Buffer 34 H Register */
#define CAN_2_W34            CAN_2.MB[34].DATA.W           /* Message Buffer 34 W Register */
#define CAN_2_CS35           CAN_2.MB[35].CS.R             /* Message Buffer 35 CS Register */
#define CAN_2_ID35           CAN_2.MB[35].ID.R             /* Message Buffer 35 ID Register */
#define CAN_2_B35            CAN_2.MB[35].DATA.B           /* Message Buffer 35 B Register */
#define CAN_2_H35            CAN_2.MB[35].DATA.H           /* Message Buffer 35 H Register */
#define CAN_2_W35            CAN_2.MB[35].DATA.W           /* Message Buffer 35 W Register */
#define CAN_2_CS36           CAN_2.MB[36].CS.R             /* Message Buffer 36 CS Register */
#define CAN_2_ID36           CAN_2.MB[36].ID.R             /* Message Buffer 36 ID Register */
#define CAN_2_B36            CAN_2.MB[36].DATA.B           /* Message Buffer 36 B Register */
#define CAN_2_H36            CAN_2.MB[36].DATA.H           /* Message Buffer 36 H Register */
#define CAN_2_W36            CAN_2.MB[36].DATA.W           /* Message Buffer 36 W Register */
#define CAN_2_CS37           CAN_2.MB[37].CS.R             /* Message Buffer 37 CS Register */
#define CAN_2_ID37           CAN_2.MB[37].ID.R             /* Message Buffer 37 ID Register */
#define CAN_2_B37            CAN_2.MB[37].DATA.B           /* Message Buffer 37 B Register */
#define CAN_2_H37            CAN_2.MB[37].DATA.H           /* Message Buffer 37 H Register */
#define CAN_2_W37            CAN_2.MB[37].DATA.W           /* Message Buffer 37 W Register */
#define CAN_2_CS38           CAN_2.MB[38].CS.R             /* Message Buffer 38 CS Register */
#define CAN_2_ID38           CAN_2.MB[38].ID.R             /* Message Buffer 38 ID Register */
#define CAN_2_B38            CAN_2.MB[38].DATA.B           /* Message Buffer 38 B Register */
#define CAN_2_H38            CAN_2.MB[38].DATA.H           /* Message Buffer 38 H Register */
#define CAN_2_W38            CAN_2.MB[38].DATA.W           /* Message Buffer 38 W Register */
#define CAN_2_CS39           CAN_2.MB[39].CS.R             /* Message Buffer 39 CS Register */
#define CAN_2_ID39           CAN_2.MB[39].ID.R             /* Message Buffer 39 ID Register */
#define CAN_2_B39            CAN_2.MB[39].DATA.B           /* Message Buffer 39 B Register */
#define CAN_2_H39            CAN_2.MB[39].DATA.H           /* Message Buffer 39 H Register */
#define CAN_2_W39            CAN_2.MB[39].DATA.W           /* Message Buffer 39 W Register */
#define CAN_2_CS40           CAN_2.MB[40].CS.R             /* Message Buffer 40 CS Register */
#define CAN_2_ID40           CAN_2.MB[40].ID.R             /* Message Buffer 40 ID Register */
#define CAN_2_B40            CAN_2.MB[40].DATA.B           /* Message Buffer 40 B Register */
#define CAN_2_H40            CAN_2.MB[40].DATA.H           /* Message Buffer 40 H Register */
#define CAN_2_W40            CAN_2.MB[40].DATA.W           /* Message Buffer 40 W Register */
#define CAN_2_CS41           CAN_2.MB[41].CS.R             /* Message Buffer 41 CS Register */
#define CAN_2_ID41           CAN_2.MB[41].ID.R             /* Message Buffer 41 ID Register */
#define CAN_2_B41            CAN_2.MB[41].DATA.B           /* Message Buffer 41 B Register */
#define CAN_2_H41            CAN_2.MB[41].DATA.H           /* Message Buffer 41 H Register */
#define CAN_2_W41            CAN_2.MB[41].DATA.W           /* Message Buffer 41 W Register */
#define CAN_2_CS42           CAN_2.MB[42].CS.R             /* Message Buffer 42 CS Register */
#define CAN_2_ID42           CAN_2.MB[42].ID.R             /* Message Buffer 42 ID Register */
#define CAN_2_B42            CAN_2.MB[42].DATA.B           /* Message Buffer 42 B Register */
#define CAN_2_H42            CAN_2.MB[42].DATA.H           /* Message Buffer 42 H Register */
#define CAN_2_W42            CAN_2.MB[42].DATA.W           /* Message Buffer 42 W Register */
#define CAN_2_CS43           CAN_2.MB[43].CS.R             /* Message Buffer 43 CS Register */
#define CAN_2_ID43           CAN_2.MB[43].ID.R             /* Message Buffer 43 ID Register */
#define CAN_2_B43            CAN_2.MB[43].DATA.B           /* Message Buffer 43 B Register */
#define CAN_2_H43            CAN_2.MB[43].DATA.H           /* Message Buffer 43 H Register */
#define CAN_2_W43            CAN_2.MB[43].DATA.W           /* Message Buffer 43 W Register */
#define CAN_2_CS44           CAN_2.MB[44].CS.R             /* Message Buffer 44 CS Register */
#define CAN_2_ID44           CAN_2.MB[44].ID.R             /* Message Buffer 44 ID Register */
#define CAN_2_B44            CAN_2.MB[44].DATA.B           /* Message Buffer 44 B Register */
#define CAN_2_H44            CAN_2.MB[44].DATA.H           /* Message Buffer 44 H Register */
#define CAN_2_W44            CAN_2.MB[44].DATA.W           /* Message Buffer 44 W Register */
#define CAN_2_CS45           CAN_2.MB[45].CS.R             /* Message Buffer 45 CS Register */
#define CAN_2_ID45           CAN_2.MB[45].ID.R             /* Message Buffer 45 ID Register */
#define CAN_2_B45            CAN_2.MB[45].DATA.B           /* Message Buffer 45 B Register */
#define CAN_2_H45            CAN_2.MB[45].DATA.H           /* Message Buffer 45 H Register */
#define CAN_2_W45            CAN_2.MB[45].DATA.W           /* Message Buffer 45 W Register */
#define CAN_2_CS46           CAN_2.MB[46].CS.R             /* Message Buffer 46 CS Register */
#define CAN_2_ID46           CAN_2.MB[46].ID.R             /* Message Buffer 46 ID Register */
#define CAN_2_B46            CAN_2.MB[46].DATA.B           /* Message Buffer 46 B Register */
#define CAN_2_H46            CAN_2.MB[46].DATA.H           /* Message Buffer 46 H Register */
#define CAN_2_W46            CAN_2.MB[46].DATA.W           /* Message Buffer 46 W Register */
#define CAN_2_CS47           CAN_2.MB[47].CS.R             /* Message Buffer 47 CS Register */
#define CAN_2_ID47           CAN_2.MB[47].ID.R             /* Message Buffer 47 ID Register */
#define CAN_2_B47            CAN_2.MB[47].DATA.B           /* Message Buffer 47 B Register */
#define CAN_2_H47            CAN_2.MB[47].DATA.H           /* Message Buffer 47 H Register */
#define CAN_2_W47            CAN_2.MB[47].DATA.W           /* Message Buffer 47 W Register */
#define CAN_2_CS48           CAN_2.MB[48].CS.R             /* Message Buffer 48 CS Register */
#define CAN_2_ID48           CAN_2.MB[48].ID.R             /* Message Buffer 48 ID Register */
#define CAN_2_B48            CAN_2.MB[48].DATA.B           /* Message Buffer 48 B Register */
#define CAN_2_H48            CAN_2.MB[48].DATA.H           /* Message Buffer 48 H Register */
#define CAN_2_W48            CAN_2.MB[48].DATA.W           /* Message Buffer 48 W Register */
#define CAN_2_CS49           CAN_2.MB[49].CS.R             /* Message Buffer 49 CS Register */
#define CAN_2_ID49           CAN_2.MB[49].ID.R             /* Message Buffer 49 ID Register */
#define CAN_2_B49            CAN_2.MB[49].DATA.B           /* Message Buffer 49 B Register */
#define CAN_2_H49            CAN_2.MB[49].DATA.H           /* Message Buffer 49 H Register */
#define CAN_2_W49            CAN_2.MB[49].DATA.W           /* Message Buffer 49 W Register */
#define CAN_2_CS50           CAN_2.MB[50].CS.R             /* Message Buffer 50 CS Register */
#define CAN_2_ID50           CAN_2.MB[50].ID.R             /* Message Buffer 50 ID Register */
#define CAN_2_B50            CAN_2.MB[50].DATA.B           /* Message Buffer 50 B Register */
#define CAN_2_H50            CAN_2.MB[50].DATA.H           /* Message Buffer 50 H Register */
#define CAN_2_W50            CAN_2.MB[50].DATA.W           /* Message Buffer 50 W Register */
#define CAN_2_CS51           CAN_2.MB[51].CS.R             /* Message Buffer 51 CS Register */
#define CAN_2_ID51           CAN_2.MB[51].ID.R             /* Message Buffer 51 ID Register */
#define CAN_2_B51            CAN_2.MB[51].DATA.B           /* Message Buffer 51 B Register */
#define CAN_2_H51            CAN_2.MB[51].DATA.H           /* Message Buffer 51 H Register */
#define CAN_2_W51            CAN_2.MB[51].DATA.W           /* Message Buffer 51 W Register */
#define CAN_2_CS52           CAN_2.MB[52].CS.R             /* Message Buffer 52 CS Register */
#define CAN_2_ID52           CAN_2.MB[52].ID.R             /* Message Buffer 52 ID Register */
#define CAN_2_B52            CAN_2.MB[52].DATA.B           /* Message Buffer 52 B Register */
#define CAN_2_H52            CAN_2.MB[52].DATA.H           /* Message Buffer 52 H Register */
#define CAN_2_W52            CAN_2.MB[52].DATA.W           /* Message Buffer 52 W Register */
#define CAN_2_CS53           CAN_2.MB[53].CS.R             /* Message Buffer 53 CS Register */
#define CAN_2_ID53           CAN_2.MB[53].ID.R             /* Message Buffer 53 ID Register */
#define CAN_2_B53            CAN_2.MB[53].DATA.B           /* Message Buffer 53 B Register */
#define CAN_2_H53            CAN_2.MB[53].DATA.H           /* Message Buffer 53 H Register */
#define CAN_2_W53            CAN_2.MB[53].DATA.W           /* Message Buffer 53 W Register */
#define CAN_2_CS54           CAN_2.MB[54].CS.R             /* Message Buffer 54 CS Register */
#define CAN_2_ID54           CAN_2.MB[54].ID.R             /* Message Buffer 54 ID Register */
#define CAN_2_B54            CAN_2.MB[54].DATA.B           /* Message Buffer 54 B Register */
#define CAN_2_H54            CAN_2.MB[54].DATA.H           /* Message Buffer 54 H Register */
#define CAN_2_W54            CAN_2.MB[54].DATA.W           /* Message Buffer 54 W Register */
#define CAN_2_CS55           CAN_2.MB[55].CS.R             /* Message Buffer 55 CS Register */
#define CAN_2_ID55           CAN_2.MB[55].ID.R             /* Message Buffer 55 ID Register */
#define CAN_2_B55            CAN_2.MB[55].DATA.B           /* Message Buffer 55 B Register */
#define CAN_2_H55            CAN_2.MB[55].DATA.H           /* Message Buffer 55 H Register */
#define CAN_2_W55            CAN_2.MB[55].DATA.W           /* Message Buffer 55 W Register */
#define CAN_2_CS56           CAN_2.MB[56].CS.R             /* Message Buffer 56 CS Register */
#define CAN_2_ID56           CAN_2.MB[56].ID.R             /* Message Buffer 56 ID Register */
#define CAN_2_B56            CAN_2.MB[56].DATA.B           /* Message Buffer 56 B Register */
#define CAN_2_H56            CAN_2.MB[56].DATA.H           /* Message Buffer 56 H Register */
#define CAN_2_W56            CAN_2.MB[56].DATA.W           /* Message Buffer 56 W Register */
#define CAN_2_CS57           CAN_2.MB[57].CS.R             /* Message Buffer 57 CS Register */
#define CAN_2_ID57           CAN_2.MB[57].ID.R             /* Message Buffer 57 ID Register */
#define CAN_2_B57            CAN_2.MB[57].DATA.B           /* Message Buffer 57 B Register */
#define CAN_2_H57            CAN_2.MB[57].DATA.H           /* Message Buffer 57 H Register */
#define CAN_2_W57            CAN_2.MB[57].DATA.W           /* Message Buffer 57 W Register */
#define CAN_2_CS58           CAN_2.MB[58].CS.R             /* Message Buffer 58 CS Register */
#define CAN_2_ID58           CAN_2.MB[58].ID.R             /* Message Buffer 58 ID Register */
#define CAN_2_B58            CAN_2.MB[58].DATA.B           /* Message Buffer 58 B Register */
#define CAN_2_H58            CAN_2.MB[58].DATA.H           /* Message Buffer 58 H Register */
#define CAN_2_W58            CAN_2.MB[58].DATA.W           /* Message Buffer 58 W Register */
#define CAN_2_CS59           CAN_2.MB[59].CS.R             /* Message Buffer 59 CS Register */
#define CAN_2_ID59           CAN_2.MB[59].ID.R             /* Message Buffer 59 ID Register */
#define CAN_2_B59            CAN_2.MB[59].DATA.B           /* Message Buffer 59 B Register */
#define CAN_2_H59            CAN_2.MB[59].DATA.H           /* Message Buffer 59 H Register */
#define CAN_2_W59            CAN_2.MB[59].DATA.W           /* Message Buffer 59 W Register */
#define CAN_2_CS60           CAN_2.MB[60].CS.R             /* Message Buffer 60 CS Register */
#define CAN_2_ID60           CAN_2.MB[60].ID.R             /* Message Buffer 60 ID Register */
#define CAN_2_B60            CAN_2.MB[60].DATA.B           /* Message Buffer 60 B Register */
#define CAN_2_H60            CAN_2.MB[60].DATA.H           /* Message Buffer 60 H Register */
#define CAN_2_W60            CAN_2.MB[60].DATA.W           /* Message Buffer 60 W Register */
#define CAN_2_CS61           CAN_2.MB[61].CS.R             /* Message Buffer 61 CS Register */
#define CAN_2_ID61           CAN_2.MB[61].ID.R             /* Message Buffer 61 ID Register */
#define CAN_2_B61            CAN_2.MB[61].DATA.B           /* Message Buffer 61 B Register */
#define CAN_2_H61            CAN_2.MB[61].DATA.H           /* Message Buffer 61 H Register */
#define CAN_2_W61            CAN_2.MB[61].DATA.W           /* Message Buffer 61 W Register */
#define CAN_2_CS62           CAN_2.MB[62].CS.R             /* Message Buffer 62 CS Register */
#define CAN_2_ID62           CAN_2.MB[62].ID.R             /* Message Buffer 62 ID Register */
#define CAN_2_B62            CAN_2.MB[62].DATA.B           /* Message Buffer 62 B Register */
#define CAN_2_H62            CAN_2.MB[62].DATA.H           /* Message Buffer 62 H Register */
#define CAN_2_W62            CAN_2.MB[62].DATA.W           /* Message Buffer 62 W Register */
#define CAN_2_CS63           CAN_2.MB[63].CS.R             /* Message Buffer 63 CS Register */
#define CAN_2_ID63           CAN_2.MB[63].ID.R             /* Message Buffer 63 ID Register */
#define CAN_2_B63            CAN_2.MB[63].DATA.B           /* Message Buffer 63 B Register */
#define CAN_2_H63            CAN_2.MB[63].DATA.H           /* Message Buffer 63 H Register */
#define CAN_2_W63            CAN_2.MB[63].DATA.W           /* Message Buffer 63 W Register */
#define CAN_2_CS64           CAN_2.MB[64].CS.R             /* Message Buffer 64 CS Register */
#define CAN_2_ID64           CAN_2.MB[64].ID.R             /* Message Buffer 64 ID Register */
#define CAN_2_B64            CAN_2.MB[64].DATA.B           /* Message Buffer 64 B Register */
#define CAN_2_H64            CAN_2.MB[64].DATA.H           /* Message Buffer 64 H Register */
#define CAN_2_W64            CAN_2.MB[64].DATA.W           /* Message Buffer 64 W Register */
#define CAN_2_CS65           CAN_2.MB[65].CS.R             /* Message Buffer 65 CS Register */
#define CAN_2_ID65           CAN_2.MB[65].ID.R             /* Message Buffer 65 ID Register */
#define CAN_2_B65            CAN_2.MB[65].DATA.B           /* Message Buffer 65 B Register */
#define CAN_2_H65            CAN_2.MB[65].DATA.H           /* Message Buffer 65 H Register */
#define CAN_2_W65            CAN_2.MB[65].DATA.W           /* Message Buffer 65 W Register */
#define CAN_2_CS66           CAN_2.MB[66].CS.R             /* Message Buffer 66 CS Register */
#define CAN_2_ID66           CAN_2.MB[66].ID.R             /* Message Buffer 66 ID Register */
#define CAN_2_B66            CAN_2.MB[66].DATA.B           /* Message Buffer 66 B Register */
#define CAN_2_H66            CAN_2.MB[66].DATA.H           /* Message Buffer 66 H Register */
#define CAN_2_W66            CAN_2.MB[66].DATA.W           /* Message Buffer 66 W Register */
#define CAN_2_CS67           CAN_2.MB[67].CS.R             /* Message Buffer 67 CS Register */
#define CAN_2_ID67           CAN_2.MB[67].ID.R             /* Message Buffer 67 ID Register */
#define CAN_2_B67            CAN_2.MB[67].DATA.B           /* Message Buffer 67 B Register */
#define CAN_2_H67            CAN_2.MB[67].DATA.H           /* Message Buffer 67 H Register */
#define CAN_2_W67            CAN_2.MB[67].DATA.W           /* Message Buffer 67 W Register */
#define CAN_2_CS68           CAN_2.MB[68].CS.R             /* Message Buffer 68 CS Register */
#define CAN_2_ID68           CAN_2.MB[68].ID.R             /* Message Buffer 68 ID Register */
#define CAN_2_B68            CAN_2.MB[68].DATA.B           /* Message Buffer 68 B Register */
#define CAN_2_H68            CAN_2.MB[68].DATA.H           /* Message Buffer 68 H Register */
#define CAN_2_W68            CAN_2.MB[68].DATA.W           /* Message Buffer 68 W Register */
#define CAN_2_CS69           CAN_2.MB[69].CS.R             /* Message Buffer 69 CS Register */
#define CAN_2_ID69           CAN_2.MB[69].ID.R             /* Message Buffer 69 ID Register */
#define CAN_2_B69            CAN_2.MB[69].DATA.B           /* Message Buffer 69 B Register */
#define CAN_2_H69            CAN_2.MB[69].DATA.H           /* Message Buffer 69 H Register */
#define CAN_2_W69            CAN_2.MB[69].DATA.W           /* Message Buffer 69 W Register */
#define CAN_2_CS70           CAN_2.MB[70].CS.R             /* Message Buffer 70 CS Register */
#define CAN_2_ID70           CAN_2.MB[70].ID.R             /* Message Buffer 70 ID Register */
#define CAN_2_B70            CAN_2.MB[70].DATA.B           /* Message Buffer 70 B Register */
#define CAN_2_H70            CAN_2.MB[70].DATA.H           /* Message Buffer 70 H Register */
#define CAN_2_W70            CAN_2.MB[70].DATA.W           /* Message Buffer 70 W Register */
#define CAN_2_CS71           CAN_2.MB[71].CS.R             /* Message Buffer 71 CS Register */
#define CAN_2_ID71           CAN_2.MB[71].ID.R             /* Message Buffer 71 ID Register */
#define CAN_2_B71            CAN_2.MB[71].DATA.B           /* Message Buffer 71 B Register */
#define CAN_2_H71            CAN_2.MB[71].DATA.H           /* Message Buffer 71 H Register */
#define CAN_2_W71            CAN_2.MB[71].DATA.W           /* Message Buffer 71 W Register */
#define CAN_2_CS72           CAN_2.MB[72].CS.R             /* Message Buffer 72 CS Register */
#define CAN_2_ID72           CAN_2.MB[72].ID.R             /* Message Buffer 72 ID Register */
#define CAN_2_B72            CAN_2.MB[72].DATA.B           /* Message Buffer 72 B Register */
#define CAN_2_H72            CAN_2.MB[72].DATA.H           /* Message Buffer 72 H Register */
#define CAN_2_W72            CAN_2.MB[72].DATA.W           /* Message Buffer 72 W Register */
#define CAN_2_CS73           CAN_2.MB[73].CS.R             /* Message Buffer 73 CS Register */
#define CAN_2_ID73           CAN_2.MB[73].ID.R             /* Message Buffer 73 ID Register */
#define CAN_2_B73            CAN_2.MB[73].DATA.B           /* Message Buffer 73 B Register */
#define CAN_2_H73            CAN_2.MB[73].DATA.H           /* Message Buffer 73 H Register */
#define CAN_2_W73            CAN_2.MB[73].DATA.W           /* Message Buffer 73 W Register */
#define CAN_2_CS74           CAN_2.MB[74].CS.R             /* Message Buffer 74 CS Register */
#define CAN_2_ID74           CAN_2.MB[74].ID.R             /* Message Buffer 74 ID Register */
#define CAN_2_B74            CAN_2.MB[74].DATA.B           /* Message Buffer 74 B Register */
#define CAN_2_H74            CAN_2.MB[74].DATA.H           /* Message Buffer 74 H Register */
#define CAN_2_W74            CAN_2.MB[74].DATA.W           /* Message Buffer 74 W Register */
#define CAN_2_CS75           CAN_2.MB[75].CS.R             /* Message Buffer 75 CS Register */
#define CAN_2_ID75           CAN_2.MB[75].ID.R             /* Message Buffer 75 ID Register */
#define CAN_2_B75            CAN_2.MB[75].DATA.B           /* Message Buffer 75 B Register */
#define CAN_2_H75            CAN_2.MB[75].DATA.H           /* Message Buffer 75 H Register */
#define CAN_2_W75            CAN_2.MB[75].DATA.W           /* Message Buffer 75 W Register */
#define CAN_2_CS76           CAN_2.MB[76].CS.R             /* Message Buffer 76 CS Register */
#define CAN_2_ID76           CAN_2.MB[76].ID.R             /* Message Buffer 76 ID Register */
#define CAN_2_B76            CAN_2.MB[76].DATA.B           /* Message Buffer 76 B Register */
#define CAN_2_H76            CAN_2.MB[76].DATA.H           /* Message Buffer 76 H Register */
#define CAN_2_W76            CAN_2.MB[76].DATA.W           /* Message Buffer 76 W Register */
#define CAN_2_CS77           CAN_2.MB[77].CS.R             /* Message Buffer 77 CS Register */
#define CAN_2_ID77           CAN_2.MB[77].ID.R             /* Message Buffer 77 ID Register */
#define CAN_2_B77            CAN_2.MB[77].DATA.B           /* Message Buffer 77 B Register */
#define CAN_2_H77            CAN_2.MB[77].DATA.H           /* Message Buffer 77 H Register */
#define CAN_2_W77            CAN_2.MB[77].DATA.W           /* Message Buffer 77 W Register */
#define CAN_2_CS78           CAN_2.MB[78].CS.R             /* Message Buffer 78 CS Register */
#define CAN_2_ID78           CAN_2.MB[78].ID.R             /* Message Buffer 78 ID Register */
#define CAN_2_B78            CAN_2.MB[78].DATA.B           /* Message Buffer 78 B Register */
#define CAN_2_H78            CAN_2.MB[78].DATA.H           /* Message Buffer 78 H Register */
#define CAN_2_W78            CAN_2.MB[78].DATA.W           /* Message Buffer 78 W Register */
#define CAN_2_CS79           CAN_2.MB[79].CS.R             /* Message Buffer 79 CS Register */
#define CAN_2_ID79           CAN_2.MB[79].ID.R             /* Message Buffer 79 ID Register */
#define CAN_2_B79            CAN_2.MB[79].DATA.B           /* Message Buffer 79 B Register */
#define CAN_2_H79            CAN_2.MB[79].DATA.H           /* Message Buffer 79 H Register */
#define CAN_2_W79            CAN_2.MB[79].DATA.W           /* Message Buffer 79 W Register */
#define CAN_2_CS80           CAN_2.MB[80].CS.R             /* Message Buffer 80 CS Register */
#define CAN_2_ID80           CAN_2.MB[80].ID.R             /* Message Buffer 80 ID Register */
#define CAN_2_B80            CAN_2.MB[80].DATA.B           /* Message Buffer 80 B Register */
#define CAN_2_H80            CAN_2.MB[80].DATA.H           /* Message Buffer 80 H Register */
#define CAN_2_W80            CAN_2.MB[80].DATA.W           /* Message Buffer 80 W Register */
#define CAN_2_CS81           CAN_2.MB[81].CS.R             /* Message Buffer 81 CS Register */
#define CAN_2_ID81           CAN_2.MB[81].ID.R             /* Message Buffer 81 ID Register */
#define CAN_2_B81            CAN_2.MB[81].DATA.B           /* Message Buffer 81 B Register */
#define CAN_2_H81            CAN_2.MB[81].DATA.H           /* Message Buffer 81 H Register */
#define CAN_2_W81            CAN_2.MB[81].DATA.W           /* Message Buffer 81 W Register */
#define CAN_2_CS82           CAN_2.MB[82].CS.R             /* Message Buffer 82 CS Register */
#define CAN_2_ID82           CAN_2.MB[82].ID.R             /* Message Buffer 82 ID Register */
#define CAN_2_B82            CAN_2.MB[82].DATA.B           /* Message Buffer 82 B Register */
#define CAN_2_H82            CAN_2.MB[82].DATA.H           /* Message Buffer 82 H Register */
#define CAN_2_W82            CAN_2.MB[82].DATA.W           /* Message Buffer 82 W Register */
#define CAN_2_CS83           CAN_2.MB[83].CS.R             /* Message Buffer 83 CS Register */
#define CAN_2_ID83           CAN_2.MB[83].ID.R             /* Message Buffer 83 ID Register */
#define CAN_2_B83            CAN_2.MB[83].DATA.B           /* Message Buffer 83 B Register */
#define CAN_2_H83            CAN_2.MB[83].DATA.H           /* Message Buffer 83 H Register */
#define CAN_2_W83            CAN_2.MB[83].DATA.W           /* Message Buffer 83 W Register */
#define CAN_2_CS84           CAN_2.MB[84].CS.R             /* Message Buffer 84 CS Register */
#define CAN_2_ID84           CAN_2.MB[84].ID.R             /* Message Buffer 84 ID Register */
#define CAN_2_B84            CAN_2.MB[84].DATA.B           /* Message Buffer 84 B Register */
#define CAN_2_H84            CAN_2.MB[84].DATA.H           /* Message Buffer 84 H Register */
#define CAN_2_W84            CAN_2.MB[84].DATA.W           /* Message Buffer 84 W Register */
#define CAN_2_CS85           CAN_2.MB[85].CS.R             /* Message Buffer 85 CS Register */
#define CAN_2_ID85           CAN_2.MB[85].ID.R             /* Message Buffer 85 ID Register */
#define CAN_2_B85            CAN_2.MB[85].DATA.B           /* Message Buffer 85 B Register */
#define CAN_2_H85            CAN_2.MB[85].DATA.H           /* Message Buffer 85 H Register */
#define CAN_2_W85            CAN_2.MB[85].DATA.W           /* Message Buffer 85 W Register */
#define CAN_2_CS86           CAN_2.MB[86].CS.R             /* Message Buffer 86 CS Register */
#define CAN_2_ID86           CAN_2.MB[86].ID.R             /* Message Buffer 86 ID Register */
#define CAN_2_B86            CAN_2.MB[86].DATA.B           /* Message Buffer 86 B Register */
#define CAN_2_H86            CAN_2.MB[86].DATA.H           /* Message Buffer 86 H Register */
#define CAN_2_W86            CAN_2.MB[86].DATA.W           /* Message Buffer 86 W Register */
#define CAN_2_CS87           CAN_2.MB[87].CS.R             /* Message Buffer 87 CS Register */
#define CAN_2_ID87           CAN_2.MB[87].ID.R             /* Message Buffer 87 ID Register */
#define CAN_2_B87            CAN_2.MB[87].DATA.B           /* Message Buffer 87 B Register */
#define CAN_2_H87            CAN_2.MB[87].DATA.H           /* Message Buffer 87 H Register */
#define CAN_2_W87            CAN_2.MB[87].DATA.W           /* Message Buffer 87 W Register */
#define CAN_2_CS88           CAN_2.MB[88].CS.R             /* Message Buffer 88 CS Register */
#define CAN_2_ID88           CAN_2.MB[88].ID.R             /* Message Buffer 88 ID Register */
#define CAN_2_B88            CAN_2.MB[88].DATA.B           /* Message Buffer 88 B Register */
#define CAN_2_H88            CAN_2.MB[88].DATA.H           /* Message Buffer 88 H Register */
#define CAN_2_W848           CAN_2.MB[88].DATA.W           /* Message Buffer 88 W Register */
#define CAN_2_CS89           CAN_2.MB[89].CS.R             /* Message Buffer 89 CS Register */
#define CAN_2_ID89           CAN_2.MB[89].ID.R             /* Message Buffer 89 ID Register */
#define CAN_2_B89            CAN_2.MB[89].DATA.B           /* Message Buffer 89 B Register */
#define CAN_2_H89            CAN_2.MB[89].DATA.H           /* Message Buffer 89 H Register */
#define CAN_2_W89            CAN_2.MB[89].DATA.W           /* Message Buffer 89 W Register */
#define CAN_2_CS90           CAN_2.MB[90].CS.R             /* Message Buffer 90 CS Register */
#define CAN_2_ID90           CAN_2.MB[90].ID.R             /* Message Buffer 90 ID Register */
#define CAN_2_B90            CAN_2.MB[90].DATA.B           /* Message Buffer 90 B Register */
#define CAN_2_H90            CAN_2.MB[90].DATA.H           /* Message Buffer 90 H Register */
#define CAN_2_W90            CAN_2.MB[90].DATA.W           /* Message Buffer 90 W Register */
#define CAN_2_CS91           CAN_2.MB[91].CS.R             /* Message Buffer 91 CS Register */
#define CAN_2_ID91           CAN_2.MB[91].ID.R             /* Message Buffer 91 ID Register */
#define CAN_2_B91            CAN_2.MB[91].DATA.B           /* Message Buffer 91 B Register */
#define CAN_2_H91            CAN_2.MB[91].DATA.H           /* Message Buffer 91 H Register */
#define CAN_2_W91            CAN_2.MB[91].DATA.W           /* Message Buffer 91 W Register */
#define CAN_2_CS92           CAN_2.MB[92].CS.R             /* Message Buffer 92 CS Register */
#define CAN_2_ID92           CAN_2.MB[92].ID.R             /* Message Buffer 92 ID Register */
#define CAN_2_B92            CAN_2.MB[92].DATA.B           /* Message Buffer 92 B Register */
#define CAN_2_H92            CAN_2.MB[92].DATA.H           /* Message Buffer 92 H Register */
#define CAN_2_W92            CAN_2.MB[92].DATA.W           /* Message Buffer 92 W Register */
#define CAN_2_CS93           CAN_2.MB[93].CS.R             /* Message Buffer 93 CS Register */
#define CAN_2_ID93           CAN_2.MB[93].ID.R             /* Message Buffer 93 ID Register */
#define CAN_2_B93            CAN_2.MB[93].DATA.B           /* Message Buffer 93 B Register */
#define CAN_2_H93            CAN_2.MB[93].DATA.H           /* Message Buffer 93 H Register */
#define CAN_2_W93            CAN_2.MB[93].DATA.W           /* Message Buffer 93 W Register */
#define CAN_2_CS94           CAN_2.MB[94].CS.R             /* Message Buffer 94 CS Register */
#define CAN_2_ID94           CAN_2.MB[94].ID.R             /* Message Buffer 94 ID Register */
#define CAN_2_B94            CAN_2.MB[94].DATA.B           /* Message Buffer 94 B Register */
#define CAN_2_H94            CAN_2.MB[94].DATA.H           /* Message Buffer 94 H Register */
#define CAN_2_W94            CAN_2.MB[94].DATA.W           /* Message Buffer 94 W Register */
#define CAN_2_CS95           CAN_2.MB[95].CS.R             /* Message Buffer 95 CS Register */
#define CAN_2_ID95           CAN_2.MB[95].ID.R             /* Message Buffer 95 ID Register */
#define CAN_2_B95            CAN_2.MB[95].DATA.B           /* Message Buffer 95 B Register */
#define CAN_2_H95            CAN_2.MB[95].DATA.H           /* Message Buffer 95 H Register */
#define CAN_2_W95            CAN_2.MB[95].DATA.W           /* Message Buffer 95 W Register */
#define CAN_2_RXIMR0         CAN_2.RXIMR[0].R              /* Rx Individual Mask registers */
#define CAN_2_RXIMR1         CAN_2.RXIMR[1].R              /* Rx Individual Mask registers */
#define CAN_2_RXIMR2         CAN_2.RXIMR[2].R              /* Rx Individual Mask registers */
#define CAN_2_RXIMR3         CAN_2.RXIMR[3].R              /* Rx Individual Mask registers */
#define CAN_2_RXIMR4         CAN_2.RXIMR[4].R              /* Rx Individual Mask registers */
#define CAN_2_RXIMR5         CAN_2.RXIMR[5].R              /* Rx Individual Mask registers */
#define CAN_2_RXIMR6         CAN_2.RXIMR[6].R              /* Rx Individual Mask registers */
#define CAN_2_RXIMR7         CAN_2.RXIMR[7].R              /* Rx Individual Mask registers */
#define CAN_2_RXIMR8         CAN_2.RXIMR[8].R              /* Rx Individual Mask registers */
#define CAN_2_RXIMR9         CAN_2.RXIMR[9].R              /* Rx Individual Mask registers */
#define CAN_2_RXIMR10        CAN_2.RXIMR[10].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR11        CAN_2.RXIMR[11].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR12        CAN_2.RXIMR[12].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR13        CAN_2.RXIMR[13].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR14        CAN_2.RXIMR[14].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR15        CAN_2.RXIMR[15].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR16        CAN_2.RXIMR[16].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR17        CAN_2.RXIMR[17].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR18        CAN_2.RXIMR[18].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR19        CAN_2.RXIMR[19].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR20        CAN_2.RXIMR[20].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR21        CAN_2.RXIMR[21].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR22        CAN_2.RXIMR[22].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR23        CAN_2.RXIMR[23].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR24        CAN_2.RXIMR[24].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR25        CAN_2.RXIMR[25].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR26        CAN_2.RXIMR[26].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR27        CAN_2.RXIMR[27].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR28        CAN_2.RXIMR[28].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR29        CAN_2.RXIMR[29].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR30        CAN_2.RXIMR[30].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR31        CAN_2.RXIMR[31].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR32        CAN_2.RXIMR[32].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR33        CAN_2.RXIMR[33].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR34        CAN_2.RXIMR[34].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR35        CAN_2.RXIMR[35].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR36        CAN_2.RXIMR[36].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR37        CAN_2.RXIMR[37].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR38        CAN_2.RXIMR[38].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR39        CAN_2.RXIMR[39].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR40        CAN_2.RXIMR[40].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR41        CAN_2.RXIMR[41].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR42        CAN_2.RXIMR[42].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR43        CAN_2.RXIMR[43].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR44        CAN_2.RXIMR[44].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR45        CAN_2.RXIMR[45].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR46        CAN_2.RXIMR[46].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR47        CAN_2.RXIMR[47].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR48        CAN_2.RXIMR[48].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR49        CAN_2.RXIMR[49].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR50        CAN_2.RXIMR[50].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR51        CAN_2.RXIMR[51].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR52        CAN_2.RXIMR[52].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR53        CAN_2.RXIMR[53].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR54        CAN_2.RXIMR[54].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR55        CAN_2.RXIMR[55].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR56        CAN_2.RXIMR[56].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR57        CAN_2.RXIMR[57].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR58        CAN_2.RXIMR[58].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR59        CAN_2.RXIMR[59].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR60        CAN_2.RXIMR[60].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR61        CAN_2.RXIMR[61].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR62        CAN_2.RXIMR[62].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR63        CAN_2.RXIMR[63].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR64        CAN_2.RXIMR[64].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR65        CAN_2.RXIMR[65].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR66        CAN_2.RXIMR[66].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR67        CAN_2.RXIMR[67].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR68        CAN_2.RXIMR[68].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR69        CAN_2.RXIMR[69].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR70        CAN_2.RXIMR[70].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR71        CAN_2.RXIMR[71].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR72        CAN_2.RXIMR[72].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR73        CAN_2.RXIMR[73].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR74        CAN_2.RXIMR[74].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR75        CAN_2.RXIMR[75].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR76        CAN_2.RXIMR[76].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR77        CAN_2.RXIMR[77].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR78        CAN_2.RXIMR[78].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR79        CAN_2.RXIMR[79].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR80        CAN_2.RXIMR[80].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR81        CAN_2.RXIMR[81].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR82        CAN_2.RXIMR[82].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR83        CAN_2.RXIMR[83].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR84        CAN_2.RXIMR[84].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR85        CAN_2.RXIMR[85].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR86        CAN_2.RXIMR[86].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR87        CAN_2.RXIMR[87].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR88        CAN_2.RXIMR[88].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR89        CAN_2.RXIMR[89].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR90        CAN_2.RXIMR[90].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR91        CAN_2.RXIMR[91].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR92        CAN_2.RXIMR[92].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR93        CAN_2.RXIMR[93].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR94        CAN_2.RXIMR[94].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR95        CAN_2.RXIMR[95].R             /* Rx Individual Mask registers */
#define CAN_2_MECR           CAN_2.MECR.R                  /* Memory Error Control register */
#define CAN_2_ERRIAR         CAN_2.ERRIAR.R                /* Error Injection Address register */
#define CAN_2_ERRIDPR        CAN_2.ERRIDPR.R               /* Error Injection Data Pattern register */
#define CAN_2_ERRIPPR        CAN_2.ERRIPPR.R               /* Error Injection Parity Pattern register */
#define CAN_2_RERRAR         CAN_2.RERRAR.R                /* Error Report Address register */
#define CAN_2_RERRDR         CAN_2.RERRDR.R                /* Error Report Data register */
#define CAN_2_RERRSYNR       CAN_2.RERRSYNR.R              /* Error Report Syndrome register */
#define CAN_2_ERRSR          CAN_2.ERRSR.R                 /* Error Status register */
#define CAN_2_FDCTRL         CAN_2.FDCTRL.R                /* CAN FD Control register */
#define CAN_2_FDCBT          CAN_2.FDCBT.R                 /* CAN FD Bit Timing register */
#define CAN_2_FDCRC          CAN_2.FDCRC.R                 /* CAN FD CRC register */
#define CAN_2_HR_TIME_STAMP0 CAN_2.HR_TIME_STAMP[0].R      /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP1 CAN_2.HR_TIME_STAMP[1].R      /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP2 CAN_2.HR_TIME_STAMP[2].R      /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP3 CAN_2.HR_TIME_STAMP[3].R      /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP4 CAN_2.HR_TIME_STAMP[4].R      /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP5 CAN_2.HR_TIME_STAMP[5].R      /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP6 CAN_2.HR_TIME_STAMP[6].R      /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP7 CAN_2.HR_TIME_STAMP[7].R      /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP8 CAN_2.HR_TIME_STAMP[8].R      /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP9 CAN_2.HR_TIME_STAMP[9].R      /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP10 CAN_2.HR_TIME_STAMP[10].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP11 CAN_2.HR_TIME_STAMP[11].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP12 CAN_2.HR_TIME_STAMP[12].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP13 CAN_2.HR_TIME_STAMP[13].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP14 CAN_2.HR_TIME_STAMP[14].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP15 CAN_2.HR_TIME_STAMP[15].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP16 CAN_2.HR_TIME_STAMP[16].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP17 CAN_2.HR_TIME_STAMP[17].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP18 CAN_2.HR_TIME_STAMP[18].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP19 CAN_2.HR_TIME_STAMP[19].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP20 CAN_2.HR_TIME_STAMP[20].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP21 CAN_2.HR_TIME_STAMP[21].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP22 CAN_2.HR_TIME_STAMP[22].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP23 CAN_2.HR_TIME_STAMP[23].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP24 CAN_2.HR_TIME_STAMP[24].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP25 CAN_2.HR_TIME_STAMP[25].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP26 CAN_2.HR_TIME_STAMP[26].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP27 CAN_2.HR_TIME_STAMP[27].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP28 CAN_2.HR_TIME_STAMP[28].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP29 CAN_2.HR_TIME_STAMP[29].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP30 CAN_2.HR_TIME_STAMP[30].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP31 CAN_2.HR_TIME_STAMP[31].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP32 CAN_2.HR_TIME_STAMP[32].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP33 CAN_2.HR_TIME_STAMP[33].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP34 CAN_2.HR_TIME_STAMP[34].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP35 CAN_2.HR_TIME_STAMP[35].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP36 CAN_2.HR_TIME_STAMP[36].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP37 CAN_2.HR_TIME_STAMP[37].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP38 CAN_2.HR_TIME_STAMP[38].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP39 CAN_2.HR_TIME_STAMP[39].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP40 CAN_2.HR_TIME_STAMP[40].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP41 CAN_2.HR_TIME_STAMP[41].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP42 CAN_2.HR_TIME_STAMP[42].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP43 CAN_2.HR_TIME_STAMP[43].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP44 CAN_2.HR_TIME_STAMP[44].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP45 CAN_2.HR_TIME_STAMP[45].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP46 CAN_2.HR_TIME_STAMP[46].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP47 CAN_2.HR_TIME_STAMP[47].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP48 CAN_2.HR_TIME_STAMP[48].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP49 CAN_2.HR_TIME_STAMP[49].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP50 CAN_2.HR_TIME_STAMP[50].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP51 CAN_2.HR_TIME_STAMP[51].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP52 CAN_2.HR_TIME_STAMP[52].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP53 CAN_2.HR_TIME_STAMP[53].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP54 CAN_2.HR_TIME_STAMP[54].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP55 CAN_2.HR_TIME_STAMP[55].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP56 CAN_2.HR_TIME_STAMP[56].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP57 CAN_2.HR_TIME_STAMP[57].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP58 CAN_2.HR_TIME_STAMP[58].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP59 CAN_2.HR_TIME_STAMP[59].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP60 CAN_2.HR_TIME_STAMP[60].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP61 CAN_2.HR_TIME_STAMP[61].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP62 CAN_2.HR_TIME_STAMP[62].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP63 CAN_2.HR_TIME_STAMP[63].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP64 CAN_2.HR_TIME_STAMP[64].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP65 CAN_2.HR_TIME_STAMP[65].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP66 CAN_2.HR_TIME_STAMP[66].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP67 CAN_2.HR_TIME_STAMP[67].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP68 CAN_2.HR_TIME_STAMP[68].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP69 CAN_2.HR_TIME_STAMP[69].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP70 CAN_2.HR_TIME_STAMP[70].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP71 CAN_2.HR_TIME_STAMP[71].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP72 CAN_2.HR_TIME_STAMP[72].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP73 CAN_2.HR_TIME_STAMP[73].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP74 CAN_2.HR_TIME_STAMP[74].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP75 CAN_2.HR_TIME_STAMP[75].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP76 CAN_2.HR_TIME_STAMP[76].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP77 CAN_2.HR_TIME_STAMP[77].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP78 CAN_2.HR_TIME_STAMP[78].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP79 CAN_2.HR_TIME_STAMP[79].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP80 CAN_2.HR_TIME_STAMP[80].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP81 CAN_2.HR_TIME_STAMP[81].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP82 CAN_2.HR_TIME_STAMP[82].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP83 CAN_2.HR_TIME_STAMP[83].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP84 CAN_2.HR_TIME_STAMP[84].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP85 CAN_2.HR_TIME_STAMP[85].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP86 CAN_2.HR_TIME_STAMP[86].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP87 CAN_2.HR_TIME_STAMP[87].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP88 CAN_2.HR_TIME_STAMP[88].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP89 CAN_2.HR_TIME_STAMP[89].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP90 CAN_2.HR_TIME_STAMP[90].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP91 CAN_2.HR_TIME_STAMP[91].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP92 CAN_2.HR_TIME_STAMP[92].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP93 CAN_2.HR_TIME_STAMP[93].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP94 CAN_2.HR_TIME_STAMP[94].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP95 CAN_2.HR_TIME_STAMP[95].R    /* High Resolution Time Stamp */

/* CMU_FC */
#define CMU_FC_0_0_GCR       CMU_FC_0_0.GCR.R              /* Global Configuration Register */
#define CMU_FC_0_0_RCCR      CMU_FC_0_0.RCCR.R             /* Reference Count Configuration Register */
#define CMU_FC_0_0_HTCR      CMU_FC_0_0.HTCR.R             /* High Threshold Configuration Register */
#define CMU_FC_0_0_LTCR      CMU_FC_0_0.LTCR.R             /* Low Threshold Configuration Register */
#define CMU_FC_0_0_SR        CMU_FC_0_0.SR.R               /* Status Register */
#define CMU_FC_0_0_IER       CMU_FC_0_0.IER.R              /* Interrupt Enable Register */

#define CMU_FC_0_1_GCR       CMU_FC_0_1.GCR.R              /* Global Configuration Register */
#define CMU_FC_0_1_RCCR      CMU_FC_0_1.RCCR.R             /* Reference Count Configuration Register */
#define CMU_FC_0_1_HTCR      CMU_FC_0_1.HTCR.R             /* High Threshold Configuration Register */
#define CMU_FC_0_1_LTCR      CMU_FC_0_1.LTCR.R             /* Low Threshold Configuration Register */
#define CMU_FC_0_1_SR        CMU_FC_0_1.SR.R               /* Status Register */
#define CMU_FC_0_1_IER       CMU_FC_0_1.IER.R              /* Interrupt Enable Register */

#define CMU_FC_6_GCR         CMU_FC_6.GCR.R                /* Global Configuration Register */
#define CMU_FC_6_RCCR        CMU_FC_6.RCCR.R               /* Reference Count Configuration Register */
#define CMU_FC_6_HTCR        CMU_FC_6.HTCR.R               /* High Threshold Configuration Register */
#define CMU_FC_6_LTCR        CMU_FC_6.LTCR.R               /* Low Threshold Configuration Register */
#define CMU_FC_6_SR          CMU_FC_6.SR.R                 /* Status Register */
#define CMU_FC_6_IER         CMU_FC_6.IER.R                /* Interrupt Enable Register */

#define CMU_FC_10_GCR        CMU_FC_10.GCR.R               /* Global Configuration Register */
#define CMU_FC_10_RCCR       CMU_FC_10.RCCR.R              /* Reference Count Configuration Register */
#define CMU_FC_10_HTCR       CMU_FC_10.HTCR.R              /* High Threshold Configuration Register */
#define CMU_FC_10_LTCR       CMU_FC_10.LTCR.R              /* Low Threshold Configuration Register */
#define CMU_FC_10_SR         CMU_FC_10.SR.R                /* Status Register */
#define CMU_FC_10_IER        CMU_FC_10.IER.R               /* Interrupt Enable Register */

#define CMU_FC_9_GCR         CMU_FC_9.GCR.R                /* Global Configuration Register */
#define CMU_FC_9_RCCR        CMU_FC_9.RCCR.R               /* Reference Count Configuration Register */
#define CMU_FC_9_HTCR        CMU_FC_9.HTCR.R               /* High Threshold Configuration Register */
#define CMU_FC_9_LTCR        CMU_FC_9.LTCR.R               /* Low Threshold Configuration Register */
#define CMU_FC_9_SR          CMU_FC_9.SR.R                 /* Status Register */
#define CMU_FC_9_IER         CMU_FC_9.IER.R                /* Interrupt Enable Register */

#define CMU_FC_11_GCR        CMU_FC_11.GCR.R               /* Global Configuration Register */
#define CMU_FC_11_RCCR       CMU_FC_11.RCCR.R              /* Reference Count Configuration Register */
#define CMU_FC_11_HTCR       CMU_FC_11.HTCR.R              /* High Threshold Configuration Register */
#define CMU_FC_11_LTCR       CMU_FC_11.LTCR.R              /* Low Threshold Configuration Register */
#define CMU_FC_11_SR         CMU_FC_11.SR.R                /* Status Register */
#define CMU_FC_11_IER        CMU_FC_11.IER.R               /* Interrupt Enable Register */

#define CMU_FC_13_GCR        CMU_FC_13.GCR.R               /* Global Configuration Register */
#define CMU_FC_13_RCCR       CMU_FC_13.RCCR.R              /* Reference Count Configuration Register */
#define CMU_FC_13_HTCR       CMU_FC_13.HTCR.R              /* High Threshold Configuration Register */
#define CMU_FC_13_LTCR       CMU_FC_13.LTCR.R              /* Low Threshold Configuration Register */
#define CMU_FC_13_SR         CMU_FC_13.SR.R                /* Status Register */
#define CMU_FC_13_IER        CMU_FC_13.IER.R               /* Interrupt Enable Register */

#define CMU_FC_14_GCR        CMU_FC_14.GCR.R               /* Global Configuration Register */
#define CMU_FC_14_RCCR       CMU_FC_14.RCCR.R              /* Reference Count Configuration Register */
#define CMU_FC_14_HTCR       CMU_FC_14.HTCR.R              /* High Threshold Configuration Register */
#define CMU_FC_14_LTCR       CMU_FC_14.LTCR.R              /* Low Threshold Configuration Register */
#define CMU_FC_14_SR         CMU_FC_14.SR.R                /* Status Register */
#define CMU_FC_14_IER        CMU_FC_14.IER.R               /* Interrupt Enable Register */

#define CMU_FC_2_GCR         CMU_FC_2.GCR.R                /* Global Configuration Register */
#define CMU_FC_2_RCCR        CMU_FC_2.RCCR.R               /* Reference Count Configuration Register */
#define CMU_FC_2_HTCR        CMU_FC_2.HTCR.R               /* High Threshold Configuration Register */
#define CMU_FC_2_LTCR        CMU_FC_2.LTCR.R               /* Low Threshold Configuration Register */
#define CMU_FC_2_SR          CMU_FC_2.SR.R                 /* Status Register */
#define CMU_FC_2_IER         CMU_FC_2.IER.R                /* Interrupt Enable Register */

#define CMU_FC_3_GCR         CMU_FC_3.GCR.R                /* Global Configuration Register */
#define CMU_FC_3_RCCR        CMU_FC_3.RCCR.R               /* Reference Count Configuration Register */
#define CMU_FC_3_HTCR        CMU_FC_3.HTCR.R               /* High Threshold Configuration Register */
#define CMU_FC_3_LTCR        CMU_FC_3.LTCR.R               /* Low Threshold Configuration Register */
#define CMU_FC_3_SR          CMU_FC_3.SR.R                 /* Status Register */
#define CMU_FC_3_IER         CMU_FC_3.IER.R                /* Interrupt Enable Register */

#define CMU_FC_4_GCR         CMU_FC_4.GCR.R                /* Global Configuration Register */
#define CMU_FC_4_RCCR        CMU_FC_4.RCCR.R               /* Reference Count Configuration Register */
#define CMU_FC_4_HTCR        CMU_FC_4.HTCR.R               /* High Threshold Configuration Register */
#define CMU_FC_4_LTCR        CMU_FC_4.LTCR.R               /* Low Threshold Configuration Register */
#define CMU_FC_4_SR          CMU_FC_4.SR.R                 /* Status Register */
#define CMU_FC_4_IER         CMU_FC_4.IER.R                /* Interrupt Enable Register */

#define CMU_FC_5_GCR         CMU_FC_5.GCR.R                /* Global Configuration Register */
#define CMU_FC_5_RCCR        CMU_FC_5.RCCR.R               /* Reference Count Configuration Register */
#define CMU_FC_5_HTCR        CMU_FC_5.HTCR.R               /* High Threshold Configuration Register */
#define CMU_FC_5_LTCR        CMU_FC_5.LTCR.R               /* Low Threshold Configuration Register */
#define CMU_FC_5_SR          CMU_FC_5.SR.R                 /* Status Register */
#define CMU_FC_5_IER         CMU_FC_5.IER.R                /* Interrupt Enable Register */

#define CMU_FC_8_GCR         CMU_FC_8.GCR.R                /* Global Configuration Register */
#define CMU_FC_8_RCCR        CMU_FC_8.RCCR.R               /* Reference Count Configuration Register */
#define CMU_FC_8_HTCR        CMU_FC_8.HTCR.R               /* High Threshold Configuration Register */
#define CMU_FC_8_LTCR        CMU_FC_8.LTCR.R               /* Low Threshold Configuration Register */
#define CMU_FC_8_SR          CMU_FC_8.SR.R                 /* Status Register */
#define CMU_FC_8_IER         CMU_FC_8.IER.R                /* Interrupt Enable Register */

#define CMU_FC_1_GCR         CMU_FC_1.GCR.R                /* Global Configuration Register */
#define CMU_FC_1_RCCR        CMU_FC_1.RCCR.R               /* Reference Count Configuration Register */
#define CMU_FC_1_HTCR        CMU_FC_1.HTCR.R               /* High Threshold Configuration Register */
#define CMU_FC_1_LTCR        CMU_FC_1.LTCR.R               /* Low Threshold Configuration Register */
#define CMU_FC_1_SR          CMU_FC_1.SR.R                 /* Status Register */
#define CMU_FC_1_IER         CMU_FC_1.IER.R                /* Interrupt Enable Register */

#define CMU_FC_12_GCR        CMU_FC_12.GCR.R               /* Global Configuration Register */
#define CMU_FC_12_RCCR       CMU_FC_12.RCCR.R              /* Reference Count Configuration Register */
#define CMU_FC_12_HTCR       CMU_FC_12.HTCR.R              /* High Threshold Configuration Register */
#define CMU_FC_12_LTCR       CMU_FC_12.LTCR.R              /* Low Threshold Configuration Register */
#define CMU_FC_12_SR         CMU_FC_12.SR.R                /* Status Register */
#define CMU_FC_12_IER        CMU_FC_12.IER.R               /* Interrupt Enable Register */

#define CMU_FC_7_GCR         CMU_FC_7.GCR.R                /* Global Configuration Register */
#define CMU_FC_7_RCCR        CMU_FC_7.RCCR.R               /* Reference Count Configuration Register */
#define CMU_FC_7_HTCR        CMU_FC_7.HTCR.R               /* High Threshold Configuration Register */
#define CMU_FC_7_LTCR        CMU_FC_7.LTCR.R               /* Low Threshold Configuration Register */
#define CMU_FC_7_SR          CMU_FC_7.SR.R                 /* Status Register */
#define CMU_FC_7_IER         CMU_FC_7.IER.R                /* Interrupt Enable Register */

/* CMU_FM */
#define CMU_FM_0_GCR         CMU_FM_0.GCR.R                /* Global Configuration Register */
#define CMU_FM_0_RCCR        CMU_FM_0.RCCR.R               /* Reference Count Configuration Register */
#define CMU_FM_0_SR          CMU_FM_0.SR.R                 /* Status Register */

/* CORE_PLL */
#define CORE_PLL_PLLCR       CORE_PLL.PLLCR.R              /* PLL Control Register */
#define CORE_PLL_PLLSR       CORE_PLL.PLLSR.R              /* PLL Status Register */
#define CORE_PLL_PLLDV       CORE_PLL.PLLDV.R              /* PLL Divider */
#define CORE_PLL_PLLFM       CORE_PLL.PLLFM.R              /* PLL Frequency Modulation */
#define CORE_PLL_PLLFD       CORE_PLL.PLLFD.R              /* PLL Fractional Divider */
#define CORE_PLL_PLLCLKMUX   CORE_PLL.PLLCLKMUX.R          /* PLL Clock Multiplexer */
#define CORE_PLL_PLLODIV_0   CORE_PLL.PLLODIV[0].R         /* PLL Output Divider */
#define CORE_PLL_PLLODIV_1   CORE_PLL.PLLODIV[1].R         /* PLL Output Divider */

/* CRC */
#define CRC_0_CFG1           CRC_0.CHANNEL[0].CFG.R        /* Configuration Register */
#define CRC_0_INP1           CRC_0.CHANNEL[0].INP.R        /* Input Register */
#define CRC_0_CSTAT1         CRC_0.CHANNEL[0].CSTAT.R      /* Current Status Register */
#define CRC_0_OUTP1          CRC_0.CHANNEL[0].OUTP.R       /* Output Register */
#define CRC_0_CFG2           CRC_0.CHANNEL[1].CFG.R        /* Configuration Register */
#define CRC_0_INP2           CRC_0.CHANNEL[1].INP.R        /* Input Register */
#define CRC_0_CSTAT2         CRC_0.CHANNEL[1].CSTAT.R      /* Current Status Register */
#define CRC_0_OUTP2          CRC_0.CHANNEL[1].OUTP.R       /* Output Register */
#define CRC_0_CFG3           CRC_0.CHANNEL[2].CFG.R        /* Configuration Register */
#define CRC_0_INP3           CRC_0.CHANNEL[2].INP.R        /* Input Register */
#define CRC_0_CSTAT3         CRC_0.CHANNEL[2].CSTAT.R      /* Current Status Register */
#define CRC_0_OUTP3          CRC_0.CHANNEL[2].OUTP.R       /* Output Register */

#define CRC_1_CFG1           CRC_1.CHANNEL[0].CFG.R        /* Configuration Register */
#define CRC_1_INP1           CRC_1.CHANNEL[0].INP.R        /* Input Register */
#define CRC_1_CSTAT1         CRC_1.CHANNEL[0].CSTAT.R      /* Current Status Register */
#define CRC_1_OUTP1          CRC_1.CHANNEL[0].OUTP.R       /* Output Register */
#define CRC_1_CFG2           CRC_1.CHANNEL[1].CFG.R        /* Configuration Register */
#define CRC_1_INP2           CRC_1.CHANNEL[1].INP.R        /* Input Register */
#define CRC_1_CSTAT2         CRC_1.CHANNEL[1].CSTAT.R      /* Current Status Register */
#define CRC_1_OUTP2          CRC_1.CHANNEL[1].OUTP.R       /* Output Register */
#define CRC_1_CFG3           CRC_1.CHANNEL[2].CFG.R        /* Configuration Register */
#define CRC_1_INP3           CRC_1.CHANNEL[2].INP.R        /* Input Register */
#define CRC_1_CSTAT3         CRC_1.CHANNEL[2].CSTAT.R      /* Current Status Register */
#define CRC_1_OUTP3          CRC_1.CHANNEL[2].OUTP.R       /* Output Register */

/* CSI */
#define MIPICSI_0_DPHY_RSTCFG MIPICSI_0.DPHY_RSTCFG.R      /* DPHY Reset Configuration */
#define MIPICSI_0_DPHY_CLEAR MIPICSI_0.DPHY_CLEAR.R        /* DPHY Clear */
#define MIPICSI_0_DPHY_FREQCFG MIPICSI_0.DPHY_FREQCFG.R    /* DPHY Frequency Configuration */
#define MIPICSI_0_RX_RXNULANE MIPICSI_0.RX_RXNULANE.R      /* Receive Number of Lanes Configuration */
#define MIPICSI_0_RX_RXENABLE MIPICSI_0.RX_RXENABLE.R      /* Receive Enable Configuration */
#define MIPICSI_0_RX_RXLANESWAP MIPICSI_0.RX_RXLANESWAP.R  /* Receive Lane Swap Configuration */
#define MIPICSI_0_RX_CLKCS   MIPICSI_0.RX_CLKCS.R          /* Clock Configuration Status */
#define MIPICSI_0_RX_LAN0CS  MIPICSI_0.RX_LANCS[0].R       /* D-PHY Lane 0 Configuration Status */
#define MIPICSI_0_RX_LAN1CS  MIPICSI_0.RX_LANCS[1].R       /* D-PHY Lane 1 Configuration Status */
#define MIPICSI_0_RX_LAN2CS  MIPICSI_0.RX_LANCS[2].R       /* D-PHY Lane 2 Configuration Status */
#define MIPICSI_0_RX_LAN3CS  MIPICSI_0.RX_LANCS[3].R       /* D-PHY Lane 3 Configuration Status */
#define MIPICSI_0_RX_SR      MIPICSI_0.RX_SR.R             /* Soft Reset Config */
#define MIPICSI_0_RX_VCENABLE MIPICSI_0.RX_VCENABLE.R      /* Receive Virtual Channel Enable Configuration */
#define MIPICSI_0_RX_DATAIDR MIPICSI_0.RX_DATAIDR.R        /* Receive Data ID Report */
#define MIPICSI_0_RX_INVIDR  MIPICSI_0.RX_INVIDR.R         /* Receive Invalid Data ID Report */
#define MIPICSI_0_RX_GNSPR_VC0 MIPICSI_0.RX_GNSPR_VC[0].R  /* Receive Generic Short Packet Report */
#define MIPICSI_0_RX_GNSPR_VC1 MIPICSI_0.RX_GNSPR_VC[1].R  /* Receive Generic Short Packet Report */
#define MIPICSI_0_RX_GNSPR_VC2 MIPICSI_0.RX_GNSPR_VC[2].R  /* Receive Generic Short Packet Report */
#define MIPICSI_0_RX_GNSPR_VC3 MIPICSI_0.RX_GNSPR_VC[3].R  /* Receive Generic Short Packet Report */
#define MIPICSI_0_RX_NUMPKTS_VC0 MIPICSI_0.RX_NUMPKTS_VC[0].R /* Receive Number of Packets for VC */
#define MIPICSI_0_RX_NUMPKTS_VC1 MIPICSI_0.RX_NUMPKTS_VC[1].R /* Receive Number of Packets for VC */
#define MIPICSI_0_RX_NUMPKTS_VC2 MIPICSI_0.RX_NUMPKTS_VC[2].R /* Receive Number of Packets for VC */
#define MIPICSI_0_RX_NUMPKTS_VC3 MIPICSI_0.RX_NUMPKTS_VC[3].R /* Receive Number of Packets for VC */
#define MIPICSI_0_RX_VCINTRS MIPICSI_0.RX_VCINTRS.R        /* Receive VC Data Interrupt Status */
#define MIPICSI_0_RX_VCINTRE MIPICSI_0.RX_VCINTRE.R        /* Receive Data VC Event Interrupt Enable */
#define MIPICSI_0_CONTROLLER_STATUS_REGISTER MIPICSI_0.CONTROLLER_STATUS_REGISTER.R /* Controller Status */
#define MIPICSI_0_CRC_REGISTER MIPICSI_0.CRC_REGISTER.R    /* CRC */
#define MIPICSI_0_CONTROLLER_ERR_STATUS_REGISTER MIPICSI_0.CONTROLLER_ERR_STATUS_REGISTER.R /* Controller Error Status */
#define MIPICSI_0_CONTROLLER_ERR_IE MIPICSI_0.CONTROLLER_ERR_IE.R /* Controller Interrupt Enable */
#define MIPICSI_0_PPERRIS0   MIPICSI_0.RX_VC[0].PPERRIS.R  /* Receive Data Protocol and Packet Error Interrupt Status for VC0 */
#define MIPICSI_0_PPERRIE0   MIPICSI_0.RX_VC[0].PPERRIE.R  /* Receive Data Protocol and Packet Error Interrupt Enable for VC0 */
#define MIPICSI_0_ERRPOS0    MIPICSI_0.RX_VC[0].ERRPOS.R   /* Receive ECC 1-Bit Error Position for VC0 */
#define MIPICSI_0_NUMPPERR0  MIPICSI_0.RX_VC[0].NUMPPERR.R /* Receive Packets Number of Protocol Errors for VC0 */
#define MIPICSI_0_PPERRIS1   MIPICSI_0.RX_VC[1].PPERRIS.R  /* Receive Data Protocol and Packet Error Interrupt Status for VC1 */
#define MIPICSI_0_PPERRIE1   MIPICSI_0.RX_VC[1].PPERRIE.R  /* Receive Data Protocol and Packet Error Interrupt Enable for VC1 */
#define MIPICSI_0_ERRPOS1    MIPICSI_0.RX_VC[1].ERRPOS.R   /* Receive ECC 1-Bit Error Position for VC1 */
#define MIPICSI_0_NUMPPERR1  MIPICSI_0.RX_VC[1].NUMPPERR.R /* Receive Packets Number of Protocol Errors for VC1 */
#define MIPICSI_0_PPERRIS2   MIPICSI_0.RX_VC[2].PPERRIS.R  /* Receive Data Protocol and Packet Error Interrupt Status for VC2 */
#define MIPICSI_0_PPERRIE2   MIPICSI_0.RX_VC[2].PPERRIE.R  /* Receive Data Protocol and Packet Error Interrupt Enable for VC2 */
#define MIPICSI_0_ERRPOS2    MIPICSI_0.RX_VC[2].ERRPOS.R   /* Receive ECC 1-Bit Error Position for VC2 */
#define MIPICSI_0_NUMPPERR2  MIPICSI_0.RX_VC[2].NUMPPERR.R /* Receive Packets Number of Protocol Errors for VC2 */
#define MIPICSI_0_PPERRIS3   MIPICSI_0.RX_VC[3].PPERRIS.R  /* Receive Data Protocol and Packet Error Interrupt Status for VC3 */
#define MIPICSI_0_PPERRIE3   MIPICSI_0.RX_VC[3].PPERRIE.R  /* Receive Data Protocol and Packet Error Interrupt Enable for VC3 */
#define MIPICSI_0_ERRPOS3    MIPICSI_0.RX_VC[3].ERRPOS.R   /* Receive ECC 1-Bit Error Position for VC3 */
#define MIPICSI_0_NUMPPERR3  MIPICSI_0.RX_VC[3].NUMPPERR.R /* Receive Packets Number of Protocol Errors for VC3 */
#define MIPICSI_0_RX_PHYERRIS MIPICSI_0.RX_PHYERRIS.R      /* Receive Data PHY Level Error Interrupt Status */
#define MIPICSI_0_RX_PHYERRIE MIPICSI_0.RX_PHYERRIE.R      /* Receive Data PHY Level Error Interrupt Enable */
#define MIPICSI_0_RX_STAT_CONFIG MIPICSI_0.RX_STAT_CONFIG.R /* Receive Data Statistical Computation Configuration */
#define MIPICSI_0_RX_CBUF_CONFIG0 MIPICSI_0.RX[0].CBUF_CONFIG.R /* Receive Data Circular Buffer Configuration */
#define MIPICSI_0_RX_INPLINELEN_CONFIG0 MIPICSI_0.RX[0].INPLINELEN_CONFIG.R /* Receive Data Input Line Length Configuration */
#define MIPICSI_0_RX_LINELEN_CONFIG0 MIPICSI_0.RX[0].LINELEN_CONFIG.R /* Receive Data Line Length Configuration */
#define MIPICSI_0_RX_NUMLINES_CONFIG0 MIPICSI_0.RX[0].NUMLINES_CONFIG.R /* Receive Data Expected Number of Lines Configuration */
#define MIPICSI_0_RX_CBUF_SRTPTR0 MIPICSI_0.RX[0].CBUF_SRTPTR.R /* Receive Data Circular Buffer Start Pointer */
#define MIPICSI_0_RX_CBUF_BUFLEN0 MIPICSI_0.RX[0].CBUF_BUFLEN.R /* Receive Data Circular Buffer Length */
#define MIPICSI_0_RX_CBUF_NUMLINE0 MIPICSI_0.RX[0].CBUF_NUMLINE.R /* Receive Data Circular Buffer Number of Lines */
#define MIPICSI_0_RX_CBUF_LPDI0 MIPICSI_0.RX[0].CBUF_LPDI.R /* Receive Data Circular Buffer Lines Done Generation */
#define MIPICSI_0_RX_CBUF_NXTLINE0 MIPICSI_0.RX[0].CBUF_NXTLINE.R /* Receive Data Circular Buffer Next Row Indication */
#define MIPICSI_0_RX_CBUF_RXLINE0 MIPICSI_0.RX[0].CBUF_RXLINE.R /* Receive Data Circular Buffer Total Lines Received Status */
#define MIPICSI_0_RX_CBUF_ERRLEN0 MIPICSI_0.RX[0].CBUF_ERRLEN.R /* Receive Data Circular Buffer Error Line Length Status */
#define MIPICSI_0_RX_CBUF_ERRLINE0 MIPICSI_0.RX[0].CBUF_ERRLINE.R /* Receive Data Circular Buffer Line Number for Incorrect Length Status */
#define MIPICSI_0_RX_CBUF_CONFIG1 MIPICSI_0.RX[1].CBUF_CONFIG.R /* Receive Data Circular Buffer Configuration */
#define MIPICSI_0_RX_INPLINELEN_CONFIG1 MIPICSI_0.RX[1].INPLINELEN_CONFIG.R /* Receive Data Input Line Length Configuration */
#define MIPICSI_0_RX_LINELEN_CONFIG1 MIPICSI_0.RX[1].LINELEN_CONFIG.R /* Receive Data Line Length Configuration */
#define MIPICSI_0_RX_NUMLINES_CONFIG1 MIPICSI_0.RX[1].NUMLINES_CONFIG.R /* Receive Data Expected Number of Lines Configuration */
#define MIPICSI_0_RX_CBUF_SRTPTR1 MIPICSI_0.RX[1].CBUF_SRTPTR.R /* Receive Data Circular Buffer Start Pointer */
#define MIPICSI_0_RX_CBUF_BUFLEN1 MIPICSI_0.RX[1].CBUF_BUFLEN.R /* Receive Data Circular Buffer Length */
#define MIPICSI_0_RX_CBUF_NUMLINE1 MIPICSI_0.RX[1].CBUF_NUMLINE.R /* Receive Data Circular Buffer Number of Lines */
#define MIPICSI_0_RX_CBUF_LPDI1 MIPICSI_0.RX[1].CBUF_LPDI.R /* Receive Data Circular Buffer Lines Done Generation */
#define MIPICSI_0_RX_CBUF_NXTLINE1 MIPICSI_0.RX[1].CBUF_NXTLINE.R /* Receive Data Circular Buffer Next Row Indication */
#define MIPICSI_0_RX_CBUF_RXLINE1 MIPICSI_0.RX[1].CBUF_RXLINE.R /* Receive Data Circular Buffer Total Lines Received Status */
#define MIPICSI_0_RX_CBUF_ERRLEN1 MIPICSI_0.RX[1].CBUF_ERRLEN.R /* Receive Data Circular Buffer Error Line Length Status */
#define MIPICSI_0_RX_CBUF_ERRLINE1 MIPICSI_0.RX[1].CBUF_ERRLINE.R /* Receive Data Circular Buffer Line Number for Incorrect Length Status */
#define MIPICSI_0_RX_CBUF_CONFIG2 MIPICSI_0.RX[2].CBUF_CONFIG.R /* Receive Data Circular Buffer Configuration */
#define MIPICSI_0_RX_INPLINELEN_CONFIG2 MIPICSI_0.RX[2].INPLINELEN_CONFIG.R /* Receive Data Input Line Length Configuration */
#define MIPICSI_0_RX_LINELEN_CONFIG2 MIPICSI_0.RX[2].LINELEN_CONFIG.R /* Receive Data Line Length Configuration */
#define MIPICSI_0_RX_NUMLINES_CONFIG2 MIPICSI_0.RX[2].NUMLINES_CONFIG.R /* Receive Data Expected Number of Lines Configuration */
#define MIPICSI_0_RX_CBUF_SRTPTR2 MIPICSI_0.RX[2].CBUF_SRTPTR.R /* Receive Data Circular Buffer Start Pointer */
#define MIPICSI_0_RX_CBUF_BUFLEN2 MIPICSI_0.RX[2].CBUF_BUFLEN.R /* Receive Data Circular Buffer Length */
#define MIPICSI_0_RX_CBUF_NUMLINE2 MIPICSI_0.RX[2].CBUF_NUMLINE.R /* Receive Data Circular Buffer Number of Lines */
#define MIPICSI_0_RX_CBUF_LPDI2 MIPICSI_0.RX[2].CBUF_LPDI.R /* Receive Data Circular Buffer Lines Done Generation */
#define MIPICSI_0_RX_CBUF_NXTLINE2 MIPICSI_0.RX[2].CBUF_NXTLINE.R /* Receive Data Circular Buffer Next Row Indication */
#define MIPICSI_0_RX_CBUF_RXLINE2 MIPICSI_0.RX[2].CBUF_RXLINE.R /* Receive Data Circular Buffer Total Lines Received Status */
#define MIPICSI_0_RX_CBUF_ERRLEN2 MIPICSI_0.RX[2].CBUF_ERRLEN.R /* Receive Data Circular Buffer Error Line Length Status */
#define MIPICSI_0_RX_CBUF_ERRLINE2 MIPICSI_0.RX[2].CBUF_ERRLINE.R /* Receive Data Circular Buffer Line Number for Incorrect Length Status */
#define MIPICSI_0_RX_CBUF_CONFIG3 MIPICSI_0.RX[3].CBUF_CONFIG.R /* Receive Data Circular Buffer Configuration */
#define MIPICSI_0_RX_INPLINELEN_CONFIG3 MIPICSI_0.RX[3].INPLINELEN_CONFIG.R /* Receive Data Input Line Length Configuration */
#define MIPICSI_0_RX_LINELEN_CONFIG3 MIPICSI_0.RX[3].LINELEN_CONFIG.R /* Receive Data Line Length Configuration */
#define MIPICSI_0_RX_NUMLINES_CONFIG3 MIPICSI_0.RX[3].NUMLINES_CONFIG.R /* Receive Data Expected Number of Lines Configuration */
#define MIPICSI_0_RX_CBUF_SRTPTR3 MIPICSI_0.RX[3].CBUF_SRTPTR.R /* Receive Data Circular Buffer Start Pointer */
#define MIPICSI_0_RX_CBUF_BUFLEN3 MIPICSI_0.RX[3].CBUF_BUFLEN.R /* Receive Data Circular Buffer Length */
#define MIPICSI_0_RX_CBUF_NUMLINE3 MIPICSI_0.RX[3].CBUF_NUMLINE.R /* Receive Data Circular Buffer Number of Lines */
#define MIPICSI_0_RX_CBUF_LPDI3 MIPICSI_0.RX[3].CBUF_LPDI.R /* Receive Data Circular Buffer Lines Done Generation */
#define MIPICSI_0_RX_CBUF_NXTLINE3 MIPICSI_0.RX[3].CBUF_NXTLINE.R /* Receive Data Circular Buffer Next Row Indication */
#define MIPICSI_0_RX_CBUF_RXLINE3 MIPICSI_0.RX[3].CBUF_RXLINE.R /* Receive Data Circular Buffer Total Lines Received Status */
#define MIPICSI_0_RX_CBUF_ERRLEN3 MIPICSI_0.RX[3].CBUF_ERRLEN.R /* Receive Data Circular Buffer Error Line Length Status */
#define MIPICSI_0_RX_CBUF_ERRLINE3 MIPICSI_0.RX[3].CBUF_ERRLINE.R /* Receive Data Circular Buffer Line Number for Incorrect Length Status */
#define MIPICSI_0_RX_CBUF_CONFIG4 MIPICSI_0.RX[4].CBUF_CONFIG.R /* Receive Data Circular Buffer Configuration */
#define MIPICSI_0_RX_INPLINELEN_CONFIG4 MIPICSI_0.RX[4].INPLINELEN_CONFIG.R /* Receive Data Input Line Length Configuration */
#define MIPICSI_0_RX_LINELEN_CONFIG4 MIPICSI_0.RX[4].LINELEN_CONFIG.R /* Receive Data Line Length Configuration */
#define MIPICSI_0_RX_NUMLINES_CONFIG4 MIPICSI_0.RX[4].NUMLINES_CONFIG.R /* Receive Data Expected Number of Lines Configuration */
#define MIPICSI_0_RX_CBUF_SRTPTR4 MIPICSI_0.RX[4].CBUF_SRTPTR.R /* Receive Data Circular Buffer Start Pointer */
#define MIPICSI_0_RX_CBUF_BUFLEN4 MIPICSI_0.RX[4].CBUF_BUFLEN.R /* Receive Data Circular Buffer Length */
#define MIPICSI_0_RX_CBUF_NUMLINE4 MIPICSI_0.RX[4].CBUF_NUMLINE.R /* Receive Data Circular Buffer Number of Lines */
#define MIPICSI_0_RX_CBUF_LPDI4 MIPICSI_0.RX[4].CBUF_LPDI.R /* Receive Data Circular Buffer Lines Done Generation */
#define MIPICSI_0_RX_CBUF_NXTLINE4 MIPICSI_0.RX[4].CBUF_NXTLINE.R /* Receive Data Circular Buffer Next Row Indication */
#define MIPICSI_0_RX_CBUF_RXLINE4 MIPICSI_0.RX[4].CBUF_RXLINE.R /* Receive Data Circular Buffer Total Lines Received Status */
#define MIPICSI_0_RX_CBUF_ERRLEN4 MIPICSI_0.RX[4].CBUF_ERRLEN.R /* Receive Data Circular Buffer Error Line Length Status */
#define MIPICSI_0_RX_CBUF_ERRLINE4 MIPICSI_0.RX[4].CBUF_ERRLINE.R /* Receive Data Circular Buffer Line Number for Incorrect Length Status */
#define MIPICSI_0_RX_CBUF_CONFIG5 MIPICSI_0.RX[5].CBUF_CONFIG.R /* Receive Data Circular Buffer Configuration */
#define MIPICSI_0_RX_INPLINELEN_CONFIG5 MIPICSI_0.RX[5].INPLINELEN_CONFIG.R /* Receive Data Input Line Length Configuration */
#define MIPICSI_0_RX_LINELEN_CONFIG5 MIPICSI_0.RX[5].LINELEN_CONFIG.R /* Receive Data Line Length Configuration */
#define MIPICSI_0_RX_NUMLINES_CONFIG5 MIPICSI_0.RX[5].NUMLINES_CONFIG.R /* Receive Data Expected Number of Lines Configuration */
#define MIPICSI_0_RX_CBUF_SRTPTR5 MIPICSI_0.RX[5].CBUF_SRTPTR.R /* Receive Data Circular Buffer Start Pointer */
#define MIPICSI_0_RX_CBUF_BUFLEN5 MIPICSI_0.RX[5].CBUF_BUFLEN.R /* Receive Data Circular Buffer Length */
#define MIPICSI_0_RX_CBUF_NUMLINE5 MIPICSI_0.RX[5].CBUF_NUMLINE.R /* Receive Data Circular Buffer Number of Lines */
#define MIPICSI_0_RX_CBUF_LPDI5 MIPICSI_0.RX[5].CBUF_LPDI.R /* Receive Data Circular Buffer Lines Done Generation */
#define MIPICSI_0_RX_CBUF_NXTLINE5 MIPICSI_0.RX[5].CBUF_NXTLINE.R /* Receive Data Circular Buffer Next Row Indication */
#define MIPICSI_0_RX_CBUF_RXLINE5 MIPICSI_0.RX[5].CBUF_RXLINE.R /* Receive Data Circular Buffer Total Lines Received Status */
#define MIPICSI_0_RX_CBUF_ERRLEN5 MIPICSI_0.RX[5].CBUF_ERRLEN.R /* Receive Data Circular Buffer Error Line Length Status */
#define MIPICSI_0_RX_CBUF_ERRLINE5 MIPICSI_0.RX[5].CBUF_ERRLINE.R /* Receive Data Circular Buffer Line Number for Incorrect Length Status */
#define MIPICSI_0_RX_CBUF_CONFIG6 MIPICSI_0.RX[6].CBUF_CONFIG.R /* Receive Data Circular Buffer Configuration */
#define MIPICSI_0_RX_INPLINELEN_CONFIG6 MIPICSI_0.RX[6].INPLINELEN_CONFIG.R /* Receive Data Input Line Length Configuration */
#define MIPICSI_0_RX_LINELEN_CONFIG6 MIPICSI_0.RX[6].LINELEN_CONFIG.R /* Receive Data Line Length Configuration */
#define MIPICSI_0_RX_NUMLINES_CONFIG6 MIPICSI_0.RX[6].NUMLINES_CONFIG.R /* Receive Data Expected Number of Lines Configuration */
#define MIPICSI_0_RX_CBUF_SRTPTR6 MIPICSI_0.RX[6].CBUF_SRTPTR.R /* Receive Data Circular Buffer Start Pointer */
#define MIPICSI_0_RX_CBUF_BUFLEN6 MIPICSI_0.RX[6].CBUF_BUFLEN.R /* Receive Data Circular Buffer Length */
#define MIPICSI_0_RX_CBUF_NUMLINE6 MIPICSI_0.RX[6].CBUF_NUMLINE.R /* Receive Data Circular Buffer Number of Lines */
#define MIPICSI_0_RX_CBUF_LPDI6 MIPICSI_0.RX[6].CBUF_LPDI.R /* Receive Data Circular Buffer Lines Done Generation */
#define MIPICSI_0_RX_CBUF_NXTLINE6 MIPICSI_0.RX[6].CBUF_NXTLINE.R /* Receive Data Circular Buffer Next Row Indication */
#define MIPICSI_0_RX_CBUF_RXLINE6 MIPICSI_0.RX[6].CBUF_RXLINE.R /* Receive Data Circular Buffer Total Lines Received Status */
#define MIPICSI_0_RX_CBUF_ERRLEN6 MIPICSI_0.RX[6].CBUF_ERRLEN.R /* Receive Data Circular Buffer Error Line Length Status */
#define MIPICSI_0_RX_CBUF_ERRLINE6 MIPICSI_0.RX[6].CBUF_ERRLINE.R /* Receive Data Circular Buffer Line Number for Incorrect Length Status */
#define MIPICSI_0_RX_CBUF_CONFIG7 MIPICSI_0.RX[7].CBUF_CONFIG.R /* Receive Data Circular Buffer Configuration */
#define MIPICSI_0_RX_INPLINELEN_CONFIG7 MIPICSI_0.RX[7].INPLINELEN_CONFIG.R /* Receive Data Input Line Length Configuration */
#define MIPICSI_0_RX_LINELEN_CONFIG7 MIPICSI_0.RX[7].LINELEN_CONFIG.R /* Receive Data Line Length Configuration */
#define MIPICSI_0_RX_NUMLINES_CONFIG7 MIPICSI_0.RX[7].NUMLINES_CONFIG.R /* Receive Data Expected Number of Lines Configuration */
#define MIPICSI_0_RX_CBUF_SRTPTR7 MIPICSI_0.RX[7].CBUF_SRTPTR.R /* Receive Data Circular Buffer Start Pointer */
#define MIPICSI_0_RX_CBUF_BUFLEN7 MIPICSI_0.RX[7].CBUF_BUFLEN.R /* Receive Data Circular Buffer Length */
#define MIPICSI_0_RX_CBUF_NUMLINE7 MIPICSI_0.RX[7].CBUF_NUMLINE.R /* Receive Data Circular Buffer Number of Lines */
#define MIPICSI_0_RX_CBUF_LPDI7 MIPICSI_0.RX[7].CBUF_LPDI.R /* Receive Data Circular Buffer Lines Done Generation */
#define MIPICSI_0_RX_CBUF_NXTLINE7 MIPICSI_0.RX[7].CBUF_NXTLINE.R /* Receive Data Circular Buffer Next Row Indication */
#define MIPICSI_0_RX_CBUF_RXLINE7 MIPICSI_0.RX[7].CBUF_RXLINE.R /* Receive Data Circular Buffer Total Lines Received Status */
#define MIPICSI_0_RX_CBUF_ERRLEN7 MIPICSI_0.RX[7].CBUF_ERRLEN.R /* Receive Data Circular Buffer Error Line Length Status */
#define MIPICSI_0_RX_CBUF_ERRLINE7 MIPICSI_0.RX[7].CBUF_ERRLINE.R /* Receive Data Circular Buffer Line Number for Incorrect Length Status */
#define MIPICSI_0_RX_CBUF_CONFIG8 MIPICSI_0.RX[8].CBUF_CONFIG.R /* Receive Data Circular Buffer Configuration */
#define MIPICSI_0_RX_INPLINELEN_CONFIG8 MIPICSI_0.RX[8].INPLINELEN_CONFIG.R /* Receive Data Input Line Length Configuration */
#define MIPICSI_0_RX_LINELEN_CONFIG8 MIPICSI_0.RX[8].LINELEN_CONFIG.R /* Receive Data Line Length Configuration */
#define MIPICSI_0_RX_NUMLINES_CONFIG8 MIPICSI_0.RX[8].NUMLINES_CONFIG.R /* Receive Data Expected Number of Lines Configuration */
#define MIPICSI_0_RX_CBUF_SRTPTR8 MIPICSI_0.RX[8].CBUF_SRTPTR.R /* Receive Data Circular Buffer Start Pointer */
#define MIPICSI_0_RX_CBUF_BUFLEN8 MIPICSI_0.RX[8].CBUF_BUFLEN.R /* Receive Data Circular Buffer Length */
#define MIPICSI_0_RX_CBUF_NUMLINE8 MIPICSI_0.RX[8].CBUF_NUMLINE.R /* Receive Data Circular Buffer Number of Lines */
#define MIPICSI_0_RX_CBUF_LPDI8 MIPICSI_0.RX[8].CBUF_LPDI.R /* Receive Data Circular Buffer Lines Done Generation */
#define MIPICSI_0_RX_CBUF_NXTLINE8 MIPICSI_0.RX[8].CBUF_NXTLINE.R /* Receive Data Circular Buffer Next Row Indication */
#define MIPICSI_0_RX_CBUF_RXLINE8 MIPICSI_0.RX[8].CBUF_RXLINE.R /* Receive Data Circular Buffer Total Lines Received Status */
#define MIPICSI_0_RX_CBUF_ERRLEN8 MIPICSI_0.RX[8].CBUF_ERRLEN.R /* Receive Data Circular Buffer Error Line Length Status */
#define MIPICSI_0_RX_CBUF_ERRLINE8 MIPICSI_0.RX[8].CBUF_ERRLINE.R /* Receive Data Circular Buffer Line Number for Incorrect Length Status */
#define MIPICSI_0_RX_CBUF_CONFIG9 MIPICSI_0.RX[9].CBUF_CONFIG.R /* Receive Data Circular Buffer Configuration */
#define MIPICSI_0_RX_INPLINELEN_CONFIG9 MIPICSI_0.RX[9].INPLINELEN_CONFIG.R /* Receive Data Input Line Length Configuration */
#define MIPICSI_0_RX_LINELEN_CONFIG9 MIPICSI_0.RX[9].LINELEN_CONFIG.R /* Receive Data Line Length Configuration */
#define MIPICSI_0_RX_NUMLINES_CONFIG9 MIPICSI_0.RX[9].NUMLINES_CONFIG.R /* Receive Data Expected Number of Lines Configuration */
#define MIPICSI_0_RX_CBUF_SRTPTR9 MIPICSI_0.RX[9].CBUF_SRTPTR.R /* Receive Data Circular Buffer Start Pointer */
#define MIPICSI_0_RX_CBUF_BUFLEN9 MIPICSI_0.RX[9].CBUF_BUFLEN.R /* Receive Data Circular Buffer Length */
#define MIPICSI_0_RX_CBUF_NUMLINE9 MIPICSI_0.RX[9].CBUF_NUMLINE.R /* Receive Data Circular Buffer Number of Lines */
#define MIPICSI_0_RX_CBUF_LPDI9 MIPICSI_0.RX[9].CBUF_LPDI.R /* Receive Data Circular Buffer Lines Done Generation */
#define MIPICSI_0_RX_CBUF_NXTLINE9 MIPICSI_0.RX[9].CBUF_NXTLINE.R /* Receive Data Circular Buffer Next Row Indication */
#define MIPICSI_0_RX_CBUF_RXLINE9 MIPICSI_0.RX[9].CBUF_RXLINE.R /* Receive Data Circular Buffer Total Lines Received Status */
#define MIPICSI_0_RX_CBUF_ERRLEN9 MIPICSI_0.RX[9].CBUF_ERRLEN.R /* Receive Data Circular Buffer Error Line Length Status */
#define MIPICSI_0_RX_CBUF_ERRLINE9 MIPICSI_0.RX[9].CBUF_ERRLINE.R /* Receive Data Circular Buffer Line Number for Incorrect Length Status */
#define MIPICSI_0_RX_CBUF_CONFIG10 MIPICSI_0.RX[10].CBUF_CONFIG.R /* Receive Data Circular Buffer Configuration */
#define MIPICSI_0_RX_INPLINELEN_CONFIG10 MIPICSI_0.RX[10].INPLINELEN_CONFIG.R /* Receive Data Input Line Length Configuration */
#define MIPICSI_0_RX_LINELEN_CONFIG10 MIPICSI_0.RX[10].LINELEN_CONFIG.R /* Receive Data Line Length Configuration */
#define MIPICSI_0_RX_NUMLINES_CONFIG10 MIPICSI_0.RX[10].NUMLINES_CONFIG.R /* Receive Data Expected Number of Lines Configuration */
#define MIPICSI_0_RX_CBUF_SRTPTR10 MIPICSI_0.RX[10].CBUF_SRTPTR.R /* Receive Data Circular Buffer Start Pointer */
#define MIPICSI_0_RX_CBUF_BUFLEN10 MIPICSI_0.RX[10].CBUF_BUFLEN.R /* Receive Data Circular Buffer Length */
#define MIPICSI_0_RX_CBUF_NUMLINE10 MIPICSI_0.RX[10].CBUF_NUMLINE.R /* Receive Data Circular Buffer Number of Lines */
#define MIPICSI_0_RX_CBUF_LPDI10 MIPICSI_0.RX[10].CBUF_LPDI.R /* Receive Data Circular Buffer Lines Done Generation */
#define MIPICSI_0_RX_CBUF_NXTLINE10 MIPICSI_0.RX[10].CBUF_NXTLINE.R /* Receive Data Circular Buffer Next Row Indication */
#define MIPICSI_0_RX_CBUF_RXLINE10 MIPICSI_0.RX[10].CBUF_RXLINE.R /* Receive Data Circular Buffer Total Lines Received Status */
#define MIPICSI_0_RX_CBUF_ERRLEN10 MIPICSI_0.RX[10].CBUF_ERRLEN.R /* Receive Data Circular Buffer Error Line Length Status */
#define MIPICSI_0_RX_CBUF_ERRLINE10 MIPICSI_0.RX[10].CBUF_ERRLINE.R /* Receive Data Circular Buffer Line Number for Incorrect Length Status */
#define MIPICSI_0_RX_CBUF_CONFIG11 MIPICSI_0.RX[11].CBUF_CONFIG.R /* Receive Data Circular Buffer Configuration */
#define MIPICSI_0_RX_INPLINELEN_CONFIG11 MIPICSI_0.RX[11].INPLINELEN_CONFIG.R /* Receive Data Input Line Length Configuration */
#define MIPICSI_0_RX_LINELEN_CONFIG11 MIPICSI_0.RX[11].LINELEN_CONFIG.R /* Receive Data Line Length Configuration */
#define MIPICSI_0_RX_NUMLINES_CONFIG11 MIPICSI_0.RX[11].NUMLINES_CONFIG.R /* Receive Data Expected Number of Lines Configuration */
#define MIPICSI_0_RX_CBUF_SRTPTR11 MIPICSI_0.RX[11].CBUF_SRTPTR.R /* Receive Data Circular Buffer Start Pointer */
#define MIPICSI_0_RX_CBUF_BUFLEN11 MIPICSI_0.RX[11].CBUF_BUFLEN.R /* Receive Data Circular Buffer Length */
#define MIPICSI_0_RX_CBUF_NUMLINE11 MIPICSI_0.RX[11].CBUF_NUMLINE.R /* Receive Data Circular Buffer Number of Lines */
#define MIPICSI_0_RX_CBUF_LPDI11 MIPICSI_0.RX[11].CBUF_LPDI.R /* Receive Data Circular Buffer Lines Done Generation */
#define MIPICSI_0_RX_CBUF_NXTLINE11 MIPICSI_0.RX[11].CBUF_NXTLINE.R /* Receive Data Circular Buffer Next Row Indication */
#define MIPICSI_0_RX_CBUF_RXLINE11 MIPICSI_0.RX[11].CBUF_RXLINE.R /* Receive Data Circular Buffer Total Lines Received Status */
#define MIPICSI_0_RX_CBUF_ERRLEN11 MIPICSI_0.RX[11].CBUF_ERRLEN.R /* Receive Data Circular Buffer Error Line Length Status */
#define MIPICSI_0_RX_CBUF_ERRLINE11 MIPICSI_0.RX[11].CBUF_ERRLINE.R /* Receive Data Circular Buffer Line Number for Incorrect Length Status */
#define MIPICSI_0_CBUF_INTRS MIPICSI_0.CBUF_INTRS.R        /* Receive Data Circular Buffer Error Interrupt Status */
#define MIPICSI_0_CBUF_INTRE MIPICSI_0.CBUF_INTRE.R        /* Receive Circular Buffer Error Interrupt Enable */
#define MIPICSI_0_RX_DROPDATAR0 MIPICSI_0.RX_DROPDATAR[0].R /* Received Drop Data Type and VC Report */
#define MIPICSI_0_RX_DROPDATAR1 MIPICSI_0.RX_DROPDATAR[1].R /* Received Drop Data Type and VC Report */
#define MIPICSI_0_RX_DROPDATAR2 MIPICSI_0.RX_DROPDATAR[2].R /* Received Drop Data Type and VC Report */
#define MIPICSI_0_RX_DROPDATAR3 MIPICSI_0.RX_DROPDATAR[3].R /* Received Drop Data Type and VC Report */
#define MIPICSI_0_RX_CBUF0_OUTCFG0 MIPICSI_0.RX_CBUF_OUTCFG[0].R /* Receive Data Channel Output Configuration */
#define MIPICSI_0_RX_CBUF1_OUTCFG1 MIPICSI_0.RX_CBUF_OUTCFG[1].R /* Receive Data Channel Output Configuration */
#define MIPICSI_0_RX_CBUF2_OUTCFG2 MIPICSI_0.RX_CBUF_OUTCFG[2].R /* Receive Data Channel Output Configuration */
#define MIPICSI_0_RX_CBUF3_OUTCFG3 MIPICSI_0.RX_CBUF_OUTCFG[3].R /* Receive Data Channel Output Configuration */
#define MIPICSI_0_RX_CBUF0_CHNLENBL0 MIPICSI_0.RX_CBUF_CHNLENBL[0].R /* Receive Data Channel Enable/Disable Configuration */
#define MIPICSI_0_RX_CBUF1_CHNLENBL1 MIPICSI_0.RX_CBUF_CHNLENBL[1].R /* Receive Data Channel Enable/Disable Configuration */
#define MIPICSI_0_RX_CBUF2_CHNLENBL2 MIPICSI_0.RX_CBUF_CHNLENBL[2].R /* Receive Data Channel Enable/Disable Configuration */
#define MIPICSI_0_RX_CBUF3_CHNLENBL3 MIPICSI_0.RX_CBUF_CHNLENBL[3].R /* Receive Data Channel Enable/Disable Configuration */
#define MIPICSI_0_RX_CBUF0_CHNLOFFSET0_0 MIPICSI_0.RX_CBUF0_CHNLOFFSET0_0.R /* Receive Data Channel Offset Compensation Configuration */
#define MIPICSI_0_RX_CBUF0_CHNLOFFSET1_0 MIPICSI_0.RX_CBUF0_CHNLOFFSET1_0.R /* Receive Data Channel Offset Compensation Configuration */
#define MIPICSI_0_RX_CBUF0_CHNLOFFSET2_0 MIPICSI_0.RX_CBUF0_CHNLOFFSET2_0.R /* Receive Data Channel Offset Compensation Configuration */
#define MIPICSI_0_RX_CBUF0_CHNLOFFSET3_0 MIPICSI_0.RX_CBUF0_CHNLOFFSET3_0.R /* Receive Data Channel Offset Compensation Configuration */
#define MIPICSI_0_RX_CBUF1_CHNLOFFSET0_1 MIPICSI_0.RX_CBUF1_CHNLOFFSET0_1.R /* Receive Data Channel Offset Compensation Configuration */
#define MIPICSI_0_RX_CBUF1_CHNLOFFSET1_1 MIPICSI_0.RX_CBUF1_CHNLOFFSET1_1.R /* Receive Data Channel Offset Compensation Configuration */
#define MIPICSI_0_RX_CBUF1_CHNLOFFSET2_1 MIPICSI_0.RX_CBUF1_CHNLOFFSET2_1.R /* Receive Data Channel Offset Compensation Configuration */
#define MIPICSI_0_RX_CBUF1_CHNLOFFSET3_1 MIPICSI_0.RX_CBUF1_CHNLOFFSET3_1.R /* Receive Data Channel Offset Compensation Configuration */
#define MIPICSI_0_RX_CBUF2_CHNLOFFSET0_2 MIPICSI_0.RX_CBUF2_CHNLOFFSET0_2.R /* Receive Data Channel Offset Compensation Configuration */
#define MIPICSI_0_RX_CBUF2_CHNLOFFSET1_2 MIPICSI_0.RX_CBUF2_CHNLOFFSET1_2.R /* Receive Data Channel Offset Compensation Configuration */
#define MIPICSI_0_RX_CBUF2_CHNLOFFSET2_2 MIPICSI_0.RX_CBUF2_CHNLOFFSET2_2.R /* Receive Data Channel Offset Compensation Configuration */
#define MIPICSI_0_RX_CBUF2_CHNLOFFSET3_2 MIPICSI_0.RX_CBUF2_CHNLOFFSET3_2.R /* Receive Data Channel Offset Compensation Configuration */
#define MIPICSI_0_RX_CBUF3_CHNLOFFSET0_3 MIPICSI_0.RX_CBUF3_CHNLOFFSET0_3.R /* Receive Data Channel Offset Compensation Configuration */
#define MIPICSI_0_RX_CBUF3_CHNLOFFSET1_3 MIPICSI_0.RX_CBUF3_CHNLOFFSET1_3.R /* Receive Data Channel Offset Compensation Configuration */
#define MIPICSI_0_RX_CBUF3_CHNLOFFSET2_3 MIPICSI_0.RX_CBUF3_CHNLOFFSET2_3.R /* Receive Data Channel Offset Compensation Configuration */
#define MIPICSI_0_RX_CBUF3_CHNLOFFSET3_3 MIPICSI_0.RX_CBUF3_CHNLOFFSET3_3.R /* Receive Data Channel Offset Compensation Configuration */
#define MIPICSI_0_RX_CHNL_INTRS MIPICSI_0.RX_CHNL_INTRS.R  /* Receive Data Channel Status */
#define MIPICSI_0_RX_CHNL_INTRE MIPICSI_0.RX_CHNL_INTRE.R  /* Receive Channel Interrupt Enable */
#define MIPICSI_0_WR_CHNL_INTRS MIPICSI_0.WR_CHNL_INTRS.R  /* AXI Write Channel Interrupt Status */
#define MIPICSI_0_WR_CHNL_INTRE MIPICSI_0.WR_CHNL_INTRE.R  /* AXI Write Channel Interrupt Enable */
#define MIPICSI_0_TURNCFG    MIPICSI_0.TURNCFG.R           /* Turnaround Request Configuration */
#define MIPICSI_0_TRIGGER_GPIO1 MIPICSI_0.TRIGGER_GPIO1.R  /* GPIO1 Pad Event Trigger Control */
#define MIPICSI_0_TRIGGER_SDMA1 MIPICSI_0.TRIGGER_SDMA1.R  /* SDMA1 Pad Event Trigger Control */
#define MIPICSI_0_TRIGGEREN_GPIO MIPICSI_0.TRIGGEREN_GPIO.R /* GPIO Pad Event Trigger Enable Control */
#define MIPICSI_0_TRIGGEREN_SDMA MIPICSI_0.TRIGGEREN_SDMA.R /* SDMA Pad Event Trigger Enable Control */
#define MIPICSI_0_DPHY_CALTYPE_CNTRL MIPICSI_0.DPHY_CALTYPE_CNTRL.R /* System Configuration */
#define MIPICSI_0_DPHY_SKEWCAL_CNTRL MIPICSI_0.DPHY_SKEWCAL_CNTRL.R /* System Configuration */
#define MIPICSI_0_DPHY_RX_STARTUP_OVERRIDE MIPICSI_0.DPHY_RX_STARTUP_OVERRIDE.R /* System Startup Observability */
#define MIPICSI_0_DPHY_DDLOSCFREQ_CFG1 MIPICSI_0.DPHY_DDLOSCFREQ_CFG1.R /* System Startup Override */
#define MIPICSI_0_DPHY_DDLOSCFREQ_CFG2 MIPICSI_0.DPHY_DDLOSCFREQ_CFG2.R /* System Startup Override */
#define MIPICSI_0_DPHY_DDLOSCFREQ_OVREN MIPICSI_0.DPHY_DDLOSCFREQ_OVREN.R /* System Startup Override */
#define MIPICSI_0_DPHY_RX_TERM_CAL_0 MIPICSI_0.DPHY_RX_TERM_CAL_0.R /* Termination Calibration Observability */
#define MIPICSI_0_DPHY_RX_TERM_CAL_1 MIPICSI_0.DPHY_RX_TERM_CAL_1.R /* Termination Calibration Observability */
#define MIPICSI_0_DPHY_CLOCK_LANE_CNTRL MIPICSI_0.DPHY_CLOCK_LANE_CNTRL.R /* Clock Lane Control */
#define MIPICSI_0_DPHY_CLKOFFSETCAL_OVRRIDE MIPICSI_0.DPHY_CLKOFFSETCAL_OVRRIDE.R /* Clock Lane Offset Cancellation Control */
#define MIPICSI_0_DPHY_CLKOFFSETCAL_OVRRIDEVAL MIPICSI_0.DPHY_CLKOFFSETCAL_OVRRIDEVAL.R /* Clock Lane Offset Cancellation Control 2 */
#define MIPICSI_0_DPHY_CLKCALVAL_COMPS MIPICSI_0.DPHY_CLKCALVAL_COMPS.R /* Clock Lane Offset Cancellation Observability 3 */
#define MIPICSI_0_DPHY_CLKOFFSETCAL_COMPS MIPICSI_0.DPHY_CLKOFFSETCAL_COMPS.R /* Clock Lane Offset Cancellation Observability */
#define MIPICSI_0_DPHY_RX_LPRXPON_LANE0 MIPICSI_0.DPHY_RX_LPRXPON_LANE0.R /* Lane 0 Low Power Receive Control */
#define MIPICSI_0_DPHY_DATALANE_DESKEW_COMPS0 MIPICSI_0.DPHY_DATALANE_DESKEW_COMPS0.R /* Lane 0 Observability */
#define MIPICSI_0_DPHY_DATAL0OFFSETCAL_OVRCNTRL MIPICSI_0.DPHY_DATAL0OFFSETCAL_OVRCNTRL.R /* Lane 0 Offset Compensation Control */
#define MIPICSI_0_DPHY_DATALOFFSETCAL_OVRVALUE0 MIPICSI_0.DPHY_DATALOFFSETCAL_OVRVALUE0.R /* Lane 0 Offset Compensation Control */
#define MIPICSI_0_DPHY_DATALANE_OFFSETCAL_COMPS0 MIPICSI_0.DPHY_DATALANE_OFFSETCAL_COMPS0.R /* Lane Offset Compensation Observability */
#define MIPICSI_0_DPHY_DATALOFFSETCAL_VALUE0 MIPICSI_0.DPHY_DATALOFFSETCAL_VALUE0.R /* Lane Offset Compensation Observability */
#define MIPICSI_0_DPHY_DATALANE_DDLTUNE_COMP0 MIPICSI_0.DPHY_DATALANE_DDLTUNE_COMP0.R /* Lane DDL Tune Observability */
#define MIPICSI_0_DPHY_DATALANE_DDLTUNE_VALUE0 MIPICSI_0.DPHY_DATALANE_DDLTUNE_VALUE0.R /* Lane 0 DDL Tune Observability */
#define MIPICSI_0_DPHY_DATALANE0_DESKEW_VALUE1 MIPICSI_0.DPHY_DATALANE0_DESKEW_VALUE1.R /* Lane 0 DDL Tune Observability */
#define MIPICSI_0_DPHY_DATALANE0_DESKEW_VALUE2 MIPICSI_0.DPHY_DATALANE0_DESKEW_VALUE2.R /* Lane 0 DDL Tune Observability */
#define MIPICSI_0_DPHY_DATALANE_DDLTUNE_OVRVALUE0 MIPICSI_0.DPHY_DATALANE_DDLTUNE_OVRVALUE0.R /* Lane 0 DDL Tune Control */
#define MIPICSI_0_DPHY_DATALANE0_DESKEW_OVRVALUE1 MIPICSI_0.DPHY_DATALANE0_DESKEW_OVRVALUE1.R /* Lane 0 DDL Tune Control */
#define MIPICSI_0_DPHY_DATALANE0_DESKEW_OVRVALUE2 MIPICSI_0.DPHY_DATALANE0_DESKEW_OVRVALUE2.R /* Lane 0 DDL Tune Control */
#define MIPICSI_0_DPHY_DATALANE_DESKEW_OVRVALUE11 MIPICSI_0.DPHY_DATALANE_DESKEW_OVRVALUE11.R /* Lane 1 Control */
#define MIPICSI_0_DPHY_DATALANE_DESKEW_OVRVALUE21 MIPICSI_0.DPHY_DATALANE_DESKEW_OVRVALUE21.R /* Lane 1 Control */
#define MIPICSI_0_DPHY_DATALANE_DESKEW_COMPS1 MIPICSI_0.DPHY_DATALANE_DESKEW_COMPS1.R /* Lane 0 Observability */
#define MIPICSI_0_DPHY_DATALANE_DESKEW_VALUE11 MIPICSI_0.DPHY_DATALANE_DESKEW_VALUE11.R /* Lane 1 Observability */
#define MIPICSI_0_DPHY_DATALANE_DESKEW_VALUE21 MIPICSI_0.DPHY_DATALANE_DESKEW_VALUE21.R /* Lane 1 Observability */
#define MIPICSI_0_DPHY_DATAL1OFFSETCAL_OVRCNTRL MIPICSI_0.DPHY_DATAL1OFFSETCAL_OVRCNTRL.R /* Lane 1 Offset Compensation Control */
#define MIPICSI_0_DPHY_DATALOFFSETCAL_OVRVALUE1 MIPICSI_0.DPHY_DATALOFFSETCAL_OVRVALUE1.R /* Lane 0 Offset Compensation Control */
#define MIPICSI_0_DPHY_DATALANE_OFFSETCAL_COMPS1 MIPICSI_0.DPHY_DATALANE_OFFSETCAL_COMPS1.R /* Lane Offset Compensation Observability */
#define MIPICSI_0_DPHY_DATALOFFSETCAL_VALUE1 MIPICSI_0.DPHY_DATALOFFSETCAL_VALUE1.R /* Lane Offset Compensation Observability */
#define MIPICSI_0_DPHY_DATALANE_DDLTUNE_COMP1 MIPICSI_0.DPHY_DATALANE_DDLTUNE_COMP1.R /* Lane DDL Tune Observability */
#define MIPICSI_0_DPHY_DATALANE_DDLTUNE_VALUE1 MIPICSI_0.DPHY_DATALANE_DDLTUNE_VALUE1.R /* Lane 0 DDL Tune Observability */
#define MIPICSI_0_DPHY_DATALANE_DDLTUNE_OVRVALUE1 MIPICSI_0.DPHY_DATALANE_DDLTUNE_OVRVALUE1.R /* Lane 0 DDL Tune Control */
#define MIPICSI_0_DPHY_DATALANE_DESKEW_OVRVALUE12 MIPICSI_0.DPHY_DATALANE_DESKEW_OVRVALUE12.R /* Lane 1 Control */
#define MIPICSI_0_DPHY_DATALANE_DESKEW_OVRVALUE22 MIPICSI_0.DPHY_DATALANE_DESKEW_OVRVALUE22.R /* Lane 1 Control */
#define MIPICSI_0_DPHY_DATALANE_DESKEW_COMPS2 MIPICSI_0.DPHY_DATALANE_DESKEW_COMPS2.R /* Lane 0 Observability */
#define MIPICSI_0_DPHY_DATALANE_DESKEW_VALUE12 MIPICSI_0.DPHY_DATALANE_DESKEW_VALUE12.R /* Lane 1 Observability */
#define MIPICSI_0_DPHY_DATALANE_DESKEW_VALUE22 MIPICSI_0.DPHY_DATALANE_DESKEW_VALUE22.R /* Lane 1 Observability */
#define MIPICSI_0_DPHY_DATAL2OFFSETCAL_OVRCNTRL MIPICSI_0.DPHY_DATAL2OFFSETCAL_OVRCNTRL.R /* Lane 1 Offset Compensation Control */
#define MIPICSI_0_DPHY_DATALOFFSETCAL_OVRVALUE2 MIPICSI_0.DPHY_DATALOFFSETCAL_OVRVALUE2.R /* Lane 0 Offset Compensation Control */
#define MIPICSI_0_DPHY_DATALANE_OFFSETCAL_COMPS2 MIPICSI_0.DPHY_DATALANE_OFFSETCAL_COMPS2.R /* Lane Offset Compensation Observability */
#define MIPICSI_0_DPHY_DATALOFFSETCAL_VALUE2 MIPICSI_0.DPHY_DATALOFFSETCAL_VALUE2.R /* Lane Offset Compensation Observability */
#define MIPICSI_0_DPHY_DATALANE_DDLTUNE_COMP2 MIPICSI_0.DPHY_DATALANE_DDLTUNE_COMP2.R /* Lane DDL Tune Observability */
#define MIPICSI_0_DPHY_DATALANE_DDLTUNE_VALUE2 MIPICSI_0.DPHY_DATALANE_DDLTUNE_VALUE2.R /* Lane 0 DDL Tune Observability */
#define MIPICSI_0_DPHY_DATALANE_DDLTUNE_OVRVALUE2 MIPICSI_0.DPHY_DATALANE_DDLTUNE_OVRVALUE2.R /* Lane 0 DDL Tune Control */
#define MIPICSI_0_DPHY_DATALANE_DDLTUNE_OVRVALUE3 MIPICSI_0.DPHY_DATALANE_DDLTUNE_OVRVALUE3.R /* Lane 0 DDL Tune Control */
#define MIPICSI_0_DPHY_DATALANE_DESKEW_OVRVALUE13 MIPICSI_0.DPHY_DATALANE_DESKEW_OVRVALUE13.R /* Lane 1 Control */
#define MIPICSI_0_DPHY_DATALANE_DESKEW_OVRVALUE23 MIPICSI_0.DPHY_DATALANE_DESKEW_OVRVALUE23.R /* Lane 1 Control */
#define MIPICSI_0_DPHY_DATALANE_DESKEW_COMPS3 MIPICSI_0.DPHY_DATALANE_DESKEW_COMPS3.R /* Lane 0 Observability */
#define MIPICSI_0_DPHY_DATALANE_DESKEW_VALUE13 MIPICSI_0.DPHY_DATALANE_DESKEW_VALUE13.R /* Lane 1 Observability */
#define MIPICSI_0_DPHY_DATALANE_DESKEW_VALUE23 MIPICSI_0.DPHY_DATALANE_DESKEW_VALUE23.R /* Lane 1 Observability */
#define MIPICSI_0_DPHY_DATAL3OFFSETCAL_OVRCNTRL MIPICSI_0.DPHY_DATAL3OFFSETCAL_OVRCNTRL.R /* Lane 1 Offset Compensation Control */
#define MIPICSI_0_DPHY_DATALOFFSETCAL_OVRVALUE3 MIPICSI_0.DPHY_DATALOFFSETCAL_OVRVALUE3.R /* Lane 0 Offset Compensation Control */
#define MIPICSI_0_DPHY_DATALANE_OFFSETCAL_COMPS3 MIPICSI_0.DPHY_DATALANE_OFFSETCAL_COMPS3.R /* Lane Offset Compensation Observability */
#define MIPICSI_0_DPHY_DATALOFFSETCAL_VALUE3 MIPICSI_0.DPHY_DATALOFFSETCAL_VALUE3.R /* Lane Offset Compensation Observability */
#define MIPICSI_0_DPHY_DATALANE_DDLTUNE_COMP3 MIPICSI_0.DPHY_DATALANE_DDLTUNE_COMP3.R /* Lane DDL Tune Observability */
#define MIPICSI_0_DPHY_DATALANE_DDLTUNE_VALUE3 MIPICSI_0.DPHY_DATALANE_DDLTUNE_VALUE3.R /* Lane 0 DDL Tune Observability */
#define MIPICSI_0_DPHY_CB_VBE_SEL MIPICSI_0.DPHY_CB_VBE_SEL.R /* Common Block Control */
#define MIPICSI_0_DPHY_ATB_CB_ATB_VBE_SEL MIPICSI_0.DPHY_ATB_CB_ATB_VBE_SEL.R /* Common Block Control */
#define MIPICSI_0_DPHY_TX_RDWR_TERM_CAL_0 MIPICSI_0.DPHY_TX_RDWR_TERM_CAL_0.R /* Termination Calibration Control */
#define MIPICSI_0_DPHY_TX_TERM_CAL_OVR MIPICSI_0.DPHY_TX_TERM_CAL_OVR.R /* Termination Calibration Control */
#define MIPICSI_0_DPHY_TX_TERM_CAL_0 MIPICSI_0.DPHY_TX_TERM_CAL_0.R /* Termination Calibration Observability */
#define MIPICSI_0_DPHY_TX_TERM_CAL_1 MIPICSI_0.DPHY_TX_TERM_CAL_1.R /* Termination Calibration Observability */
#define MIPICSI_0_DPHY_TERMCAL_STAT2 MIPICSI_0.DPHY_TERMCAL_STAT2.R /* Termination Calibration Observability */
#define MIPICSI_0_DPHY_CLKLANE_POLCFG MIPICSI_0.DPHY_CLKLANE_POLCFG.R /* Clock Lane Control */
#define MIPICSI_0_DPHY_ATB_DATA_LANE1 MIPICSI_0.DPHY_ATB_DATA_LANE1.R /* Lane 1 Control */
#define MIPICSI_0_DPHY_ATB_DATA_LANE2 MIPICSI_0.DPHY_ATB_DATA_LANE2.R /* Lane 2 Control */
#define MIPICSI_0_DPHY_ATB_DATA_LANE3 MIPICSI_0.DPHY_ATB_DATA_LANE3.R /* Lane 3 Control */

#define MIPICSI_1_DPHY_RSTCFG MIPICSI_1.DPHY_RSTCFG.R      /* DPHY Reset Configuration */
#define MIPICSI_1_DPHY_CLEAR MIPICSI_1.DPHY_CLEAR.R        /* DPHY Clear */
#define MIPICSI_1_DPHY_FREQCFG MIPICSI_1.DPHY_FREQCFG.R    /* DPHY Frequency Configuration */
#define MIPICSI_1_RX_RXNULANE MIPICSI_1.RX_RXNULANE.R      /* Receive Number of Lanes Configuration */
#define MIPICSI_1_RX_RXENABLE MIPICSI_1.RX_RXENABLE.R      /* Receive Enable Configuration */
#define MIPICSI_1_RX_RXLANESWAP MIPICSI_1.RX_RXLANESWAP.R  /* Receive Lane Swap Configuration */
#define MIPICSI_1_RX_CLKCS   MIPICSI_1.RX_CLKCS.R          /* Clock Configuration Status */
#define MIPICSI_1_RX_LAN0CS  MIPICSI_1.RX_LANCS[0].R       /* D-PHY Lane 0 Configuration Status */
#define MIPICSI_1_RX_LAN1CS  MIPICSI_1.RX_LANCS[1].R       /* D-PHY Lane 1 Configuration Status */
#define MIPICSI_1_RX_LAN2CS  MIPICSI_1.RX_LANCS[2].R       /* D-PHY Lane 2 Configuration Status */
#define MIPICSI_1_RX_LAN3CS  MIPICSI_1.RX_LANCS[3].R       /* D-PHY Lane 3 Configuration Status */
#define MIPICSI_1_RX_SR      MIPICSI_1.RX_SR.R             /* Soft Reset Config */
#define MIPICSI_1_RX_VCENABLE MIPICSI_1.RX_VCENABLE.R      /* Receive Virtual Channel Enable Configuration */
#define MIPICSI_1_RX_DATAIDR MIPICSI_1.RX_DATAIDR.R        /* Receive Data ID Report */
#define MIPICSI_1_RX_INVIDR  MIPICSI_1.RX_INVIDR.R         /* Receive Invalid Data ID Report */
#define MIPICSI_1_RX_GNSPR_VC0 MIPICSI_1.RX_GNSPR_VC[0].R  /* Receive Generic Short Packet Report */
#define MIPICSI_1_RX_GNSPR_VC1 MIPICSI_1.RX_GNSPR_VC[1].R  /* Receive Generic Short Packet Report */
#define MIPICSI_1_RX_GNSPR_VC2 MIPICSI_1.RX_GNSPR_VC[2].R  /* Receive Generic Short Packet Report */
#define MIPICSI_1_RX_GNSPR_VC3 MIPICSI_1.RX_GNSPR_VC[3].R  /* Receive Generic Short Packet Report */
#define MIPICSI_1_RX_NUMPKTS_VC0 MIPICSI_1.RX_NUMPKTS_VC[0].R /* Receive Number of Packets for VC */
#define MIPICSI_1_RX_NUMPKTS_VC1 MIPICSI_1.RX_NUMPKTS_VC[1].R /* Receive Number of Packets for VC */
#define MIPICSI_1_RX_NUMPKTS_VC2 MIPICSI_1.RX_NUMPKTS_VC[2].R /* Receive Number of Packets for VC */
#define MIPICSI_1_RX_NUMPKTS_VC3 MIPICSI_1.RX_NUMPKTS_VC[3].R /* Receive Number of Packets for VC */
#define MIPICSI_1_RX_VCINTRS MIPICSI_1.RX_VCINTRS.R        /* Receive VC Data Interrupt Status */
#define MIPICSI_1_RX_VCINTRE MIPICSI_1.RX_VCINTRE.R        /* Receive Data VC Event Interrupt Enable */
#define MIPICSI_1_CONTROLLER_STATUS_REGISTER MIPICSI_1.CONTROLLER_STATUS_REGISTER.R /* Controller Status */
#define MIPICSI_1_CRC_REGISTER MIPICSI_1.CRC_REGISTER.R    /* CRC */
#define MIPICSI_1_CONTROLLER_ERR_STATUS_REGISTER MIPICSI_1.CONTROLLER_ERR_STATUS_REGISTER.R /* Controller Error Status */
#define MIPICSI_1_CONTROLLER_ERR_IE MIPICSI_1.CONTROLLER_ERR_IE.R /* Controller Interrupt Enable */
#define MIPICSI_1_PPERRIS0   MIPICSI_1.RX_VC[0].PPERRIS.R  /* Receive Data Protocol and Packet Error Interrupt Status for VC0 */
#define MIPICSI_1_PPERRIE0   MIPICSI_1.RX_VC[0].PPERRIE.R  /* Receive Data Protocol and Packet Error Interrupt Enable for VC0 */
#define MIPICSI_1_ERRPOS0    MIPICSI_1.RX_VC[0].ERRPOS.R   /* Receive ECC 1-Bit Error Position for VC0 */
#define MIPICSI_1_NUMPPERR0  MIPICSI_1.RX_VC[0].NUMPPERR.R /* Receive Packets Number of Protocol Errors for VC0 */
#define MIPICSI_1_PPERRIS1   MIPICSI_1.RX_VC[1].PPERRIS.R  /* Receive Data Protocol and Packet Error Interrupt Status for VC1 */
#define MIPICSI_1_PPERRIE1   MIPICSI_1.RX_VC[1].PPERRIE.R  /* Receive Data Protocol and Packet Error Interrupt Enable for VC1 */
#define MIPICSI_1_ERRPOS1    MIPICSI_1.RX_VC[1].ERRPOS.R   /* Receive ECC 1-Bit Error Position for VC1 */
#define MIPICSI_1_NUMPPERR1  MIPICSI_1.RX_VC[1].NUMPPERR.R /* Receive Packets Number of Protocol Errors for VC1 */
#define MIPICSI_1_PPERRIS2   MIPICSI_1.RX_VC[2].PPERRIS.R  /* Receive Data Protocol and Packet Error Interrupt Status for VC2 */
#define MIPICSI_1_PPERRIE2   MIPICSI_1.RX_VC[2].PPERRIE.R  /* Receive Data Protocol and Packet Error Interrupt Enable for VC2 */
#define MIPICSI_1_ERRPOS2    MIPICSI_1.RX_VC[2].ERRPOS.R   /* Receive ECC 1-Bit Error Position for VC2 */
#define MIPICSI_1_NUMPPERR2  MIPICSI_1.RX_VC[2].NUMPPERR.R /* Receive Packets Number of Protocol Errors for VC2 */
#define MIPICSI_1_PPERRIS3   MIPICSI_1.RX_VC[3].PPERRIS.R  /* Receive Data Protocol and Packet Error Interrupt Status for VC3 */
#define MIPICSI_1_PPERRIE3   MIPICSI_1.RX_VC[3].PPERRIE.R  /* Receive Data Protocol and Packet Error Interrupt Enable for VC3 */
#define MIPICSI_1_ERRPOS3    MIPICSI_1.RX_VC[3].ERRPOS.R   /* Receive ECC 1-Bit Error Position for VC3 */
#define MIPICSI_1_NUMPPERR3  MIPICSI_1.RX_VC[3].NUMPPERR.R /* Receive Packets Number of Protocol Errors for VC3 */
#define MIPICSI_1_RX_PHYERRIS MIPICSI_1.RX_PHYERRIS.R      /* Receive Data PHY Level Error Interrupt Status */
#define MIPICSI_1_RX_PHYERRIE MIPICSI_1.RX_PHYERRIE.R      /* Receive Data PHY Level Error Interrupt Enable */
#define MIPICSI_1_RX_STAT_CONFIG MIPICSI_1.RX_STAT_CONFIG.R /* Receive Data Statistical Computation Configuration */
#define MIPICSI_1_RX_CBUF_CONFIG0 MIPICSI_1.RX[0].CBUF_CONFIG.R /* Receive Data Circular Buffer Configuration */
#define MIPICSI_1_RX_INPLINELEN_CONFIG0 MIPICSI_1.RX[0].INPLINELEN_CONFIG.R /* Receive Data Input Line Length Configuration */
#define MIPICSI_1_RX_LINELEN_CONFIG0 MIPICSI_1.RX[0].LINELEN_CONFIG.R /* Receive Data Line Length Configuration */
#define MIPICSI_1_RX_NUMLINES_CONFIG0 MIPICSI_1.RX[0].NUMLINES_CONFIG.R /* Receive Data Expected Number of Lines Configuration */
#define MIPICSI_1_RX_CBUF_SRTPTR0 MIPICSI_1.RX[0].CBUF_SRTPTR.R /* Receive Data Circular Buffer Start Pointer */
#define MIPICSI_1_RX_CBUF_BUFLEN0 MIPICSI_1.RX[0].CBUF_BUFLEN.R /* Receive Data Circular Buffer Length */
#define MIPICSI_1_RX_CBUF_NUMLINE0 MIPICSI_1.RX[0].CBUF_NUMLINE.R /* Receive Data Circular Buffer Number of Lines */
#define MIPICSI_1_RX_CBUF_LPDI0 MIPICSI_1.RX[0].CBUF_LPDI.R /* Receive Data Circular Buffer Lines Done Generation */
#define MIPICSI_1_RX_CBUF_NXTLINE0 MIPICSI_1.RX[0].CBUF_NXTLINE.R /* Receive Data Circular Buffer Next Row Indication */
#define MIPICSI_1_RX_CBUF_RXLINE0 MIPICSI_1.RX[0].CBUF_RXLINE.R /* Receive Data Circular Buffer Total Lines Received Status */
#define MIPICSI_1_RX_CBUF_ERRLEN0 MIPICSI_1.RX[0].CBUF_ERRLEN.R /* Receive Data Circular Buffer Error Line Length Status */
#define MIPICSI_1_RX_CBUF_ERRLINE0 MIPICSI_1.RX[0].CBUF_ERRLINE.R /* Receive Data Circular Buffer Line Number for Incorrect Length Status */
#define MIPICSI_1_RX_CBUF_CONFIG1 MIPICSI_1.RX[1].CBUF_CONFIG.R /* Receive Data Circular Buffer Configuration */
#define MIPICSI_1_RX_INPLINELEN_CONFIG1 MIPICSI_1.RX[1].INPLINELEN_CONFIG.R /* Receive Data Input Line Length Configuration */
#define MIPICSI_1_RX_LINELEN_CONFIG1 MIPICSI_1.RX[1].LINELEN_CONFIG.R /* Receive Data Line Length Configuration */
#define MIPICSI_1_RX_NUMLINES_CONFIG1 MIPICSI_1.RX[1].NUMLINES_CONFIG.R /* Receive Data Expected Number of Lines Configuration */
#define MIPICSI_1_RX_CBUF_SRTPTR1 MIPICSI_1.RX[1].CBUF_SRTPTR.R /* Receive Data Circular Buffer Start Pointer */
#define MIPICSI_1_RX_CBUF_BUFLEN1 MIPICSI_1.RX[1].CBUF_BUFLEN.R /* Receive Data Circular Buffer Length */
#define MIPICSI_1_RX_CBUF_NUMLINE1 MIPICSI_1.RX[1].CBUF_NUMLINE.R /* Receive Data Circular Buffer Number of Lines */
#define MIPICSI_1_RX_CBUF_LPDI1 MIPICSI_1.RX[1].CBUF_LPDI.R /* Receive Data Circular Buffer Lines Done Generation */
#define MIPICSI_1_RX_CBUF_NXTLINE1 MIPICSI_1.RX[1].CBUF_NXTLINE.R /* Receive Data Circular Buffer Next Row Indication */
#define MIPICSI_1_RX_CBUF_RXLINE1 MIPICSI_1.RX[1].CBUF_RXLINE.R /* Receive Data Circular Buffer Total Lines Received Status */
#define MIPICSI_1_RX_CBUF_ERRLEN1 MIPICSI_1.RX[1].CBUF_ERRLEN.R /* Receive Data Circular Buffer Error Line Length Status */
#define MIPICSI_1_RX_CBUF_ERRLINE1 MIPICSI_1.RX[1].CBUF_ERRLINE.R /* Receive Data Circular Buffer Line Number for Incorrect Length Status */
#define MIPICSI_1_RX_CBUF_CONFIG2 MIPICSI_1.RX[2].CBUF_CONFIG.R /* Receive Data Circular Buffer Configuration */
#define MIPICSI_1_RX_INPLINELEN_CONFIG2 MIPICSI_1.RX[2].INPLINELEN_CONFIG.R /* Receive Data Input Line Length Configuration */
#define MIPICSI_1_RX_LINELEN_CONFIG2 MIPICSI_1.RX[2].LINELEN_CONFIG.R /* Receive Data Line Length Configuration */
#define MIPICSI_1_RX_NUMLINES_CONFIG2 MIPICSI_1.RX[2].NUMLINES_CONFIG.R /* Receive Data Expected Number of Lines Configuration */
#define MIPICSI_1_RX_CBUF_SRTPTR2 MIPICSI_1.RX[2].CBUF_SRTPTR.R /* Receive Data Circular Buffer Start Pointer */
#define MIPICSI_1_RX_CBUF_BUFLEN2 MIPICSI_1.RX[2].CBUF_BUFLEN.R /* Receive Data Circular Buffer Length */
#define MIPICSI_1_RX_CBUF_NUMLINE2 MIPICSI_1.RX[2].CBUF_NUMLINE.R /* Receive Data Circular Buffer Number of Lines */
#define MIPICSI_1_RX_CBUF_LPDI2 MIPICSI_1.RX[2].CBUF_LPDI.R /* Receive Data Circular Buffer Lines Done Generation */
#define MIPICSI_1_RX_CBUF_NXTLINE2 MIPICSI_1.RX[2].CBUF_NXTLINE.R /* Receive Data Circular Buffer Next Row Indication */
#define MIPICSI_1_RX_CBUF_RXLINE2 MIPICSI_1.RX[2].CBUF_RXLINE.R /* Receive Data Circular Buffer Total Lines Received Status */
#define MIPICSI_1_RX_CBUF_ERRLEN2 MIPICSI_1.RX[2].CBUF_ERRLEN.R /* Receive Data Circular Buffer Error Line Length Status */
#define MIPICSI_1_RX_CBUF_ERRLINE2 MIPICSI_1.RX[2].CBUF_ERRLINE.R /* Receive Data Circular Buffer Line Number for Incorrect Length Status */
#define MIPICSI_1_RX_CBUF_CONFIG3 MIPICSI_1.RX[3].CBUF_CONFIG.R /* Receive Data Circular Buffer Configuration */
#define MIPICSI_1_RX_INPLINELEN_CONFIG3 MIPICSI_1.RX[3].INPLINELEN_CONFIG.R /* Receive Data Input Line Length Configuration */
#define MIPICSI_1_RX_LINELEN_CONFIG3 MIPICSI_1.RX[3].LINELEN_CONFIG.R /* Receive Data Line Length Configuration */
#define MIPICSI_1_RX_NUMLINES_CONFIG3 MIPICSI_1.RX[3].NUMLINES_CONFIG.R /* Receive Data Expected Number of Lines Configuration */
#define MIPICSI_1_RX_CBUF_SRTPTR3 MIPICSI_1.RX[3].CBUF_SRTPTR.R /* Receive Data Circular Buffer Start Pointer */
#define MIPICSI_1_RX_CBUF_BUFLEN3 MIPICSI_1.RX[3].CBUF_BUFLEN.R /* Receive Data Circular Buffer Length */
#define MIPICSI_1_RX_CBUF_NUMLINE3 MIPICSI_1.RX[3].CBUF_NUMLINE.R /* Receive Data Circular Buffer Number of Lines */
#define MIPICSI_1_RX_CBUF_LPDI3 MIPICSI_1.RX[3].CBUF_LPDI.R /* Receive Data Circular Buffer Lines Done Generation */
#define MIPICSI_1_RX_CBUF_NXTLINE3 MIPICSI_1.RX[3].CBUF_NXTLINE.R /* Receive Data Circular Buffer Next Row Indication */
#define MIPICSI_1_RX_CBUF_RXLINE3 MIPICSI_1.RX[3].CBUF_RXLINE.R /* Receive Data Circular Buffer Total Lines Received Status */
#define MIPICSI_1_RX_CBUF_ERRLEN3 MIPICSI_1.RX[3].CBUF_ERRLEN.R /* Receive Data Circular Buffer Error Line Length Status */
#define MIPICSI_1_RX_CBUF_ERRLINE3 MIPICSI_1.RX[3].CBUF_ERRLINE.R /* Receive Data Circular Buffer Line Number for Incorrect Length Status */
#define MIPICSI_1_RX_CBUF_CONFIG4 MIPICSI_1.RX[4].CBUF_CONFIG.R /* Receive Data Circular Buffer Configuration */
#define MIPICSI_1_RX_INPLINELEN_CONFIG4 MIPICSI_1.RX[4].INPLINELEN_CONFIG.R /* Receive Data Input Line Length Configuration */
#define MIPICSI_1_RX_LINELEN_CONFIG4 MIPICSI_1.RX[4].LINELEN_CONFIG.R /* Receive Data Line Length Configuration */
#define MIPICSI_1_RX_NUMLINES_CONFIG4 MIPICSI_1.RX[4].NUMLINES_CONFIG.R /* Receive Data Expected Number of Lines Configuration */
#define MIPICSI_1_RX_CBUF_SRTPTR4 MIPICSI_1.RX[4].CBUF_SRTPTR.R /* Receive Data Circular Buffer Start Pointer */
#define MIPICSI_1_RX_CBUF_BUFLEN4 MIPICSI_1.RX[4].CBUF_BUFLEN.R /* Receive Data Circular Buffer Length */
#define MIPICSI_1_RX_CBUF_NUMLINE4 MIPICSI_1.RX[4].CBUF_NUMLINE.R /* Receive Data Circular Buffer Number of Lines */
#define MIPICSI_1_RX_CBUF_LPDI4 MIPICSI_1.RX[4].CBUF_LPDI.R /* Receive Data Circular Buffer Lines Done Generation */
#define MIPICSI_1_RX_CBUF_NXTLINE4 MIPICSI_1.RX[4].CBUF_NXTLINE.R /* Receive Data Circular Buffer Next Row Indication */
#define MIPICSI_1_RX_CBUF_RXLINE4 MIPICSI_1.RX[4].CBUF_RXLINE.R /* Receive Data Circular Buffer Total Lines Received Status */
#define MIPICSI_1_RX_CBUF_ERRLEN4 MIPICSI_1.RX[4].CBUF_ERRLEN.R /* Receive Data Circular Buffer Error Line Length Status */
#define MIPICSI_1_RX_CBUF_ERRLINE4 MIPICSI_1.RX[4].CBUF_ERRLINE.R /* Receive Data Circular Buffer Line Number for Incorrect Length Status */
#define MIPICSI_1_RX_CBUF_CONFIG5 MIPICSI_1.RX[5].CBUF_CONFIG.R /* Receive Data Circular Buffer Configuration */
#define MIPICSI_1_RX_INPLINELEN_CONFIG5 MIPICSI_1.RX[5].INPLINELEN_CONFIG.R /* Receive Data Input Line Length Configuration */
#define MIPICSI_1_RX_LINELEN_CONFIG5 MIPICSI_1.RX[5].LINELEN_CONFIG.R /* Receive Data Line Length Configuration */
#define MIPICSI_1_RX_NUMLINES_CONFIG5 MIPICSI_1.RX[5].NUMLINES_CONFIG.R /* Receive Data Expected Number of Lines Configuration */
#define MIPICSI_1_RX_CBUF_SRTPTR5 MIPICSI_1.RX[5].CBUF_SRTPTR.R /* Receive Data Circular Buffer Start Pointer */
#define MIPICSI_1_RX_CBUF_BUFLEN5 MIPICSI_1.RX[5].CBUF_BUFLEN.R /* Receive Data Circular Buffer Length */
#define MIPICSI_1_RX_CBUF_NUMLINE5 MIPICSI_1.RX[5].CBUF_NUMLINE.R /* Receive Data Circular Buffer Number of Lines */
#define MIPICSI_1_RX_CBUF_LPDI5 MIPICSI_1.RX[5].CBUF_LPDI.R /* Receive Data Circular Buffer Lines Done Generation */
#define MIPICSI_1_RX_CBUF_NXTLINE5 MIPICSI_1.RX[5].CBUF_NXTLINE.R /* Receive Data Circular Buffer Next Row Indication */
#define MIPICSI_1_RX_CBUF_RXLINE5 MIPICSI_1.RX[5].CBUF_RXLINE.R /* Receive Data Circular Buffer Total Lines Received Status */
#define MIPICSI_1_RX_CBUF_ERRLEN5 MIPICSI_1.RX[5].CBUF_ERRLEN.R /* Receive Data Circular Buffer Error Line Length Status */
#define MIPICSI_1_RX_CBUF_ERRLINE5 MIPICSI_1.RX[5].CBUF_ERRLINE.R /* Receive Data Circular Buffer Line Number for Incorrect Length Status */
#define MIPICSI_1_RX_CBUF_CONFIG6 MIPICSI_1.RX[6].CBUF_CONFIG.R /* Receive Data Circular Buffer Configuration */
#define MIPICSI_1_RX_INPLINELEN_CONFIG6 MIPICSI_1.RX[6].INPLINELEN_CONFIG.R /* Receive Data Input Line Length Configuration */
#define MIPICSI_1_RX_LINELEN_CONFIG6 MIPICSI_1.RX[6].LINELEN_CONFIG.R /* Receive Data Line Length Configuration */
#define MIPICSI_1_RX_NUMLINES_CONFIG6 MIPICSI_1.RX[6].NUMLINES_CONFIG.R /* Receive Data Expected Number of Lines Configuration */
#define MIPICSI_1_RX_CBUF_SRTPTR6 MIPICSI_1.RX[6].CBUF_SRTPTR.R /* Receive Data Circular Buffer Start Pointer */
#define MIPICSI_1_RX_CBUF_BUFLEN6 MIPICSI_1.RX[6].CBUF_BUFLEN.R /* Receive Data Circular Buffer Length */
#define MIPICSI_1_RX_CBUF_NUMLINE6 MIPICSI_1.RX[6].CBUF_NUMLINE.R /* Receive Data Circular Buffer Number of Lines */
#define MIPICSI_1_RX_CBUF_LPDI6 MIPICSI_1.RX[6].CBUF_LPDI.R /* Receive Data Circular Buffer Lines Done Generation */
#define MIPICSI_1_RX_CBUF_NXTLINE6 MIPICSI_1.RX[6].CBUF_NXTLINE.R /* Receive Data Circular Buffer Next Row Indication */
#define MIPICSI_1_RX_CBUF_RXLINE6 MIPICSI_1.RX[6].CBUF_RXLINE.R /* Receive Data Circular Buffer Total Lines Received Status */
#define MIPICSI_1_RX_CBUF_ERRLEN6 MIPICSI_1.RX[6].CBUF_ERRLEN.R /* Receive Data Circular Buffer Error Line Length Status */
#define MIPICSI_1_RX_CBUF_ERRLINE6 MIPICSI_1.RX[6].CBUF_ERRLINE.R /* Receive Data Circular Buffer Line Number for Incorrect Length Status */
#define MIPICSI_1_RX_CBUF_CONFIG7 MIPICSI_1.RX[7].CBUF_CONFIG.R /* Receive Data Circular Buffer Configuration */
#define MIPICSI_1_RX_INPLINELEN_CONFIG7 MIPICSI_1.RX[7].INPLINELEN_CONFIG.R /* Receive Data Input Line Length Configuration */
#define MIPICSI_1_RX_LINELEN_CONFIG7 MIPICSI_1.RX[7].LINELEN_CONFIG.R /* Receive Data Line Length Configuration */
#define MIPICSI_1_RX_NUMLINES_CONFIG7 MIPICSI_1.RX[7].NUMLINES_CONFIG.R /* Receive Data Expected Number of Lines Configuration */
#define MIPICSI_1_RX_CBUF_SRTPTR7 MIPICSI_1.RX[7].CBUF_SRTPTR.R /* Receive Data Circular Buffer Start Pointer */
#define MIPICSI_1_RX_CBUF_BUFLEN7 MIPICSI_1.RX[7].CBUF_BUFLEN.R /* Receive Data Circular Buffer Length */
#define MIPICSI_1_RX_CBUF_NUMLINE7 MIPICSI_1.RX[7].CBUF_NUMLINE.R /* Receive Data Circular Buffer Number of Lines */
#define MIPICSI_1_RX_CBUF_LPDI7 MIPICSI_1.RX[7].CBUF_LPDI.R /* Receive Data Circular Buffer Lines Done Generation */
#define MIPICSI_1_RX_CBUF_NXTLINE7 MIPICSI_1.RX[7].CBUF_NXTLINE.R /* Receive Data Circular Buffer Next Row Indication */
#define MIPICSI_1_RX_CBUF_RXLINE7 MIPICSI_1.RX[7].CBUF_RXLINE.R /* Receive Data Circular Buffer Total Lines Received Status */
#define MIPICSI_1_RX_CBUF_ERRLEN7 MIPICSI_1.RX[7].CBUF_ERRLEN.R /* Receive Data Circular Buffer Error Line Length Status */
#define MIPICSI_1_RX_CBUF_ERRLINE7 MIPICSI_1.RX[7].CBUF_ERRLINE.R /* Receive Data Circular Buffer Line Number for Incorrect Length Status */
#define MIPICSI_1_RX_CBUF_CONFIG8 MIPICSI_1.RX[8].CBUF_CONFIG.R /* Receive Data Circular Buffer Configuration */
#define MIPICSI_1_RX_INPLINELEN_CONFIG8 MIPICSI_1.RX[8].INPLINELEN_CONFIG.R /* Receive Data Input Line Length Configuration */
#define MIPICSI_1_RX_LINELEN_CONFIG8 MIPICSI_1.RX[8].LINELEN_CONFIG.R /* Receive Data Line Length Configuration */
#define MIPICSI_1_RX_NUMLINES_CONFIG8 MIPICSI_1.RX[8].NUMLINES_CONFIG.R /* Receive Data Expected Number of Lines Configuration */
#define MIPICSI_1_RX_CBUF_SRTPTR8 MIPICSI_1.RX[8].CBUF_SRTPTR.R /* Receive Data Circular Buffer Start Pointer */
#define MIPICSI_1_RX_CBUF_BUFLEN8 MIPICSI_1.RX[8].CBUF_BUFLEN.R /* Receive Data Circular Buffer Length */
#define MIPICSI_1_RX_CBUF_NUMLINE8 MIPICSI_1.RX[8].CBUF_NUMLINE.R /* Receive Data Circular Buffer Number of Lines */
#define MIPICSI_1_RX_CBUF_LPDI8 MIPICSI_1.RX[8].CBUF_LPDI.R /* Receive Data Circular Buffer Lines Done Generation */
#define MIPICSI_1_RX_CBUF_NXTLINE8 MIPICSI_1.RX[8].CBUF_NXTLINE.R /* Receive Data Circular Buffer Next Row Indication */
#define MIPICSI_1_RX_CBUF_RXLINE8 MIPICSI_1.RX[8].CBUF_RXLINE.R /* Receive Data Circular Buffer Total Lines Received Status */
#define MIPICSI_1_RX_CBUF_ERRLEN8 MIPICSI_1.RX[8].CBUF_ERRLEN.R /* Receive Data Circular Buffer Error Line Length Status */
#define MIPICSI_1_RX_CBUF_ERRLINE8 MIPICSI_1.RX[8].CBUF_ERRLINE.R /* Receive Data Circular Buffer Line Number for Incorrect Length Status */
#define MIPICSI_1_RX_CBUF_CONFIG9 MIPICSI_1.RX[9].CBUF_CONFIG.R /* Receive Data Circular Buffer Configuration */
#define MIPICSI_1_RX_INPLINELEN_CONFIG9 MIPICSI_1.RX[9].INPLINELEN_CONFIG.R /* Receive Data Input Line Length Configuration */
#define MIPICSI_1_RX_LINELEN_CONFIG9 MIPICSI_1.RX[9].LINELEN_CONFIG.R /* Receive Data Line Length Configuration */
#define MIPICSI_1_RX_NUMLINES_CONFIG9 MIPICSI_1.RX[9].NUMLINES_CONFIG.R /* Receive Data Expected Number of Lines Configuration */
#define MIPICSI_1_RX_CBUF_SRTPTR9 MIPICSI_1.RX[9].CBUF_SRTPTR.R /* Receive Data Circular Buffer Start Pointer */
#define MIPICSI_1_RX_CBUF_BUFLEN9 MIPICSI_1.RX[9].CBUF_BUFLEN.R /* Receive Data Circular Buffer Length */
#define MIPICSI_1_RX_CBUF_NUMLINE9 MIPICSI_1.RX[9].CBUF_NUMLINE.R /* Receive Data Circular Buffer Number of Lines */
#define MIPICSI_1_RX_CBUF_LPDI9 MIPICSI_1.RX[9].CBUF_LPDI.R /* Receive Data Circular Buffer Lines Done Generation */
#define MIPICSI_1_RX_CBUF_NXTLINE9 MIPICSI_1.RX[9].CBUF_NXTLINE.R /* Receive Data Circular Buffer Next Row Indication */
#define MIPICSI_1_RX_CBUF_RXLINE9 MIPICSI_1.RX[9].CBUF_RXLINE.R /* Receive Data Circular Buffer Total Lines Received Status */
#define MIPICSI_1_RX_CBUF_ERRLEN9 MIPICSI_1.RX[9].CBUF_ERRLEN.R /* Receive Data Circular Buffer Error Line Length Status */
#define MIPICSI_1_RX_CBUF_ERRLINE9 MIPICSI_1.RX[9].CBUF_ERRLINE.R /* Receive Data Circular Buffer Line Number for Incorrect Length Status */
#define MIPICSI_1_RX_CBUF_CONFIG10 MIPICSI_1.RX[10].CBUF_CONFIG.R /* Receive Data Circular Buffer Configuration */
#define MIPICSI_1_RX_INPLINELEN_CONFIG10 MIPICSI_1.RX[10].INPLINELEN_CONFIG.R /* Receive Data Input Line Length Configuration */
#define MIPICSI_1_RX_LINELEN_CONFIG10 MIPICSI_1.RX[10].LINELEN_CONFIG.R /* Receive Data Line Length Configuration */
#define MIPICSI_1_RX_NUMLINES_CONFIG10 MIPICSI_1.RX[10].NUMLINES_CONFIG.R /* Receive Data Expected Number of Lines Configuration */
#define MIPICSI_1_RX_CBUF_SRTPTR10 MIPICSI_1.RX[10].CBUF_SRTPTR.R /* Receive Data Circular Buffer Start Pointer */
#define MIPICSI_1_RX_CBUF_BUFLEN10 MIPICSI_1.RX[10].CBUF_BUFLEN.R /* Receive Data Circular Buffer Length */
#define MIPICSI_1_RX_CBUF_NUMLINE10 MIPICSI_1.RX[10].CBUF_NUMLINE.R /* Receive Data Circular Buffer Number of Lines */
#define MIPICSI_1_RX_CBUF_LPDI10 MIPICSI_1.RX[10].CBUF_LPDI.R /* Receive Data Circular Buffer Lines Done Generation */
#define MIPICSI_1_RX_CBUF_NXTLINE10 MIPICSI_1.RX[10].CBUF_NXTLINE.R /* Receive Data Circular Buffer Next Row Indication */
#define MIPICSI_1_RX_CBUF_RXLINE10 MIPICSI_1.RX[10].CBUF_RXLINE.R /* Receive Data Circular Buffer Total Lines Received Status */
#define MIPICSI_1_RX_CBUF_ERRLEN10 MIPICSI_1.RX[10].CBUF_ERRLEN.R /* Receive Data Circular Buffer Error Line Length Status */
#define MIPICSI_1_RX_CBUF_ERRLINE10 MIPICSI_1.RX[10].CBUF_ERRLINE.R /* Receive Data Circular Buffer Line Number for Incorrect Length Status */
#define MIPICSI_1_RX_CBUF_CONFIG11 MIPICSI_1.RX[11].CBUF_CONFIG.R /* Receive Data Circular Buffer Configuration */
#define MIPICSI_1_RX_INPLINELEN_CONFIG11 MIPICSI_1.RX[11].INPLINELEN_CONFIG.R /* Receive Data Input Line Length Configuration */
#define MIPICSI_1_RX_LINELEN_CONFIG11 MIPICSI_1.RX[11].LINELEN_CONFIG.R /* Receive Data Line Length Configuration */
#define MIPICSI_1_RX_NUMLINES_CONFIG11 MIPICSI_1.RX[11].NUMLINES_CONFIG.R /* Receive Data Expected Number of Lines Configuration */
#define MIPICSI_1_RX_CBUF_SRTPTR11 MIPICSI_1.RX[11].CBUF_SRTPTR.R /* Receive Data Circular Buffer Start Pointer */
#define MIPICSI_1_RX_CBUF_BUFLEN11 MIPICSI_1.RX[11].CBUF_BUFLEN.R /* Receive Data Circular Buffer Length */
#define MIPICSI_1_RX_CBUF_NUMLINE11 MIPICSI_1.RX[11].CBUF_NUMLINE.R /* Receive Data Circular Buffer Number of Lines */
#define MIPICSI_1_RX_CBUF_LPDI11 MIPICSI_1.RX[11].CBUF_LPDI.R /* Receive Data Circular Buffer Lines Done Generation */
#define MIPICSI_1_RX_CBUF_NXTLINE11 MIPICSI_1.RX[11].CBUF_NXTLINE.R /* Receive Data Circular Buffer Next Row Indication */
#define MIPICSI_1_RX_CBUF_RXLINE11 MIPICSI_1.RX[11].CBUF_RXLINE.R /* Receive Data Circular Buffer Total Lines Received Status */
#define MIPICSI_1_RX_CBUF_ERRLEN11 MIPICSI_1.RX[11].CBUF_ERRLEN.R /* Receive Data Circular Buffer Error Line Length Status */
#define MIPICSI_1_RX_CBUF_ERRLINE11 MIPICSI_1.RX[11].CBUF_ERRLINE.R /* Receive Data Circular Buffer Line Number for Incorrect Length Status */
#define MIPICSI_1_CBUF_INTRS MIPICSI_1.CBUF_INTRS.R        /* Receive Data Circular Buffer Error Interrupt Status */
#define MIPICSI_1_CBUF_INTRE MIPICSI_1.CBUF_INTRE.R        /* Receive Circular Buffer Error Interrupt Enable */
#define MIPICSI_1_RX_DROPDATAR0 MIPICSI_1.RX_DROPDATAR[0].R /* Received Drop Data Type and VC Report */
#define MIPICSI_1_RX_DROPDATAR1 MIPICSI_1.RX_DROPDATAR[1].R /* Received Drop Data Type and VC Report */
#define MIPICSI_1_RX_DROPDATAR2 MIPICSI_1.RX_DROPDATAR[2].R /* Received Drop Data Type and VC Report */
#define MIPICSI_1_RX_DROPDATAR3 MIPICSI_1.RX_DROPDATAR[3].R /* Received Drop Data Type and VC Report */
#define MIPICSI_1_RX_CBUF0_OUTCFG0 MIPICSI_1.RX_CBUF_OUTCFG[0].R /* Receive Data Channel Output Configuration */
#define MIPICSI_1_RX_CBUF1_OUTCFG1 MIPICSI_1.RX_CBUF_OUTCFG[1].R /* Receive Data Channel Output Configuration */
#define MIPICSI_1_RX_CBUF2_OUTCFG2 MIPICSI_1.RX_CBUF_OUTCFG[2].R /* Receive Data Channel Output Configuration */
#define MIPICSI_1_RX_CBUF3_OUTCFG3 MIPICSI_1.RX_CBUF_OUTCFG[3].R /* Receive Data Channel Output Configuration */
#define MIPICSI_1_RX_CBUF0_CHNLENBL0 MIPICSI_1.RX_CBUF_CHNLENBL[0].R /* Receive Data Channel Enable/Disable Configuration */
#define MIPICSI_1_RX_CBUF1_CHNLENBL1 MIPICSI_1.RX_CBUF_CHNLENBL[1].R /* Receive Data Channel Enable/Disable Configuration */
#define MIPICSI_1_RX_CBUF2_CHNLENBL2 MIPICSI_1.RX_CBUF_CHNLENBL[2].R /* Receive Data Channel Enable/Disable Configuration */
#define MIPICSI_1_RX_CBUF3_CHNLENBL3 MIPICSI_1.RX_CBUF_CHNLENBL[3].R /* Receive Data Channel Enable/Disable Configuration */
#define MIPICSI_1_RX_CBUF0_CHNLOFFSET0_0 MIPICSI_1.RX_CBUF0_CHNLOFFSET0_0.R /* Receive Data Channel Offset Compensation Configuration */
#define MIPICSI_1_RX_CBUF0_CHNLOFFSET1_0 MIPICSI_1.RX_CBUF0_CHNLOFFSET1_0.R /* Receive Data Channel Offset Compensation Configuration */
#define MIPICSI_1_RX_CBUF0_CHNLOFFSET2_0 MIPICSI_1.RX_CBUF0_CHNLOFFSET2_0.R /* Receive Data Channel Offset Compensation Configuration */
#define MIPICSI_1_RX_CBUF0_CHNLOFFSET3_0 MIPICSI_1.RX_CBUF0_CHNLOFFSET3_0.R /* Receive Data Channel Offset Compensation Configuration */
#define MIPICSI_1_RX_CBUF1_CHNLOFFSET0_1 MIPICSI_1.RX_CBUF1_CHNLOFFSET0_1.R /* Receive Data Channel Offset Compensation Configuration */
#define MIPICSI_1_RX_CBUF1_CHNLOFFSET1_1 MIPICSI_1.RX_CBUF1_CHNLOFFSET1_1.R /* Receive Data Channel Offset Compensation Configuration */
#define MIPICSI_1_RX_CBUF1_CHNLOFFSET2_1 MIPICSI_1.RX_CBUF1_CHNLOFFSET2_1.R /* Receive Data Channel Offset Compensation Configuration */
#define MIPICSI_1_RX_CBUF1_CHNLOFFSET3_1 MIPICSI_1.RX_CBUF1_CHNLOFFSET3_1.R /* Receive Data Channel Offset Compensation Configuration */
#define MIPICSI_1_RX_CBUF2_CHNLOFFSET0_2 MIPICSI_1.RX_CBUF2_CHNLOFFSET0_2.R /* Receive Data Channel Offset Compensation Configuration */
#define MIPICSI_1_RX_CBUF2_CHNLOFFSET1_2 MIPICSI_1.RX_CBUF2_CHNLOFFSET1_2.R /* Receive Data Channel Offset Compensation Configuration */
#define MIPICSI_1_RX_CBUF2_CHNLOFFSET2_2 MIPICSI_1.RX_CBUF2_CHNLOFFSET2_2.R /* Receive Data Channel Offset Compensation Configuration */
#define MIPICSI_1_RX_CBUF2_CHNLOFFSET3_2 MIPICSI_1.RX_CBUF2_CHNLOFFSET3_2.R /* Receive Data Channel Offset Compensation Configuration */
#define MIPICSI_1_RX_CBUF3_CHNLOFFSET0_3 MIPICSI_1.RX_CBUF3_CHNLOFFSET0_3.R /* Receive Data Channel Offset Compensation Configuration */
#define MIPICSI_1_RX_CBUF3_CHNLOFFSET1_3 MIPICSI_1.RX_CBUF3_CHNLOFFSET1_3.R /* Receive Data Channel Offset Compensation Configuration */
#define MIPICSI_1_RX_CBUF3_CHNLOFFSET2_3 MIPICSI_1.RX_CBUF3_CHNLOFFSET2_3.R /* Receive Data Channel Offset Compensation Configuration */
#define MIPICSI_1_RX_CBUF3_CHNLOFFSET3_3 MIPICSI_1.RX_CBUF3_CHNLOFFSET3_3.R /* Receive Data Channel Offset Compensation Configuration */
#define MIPICSI_1_RX_CHNL_INTRS MIPICSI_1.RX_CHNL_INTRS.R  /* Receive Data Channel Status */
#define MIPICSI_1_RX_CHNL_INTRE MIPICSI_1.RX_CHNL_INTRE.R  /* Receive Channel Interrupt Enable */
#define MIPICSI_1_WR_CHNL_INTRS MIPICSI_1.WR_CHNL_INTRS.R  /* AXI Write Channel Interrupt Status */
#define MIPICSI_1_WR_CHNL_INTRE MIPICSI_1.WR_CHNL_INTRE.R  /* AXI Write Channel Interrupt Enable */
#define MIPICSI_1_TURNCFG    MIPICSI_1.TURNCFG.R           /* Turnaround Request Configuration */
#define MIPICSI_1_TRIGGER_GPIO1 MIPICSI_1.TRIGGER_GPIO1.R  /* GPIO1 Pad Event Trigger Control */
#define MIPICSI_1_TRIGGER_SDMA1 MIPICSI_1.TRIGGER_SDMA1.R  /* SDMA1 Pad Event Trigger Control */
#define MIPICSI_1_TRIGGEREN_GPIO MIPICSI_1.TRIGGEREN_GPIO.R /* GPIO Pad Event Trigger Enable Control */
#define MIPICSI_1_TRIGGEREN_SDMA MIPICSI_1.TRIGGEREN_SDMA.R /* SDMA Pad Event Trigger Enable Control */
#define MIPICSI_1_DPHY_CALTYPE_CNTRL MIPICSI_1.DPHY_CALTYPE_CNTRL.R /* System Configuration */
#define MIPICSI_1_DPHY_SKEWCAL_CNTRL MIPICSI_1.DPHY_SKEWCAL_CNTRL.R /* System Configuration */
#define MIPICSI_1_DPHY_RX_STARTUP_OVERRIDE MIPICSI_1.DPHY_RX_STARTUP_OVERRIDE.R /* System Startup Observability */
#define MIPICSI_1_DPHY_DDLOSCFREQ_CFG1 MIPICSI_1.DPHY_DDLOSCFREQ_CFG1.R /* System Startup Override */
#define MIPICSI_1_DPHY_DDLOSCFREQ_CFG2 MIPICSI_1.DPHY_DDLOSCFREQ_CFG2.R /* System Startup Override */
#define MIPICSI_1_DPHY_DDLOSCFREQ_OVREN MIPICSI_1.DPHY_DDLOSCFREQ_OVREN.R /* System Startup Override */
#define MIPICSI_1_DPHY_RX_TERM_CAL_0 MIPICSI_1.DPHY_RX_TERM_CAL_0.R /* Termination Calibration Observability */
#define MIPICSI_1_DPHY_RX_TERM_CAL_1 MIPICSI_1.DPHY_RX_TERM_CAL_1.R /* Termination Calibration Observability */
#define MIPICSI_1_DPHY_CLOCK_LANE_CNTRL MIPICSI_1.DPHY_CLOCK_LANE_CNTRL.R /* Clock Lane Control */
#define MIPICSI_1_DPHY_CLKOFFSETCAL_OVRRIDE MIPICSI_1.DPHY_CLKOFFSETCAL_OVRRIDE.R /* Clock Lane Offset Cancellation Control */
#define MIPICSI_1_DPHY_CLKOFFSETCAL_OVRRIDEVAL MIPICSI_1.DPHY_CLKOFFSETCAL_OVRRIDEVAL.R /* Clock Lane Offset Cancellation Control 2 */
#define MIPICSI_1_DPHY_CLKCALVAL_COMPS MIPICSI_1.DPHY_CLKCALVAL_COMPS.R /* Clock Lane Offset Cancellation Observability 3 */
#define MIPICSI_1_DPHY_CLKOFFSETCAL_COMPS MIPICSI_1.DPHY_CLKOFFSETCAL_COMPS.R /* Clock Lane Offset Cancellation Observability */
#define MIPICSI_1_DPHY_RX_LPRXPON_LANE0 MIPICSI_1.DPHY_RX_LPRXPON_LANE0.R /* Lane 0 Low Power Receive Control */
#define MIPICSI_1_DPHY_DATALANE_DESKEW_COMPS0 MIPICSI_1.DPHY_DATALANE_DESKEW_COMPS0.R /* Lane 0 Observability */
#define MIPICSI_1_DPHY_DATAL0OFFSETCAL_OVRCNTRL MIPICSI_1.DPHY_DATAL0OFFSETCAL_OVRCNTRL.R /* Lane 0 Offset Compensation Control */
#define MIPICSI_1_DPHY_DATALOFFSETCAL_OVRVALUE0 MIPICSI_1.DPHY_DATALOFFSETCAL_OVRVALUE0.R /* Lane 0 Offset Compensation Control */
#define MIPICSI_1_DPHY_DATALANE_OFFSETCAL_COMPS0 MIPICSI_1.DPHY_DATALANE_OFFSETCAL_COMPS0.R /* Lane Offset Compensation Observability */
#define MIPICSI_1_DPHY_DATALOFFSETCAL_VALUE0 MIPICSI_1.DPHY_DATALOFFSETCAL_VALUE0.R /* Lane Offset Compensation Observability */
#define MIPICSI_1_DPHY_DATALANE_DDLTUNE_COMP0 MIPICSI_1.DPHY_DATALANE_DDLTUNE_COMP0.R /* Lane DDL Tune Observability */
#define MIPICSI_1_DPHY_DATALANE_DDLTUNE_VALUE0 MIPICSI_1.DPHY_DATALANE_DDLTUNE_VALUE0.R /* Lane 0 DDL Tune Observability */
#define MIPICSI_1_DPHY_DATALANE0_DESKEW_VALUE1 MIPICSI_1.DPHY_DATALANE0_DESKEW_VALUE1.R /* Lane 0 DDL Tune Observability */
#define MIPICSI_1_DPHY_DATALANE0_DESKEW_VALUE2 MIPICSI_1.DPHY_DATALANE0_DESKEW_VALUE2.R /* Lane 0 DDL Tune Observability */
#define MIPICSI_1_DPHY_DATALANE_DDLTUNE_OVRVALUE0 MIPICSI_1.DPHY_DATALANE_DDLTUNE_OVRVALUE0.R /* Lane 0 DDL Tune Control */
#define MIPICSI_1_DPHY_DATALANE0_DESKEW_OVRVALUE1 MIPICSI_1.DPHY_DATALANE0_DESKEW_OVRVALUE1.R /* Lane 0 DDL Tune Control */
#define MIPICSI_1_DPHY_DATALANE0_DESKEW_OVRVALUE2 MIPICSI_1.DPHY_DATALANE0_DESKEW_OVRVALUE2.R /* Lane 0 DDL Tune Control */
#define MIPICSI_1_DPHY_DATALANE_DESKEW_OVRVALUE11 MIPICSI_1.DPHY_DATALANE_DESKEW_OVRVALUE11.R /* Lane 1 Control */
#define MIPICSI_1_DPHY_DATALANE_DESKEW_OVRVALUE21 MIPICSI_1.DPHY_DATALANE_DESKEW_OVRVALUE21.R /* Lane 1 Control */
#define MIPICSI_1_DPHY_DATALANE_DESKEW_COMPS1 MIPICSI_1.DPHY_DATALANE_DESKEW_COMPS1.R /* Lane 0 Observability */
#define MIPICSI_1_DPHY_DATALANE_DESKEW_VALUE11 MIPICSI_1.DPHY_DATALANE_DESKEW_VALUE11.R /* Lane 1 Observability */
#define MIPICSI_1_DPHY_DATALANE_DESKEW_VALUE21 MIPICSI_1.DPHY_DATALANE_DESKEW_VALUE21.R /* Lane 1 Observability */
#define MIPICSI_1_DPHY_DATAL1OFFSETCAL_OVRCNTRL MIPICSI_1.DPHY_DATAL1OFFSETCAL_OVRCNTRL.R /* Lane 1 Offset Compensation Control */
#define MIPICSI_1_DPHY_DATALOFFSETCAL_OVRVALUE1 MIPICSI_1.DPHY_DATALOFFSETCAL_OVRVALUE1.R /* Lane 0 Offset Compensation Control */
#define MIPICSI_1_DPHY_DATALANE_OFFSETCAL_COMPS1 MIPICSI_1.DPHY_DATALANE_OFFSETCAL_COMPS1.R /* Lane Offset Compensation Observability */
#define MIPICSI_1_DPHY_DATALOFFSETCAL_VALUE1 MIPICSI_1.DPHY_DATALOFFSETCAL_VALUE1.R /* Lane Offset Compensation Observability */
#define MIPICSI_1_DPHY_DATALANE_DDLTUNE_COMP1 MIPICSI_1.DPHY_DATALANE_DDLTUNE_COMP1.R /* Lane DDL Tune Observability */
#define MIPICSI_1_DPHY_DATALANE_DDLTUNE_VALUE1 MIPICSI_1.DPHY_DATALANE_DDLTUNE_VALUE1.R /* Lane 0 DDL Tune Observability */
#define MIPICSI_1_DPHY_DATALANE_DDLTUNE_OVRVALUE1 MIPICSI_1.DPHY_DATALANE_DDLTUNE_OVRVALUE1.R /* Lane 0 DDL Tune Control */
#define MIPICSI_1_DPHY_DATALANE_DESKEW_OVRVALUE12 MIPICSI_1.DPHY_DATALANE_DESKEW_OVRVALUE12.R /* Lane 1 Control */
#define MIPICSI_1_DPHY_DATALANE_DESKEW_OVRVALUE22 MIPICSI_1.DPHY_DATALANE_DESKEW_OVRVALUE22.R /* Lane 1 Control */
#define MIPICSI_1_DPHY_DATALANE_DESKEW_COMPS2 MIPICSI_1.DPHY_DATALANE_DESKEW_COMPS2.R /* Lane 0 Observability */
#define MIPICSI_1_DPHY_DATALANE_DESKEW_VALUE12 MIPICSI_1.DPHY_DATALANE_DESKEW_VALUE12.R /* Lane 1 Observability */
#define MIPICSI_1_DPHY_DATALANE_DESKEW_VALUE22 MIPICSI_1.DPHY_DATALANE_DESKEW_VALUE22.R /* Lane 1 Observability */
#define MIPICSI_1_DPHY_DATAL2OFFSETCAL_OVRCNTRL MIPICSI_1.DPHY_DATAL2OFFSETCAL_OVRCNTRL.R /* Lane 1 Offset Compensation Control */
#define MIPICSI_1_DPHY_DATALOFFSETCAL_OVRVALUE2 MIPICSI_1.DPHY_DATALOFFSETCAL_OVRVALUE2.R /* Lane 0 Offset Compensation Control */
#define MIPICSI_1_DPHY_DATALANE_OFFSETCAL_COMPS2 MIPICSI_1.DPHY_DATALANE_OFFSETCAL_COMPS2.R /* Lane Offset Compensation Observability */
#define MIPICSI_1_DPHY_DATALOFFSETCAL_VALUE2 MIPICSI_1.DPHY_DATALOFFSETCAL_VALUE2.R /* Lane Offset Compensation Observability */
#define MIPICSI_1_DPHY_DATALANE_DDLTUNE_COMP2 MIPICSI_1.DPHY_DATALANE_DDLTUNE_COMP2.R /* Lane DDL Tune Observability */
#define MIPICSI_1_DPHY_DATALANE_DDLTUNE_VALUE2 MIPICSI_1.DPHY_DATALANE_DDLTUNE_VALUE2.R /* Lane 0 DDL Tune Observability */
#define MIPICSI_1_DPHY_DATALANE_DDLTUNE_OVRVALUE2 MIPICSI_1.DPHY_DATALANE_DDLTUNE_OVRVALUE2.R /* Lane 0 DDL Tune Control */
#define MIPICSI_1_DPHY_DATALANE_DDLTUNE_OVRVALUE3 MIPICSI_1.DPHY_DATALANE_DDLTUNE_OVRVALUE3.R /* Lane 0 DDL Tune Control */
#define MIPICSI_1_DPHY_DATALANE_DESKEW_OVRVALUE13 MIPICSI_1.DPHY_DATALANE_DESKEW_OVRVALUE13.R /* Lane 1 Control */
#define MIPICSI_1_DPHY_DATALANE_DESKEW_OVRVALUE23 MIPICSI_1.DPHY_DATALANE_DESKEW_OVRVALUE23.R /* Lane 1 Control */
#define MIPICSI_1_DPHY_DATALANE_DESKEW_COMPS3 MIPICSI_1.DPHY_DATALANE_DESKEW_COMPS3.R /* Lane 0 Observability */
#define MIPICSI_1_DPHY_DATALANE_DESKEW_VALUE13 MIPICSI_1.DPHY_DATALANE_DESKEW_VALUE13.R /* Lane 1 Observability */
#define MIPICSI_1_DPHY_DATALANE_DESKEW_VALUE23 MIPICSI_1.DPHY_DATALANE_DESKEW_VALUE23.R /* Lane 1 Observability */
#define MIPICSI_1_DPHY_DATAL3OFFSETCAL_OVRCNTRL MIPICSI_1.DPHY_DATAL3OFFSETCAL_OVRCNTRL.R /* Lane 1 Offset Compensation Control */
#define MIPICSI_1_DPHY_DATALOFFSETCAL_OVRVALUE3 MIPICSI_1.DPHY_DATALOFFSETCAL_OVRVALUE3.R /* Lane 0 Offset Compensation Control */
#define MIPICSI_1_DPHY_DATALANE_OFFSETCAL_COMPS3 MIPICSI_1.DPHY_DATALANE_OFFSETCAL_COMPS3.R /* Lane Offset Compensation Observability */
#define MIPICSI_1_DPHY_DATALOFFSETCAL_VALUE3 MIPICSI_1.DPHY_DATALOFFSETCAL_VALUE3.R /* Lane Offset Compensation Observability */
#define MIPICSI_1_DPHY_DATALANE_DDLTUNE_COMP3 MIPICSI_1.DPHY_DATALANE_DDLTUNE_COMP3.R /* Lane DDL Tune Observability */
#define MIPICSI_1_DPHY_DATALANE_DDLTUNE_VALUE3 MIPICSI_1.DPHY_DATALANE_DDLTUNE_VALUE3.R /* Lane 0 DDL Tune Observability */
#define MIPICSI_1_DPHY_PLL_VREF_CONFIG MIPICSI_1.DPHY_PLL_VREF_CONFIG.R /* PLL control */
#define MIPICSI_1_DPHY_CB_VBE_SEL MIPICSI_1.DPHY_CB_VBE_SEL.R /* Common Block Control */
#define MIPICSI_1_DPHY_ATB_CB_ATB_VBE_SEL MIPICSI_1.DPHY_ATB_CB_ATB_VBE_SEL.R /* Common Block Control */
#define MIPICSI_1_DPHY_TX_RDWR_TERM_CAL_0 MIPICSI_1.DPHY_TX_RDWR_TERM_CAL_0.R /* Termination Calibration Control */
#define MIPICSI_1_DPHY_TX_TERM_CAL_OVR MIPICSI_1.DPHY_TX_TERM_CAL_OVR.R /* Termination Calibration Control */
#define MIPICSI_1_DPHY_TX_TERM_CAL_0 MIPICSI_1.DPHY_TX_TERM_CAL_0.R /* Termination Calibration Observability */
#define MIPICSI_1_DPHY_TX_TERM_CAL_1 MIPICSI_1.DPHY_TX_TERM_CAL_1.R /* Termination Calibration Observability */
#define MIPICSI_1_DPHY_TERMCAL_STAT2 MIPICSI_1.DPHY_TERMCAL_STAT2.R /* Termination Calibration Observability */
#define MIPICSI_1_DPHY_CLKLANE_POLCFG MIPICSI_1.DPHY_CLKLANE_POLCFG.R /* Clock Lane Control */
#define MIPICSI_1_DPHY_ATB_DATA_LANE1 MIPICSI_1.DPHY_ATB_DATA_LANE1.R /* Lane 1 Control */
#define MIPICSI_1_DPHY_ATB_DATA_LANE2 MIPICSI_1.DPHY_ATB_DATA_LANE2.R /* Lane 2 Control */
#define MIPICSI_1_DPHY_ATB_DATA_LANE3 MIPICSI_1.DPHY_ATB_DATA_LANE3.R /* Lane 3 Control */

/* CTE */
#define CTE_CNTRL            CTE.CNTRL.R                   /* Control 0 */
#define CTE_CNTRL1           CTE.CNTRL1.R                  /* Control 1 */
#define CTE_LUT0_LSB0        CTE.LUT[0].LSB[0].R           /* TT 0 (LSB) */
#define CTE_LUT0_LSB1        CTE.LUT[0].LSB[1].R           /* TT 0 (LSB) */
#define CTE_LUT0_LSB2        CTE.LUT[0].LSB[2].R           /* TT 0 (LSB) */
#define CTE_LUT0_LSB3        CTE.LUT[0].LSB[3].R           /* TT 0 (LSB) */
#define CTE_LUT0_LSB4        CTE.LUT[0].LSB[4].R           /* TT 0 (LSB) */
#define CTE_LUT0_LSB5        CTE.LUT[0].LSB[5].R           /* TT 0 (LSB) */
#define CTE_LUT0_LSB6        CTE.LUT[0].LSB[6].R           /* TT 0 (LSB) */
#define CTE_LUT0_LSB7        CTE.LUT[0].LSB[7].R           /* TT 0 (LSB) */
#define CTE_LUT0_LSB8        CTE.LUT[0].LSB[8].R           /* TT 0 (LSB) */
#define CTE_LUT0_LSB9        CTE.LUT[0].LSB[9].R           /* TT 0 (LSB) */
#define CTE_LUT0_LSB10       CTE.LUT[0].LSB[10].R          /* TT 0 (LSB) */
#define CTE_LUT0_LSB11       CTE.LUT[0].LSB[11].R          /* TT 0 (LSB) */
#define CTE_LUT0_LSB12       CTE.LUT[0].LSB[12].R          /* TT 0 (LSB) */
#define CTE_LUT0_LSB13       CTE.LUT[0].LSB[13].R          /* TT 0 (LSB) */
#define CTE_LUT0_LSB14       CTE.LUT[0].LSB[14].R          /* TT 0 (LSB) */
#define CTE_LUT0_LSB15       CTE.LUT[0].LSB[15].R          /* TT 0 (LSB) */
#define CTE_LUT0_LSB16       CTE.LUT[0].LSB[16].R          /* TT 0 (LSB) */
#define CTE_LUT0_LSB17       CTE.LUT[0].LSB[17].R          /* TT 0 (LSB) */
#define CTE_LUT0_LSB18       CTE.LUT[0].LSB[18].R          /* TT 0 (LSB) */
#define CTE_LUT0_LSB19       CTE.LUT[0].LSB[19].R          /* TT 0 (LSB) */
#define CTE_LUT0_LSB20       CTE.LUT[0].LSB[20].R          /* TT 0 (LSB) */
#define CTE_LUT0_LSB21       CTE.LUT[0].LSB[21].R          /* TT 0 (LSB) */
#define CTE_LUT0_LSB22       CTE.LUT[0].LSB[22].R          /* TT 0 (LSB) */
#define CTE_LUT0_LSB23       CTE.LUT[0].LSB[23].R          /* TT 0 (LSB) */
#define CTE_LUT0_LSB24       CTE.LUT[0].LSB[24].R          /* TT 0 (LSB) */
#define CTE_LUT0_LSB25       CTE.LUT[0].LSB[25].R          /* TT 0 (LSB) */
#define CTE_LUT0_LSB26       CTE.LUT[0].LSB[26].R          /* TT 0 (LSB) */
#define CTE_LUT0_LSB27       CTE.LUT[0].LSB[27].R          /* TT 0 (LSB) */
#define CTE_LUT0_LSB28       CTE.LUT[0].LSB[28].R          /* TT 0 (LSB) */
#define CTE_LUT0_LSB29       CTE.LUT[0].LSB[29].R          /* TT 0 (LSB) */
#define CTE_LUT0_LSB30       CTE.LUT[0].LSB[30].R          /* TT 0 (LSB) */
#define CTE_LUT0_LSB31       CTE.LUT[0].LSB[31].R          /* TT 0 (LSB) */
#define CTE_LUT0_MSB0        CTE.LUT[0].MSB[0].R           /* TT 0 (MSB) */
#define CTE_LUT0_MSB1        CTE.LUT[0].MSB[1].R           /* TT 0 (MSB) */
#define CTE_LUT0_MSB2        CTE.LUT[0].MSB[2].R           /* TT 0 (MSB) */
#define CTE_LUT0_MSB3        CTE.LUT[0].MSB[3].R           /* TT 0 (MSB) */
#define CTE_LUT0_MSB4        CTE.LUT[0].MSB[4].R           /* TT 0 (MSB) */
#define CTE_LUT0_MSB5        CTE.LUT[0].MSB[5].R           /* TT 0 (MSB) */
#define CTE_LUT0_MSB6        CTE.LUT[0].MSB[6].R           /* TT 0 (MSB) */
#define CTE_LUT0_MSB7        CTE.LUT[0].MSB[7].R           /* TT 0 (MSB) */
#define CTE_LUT0_MSB8        CTE.LUT[0].MSB[8].R           /* TT 0 (MSB) */
#define CTE_LUT0_MSB9        CTE.LUT[0].MSB[9].R           /* TT 0 (MSB) */
#define CTE_LUT0_MSB10       CTE.LUT[0].MSB[10].R          /* TT 0 (MSB) */
#define CTE_LUT0_MSB11       CTE.LUT[0].MSB[11].R          /* TT 0 (MSB) */
#define CTE_LUT0_MSB12       CTE.LUT[0].MSB[12].R          /* TT 0 (MSB) */
#define CTE_LUT0_MSB13       CTE.LUT[0].MSB[13].R          /* TT 0 (MSB) */
#define CTE_LUT0_MSB14       CTE.LUT[0].MSB[14].R          /* TT 0 (MSB) */
#define CTE_LUT0_MSB15       CTE.LUT[0].MSB[15].R          /* TT 0 (MSB) */
#define CTE_LUT0_MSB16       CTE.LUT[0].MSB[16].R          /* TT 0 (MSB) */
#define CTE_LUT0_MSB17       CTE.LUT[0].MSB[17].R          /* TT 0 (MSB) */
#define CTE_LUT0_MSB18       CTE.LUT[0].MSB[18].R          /* TT 0 (MSB) */
#define CTE_LUT0_MSB19       CTE.LUT[0].MSB[19].R          /* TT 0 (MSB) */
#define CTE_LUT0_MSB20       CTE.LUT[0].MSB[20].R          /* TT 0 (MSB) */
#define CTE_LUT0_MSB21       CTE.LUT[0].MSB[21].R          /* TT 0 (MSB) */
#define CTE_LUT0_MSB22       CTE.LUT[0].MSB[22].R          /* TT 0 (MSB) */
#define CTE_LUT0_MSB23       CTE.LUT[0].MSB[23].R          /* TT 0 (MSB) */
#define CTE_LUT0_MSB24       CTE.LUT[0].MSB[24].R          /* TT 0 (MSB) */
#define CTE_LUT0_MSB25       CTE.LUT[0].MSB[25].R          /* TT 0 (MSB) */
#define CTE_LUT0_MSB26       CTE.LUT[0].MSB[26].R          /* TT 0 (MSB) */
#define CTE_LUT0_MSB27       CTE.LUT[0].MSB[27].R          /* TT 0 (MSB) */
#define CTE_LUT0_MSB28       CTE.LUT[0].MSB[28].R          /* TT 0 (MSB) */
#define CTE_LUT0_MSB29       CTE.LUT[0].MSB[29].R          /* TT 0 (MSB) */
#define CTE_LUT0_MSB30       CTE.LUT[0].MSB[30].R          /* TT 0 (MSB) */
#define CTE_LUT0_MSB31       CTE.LUT[0].MSB[31].R          /* TT 0 (MSB) */
#define CTE_LUT1_LSB0        CTE.LUT[1].LSB[0].R           /* TT 1 (LSB) */
#define CTE_LUT1_LSB1        CTE.LUT[1].LSB[1].R           /* TT 1 (LSB) */
#define CTE_LUT1_LSB2        CTE.LUT[1].LSB[2].R           /* TT 1 (LSB) */
#define CTE_LUT1_LSB3        CTE.LUT[1].LSB[3].R           /* TT 1 (LSB) */
#define CTE_LUT1_LSB4        CTE.LUT[1].LSB[4].R           /* TT 1 (LSB) */
#define CTE_LUT1_LSB5        CTE.LUT[1].LSB[5].R           /* TT 1 (LSB) */
#define CTE_LUT1_LSB6        CTE.LUT[1].LSB[6].R           /* TT 1 (LSB) */
#define CTE_LUT1_LSB7        CTE.LUT[1].LSB[7].R           /* TT 1 (LSB) */
#define CTE_LUT1_LSB8        CTE.LUT[1].LSB[8].R           /* TT 1 (LSB) */
#define CTE_LUT1_LSB9        CTE.LUT[1].LSB[9].R           /* TT 1 (LSB) */
#define CTE_LUT1_LSB10       CTE.LUT[1].LSB[10].R          /* TT 1 (LSB) */
#define CTE_LUT1_LSB11       CTE.LUT[1].LSB[11].R          /* TT 1 (LSB) */
#define CTE_LUT1_LSB12       CTE.LUT[1].LSB[12].R          /* TT 1 (LSB) */
#define CTE_LUT1_LSB13       CTE.LUT[1].LSB[13].R          /* TT 1 (LSB) */
#define CTE_LUT1_LSB14       CTE.LUT[1].LSB[14].R          /* TT 1 (LSB) */
#define CTE_LUT1_LSB15       CTE.LUT[1].LSB[15].R          /* TT 1 (LSB) */
#define CTE_LUT1_LSB16       CTE.LUT[1].LSB[16].R          /* TT 1 (LSB) */
#define CTE_LUT1_LSB17       CTE.LUT[1].LSB[17].R          /* TT 1 (LSB) */
#define CTE_LUT1_LSB18       CTE.LUT[1].LSB[18].R          /* TT 1 (LSB) */
#define CTE_LUT1_LSB19       CTE.LUT[1].LSB[19].R          /* TT 1 (LSB) */
#define CTE_LUT1_LSB20       CTE.LUT[1].LSB[20].R          /* TT 1 (LSB) */
#define CTE_LUT1_LSB21       CTE.LUT[1].LSB[21].R          /* TT 1 (LSB) */
#define CTE_LUT1_LSB22       CTE.LUT[1].LSB[22].R          /* TT 1 (LSB) */
#define CTE_LUT1_LSB23       CTE.LUT[1].LSB[23].R          /* TT 1 (LSB) */
#define CTE_LUT1_LSB24       CTE.LUT[1].LSB[24].R          /* TT 1 (LSB) */
#define CTE_LUT1_LSB25       CTE.LUT[1].LSB[25].R          /* TT 1 (LSB) */
#define CTE_LUT1_LSB26       CTE.LUT[1].LSB[26].R          /* TT 1 (LSB) */
#define CTE_LUT1_LSB27       CTE.LUT[1].LSB[27].R          /* TT 1 (LSB) */
#define CTE_LUT1_LSB28       CTE.LUT[1].LSB[28].R          /* TT 1 (LSB) */
#define CTE_LUT1_LSB29       CTE.LUT[1].LSB[29].R          /* TT 1 (LSB) */
#define CTE_LUT1_LSB30       CTE.LUT[1].LSB[30].R          /* TT 1 (LSB) */
#define CTE_LUT1_LSB31       CTE.LUT[1].LSB[31].R          /* TT 1 (LSB) */
#define CTE_LUT1_MSB0        CTE.LUT[1].MSB[0].R           /* TT 1 (MSB) */
#define CTE_LUT1_MSB1        CTE.LUT[1].MSB[1].R           /* TT 1 (MSB) */
#define CTE_LUT1_MSB2        CTE.LUT[1].MSB[2].R           /* TT 1 (MSB) */
#define CTE_LUT1_MSB3        CTE.LUT[1].MSB[3].R           /* TT 1 (MSB) */
#define CTE_LUT1_MSB4        CTE.LUT[1].MSB[4].R           /* TT 1 (MSB) */
#define CTE_LUT1_MSB5        CTE.LUT[1].MSB[5].R           /* TT 1 (MSB) */
#define CTE_LUT1_MSB6        CTE.LUT[1].MSB[6].R           /* TT 1 (MSB) */
#define CTE_LUT1_MSB7        CTE.LUT[1].MSB[7].R           /* TT 1 (MSB) */
#define CTE_LUT1_MSB8        CTE.LUT[1].MSB[8].R           /* TT 1 (MSB) */
#define CTE_LUT1_MSB9        CTE.LUT[1].MSB[9].R           /* TT 1 (MSB) */
#define CTE_LUT1_MSB10       CTE.LUT[1].MSB[10].R          /* TT 1 (MSB) */
#define CTE_LUT1_MSB11       CTE.LUT[1].MSB[11].R          /* TT 1 (MSB) */
#define CTE_LUT1_MSB12       CTE.LUT[1].MSB[12].R          /* TT 1 (MSB) */
#define CTE_LUT1_MSB13       CTE.LUT[1].MSB[13].R          /* TT 1 (MSB) */
#define CTE_LUT1_MSB14       CTE.LUT[1].MSB[14].R          /* TT 1 (MSB) */
#define CTE_LUT1_MSB15       CTE.LUT[1].MSB[15].R          /* TT 1 (MSB) */
#define CTE_LUT1_MSB16       CTE.LUT[1].MSB[16].R          /* TT 1 (MSB) */
#define CTE_LUT1_MSB17       CTE.LUT[1].MSB[17].R          /* TT 1 (MSB) */
#define CTE_LUT1_MSB18       CTE.LUT[1].MSB[18].R          /* TT 1 (MSB) */
#define CTE_LUT1_MSB19       CTE.LUT[1].MSB[19].R          /* TT 1 (MSB) */
#define CTE_LUT1_MSB20       CTE.LUT[1].MSB[20].R          /* TT 1 (MSB) */
#define CTE_LUT1_MSB21       CTE.LUT[1].MSB[21].R          /* TT 1 (MSB) */
#define CTE_LUT1_MSB22       CTE.LUT[1].MSB[22].R          /* TT 1 (MSB) */
#define CTE_LUT1_MSB23       CTE.LUT[1].MSB[23].R          /* TT 1 (MSB) */
#define CTE_LUT1_MSB24       CTE.LUT[1].MSB[24].R          /* TT 1 (MSB) */
#define CTE_LUT1_MSB25       CTE.LUT[1].MSB[25].R          /* TT 1 (MSB) */
#define CTE_LUT1_MSB26       CTE.LUT[1].MSB[26].R          /* TT 1 (MSB) */
#define CTE_LUT1_MSB27       CTE.LUT[1].MSB[27].R          /* TT 1 (MSB) */
#define CTE_LUT1_MSB28       CTE.LUT[1].MSB[28].R          /* TT 1 (MSB) */
#define CTE_LUT1_MSB29       CTE.LUT[1].MSB[29].R          /* TT 1 (MSB) */
#define CTE_LUT1_MSB30       CTE.LUT[1].MSB[30].R          /* TT 1 (MSB) */
#define CTE_LUT1_MSB31       CTE.LUT[1].MSB[31].R          /* TT 1 (MSB) */
#define CTE_SIGTYPE00        CTE.SIGTYPE0[0].R             /* Signal Type Register 0 */
#define CTE_SIGTYPE01        CTE.SIGTYPE0[1].R             /* Signal Type Register 0 */
#define CTE_SIGTYPE10        CTE.SIGTYPE1[0].R             /* Signal Type 1 */
#define CTE_SIGTYPE11        CTE.SIGTYPE1[1].R             /* Signal Type 1 */
#define CTE_INTEN            CTE.INTEN.R                   /* Interrupt Enable */
#define CTE_INTSTAT          CTE.INTSTAT.R                 /* Interrupt Status */
#define CTE_CKSM_LSB         CTE.CKSM_LSB.R                /* LUT Checksum LSB */
#define CTE_CKSM_MSB         CTE.CKSM_MSB.R                /* LUT Checksum LSB */
#define CTE_DBG_REG          CTE.DBG_REG.R                 /* Debug */
#define CTE_LUT_DUR          CTE.LUT_DUR.R                 /* TT0 Execution Duration */
#define CTE_LUT_DUR1         CTE.LUT_DUR1.R                /* TT1 Execution Duration */
#define CTE_CLKSEL           CTE.CLKSEL.R                  /* Clock Select */

/* CTU */
#define CTU_TGSISR           CTU.TGSISR.R                  /* Trigger Generator Subunit Input Selection Register */
#define CTU_TGSCR            CTU.TGSCR.R                   /* Trigger Generator Subunit Control Register */
#define CTU_T0CR             CTU.TCR[0].R                  /* Trigger Compare Register */
#define CTU_T1CR             CTU.TCR[1].R                  /* Trigger Compare Register */
#define CTU_T2CR             CTU.TCR[2].R                  /* Trigger Compare Register */
#define CTU_T3CR             CTU.TCR[3].R                  /* Trigger Compare Register */
#define CTU_T4CR             CTU.TCR[4].R                  /* Trigger Compare Register */
#define CTU_T5CR             CTU.TCR[5].R                  /* Trigger Compare Register */
#define CTU_T6CR             CTU.TCR[6].R                  /* Trigger Compare Register */
#define CTU_T7CR             CTU.TCR[7].R                  /* Trigger Compare Register */
#define CTU_TGSCCR           CTU.TGSCCR.R                  /* TGS Counter Compare Register */
#define CTU_TGSCRR           CTU.TGSCRR.R                  /* TGS Counter Reload Register */
#define CTU_CLCR1            CTU.CLCR1.R                   /* Commands List Control Register 1 */
#define CTU_CLCR2            CTU.CLCR2.R                   /* Commands List Control Register 2 */
#define CTU_THCR1            CTU.THCR1.R                   /* Trigger Handler Control Register 1 */
#define CTU_THCR2            CTU.THCR2.R                   /* Trigger Handler Control Register 2 */
#define CTU_CLR_A_1          CTU.CLR[0].A.R                /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_1          CTU.CLR[0].B.R                /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_1          CTU.CLR[0].C.R                /* Command List Register C for self-test commands */
#define CTU_CLR_A_2          CTU.CLR[1].A.R                /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_2          CTU.CLR[1].B.R                /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_2          CTU.CLR[1].C.R                /* Command List Register C for self-test commands */
#define CTU_CLR_A_3          CTU.CLR[2].A.R                /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_3          CTU.CLR[2].B.R                /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_3          CTU.CLR[2].C.R                /* Command List Register C for self-test commands */
#define CTU_CLR_A_4          CTU.CLR[3].A.R                /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_4          CTU.CLR[3].B.R                /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_4          CTU.CLR[3].C.R                /* Command List Register C for self-test commands */
#define CTU_CLR_A_5          CTU.CLR[4].A.R                /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_5          CTU.CLR[4].B.R                /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_5          CTU.CLR[4].C.R                /* Command List Register C for self-test commands */
#define CTU_CLR_A_6          CTU.CLR[5].A.R                /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_6          CTU.CLR[5].B.R                /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_6          CTU.CLR[5].C.R                /* Command List Register C for self-test commands */
#define CTU_CLR_A_7          CTU.CLR[6].A.R                /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_7          CTU.CLR[6].B.R                /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_7          CTU.CLR[6].C.R                /* Command List Register C for self-test commands */
#define CTU_CLR_A_8          CTU.CLR[7].A.R                /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_8          CTU.CLR[7].B.R                /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_8          CTU.CLR[7].C.R                /* Command List Register C for self-test commands */
#define CTU_CLR_A_9          CTU.CLR[8].A.R                /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_9          CTU.CLR[8].B.R                /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_9          CTU.CLR[8].C.R                /* Command List Register C for self-test commands */
#define CTU_CLR_A_10         CTU.CLR[9].A.R                /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_10         CTU.CLR[9].B.R                /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_10         CTU.CLR[9].C.R                /* Command List Register C for self-test commands */
#define CTU_CLR_A_11         CTU.CLR[10].A.R               /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_11         CTU.CLR[10].B.R               /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_11         CTU.CLR[10].C.R               /* Command List Register C for self-test commands */
#define CTU_CLR_A_12         CTU.CLR[11].A.R               /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_12         CTU.CLR[11].B.R               /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_12         CTU.CLR[11].C.R               /* Command List Register C for self-test commands */
#define CTU_CLR_A_13         CTU.CLR[12].A.R               /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_13         CTU.CLR[12].B.R               /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_13         CTU.CLR[12].C.R               /* Command List Register C for self-test commands */
#define CTU_CLR_A_14         CTU.CLR[13].A.R               /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_14         CTU.CLR[13].B.R               /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_14         CTU.CLR[13].C.R               /* Command List Register C for self-test commands */
#define CTU_CLR_A_15         CTU.CLR[14].A.R               /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_15         CTU.CLR[14].B.R               /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_15         CTU.CLR[14].C.R               /* Command List Register C for self-test commands */
#define CTU_CLR_A_16         CTU.CLR[15].A.R               /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_16         CTU.CLR[15].B.R               /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_16         CTU.CLR[15].C.R               /* Command List Register C for self-test commands */
#define CTU_CLR_A_17         CTU.CLR[16].A.R               /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_17         CTU.CLR[16].B.R               /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_17         CTU.CLR[16].C.R               /* Command List Register C for self-test commands */
#define CTU_CLR_A_18         CTU.CLR[17].A.R               /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_18         CTU.CLR[17].B.R               /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_18         CTU.CLR[17].C.R               /* Command List Register C for self-test commands */
#define CTU_CLR_A_19         CTU.CLR[18].A.R               /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_19         CTU.CLR[18].B.R               /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_19         CTU.CLR[18].C.R               /* Command List Register C for self-test commands */
#define CTU_CLR_A_20         CTU.CLR[19].A.R               /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_20         CTU.CLR[19].B.R               /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_20         CTU.CLR[19].C.R               /* Command List Register C for self-test commands */
#define CTU_CLR_A_21         CTU.CLR[20].A.R               /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_21         CTU.CLR[20].B.R               /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_21         CTU.CLR[20].C.R               /* Command List Register C for self-test commands */
#define CTU_CLR_A_22         CTU.CLR[21].A.R               /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_22         CTU.CLR[21].B.R               /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_22         CTU.CLR[21].C.R               /* Command List Register C for self-test commands */
#define CTU_CLR_A_23         CTU.CLR[22].A.R               /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_23         CTU.CLR[22].B.R               /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_23         CTU.CLR[22].C.R               /* Command List Register C for self-test commands */
#define CTU_CLR_A_24         CTU.CLR[23].A.R               /* Commands List Register A for ADC single-conversion mode commands */
#define CTU_CLR_B_24         CTU.CLR[23].B.R               /* Command List Register B for ADC dual-conversion mode commands */
#define CTU_CLR_C_24         CTU.CLR[23].C.R               /* Command List Register C for self-test commands */
#define CTU_FDCR             CTU.FDCR.R                    /* FIFO DMA Control Register */
#define CTU_FCR              CTU.FCR.R                     /* FIFO Control Register */
#define CTU_FTH              CTU.FTH.R                     /* FIFO Threshold Register */
#define CTU_FST              CTU.FST.R                     /* FIFO Status Register */
#define CTU_FR0              CTU.FRr[0].R                  /* FIFO Right Aligned Data Register */
#define CTU_FR1              CTU.FRr[1].R                  /* FIFO Right Aligned Data Register */
#define CTU_FR2              CTU.FRr[2].R                  /* FIFO Right Aligned Data Register */
#define CTU_FR3              CTU.FRr[3].R                  /* FIFO Right Aligned Data Register */
#define CTU_FL0              CTU.FL[0].R                   /* FIFO Signed Left Aligned Data Register */
#define CTU_FL1              CTU.FL[1].R                   /* FIFO Signed Left Aligned Data Register */
#define CTU_FL2              CTU.FL[2].R                   /* FIFO Signed Left Aligned Data Register */
#define CTU_FL3              CTU.FL[3].R                   /* FIFO Signed Left Aligned Data Register */
#define CTU_EFR              CTU.EFR.R                     /* Error Flag Register */
#define CTU_IFR              CTU.IFR.R                     /* Interrupt Flag Register */
#define CTU_IR               CTU.IR.R                      /* Interrupt/DMA Register */
#define CTU_COTR             CTU.COTR.R                    /* Control ON Time Register */
#define CTU_CR               CTU.CR.R                      /* Control Register */
#define CTU_DFR              CTU.DFR.R                     /* Digital Filter Register */
#define CTU_EXPAR            CTU.EXPAR.R                   /* Expected Value A Register */
#define CTU_EXPBR            CTU.EXPBR.R                   /* Expected Value B Register */
#define CTU_CNTRNGR          CTU.CNTRNGR.R                 /* Counter Range Register */
#define CTU_LISTCSR          CTU.LISTCSR.R                 /* List Control/Status Register */

/* DFS */
#define DFS_PORTSR           DFS.PORTSR.R                  /* Port Status Register */
#define DFS_PORTLOLSR        DFS.PORTLOLSR.R               /* Port Loss of Lock Status */
#define DFS_PORTRESET        DFS.PORTRESET.R               /* Port Reset */
#define DFS_CTL              DFS.CTL.R                     /* Control */
#define DFS_DVPORT0          DFS.DVPORT[0].R               /* Divider for Port 0 */
#define DFS_DVPORT1          DFS.DVPORT[1].R               /* Divider for Port 1 */
#define DFS_DVPORT2          DFS.DVPORT[2].R               /* Divider for Port 2 */
#define DFS_DVPORT3          DFS.DVPORT[3].R               /* Divider for Port 3 */
#define DFS_DVPORT4          DFS.DVPORT[4].R               /* Divider for Port 4 */
#define DFS_DVPORT5          DFS.DVPORT[5].R               /* Divider for Port 5 */

/* DMAMUX */
#define DMAMUX_1_CHCFG0      DMAMUX_1.CHCFG[0].R           /* Channel Configuration register */
#define DMAMUX_1_CHCFG1      DMAMUX_1.CHCFG[1].R           /* Channel Configuration register */
#define DMAMUX_1_CHCFG2      DMAMUX_1.CHCFG[2].R           /* Channel Configuration register */
#define DMAMUX_1_CHCFG3      DMAMUX_1.CHCFG[3].R           /* Channel Configuration register */
#define DMAMUX_1_CHCFG4      DMAMUX_1.CHCFG[4].R           /* Channel Configuration register */
#define DMAMUX_1_CHCFG5      DMAMUX_1.CHCFG[5].R           /* Channel Configuration register */
#define DMAMUX_1_CHCFG6      DMAMUX_1.CHCFG[6].R           /* Channel Configuration register */
#define DMAMUX_1_CHCFG7      DMAMUX_1.CHCFG[7].R           /* Channel Configuration register */
#define DMAMUX_1_CHCFG8      DMAMUX_1.CHCFG[8].R           /* Channel Configuration register */
#define DMAMUX_1_CHCFG9      DMAMUX_1.CHCFG[9].R           /* Channel Configuration register */
#define DMAMUX_1_CHCFG10     DMAMUX_1.CHCFG[10].R          /* Channel Configuration register */
#define DMAMUX_1_CHCFG11     DMAMUX_1.CHCFG[11].R          /* Channel Configuration register */
#define DMAMUX_1_CHCFG12     DMAMUX_1.CHCFG[12].R          /* Channel Configuration register */
#define DMAMUX_1_CHCFG13     DMAMUX_1.CHCFG[13].R          /* Channel Configuration register */
#define DMAMUX_1_CHCFG14     DMAMUX_1.CHCFG[14].R          /* Channel Configuration register */
#define DMAMUX_1_CHCFG15     DMAMUX_1.CHCFG[15].R          /* Channel Configuration register */

#define DMAMUX_0_CHCFG0      DMAMUX_0.CHCFG[0].R           /* Channel Configuration register */
#define DMAMUX_0_CHCFG1      DMAMUX_0.CHCFG[1].R           /* Channel Configuration register */
#define DMAMUX_0_CHCFG2      DMAMUX_0.CHCFG[2].R           /* Channel Configuration register */
#define DMAMUX_0_CHCFG3      DMAMUX_0.CHCFG[3].R           /* Channel Configuration register */
#define DMAMUX_0_CHCFG4      DMAMUX_0.CHCFG[4].R           /* Channel Configuration register */
#define DMAMUX_0_CHCFG5      DMAMUX_0.CHCFG[5].R           /* Channel Configuration register */
#define DMAMUX_0_CHCFG6      DMAMUX_0.CHCFG[6].R           /* Channel Configuration register */
#define DMAMUX_0_CHCFG7      DMAMUX_0.CHCFG[7].R           /* Channel Configuration register */
#define DMAMUX_0_CHCFG8      DMAMUX_0.CHCFG[8].R           /* Channel Configuration register */
#define DMAMUX_0_CHCFG9      DMAMUX_0.CHCFG[9].R           /* Channel Configuration register */
#define DMAMUX_0_CHCFG10     DMAMUX_0.CHCFG[10].R          /* Channel Configuration register */
#define DMAMUX_0_CHCFG11     DMAMUX_0.CHCFG[11].R          /* Channel Configuration register */
#define DMAMUX_0_CHCFG12     DMAMUX_0.CHCFG[12].R          /* Channel Configuration register */
#define DMAMUX_0_CHCFG13     DMAMUX_0.CHCFG[13].R          /* Channel Configuration register */
#define DMAMUX_0_CHCFG14     DMAMUX_0.CHCFG[14].R          /* Channel Configuration register */
#define DMAMUX_0_CHCFG15     DMAMUX_0.CHCFG[15].R          /* Channel Configuration register */

/* DMA_CRC */
#define DMA_CRC_GEC          DMA_CRC.GEC.R                 /* Global Enable CRC Register */
#define DMA_CRC_CTL0         DMA_CRC.CONTROL_REGISTER[0].CTL.R /* CRC Control Register */
#define DMA_CRC_ICRC0        DMA_CRC.CONTROL_REGISTER[0].ICRC.R /* Initial CRC Value Register */
#define DMA_CRC_FCRC0        DMA_CRC.CONTROL_REGISTER[0].FCRC.R /* Final CRC Value Register */
#define DMA_CRC_CTL1         DMA_CRC.CONTROL_REGISTER[1].CTL.R /* CRC Control Register */
#define DMA_CRC_ICRC1        DMA_CRC.CONTROL_REGISTER[1].ICRC.R /* Initial CRC Value Register */
#define DMA_CRC_FCRC1        DMA_CRC.CONTROL_REGISTER[1].FCRC.R /* Final CRC Value Register */
#define DMA_CRC_CTL2         DMA_CRC.CONTROL_REGISTER[2].CTL.R /* CRC Control Register */
#define DMA_CRC_ICRC2        DMA_CRC.CONTROL_REGISTER[2].ICRC.R /* Initial CRC Value Register */
#define DMA_CRC_FCRC2        DMA_CRC.CONTROL_REGISTER[2].FCRC.R /* Final CRC Value Register */
#define DMA_CRC_CTL3         DMA_CRC.CONTROL_REGISTER[3].CTL.R /* CRC Control Register */
#define DMA_CRC_ICRC3        DMA_CRC.CONTROL_REGISTER[3].ICRC.R /* Initial CRC Value Register */
#define DMA_CRC_FCRC3        DMA_CRC.CONTROL_REGISTER[3].FCRC.R /* Final CRC Value Register */
#define DMA_CRC_CTL4         DMA_CRC.CONTROL_REGISTER[4].CTL.R /* CRC Control Register */
#define DMA_CRC_ICRC4        DMA_CRC.CONTROL_REGISTER[4].ICRC.R /* Initial CRC Value Register */
#define DMA_CRC_FCRC4        DMA_CRC.CONTROL_REGISTER[4].FCRC.R /* Final CRC Value Register */
#define DMA_CRC_CTL5         DMA_CRC.CONTROL_REGISTER[5].CTL.R /* CRC Control Register */
#define DMA_CRC_ICRC5        DMA_CRC.CONTROL_REGISTER[5].ICRC.R /* Initial CRC Value Register */
#define DMA_CRC_FCRC5        DMA_CRC.CONTROL_REGISTER[5].FCRC.R /* Final CRC Value Register */
#define DMA_CRC_CTL6         DMA_CRC.CONTROL_REGISTER[6].CTL.R /* CRC Control Register */
#define DMA_CRC_ICRC6        DMA_CRC.CONTROL_REGISTER[6].ICRC.R /* Initial CRC Value Register */
#define DMA_CRC_FCRC6        DMA_CRC.CONTROL_REGISTER[6].FCRC.R /* Final CRC Value Register */
#define DMA_CRC_CTL7         DMA_CRC.CONTROL_REGISTER[7].CTL.R /* CRC Control Register */
#define DMA_CRC_ICRC7        DMA_CRC.CONTROL_REGISTER[7].ICRC.R /* Initial CRC Value Register */
#define DMA_CRC_FCRC7        DMA_CRC.CONTROL_REGISTER[7].FCRC.R /* Final CRC Value Register */

/* DTS */
#define DTS_ENABLE           DTS.ENABLE.R                  /* Output Enable Register */
#define DTS_STARTUP          DTS.STARTUP.R                 /* Startup Register */
#define DTS_SEMAPHORE        DTS.SEMAPHORE.R               /* Semaphore Register */
#define DTS_SEMAPHORE_B      DTS.SEMAPHORE_B.R             /* Semaphore Extension */

/* EIM */
#define EIM_EIMCR            EIM.EIMCR.R                   /* Error Injection Module Configuration Register */
#define EIM_EICHEN           EIM.EICHEN.R                  /* Error Injection Channel Enable register */
#define EIM_EICHD0_WORD0     EIM.EICHD_WORD0[0].R          /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD0_WORD1     EIM.EICHD_WORD1[0].R          /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD0_WORD2     EIM.EICHD_WORD2[0].R          /* Error Injection Channel Descriptor n, Word2 */

/* ENET */
#define ENET_0_EIR           ENET_0.EIR.R                  /* Interrupt Event Register */
#define ENET_0_EIMR          ENET_0.EIMR.R                 /* Interrupt Mask Register */
#define ENET_0_RDAR          ENET_0.RDAR.R                 /* Receive Descriptor Active Register - Ring 0 */
#define ENET_0_TDAR          ENET_0.TDAR.R                 /* Transmit Descriptor Active Register - Ring 0 */
#define ENET_0_ECR           ENET_0.ECR.R                  /* Ethernet Control Register */
#define ENET_0_MMFR          ENET_0.MMFR.R                 /* MII Management Frame Register */
#define ENET_0_MSCR          ENET_0.MSCR.R                 /* MII Speed Control Register */
#define ENET_0_MIBC          ENET_0.MIBC.R                 /* MIB Control Register */
#define ENET_0_RCR           ENET_0.RCR.R                  /* Receive Control Register */
#define ENET_0_TCR           ENET_0.TCR.R                  /* Transmit Control Register */
#define ENET_0_PALR          ENET_0.PALR.R                 /* Physical Address Lower Register */
#define ENET_0_PAUR          ENET_0.PAUR.R                 /* Physical Address Upper Register */
#define ENET_0_OPD           ENET_0.OPD.R                  /* Opcode/Pause Duration Register */
#define ENET_0_TXIC0         ENET_0.TXIC[0].R              /* Transmit Interrupt Coalescing Register */
#define ENET_0_RXIC0         ENET_0.RXIC[0].R              /* Receive Interrupt Coalescing Register */
#define ENET_0_IAUR          ENET_0.IAUR.R                 /* Descriptor Individual Upper Address Register */
#define ENET_0_IALR          ENET_0.IALR.R                 /* Descriptor Individual Lower Address Register */
#define ENET_0_GAUR          ENET_0.GAUR.R                 /* Descriptor Group Upper Address Register */
#define ENET_0_GALR          ENET_0.GALR.R                 /* Descriptor Group Lower Address Register */
#define ENET_0_TFWR          ENET_0.TFWR.R                 /* Transmit FIFO Watermark Register */
#define ENET_0_RDSR          ENET_0.RDSR.R                 /* Receive Descriptor Ring 0 Start Register */
#define ENET_0_TDSR          ENET_0.TDSR.R                 /* Transmit Buffer Descriptor Ring 0 Start Register */
#define ENET_0_MRBR          ENET_0.MRBR.R                 /* Maximum Receive Buffer Size Register - Ring 0 */
#define ENET_0_RSFL          ENET_0.RSFL.R                 /* Receive FIFO Section Full Threshold */
#define ENET_0_RSEM          ENET_0.RSEM.R                 /* Receive FIFO Section Empty Threshold */
#define ENET_0_RAEM          ENET_0.RAEM.R                 /* Receive FIFO Almost Empty Threshold */
#define ENET_0_RAFL          ENET_0.RAFL.R                 /* Receive FIFO Almost Full Threshold */
#define ENET_0_TSEM          ENET_0.TSEM.R                 /* Transmit FIFO Section Empty Threshold */
#define ENET_0_TAEM          ENET_0.TAEM.R                 /* Transmit FIFO Almost Empty Threshold */
#define ENET_0_TAFL          ENET_0.TAFL.R                 /* Transmit FIFO Almost Full Threshold */
#define ENET_0_TIPG          ENET_0.TIPG.R                 /* Transmit Inter-Packet Gap */
#define ENET_0_FTRL          ENET_0.FTRL.R                 /* Frame Truncation Length */
#define ENET_0_TACC          ENET_0.TACC.R                 /* Transmit Accelerator Function Configuration */
#define ENET_0_RACC          ENET_0.RACC.R                 /* Receive Accelerator Function Configuration */
#define ENET_0_RMON_T_DROP   ENET_0.RMON_T_DROP.R          /* Reserved Statistic Register */
#define ENET_0_RMON_T_PACKETS ENET_0.RMON_T_PACKETS.R      /* Tx Packet Count Statistic Register */
#define ENET_0_RMON_T_BC_PKT ENET_0.RMON_T_BC_PKT.R        /* Tx Broadcast Packets Statistic Register */
#define ENET_0_RMON_T_MC_PKT ENET_0.RMON_T_MC_PKT.R        /* Tx Multicast Packets Statistic Register */
#define ENET_0_RMON_T_CRC_ALIGN ENET_0.RMON_T_CRC_ALIGN.R  /* Tx Packets with CRC/Align Error Statistic Register */
#define ENET_0_RMON_T_UNDERSIZE ENET_0.RMON_T_UNDERSIZE.R  /* Tx Packets Less Than Bytes and Good CRC Statistic Register */
#define ENET_0_RMON_T_OVERSIZE ENET_0.RMON_T_OVERSIZE.R    /* Tx Packets GT MAX_FL bytes and Good CRC Statistic Register */
#define ENET_0_RMON_T_FRAG   ENET_0.RMON_T_FRAG.R          /* Tx Packets Less Than 64 Bytes and Bad CRC Statistic Register */
#define ENET_0_RMON_T_JAB    ENET_0.RMON_T_JAB.R           /* Tx Packets Greater Than MAX_FL bytes and Bad CRC Statistic Register */
#define ENET_0_RMON_T_COL    ENET_0.RMON_T_COL.R           /* Tx Collision Count Statistic Register */
#define ENET_0_RMON_T_P64    ENET_0.RMON_T_P64.R           /* Tx 64-Byte Packets Statistic Register */
#define ENET_0_RMON_T_P65TO127 ENET_0.RMON_T_P65TO127.R    /* Tx 65- to 127-byte Packets Statistic Register */
#define ENET_0_RMON_T_P128TO255 ENET_0.RMON_T_P128TO255.R  /* Tx 128- to 255-byte Packets Statistic Register */
#define ENET_0_RMON_T_P256TO511 ENET_0.RMON_T_P256TO511.R  /* Tx 256- to 511-byte Packets Statistic Register */
#define ENET_0_RMON_T_P512TO1023 ENET_0.RMON_T_P512TO1023.R /* Tx 512- to 1023-byte Packets Statistic Register */
#define ENET_0_RMON_T_P1024TO2047 ENET_0.RMON_T_P1024TO2047.R /* Tx 1024- to 2047-byte Packets Statistic Register */
#define ENET_0_RMON_T_P_GTE2048 ENET_0.RMON_T_P_GTE2048.R  /* Tx Packets Greater Than 2048 Bytes Statistic Register */
#define ENET_0_RMON_T_OCTETS ENET_0.RMON_T_OCTETS.R        /* Tx Octets Statistic Register */
#define ENET_0_IEEE_T_DROP   ENET_0.IEEE_T_DROP.R          /* Reserved Statistic Register */
#define ENET_0_IEEE_T_FRAME_OK ENET_0.IEEE_T_FRAME_OK.R    /* Frames Transmitted OK Statistic Register */
#define ENET_0_IEEE_T_1COL   ENET_0.IEEE_T_1COL.R          /* Frames Transmitted with Single Collision Statistic Register */
#define ENET_0_IEEE_T_MCOL   ENET_0.IEEE_T_MCOL.R          /* Frames Transmitted with Multiple Collisions Statistic Register */
#define ENET_0_IEEE_T_DEF    ENET_0.IEEE_T_DEF.R           /* Frames Transmitted after Deferral Delay Statistic Register */
#define ENET_0_IEEE_T_LCOL   ENET_0.IEEE_T_LCOL.R          /* Frames Transmitted with Late Collision Statistic Register */
#define ENET_0_IEEE_T_EXCOL  ENET_0.IEEE_T_EXCOL.R         /* Frames Transmitted with Excessive Collisions Statistic Register */
#define ENET_0_IEEE_T_MACERR ENET_0.IEEE_T_MACERR.R        /* Frames Transmitted with Tx FIFO Underrun Statistic Register */
#define ENET_0_IEEE_T_CSERR  ENET_0.IEEE_T_CSERR.R         /* Frames Transmitted with Carrier Sense Error Statistic Register */
#define ENET_0_IEEE_T_SQE    ENET_0.IEEE_T_SQE.R           /* Reserved Statistic Register */
#define ENET_0_IEEE_T_FDXFC  ENET_0.IEEE_T_FDXFC.R         /* Flow Control Pause Frames Transmitted Statistic Register */
#define ENET_0_IEEE_T_OCTETS_OK ENET_0.IEEE_T_OCTETS_OK.R  /* Octet Count for Frames Transmitted w/o Error Statistic Register */
#define ENET_0_RMON_R_PACKETS ENET_0.RMON_R_PACKETS.R      /* Rx Packet Count Statistic Register */
#define ENET_0_RMON_R_BC_PKT ENET_0.RMON_R_BC_PKT.R        /* Rx Broadcast Packets Statistic Register */
#define ENET_0_RMON_R_MC_PKT ENET_0.RMON_R_MC_PKT.R        /* Rx Multicast Packets Statistic Register */
#define ENET_0_RMON_R_CRC_ALIGN ENET_0.RMON_R_CRC_ALIGN.R  /* Rx Packets with CRC/Align Error Statistic Register */
#define ENET_0_RMON_R_UNDERSIZE ENET_0.RMON_R_UNDERSIZE.R  /* Rx Packets with Less Than 64 Bytes and Good CRC Statistic Register */
#define ENET_0_RMON_R_OVERSIZE ENET_0.RMON_R_OVERSIZE.R    /* Rx Packets Greater Than MAX_FL and Good CRC Statistic Register */
#define ENET_0_RMON_R_FRAG   ENET_0.RMON_R_FRAG.R          /* Rx Packets Less Than 64 Bytes and Bad CRC Statistic Register */
#define ENET_0_RMON_R_JAB    ENET_0.RMON_R_JAB.R           /* Rx Packets Greater Than MAX_FL Bytes and Bad CRC Statistic Register */
#define ENET_0_RMON_R_RESVD_0 ENET_0.RMON_R_RESVD_0.R      /* Reserved Statistic Register */
#define ENET_0_RMON_R_P64    ENET_0.RMON_R_P64.R           /* Rx 64-Byte Packets Statistic Register */
#define ENET_0_RMON_R_P65TO127 ENET_0.RMON_R_P65TO127.R    /* Rx 65- to 127-Byte Packets Statistic Register */
#define ENET_0_RMON_R_P128TO255 ENET_0.RMON_R_P128TO255.R  /* Rx 128- to 255-Byte Packets Statistic Register */
#define ENET_0_RMON_R_P256TO511 ENET_0.RMON_R_P256TO511.R  /* Rx 256- to 511-Byte Packets Statistic Register */
#define ENET_0_RMON_R_P512TO1023 ENET_0.RMON_R_P512TO1023.R /* Rx 512- to 1023-Byte Packets Statistic Register */
#define ENET_0_RMON_R_P1024TO2047 ENET_0.RMON_R_P1024TO2047.R /* Rx 1024- to 2047-Byte Packets Statistic Register */
#define ENET_0_RMON_R_P_GTE2048 ENET_0.RMON_R_P_GTE2048.R  /* Rx Packets Greater than 2048 Bytes Statistic Register */
#define ENET_0_RMON_R_OCTETS ENET_0.RMON_R_OCTETS.R        /* Rx Octets Statistic Register */
#define ENET_0_IEEE_R_DROP   ENET_0.IEEE_R_DROP.R          /* Frames not Counted Correctly Statistic Register */
#define ENET_0_IEEE_R_FRAME_OK ENET_0.IEEE_R_FRAME_OK.R    /* Frames Received OK Statistic Register */
#define ENET_0_IEEE_R_CRC    ENET_0.IEEE_R_CRC.R           /* Frames Received with CRC Error Statistic Register */
#define ENET_0_IEEE_R_ALIGN  ENET_0.IEEE_R_ALIGN.R         /* Frames Received with Alignment Error Statistic Register */
#define ENET_0_IEEE_R_MACERR ENET_0.IEEE_R_MACERR.R        /* Receive FIFO Overflow Count Statistic Register */
#define ENET_0_IEEE_R_FDXFC  ENET_0.IEEE_R_FDXFC.R         /* Flow Control Pause Frames Received Statistic Register */
#define ENET_0_IEEE_R_OCTETS_OK ENET_0.IEEE_R_OCTETS_OK.R  /* Octet Count for Frames Received without Error Statistic Register */
#define ENET_0_ATCR          ENET_0.ATCR.R                 /* Adjustable Timer Control Register */
#define ENET_0_ATVR          ENET_0.ATVR.R                 /* Timer Value Register */
#define ENET_0_ATOFF         ENET_0.ATOFF.R                /* Timer Offset Register */
#define ENET_0_ATPER         ENET_0.ATPER.R                /* Timer Period Register */
#define ENET_0_ATCOR         ENET_0.ATCOR.R                /* Timer Correction Register */
#define ENET_0_ATINC         ENET_0.ATINC.R                /* Time-Stamping Clock Period Register */
#define ENET_0_ATSTMP        ENET_0.ATSTMP.R               /* Timestamp of Last Transmitted Frame */
#define ENET_0_TGSR          ENET_0.TGSR.R                 /* Timer Global Status Register */
#define ENET_0_TCSR0         ENET_0.TIMER[0].TCSR.R        /* Timer Control Status Register */
#define ENET_0_TCCR0         ENET_0.TIMER[0].TCCR.R        /* Timer Compare Capture Register */
#define ENET_0_TCSR1         ENET_0.TIMER[1].TCSR.R        /* Timer Control Status Register */
#define ENET_0_TCCR1         ENET_0.TIMER[1].TCCR.R        /* Timer Compare Capture Register */
#define ENET_0_TCSR2         ENET_0.TIMER[2].TCSR.R        /* Timer Control Status Register */
#define ENET_0_TCCR2         ENET_0.TIMER[2].TCCR.R        /* Timer Compare Capture Register */
#define ENET_0_TCSR3         ENET_0.TIMER[3].TCSR.R        /* Timer Control Status Register */
#define ENET_0_TCCR3         ENET_0.TIMER[3].TCCR.R        /* Timer Compare Capture Register */

/* ETIMER */
#define ETIMER_1_CH0_COMP1   ETIMER_1.CH[0].COMP1.R        /* Channel n Compare 1 */
#define ETIMER_1_CH0_COMP2   ETIMER_1.CH[0].COMP2.R        /* Channel n Compare 2 */
#define ETIMER_1_CH0_CAPT1   ETIMER_1.CH[0].CAPT1.R        /* Channel n Capture 1 */
#define ETIMER_1_CH0_CAPT2   ETIMER_1.CH[0].CAPT2.R        /* Channel n Capture 2 */
#define ETIMER_1_CH0_LOAD    ETIMER_1.CH[0].LOAD.R         /* Channel n Load */
#define ETIMER_1_CH0_HOLD    ETIMER_1.CH[0].HOLD.R         /* Channel n Hold */
#define ETIMER_1_CH0_CNTR    ETIMER_1.CH[0].CNTR.R         /* Channel n Counter */
#define ETIMER_1_CH0_CTRL1   ETIMER_1.CH[0].CTRL1.R        /* Channel n Control 1 */
#define ETIMER_1_CH0_CTRL2   ETIMER_1.CH[0].CTRL2.R        /* Channel n Control 2 */
#define ETIMER_1_CH0_CTRL3   ETIMER_1.CH[0].CTRL3.R        /* Channel n Control 3 */
#define ETIMER_1_CH0_STS     ETIMER_1.CH[0].STS.R          /* Channel n Status */
#define ETIMER_1_CH0_INTDMA  ETIMER_1.CH[0].INTDMA.R       /* Channel n Interrupt and DMA Enable */
#define ETIMER_1_CH0_CMPLD1  ETIMER_1.CH[0].CMPLD1.R       /* Channel n Comparator Load 1 */
#define ETIMER_1_CH0_CMPLD2  ETIMER_1.CH[0].CMPLD2.R       /* Channel n Comparator Load 2 */
#define ETIMER_1_CH0_CCCTRL  ETIMER_1.CH[0].CCCTRL.R       /* Channel n Compare and Capture Control */
#define ETIMER_1_CH0_FILT    ETIMER_1.CH[0].FILT.R         /* Channel n Input Filter */
#define ETIMER_1_CH1_COMP1   ETIMER_1.CH[1].COMP1.R        /* Channel n Compare 1 */
#define ETIMER_1_CH1_COMP2   ETIMER_1.CH[1].COMP2.R        /* Channel n Compare 2 */
#define ETIMER_1_CH1_CAPT1   ETIMER_1.CH[1].CAPT1.R        /* Channel n Capture 1 */
#define ETIMER_1_CH1_CAPT2   ETIMER_1.CH[1].CAPT2.R        /* Channel n Capture 2 */
#define ETIMER_1_CH1_LOAD    ETIMER_1.CH[1].LOAD.R         /* Channel n Load */
#define ETIMER_1_CH1_HOLD    ETIMER_1.CH[1].HOLD.R         /* Channel n Hold */
#define ETIMER_1_CH1_CNTR    ETIMER_1.CH[1].CNTR.R         /* Channel n Counter */
#define ETIMER_1_CH1_CTRL1   ETIMER_1.CH[1].CTRL1.R        /* Channel n Control 1 */
#define ETIMER_1_CH1_CTRL2   ETIMER_1.CH[1].CTRL2.R        /* Channel n Control 2 */
#define ETIMER_1_CH1_CTRL3   ETIMER_1.CH[1].CTRL3.R        /* Channel n Control 3 */
#define ETIMER_1_CH1_STS     ETIMER_1.CH[1].STS.R          /* Channel n Status */
#define ETIMER_1_CH1_INTDMA  ETIMER_1.CH[1].INTDMA.R       /* Channel n Interrupt and DMA Enable */
#define ETIMER_1_CH1_CMPLD1  ETIMER_1.CH[1].CMPLD1.R       /* Channel n Comparator Load 1 */
#define ETIMER_1_CH1_CMPLD2  ETIMER_1.CH[1].CMPLD2.R       /* Channel n Comparator Load 2 */
#define ETIMER_1_CH1_CCCTRL  ETIMER_1.CH[1].CCCTRL.R       /* Channel n Compare and Capture Control */
#define ETIMER_1_CH1_FILT    ETIMER_1.CH[1].FILT.R         /* Channel n Input Filter */
#define ETIMER_1_CH2_COMP1   ETIMER_1.CH[2].COMP1.R        /* Channel n Compare 1 */
#define ETIMER_1_CH2_COMP2   ETIMER_1.CH[2].COMP2.R        /* Channel n Compare 2 */
#define ETIMER_1_CH2_CAPT1   ETIMER_1.CH[2].CAPT1.R        /* Channel n Capture 1 */
#define ETIMER_1_CH2_CAPT2   ETIMER_1.CH[2].CAPT2.R        /* Channel n Capture 2 */
#define ETIMER_1_CH2_LOAD    ETIMER_1.CH[2].LOAD.R         /* Channel n Load */
#define ETIMER_1_CH2_HOLD    ETIMER_1.CH[2].HOLD.R         /* Channel n Hold */
#define ETIMER_1_CH2_CNTR    ETIMER_1.CH[2].CNTR.R         /* Channel n Counter */
#define ETIMER_1_CH2_CTRL1   ETIMER_1.CH[2].CTRL1.R        /* Channel n Control 1 */
#define ETIMER_1_CH2_CTRL2   ETIMER_1.CH[2].CTRL2.R        /* Channel n Control 2 */
#define ETIMER_1_CH2_CTRL3   ETIMER_1.CH[2].CTRL3.R        /* Channel n Control 3 */
#define ETIMER_1_CH2_STS     ETIMER_1.CH[2].STS.R          /* Channel n Status */
#define ETIMER_1_CH2_INTDMA  ETIMER_1.CH[2].INTDMA.R       /* Channel n Interrupt and DMA Enable */
#define ETIMER_1_CH2_CMPLD1  ETIMER_1.CH[2].CMPLD1.R       /* Channel n Comparator Load 1 */
#define ETIMER_1_CH2_CMPLD2  ETIMER_1.CH[2].CMPLD2.R       /* Channel n Comparator Load 2 */
#define ETIMER_1_CH2_CCCTRL  ETIMER_1.CH[2].CCCTRL.R       /* Channel n Compare and Capture Control */
#define ETIMER_1_CH2_FILT    ETIMER_1.CH[2].FILT.R         /* Channel n Input Filter */
#define ETIMER_1_CH3_COMP1   ETIMER_1.CH[3].COMP1.R        /* Channel n Compare 1 */
#define ETIMER_1_CH3_COMP2   ETIMER_1.CH[3].COMP2.R        /* Channel n Compare 2 */
#define ETIMER_1_CH3_CAPT1   ETIMER_1.CH[3].CAPT1.R        /* Channel n Capture 1 */
#define ETIMER_1_CH3_CAPT2   ETIMER_1.CH[3].CAPT2.R        /* Channel n Capture 2 */
#define ETIMER_1_CH3_LOAD    ETIMER_1.CH[3].LOAD.R         /* Channel n Load */
#define ETIMER_1_CH3_HOLD    ETIMER_1.CH[3].HOLD.R         /* Channel n Hold */
#define ETIMER_1_CH3_CNTR    ETIMER_1.CH[3].CNTR.R         /* Channel n Counter */
#define ETIMER_1_CH3_CTRL1   ETIMER_1.CH[3].CTRL1.R        /* Channel n Control 1 */
#define ETIMER_1_CH3_CTRL2   ETIMER_1.CH[3].CTRL2.R        /* Channel n Control 2 */
#define ETIMER_1_CH3_CTRL3   ETIMER_1.CH[3].CTRL3.R        /* Channel n Control 3 */
#define ETIMER_1_CH3_STS     ETIMER_1.CH[3].STS.R          /* Channel n Status */
#define ETIMER_1_CH3_INTDMA  ETIMER_1.CH[3].INTDMA.R       /* Channel n Interrupt and DMA Enable */
#define ETIMER_1_CH3_CMPLD1  ETIMER_1.CH[3].CMPLD1.R       /* Channel n Comparator Load 1 */
#define ETIMER_1_CH3_CMPLD2  ETIMER_1.CH[3].CMPLD2.R       /* Channel n Comparator Load 2 */
#define ETIMER_1_CH3_CCCTRL  ETIMER_1.CH[3].CCCTRL.R       /* Channel n Compare and Capture Control */
#define ETIMER_1_CH3_FILT    ETIMER_1.CH[3].FILT.R         /* Channel n Input Filter */
#define ETIMER_1_CH4_COMP1   ETIMER_1.CH[4].COMP1.R        /* Channel n Compare 1 */
#define ETIMER_1_CH4_COMP2   ETIMER_1.CH[4].COMP2.R        /* Channel n Compare 2 */
#define ETIMER_1_CH4_CAPT1   ETIMER_1.CH[4].CAPT1.R        /* Channel n Capture 1 */
#define ETIMER_1_CH4_CAPT2   ETIMER_1.CH[4].CAPT2.R        /* Channel n Capture 2 */
#define ETIMER_1_CH4_LOAD    ETIMER_1.CH[4].LOAD.R         /* Channel n Load */
#define ETIMER_1_CH4_HOLD    ETIMER_1.CH[4].HOLD.R         /* Channel n Hold */
#define ETIMER_1_CH4_CNTR    ETIMER_1.CH[4].CNTR.R         /* Channel n Counter */
#define ETIMER_1_CH4_CTRL1   ETIMER_1.CH[4].CTRL1.R        /* Channel n Control 1 */
#define ETIMER_1_CH4_CTRL2   ETIMER_1.CH[4].CTRL2.R        /* Channel n Control 2 */
#define ETIMER_1_CH4_CTRL3   ETIMER_1.CH[4].CTRL3.R        /* Channel n Control 3 */
#define ETIMER_1_CH4_STS     ETIMER_1.CH[4].STS.R          /* Channel n Status */
#define ETIMER_1_CH4_INTDMA  ETIMER_1.CH[4].INTDMA.R       /* Channel n Interrupt and DMA Enable */
#define ETIMER_1_CH4_CMPLD1  ETIMER_1.CH[4].CMPLD1.R       /* Channel n Comparator Load 1 */
#define ETIMER_1_CH4_CMPLD2  ETIMER_1.CH[4].CMPLD2.R       /* Channel n Comparator Load 2 */
#define ETIMER_1_CH4_CCCTRL  ETIMER_1.CH[4].CCCTRL.R       /* Channel n Compare and Capture Control */
#define ETIMER_1_CH4_FILT    ETIMER_1.CH[4].FILT.R         /* Channel n Input Filter */
#define ETIMER_1_CH5_COMP1   ETIMER_1.CH[5].COMP1.R        /* Channel n Compare 1 */
#define ETIMER_1_CH5_COMP2   ETIMER_1.CH[5].COMP2.R        /* Channel n Compare 2 */
#define ETIMER_1_CH5_CAPT1   ETIMER_1.CH[5].CAPT1.R        /* Channel n Capture 1 */
#define ETIMER_1_CH5_CAPT2   ETIMER_1.CH[5].CAPT2.R        /* Channel n Capture 2 */
#define ETIMER_1_CH5_LOAD    ETIMER_1.CH[5].LOAD.R         /* Channel n Load */
#define ETIMER_1_CH5_HOLD    ETIMER_1.CH[5].HOLD.R         /* Channel n Hold */
#define ETIMER_1_CH5_CNTR    ETIMER_1.CH[5].CNTR.R         /* Channel n Counter */
#define ETIMER_1_CH5_CTRL1   ETIMER_1.CH[5].CTRL1.R        /* Channel n Control 1 */
#define ETIMER_1_CH5_CTRL2   ETIMER_1.CH[5].CTRL2.R        /* Channel n Control 2 */
#define ETIMER_1_CH5_CTRL3   ETIMER_1.CH[5].CTRL3.R        /* Channel n Control 3 */
#define ETIMER_1_CH5_STS     ETIMER_1.CH[5].STS.R          /* Channel n Status */
#define ETIMER_1_CH5_INTDMA  ETIMER_1.CH[5].INTDMA.R       /* Channel n Interrupt and DMA Enable */
#define ETIMER_1_CH5_CMPLD1  ETIMER_1.CH[5].CMPLD1.R       /* Channel n Comparator Load 1 */
#define ETIMER_1_CH5_CMPLD2  ETIMER_1.CH[5].CMPLD2.R       /* Channel n Comparator Load 2 */
#define ETIMER_1_CH5_CCCTRL  ETIMER_1.CH[5].CCCTRL.R       /* Channel n Compare and Capture Control */
#define ETIMER_1_CH5_FILT    ETIMER_1.CH[5].FILT.R         /* Channel n Input Filter */
#define ETIMER_1_CH6_COMP1   ETIMER_1.CH[6].COMP1.R        /* Channel n Compare 1 */
#define ETIMER_1_CH6_COMP2   ETIMER_1.CH[6].COMP2.R        /* Channel n Compare 2 */
#define ETIMER_1_CH6_CAPT1   ETIMER_1.CH[6].CAPT1.R        /* Channel n Capture 1 */
#define ETIMER_1_CH6_CAPT2   ETIMER_1.CH[6].CAPT2.R        /* Channel n Capture 2 */
#define ETIMER_1_CH6_LOAD    ETIMER_1.CH[6].LOAD.R         /* Channel n Load */
#define ETIMER_1_CH6_HOLD    ETIMER_1.CH[6].HOLD.R         /* Channel n Hold */
#define ETIMER_1_CH6_CNTR    ETIMER_1.CH[6].CNTR.R         /* Channel n Counter */
#define ETIMER_1_CH6_CTRL1   ETIMER_1.CH[6].CTRL1.R        /* Channel n Control 1 */
#define ETIMER_1_CH6_CTRL2   ETIMER_1.CH[6].CTRL2.R        /* Channel n Control 2 */
#define ETIMER_1_CH6_CTRL3   ETIMER_1.CH[6].CTRL3.R        /* Channel n Control 3 */
#define ETIMER_1_CH6_STS     ETIMER_1.CH[6].STS.R          /* Channel n Status */
#define ETIMER_1_CH6_INTDMA  ETIMER_1.CH[6].INTDMA.R       /* Channel n Interrupt and DMA Enable */
#define ETIMER_1_CH6_CMPLD1  ETIMER_1.CH[6].CMPLD1.R       /* Channel n Comparator Load 1 */
#define ETIMER_1_CH6_CMPLD2  ETIMER_1.CH[6].CMPLD2.R       /* Channel n Comparator Load 2 */
#define ETIMER_1_CH6_CCCTRL  ETIMER_1.CH[6].CCCTRL.R       /* Channel n Compare and Capture Control */
#define ETIMER_1_CH6_FILT    ETIMER_1.CH[6].FILT.R         /* Channel n Input Filter */
#define ETIMER_1_CH7_COMP1   ETIMER_1.CH[7].COMP1.R        /* Channel n Compare 1 */
#define ETIMER_1_CH7_COMP2   ETIMER_1.CH[7].COMP2.R        /* Channel n Compare 2 */
#define ETIMER_1_CH7_CAPT1   ETIMER_1.CH[7].CAPT1.R        /* Channel n Capture 1 */
#define ETIMER_1_CH7_CAPT2   ETIMER_1.CH[7].CAPT2.R        /* Channel n Capture 2 */
#define ETIMER_1_CH7_LOAD    ETIMER_1.CH[7].LOAD.R         /* Channel n Load */
#define ETIMER_1_CH7_HOLD    ETIMER_1.CH[7].HOLD.R         /* Channel n Hold */
#define ETIMER_1_CH7_CNTR    ETIMER_1.CH[7].CNTR.R         /* Channel n Counter */
#define ETIMER_1_CH7_CTRL1   ETIMER_1.CH[7].CTRL1.R        /* Channel n Control 1 */
#define ETIMER_1_CH7_CTRL2   ETIMER_1.CH[7].CTRL2.R        /* Channel n Control 2 */
#define ETIMER_1_CH7_CTRL3   ETIMER_1.CH[7].CTRL3.R        /* Channel n Control 3 */
#define ETIMER_1_CH7_STS     ETIMER_1.CH[7].STS.R          /* Channel n Status */
#define ETIMER_1_CH7_INTDMA  ETIMER_1.CH[7].INTDMA.R       /* Channel n Interrupt and DMA Enable */
#define ETIMER_1_CH7_CMPLD1  ETIMER_1.CH[7].CMPLD1.R       /* Channel n Comparator Load 1 */
#define ETIMER_1_CH7_CMPLD2  ETIMER_1.CH[7].CMPLD2.R       /* Channel n Comparator Load 2 */
#define ETIMER_1_CH7_CCCTRL  ETIMER_1.CH[7].CCCTRL.R       /* Channel n Compare and Capture Control */
#define ETIMER_1_CH7_FILT    ETIMER_1.CH[7].FILT.R         /* Channel n Input Filter */
#define ETIMER_1_ENBL        ETIMER_1.ENBL.R               /* Channel Enable */
#define ETIMER_1_DREQ0       ETIMER_1.DREQ[0].R            /* DMA Request 0 Select */
#define ETIMER_1_DREQ1       ETIMER_1.DREQ[1].R            /* DMA Request 1 Select */

#define ETIMER_2_CH0_COMP1   ETIMER_2.CH[0].COMP1.R        /* Channel n Compare 1 */
#define ETIMER_2_CH0_COMP2   ETIMER_2.CH[0].COMP2.R        /* Channel n Compare 2 */
#define ETIMER_2_CH0_CAPT1   ETIMER_2.CH[0].CAPT1.R        /* Channel n Capture 1 */
#define ETIMER_2_CH0_CAPT2   ETIMER_2.CH[0].CAPT2.R        /* Channel n Capture 2 */
#define ETIMER_2_CH0_LOAD    ETIMER_2.CH[0].LOAD.R         /* Channel n Load */
#define ETIMER_2_CH0_HOLD    ETIMER_2.CH[0].HOLD.R         /* Channel n Hold */
#define ETIMER_2_CH0_CNTR    ETIMER_2.CH[0].CNTR.R         /* Channel n Counter */
#define ETIMER_2_CH0_CTRL1   ETIMER_2.CH[0].CTRL1.R        /* Channel n Control 1 */
#define ETIMER_2_CH0_CTRL2   ETIMER_2.CH[0].CTRL2.R        /* Channel n Control 2 */
#define ETIMER_2_CH0_CTRL3   ETIMER_2.CH[0].CTRL3.R        /* Channel n Control 3 */
#define ETIMER_2_CH0_STS     ETIMER_2.CH[0].STS.R          /* Channel n Status */
#define ETIMER_2_CH0_INTDMA  ETIMER_2.CH[0].INTDMA.R       /* Channel n Interrupt and DMA Enable */
#define ETIMER_2_CH0_CMPLD1  ETIMER_2.CH[0].CMPLD1.R       /* Channel n Comparator Load 1 */
#define ETIMER_2_CH0_CMPLD2  ETIMER_2.CH[0].CMPLD2.R       /* Channel n Comparator Load 2 */
#define ETIMER_2_CH0_CCCTRL  ETIMER_2.CH[0].CCCTRL.R       /* Channel n Compare and Capture Control */
#define ETIMER_2_CH0_FILT    ETIMER_2.CH[0].FILT.R         /* Channel n Input Filter */
#define ETIMER_2_CH1_COMP1   ETIMER_2.CH[1].COMP1.R        /* Channel n Compare 1 */
#define ETIMER_2_CH1_COMP2   ETIMER_2.CH[1].COMP2.R        /* Channel n Compare 2 */
#define ETIMER_2_CH1_CAPT1   ETIMER_2.CH[1].CAPT1.R        /* Channel n Capture 1 */
#define ETIMER_2_CH1_CAPT2   ETIMER_2.CH[1].CAPT2.R        /* Channel n Capture 2 */
#define ETIMER_2_CH1_LOAD    ETIMER_2.CH[1].LOAD.R         /* Channel n Load */
#define ETIMER_2_CH1_HOLD    ETIMER_2.CH[1].HOLD.R         /* Channel n Hold */
#define ETIMER_2_CH1_CNTR    ETIMER_2.CH[1].CNTR.R         /* Channel n Counter */
#define ETIMER_2_CH1_CTRL1   ETIMER_2.CH[1].CTRL1.R        /* Channel n Control 1 */
#define ETIMER_2_CH1_CTRL2   ETIMER_2.CH[1].CTRL2.R        /* Channel n Control 2 */
#define ETIMER_2_CH1_CTRL3   ETIMER_2.CH[1].CTRL3.R        /* Channel n Control 3 */
#define ETIMER_2_CH1_STS     ETIMER_2.CH[1].STS.R          /* Channel n Status */
#define ETIMER_2_CH1_INTDMA  ETIMER_2.CH[1].INTDMA.R       /* Channel n Interrupt and DMA Enable */
#define ETIMER_2_CH1_CMPLD1  ETIMER_2.CH[1].CMPLD1.R       /* Channel n Comparator Load 1 */
#define ETIMER_2_CH1_CMPLD2  ETIMER_2.CH[1].CMPLD2.R       /* Channel n Comparator Load 2 */
#define ETIMER_2_CH1_CCCTRL  ETIMER_2.CH[1].CCCTRL.R       /* Channel n Compare and Capture Control */
#define ETIMER_2_CH1_FILT    ETIMER_2.CH[1].FILT.R         /* Channel n Input Filter */
#define ETIMER_2_CH2_COMP1   ETIMER_2.CH[2].COMP1.R        /* Channel n Compare 1 */
#define ETIMER_2_CH2_COMP2   ETIMER_2.CH[2].COMP2.R        /* Channel n Compare 2 */
#define ETIMER_2_CH2_CAPT1   ETIMER_2.CH[2].CAPT1.R        /* Channel n Capture 1 */
#define ETIMER_2_CH2_CAPT2   ETIMER_2.CH[2].CAPT2.R        /* Channel n Capture 2 */
#define ETIMER_2_CH2_LOAD    ETIMER_2.CH[2].LOAD.R         /* Channel n Load */
#define ETIMER_2_CH2_HOLD    ETIMER_2.CH[2].HOLD.R         /* Channel n Hold */
#define ETIMER_2_CH2_CNTR    ETIMER_2.CH[2].CNTR.R         /* Channel n Counter */
#define ETIMER_2_CH2_CTRL1   ETIMER_2.CH[2].CTRL1.R        /* Channel n Control 1 */
#define ETIMER_2_CH2_CTRL2   ETIMER_2.CH[2].CTRL2.R        /* Channel n Control 2 */
#define ETIMER_2_CH2_CTRL3   ETIMER_2.CH[2].CTRL3.R        /* Channel n Control 3 */
#define ETIMER_2_CH2_STS     ETIMER_2.CH[2].STS.R          /* Channel n Status */
#define ETIMER_2_CH2_INTDMA  ETIMER_2.CH[2].INTDMA.R       /* Channel n Interrupt and DMA Enable */
#define ETIMER_2_CH2_CMPLD1  ETIMER_2.CH[2].CMPLD1.R       /* Channel n Comparator Load 1 */
#define ETIMER_2_CH2_CMPLD2  ETIMER_2.CH[2].CMPLD2.R       /* Channel n Comparator Load 2 */
#define ETIMER_2_CH2_CCCTRL  ETIMER_2.CH[2].CCCTRL.R       /* Channel n Compare and Capture Control */
#define ETIMER_2_CH2_FILT    ETIMER_2.CH[2].FILT.R         /* Channel n Input Filter */
#define ETIMER_2_CH3_COMP1   ETIMER_2.CH[3].COMP1.R        /* Channel n Compare 1 */
#define ETIMER_2_CH3_COMP2   ETIMER_2.CH[3].COMP2.R        /* Channel n Compare 2 */
#define ETIMER_2_CH3_CAPT1   ETIMER_2.CH[3].CAPT1.R        /* Channel n Capture 1 */
#define ETIMER_2_CH3_CAPT2   ETIMER_2.CH[3].CAPT2.R        /* Channel n Capture 2 */
#define ETIMER_2_CH3_LOAD    ETIMER_2.CH[3].LOAD.R         /* Channel n Load */
#define ETIMER_2_CH3_HOLD    ETIMER_2.CH[3].HOLD.R         /* Channel n Hold */
#define ETIMER_2_CH3_CNTR    ETIMER_2.CH[3].CNTR.R         /* Channel n Counter */
#define ETIMER_2_CH3_CTRL1   ETIMER_2.CH[3].CTRL1.R        /* Channel n Control 1 */
#define ETIMER_2_CH3_CTRL2   ETIMER_2.CH[3].CTRL2.R        /* Channel n Control 2 */
#define ETIMER_2_CH3_CTRL3   ETIMER_2.CH[3].CTRL3.R        /* Channel n Control 3 */
#define ETIMER_2_CH3_STS     ETIMER_2.CH[3].STS.R          /* Channel n Status */
#define ETIMER_2_CH3_INTDMA  ETIMER_2.CH[3].INTDMA.R       /* Channel n Interrupt and DMA Enable */
#define ETIMER_2_CH3_CMPLD1  ETIMER_2.CH[3].CMPLD1.R       /* Channel n Comparator Load 1 */
#define ETIMER_2_CH3_CMPLD2  ETIMER_2.CH[3].CMPLD2.R       /* Channel n Comparator Load 2 */
#define ETIMER_2_CH3_CCCTRL  ETIMER_2.CH[3].CCCTRL.R       /* Channel n Compare and Capture Control */
#define ETIMER_2_CH3_FILT    ETIMER_2.CH[3].FILT.R         /* Channel n Input Filter */
#define ETIMER_2_CH4_COMP1   ETIMER_2.CH[4].COMP1.R        /* Channel n Compare 1 */
#define ETIMER_2_CH4_COMP2   ETIMER_2.CH[4].COMP2.R        /* Channel n Compare 2 */
#define ETIMER_2_CH4_CAPT1   ETIMER_2.CH[4].CAPT1.R        /* Channel n Capture 1 */
#define ETIMER_2_CH4_CAPT2   ETIMER_2.CH[4].CAPT2.R        /* Channel n Capture 2 */
#define ETIMER_2_CH4_LOAD    ETIMER_2.CH[4].LOAD.R         /* Channel n Load */
#define ETIMER_2_CH4_HOLD    ETIMER_2.CH[4].HOLD.R         /* Channel n Hold */
#define ETIMER_2_CH4_CNTR    ETIMER_2.CH[4].CNTR.R         /* Channel n Counter */
#define ETIMER_2_CH4_CTRL1   ETIMER_2.CH[4].CTRL1.R        /* Channel n Control 1 */
#define ETIMER_2_CH4_CTRL2   ETIMER_2.CH[4].CTRL2.R        /* Channel n Control 2 */
#define ETIMER_2_CH4_CTRL3   ETIMER_2.CH[4].CTRL3.R        /* Channel n Control 3 */
#define ETIMER_2_CH4_STS     ETIMER_2.CH[4].STS.R          /* Channel n Status */
#define ETIMER_2_CH4_INTDMA  ETIMER_2.CH[4].INTDMA.R       /* Channel n Interrupt and DMA Enable */
#define ETIMER_2_CH4_CMPLD1  ETIMER_2.CH[4].CMPLD1.R       /* Channel n Comparator Load 1 */
#define ETIMER_2_CH4_CMPLD2  ETIMER_2.CH[4].CMPLD2.R       /* Channel n Comparator Load 2 */
#define ETIMER_2_CH4_CCCTRL  ETIMER_2.CH[4].CCCTRL.R       /* Channel n Compare and Capture Control */
#define ETIMER_2_CH4_FILT    ETIMER_2.CH[4].FILT.R         /* Channel n Input Filter */
#define ETIMER_2_CH5_COMP1   ETIMER_2.CH[5].COMP1.R        /* Channel n Compare 1 */
#define ETIMER_2_CH5_COMP2   ETIMER_2.CH[5].COMP2.R        /* Channel n Compare 2 */
#define ETIMER_2_CH5_CAPT1   ETIMER_2.CH[5].CAPT1.R        /* Channel n Capture 1 */
#define ETIMER_2_CH5_CAPT2   ETIMER_2.CH[5].CAPT2.R        /* Channel n Capture 2 */
#define ETIMER_2_CH5_LOAD    ETIMER_2.CH[5].LOAD.R         /* Channel n Load */
#define ETIMER_2_CH5_HOLD    ETIMER_2.CH[5].HOLD.R         /* Channel n Hold */
#define ETIMER_2_CH5_CNTR    ETIMER_2.CH[5].CNTR.R         /* Channel n Counter */
#define ETIMER_2_CH5_CTRL1   ETIMER_2.CH[5].CTRL1.R        /* Channel n Control 1 */
#define ETIMER_2_CH5_CTRL2   ETIMER_2.CH[5].CTRL2.R        /* Channel n Control 2 */
#define ETIMER_2_CH5_CTRL3   ETIMER_2.CH[5].CTRL3.R        /* Channel n Control 3 */
#define ETIMER_2_CH5_STS     ETIMER_2.CH[5].STS.R          /* Channel n Status */
#define ETIMER_2_CH5_INTDMA  ETIMER_2.CH[5].INTDMA.R       /* Channel n Interrupt and DMA Enable */
#define ETIMER_2_CH5_CMPLD1  ETIMER_2.CH[5].CMPLD1.R       /* Channel n Comparator Load 1 */
#define ETIMER_2_CH5_CMPLD2  ETIMER_2.CH[5].CMPLD2.R       /* Channel n Comparator Load 2 */
#define ETIMER_2_CH5_CCCTRL  ETIMER_2.CH[5].CCCTRL.R       /* Channel n Compare and Capture Control */
#define ETIMER_2_CH5_FILT    ETIMER_2.CH[5].FILT.R         /* Channel n Input Filter */
#define ETIMER_2_CH6_COMP1   ETIMER_2.CH[6].COMP1.R        /* Channel n Compare 1 */
#define ETIMER_2_CH6_COMP2   ETIMER_2.CH[6].COMP2.R        /* Channel n Compare 2 */
#define ETIMER_2_CH6_CAPT1   ETIMER_2.CH[6].CAPT1.R        /* Channel n Capture 1 */
#define ETIMER_2_CH6_CAPT2   ETIMER_2.CH[6].CAPT2.R        /* Channel n Capture 2 */
#define ETIMER_2_CH6_LOAD    ETIMER_2.CH[6].LOAD.R         /* Channel n Load */
#define ETIMER_2_CH6_HOLD    ETIMER_2.CH[6].HOLD.R         /* Channel n Hold */
#define ETIMER_2_CH6_CNTR    ETIMER_2.CH[6].CNTR.R         /* Channel n Counter */
#define ETIMER_2_CH6_CTRL1   ETIMER_2.CH[6].CTRL1.R        /* Channel n Control 1 */
#define ETIMER_2_CH6_CTRL2   ETIMER_2.CH[6].CTRL2.R        /* Channel n Control 2 */
#define ETIMER_2_CH6_CTRL3   ETIMER_2.CH[6].CTRL3.R        /* Channel n Control 3 */
#define ETIMER_2_CH6_STS     ETIMER_2.CH[6].STS.R          /* Channel n Status */
#define ETIMER_2_CH6_INTDMA  ETIMER_2.CH[6].INTDMA.R       /* Channel n Interrupt and DMA Enable */
#define ETIMER_2_CH6_CMPLD1  ETIMER_2.CH[6].CMPLD1.R       /* Channel n Comparator Load 1 */
#define ETIMER_2_CH6_CMPLD2  ETIMER_2.CH[6].CMPLD2.R       /* Channel n Comparator Load 2 */
#define ETIMER_2_CH6_CCCTRL  ETIMER_2.CH[6].CCCTRL.R       /* Channel n Compare and Capture Control */
#define ETIMER_2_CH6_FILT    ETIMER_2.CH[6].FILT.R         /* Channel n Input Filter */
#define ETIMER_2_CH7_COMP1   ETIMER_2.CH[7].COMP1.R        /* Channel n Compare 1 */
#define ETIMER_2_CH7_COMP2   ETIMER_2.CH[7].COMP2.R        /* Channel n Compare 2 */
#define ETIMER_2_CH7_CAPT1   ETIMER_2.CH[7].CAPT1.R        /* Channel n Capture 1 */
#define ETIMER_2_CH7_CAPT2   ETIMER_2.CH[7].CAPT2.R        /* Channel n Capture 2 */
#define ETIMER_2_CH7_LOAD    ETIMER_2.CH[7].LOAD.R         /* Channel n Load */
#define ETIMER_2_CH7_HOLD    ETIMER_2.CH[7].HOLD.R         /* Channel n Hold */
#define ETIMER_2_CH7_CNTR    ETIMER_2.CH[7].CNTR.R         /* Channel n Counter */
#define ETIMER_2_CH7_CTRL1   ETIMER_2.CH[7].CTRL1.R        /* Channel n Control 1 */
#define ETIMER_2_CH7_CTRL2   ETIMER_2.CH[7].CTRL2.R        /* Channel n Control 2 */
#define ETIMER_2_CH7_CTRL3   ETIMER_2.CH[7].CTRL3.R        /* Channel n Control 3 */
#define ETIMER_2_CH7_STS     ETIMER_2.CH[7].STS.R          /* Channel n Status */
#define ETIMER_2_CH7_INTDMA  ETIMER_2.CH[7].INTDMA.R       /* Channel n Interrupt and DMA Enable */
#define ETIMER_2_CH7_CMPLD1  ETIMER_2.CH[7].CMPLD1.R       /* Channel n Comparator Load 1 */
#define ETIMER_2_CH7_CMPLD2  ETIMER_2.CH[7].CMPLD2.R       /* Channel n Comparator Load 2 */
#define ETIMER_2_CH7_CCCTRL  ETIMER_2.CH[7].CCCTRL.R       /* Channel n Compare and Capture Control */
#define ETIMER_2_CH7_FILT    ETIMER_2.CH[7].FILT.R         /* Channel n Input Filter */
#define ETIMER_2_ENBL        ETIMER_2.ENBL.R               /* Channel Enable */
#define ETIMER_2_DREQ0       ETIMER_2.DREQ[0].R            /* DMA Request 0 Select */
#define ETIMER_2_DREQ1       ETIMER_2.DREQ[1].R            /* DMA Request 1 Select */

/* FBXC */
#define FBXC_STR             FBXC.STR.R                    /* Status Register */
#define FBXC_CTL             FBXC.CTL.R                    /* Control Register */

/* FCCU */
#define FCCU_CTRL            FCCU.CTRL.R                   /* Control */
#define FCCU_CTRLK           FCCU.CTRLK.R                  /* Control Key */
#define FCCU_CFG             FCCU.CFG.R                    /* Configuration */
#define FCCU_NCF_CFG0        FCCU.NCF_CFG[0].R             /* Non-critical Fault Configuration */
#define FCCU_NCF_CFG1        FCCU.NCF_CFG[1].R             /* Non-critical Fault Configuration */
#define FCCU_NCF_CFG2        FCCU.NCF_CFG[2].R             /* Non-critical Fault Configuration */
#define FCCU_NCF_CFG3        FCCU.NCF_CFG[3].R             /* Non-critical Fault Configuration */
#define FCCU_NCFS_CFG0       FCCU.NCFS_CFG[0].R            /* Non-critical Fault-State Configuration */
#define FCCU_NCFS_CFG1       FCCU.NCFS_CFG[1].R            /* Non-critical Fault-State Configuration */
#define FCCU_NCFS_CFG2       FCCU.NCFS_CFG[2].R            /* Non-critical Fault-State Configuration */
#define FCCU_NCFS_CFG3       FCCU.NCFS_CFG[3].R            /* Non-critical Fault-State Configuration */
#define FCCU_NCFS_CFG4       FCCU.NCFS_CFG[4].R            /* Non-critical Fault-State Configuration */
#define FCCU_NCFS_CFG5       FCCU.NCFS_CFG[5].R            /* Non-critical Fault-State Configuration */
#define FCCU_NCFS_CFG6       FCCU.NCFS_CFG[6].R            /* Non-critical Fault-State Configuration */
#define FCCU_NCFS_CFG7       FCCU.NCFS_CFG[7].R            /* Non-critical Fault-State Configuration */
#define FCCU_NCF_S0          FCCU.NCF_S[0].R               /* Non-critical Fault Status */
#define FCCU_NCF_S1          FCCU.NCF_S[1].R               /* Non-critical Fault Status */
#define FCCU_NCF_S2          FCCU.NCF_S[2].R               /* Non-critical Fault Status */
#define FCCU_NCF_S3          FCCU.NCF_S[3].R               /* Non-critical Fault Status */
#define FCCU_NCFK            FCCU.NCFK.R                   /* Non-critical Fault Key */
#define FCCU_NCF_E0          FCCU.NCF_E[0].R               /* Non-critical Fault Enable */
#define FCCU_NCF_E1          FCCU.NCF_E[1].R               /* Non-critical Fault Enable */
#define FCCU_NCF_E2          FCCU.NCF_E[2].R               /* Non-critical Fault Enable */
#define FCCU_NCF_E3          FCCU.NCF_E[3].R               /* Non-critical Fault Enable */
#define FCCU_NCF_TOE0        FCCU.NCF_TOE[0].R             /* Non-critical-Fault Alarm-State Timeout Enable */
#define FCCU_NCF_TOE1        FCCU.NCF_TOE[1].R             /* Non-critical-Fault Alarm-State Timeout Enable */
#define FCCU_NCF_TOE2        FCCU.NCF_TOE[2].R             /* Non-critical-Fault Alarm-State Timeout Enable */
#define FCCU_NCF_TOE3        FCCU.NCF_TOE[3].R             /* Non-critical-Fault Alarm-State Timeout Enable */
#define FCCU_NCF_TO          FCCU.NCF_TO.R                 /* Non-critical-Fault Alarm-State Timeout Interval */
#define FCCU_CFG_TO          FCCU.CFG_TO.R                 /* Configuration-State Timeout Interval */
#define FCCU_EINOUT          FCCU.EINOUT.R                 /* IO Control */
#define FCCU_STAT            FCCU.STAT.R                   /* Status */
#define FCCU_N2AF_STATUS     FCCU.N2AF_STATUS.R            /* Normal-to-Alarm Freeze Status */
#define FCCU_A2FF_STATUS     FCCU.A2FF_STATUS.R            /* Alarm-to-Fault Freeze Status */
#define FCCU_N2FF_STATUS     FCCU.N2FF_STATUS.R            /* Normal-to-Fault Freeze Status */
#define FCCU_F2AF_STATUS     FCCU.F2AF_STATUS.R            /* Fault-to-Alarm Freeze Status */
#define FCCU_NCFF            FCCU.NCFF.R                   /* Non-critical Fault Fake */
#define FCCU_IRQ_STAT        FCCU.IRQ_STAT.R               /* IRQ Status */
#define FCCU_IRQ_EN          FCCU.IRQ_EN.R                 /* IRQ Enable */
#define FCCU_MCS             FCCU.MCS.R                    /* Mode Controller Status */
#define FCCU_TRANS_LOCK      FCCU.TRANS_LOCK.R             /* Transient Configuration Lock */
#define FCCU_PERMNT_LOCK     FCCU.PERMNT_LOCK.R            /* Permanent Configuration Lock */
#define FCCU_DELTA_T         FCCU.DELTA_T.R                /* Delta T */
#define FCCU_IRQ_ALARM_EN0   FCCU.IRQ_ALARM_EN[0].R        /* Non-critical Alarm-State Interrupt-Request Enable */
#define FCCU_IRQ_ALARM_EN1   FCCU.IRQ_ALARM_EN[1].R        /* Non-critical Alarm-State Interrupt-Request Enable */
#define FCCU_IRQ_ALARM_EN2   FCCU.IRQ_ALARM_EN[2].R        /* Non-critical Alarm-State Interrupt-Request Enable */
#define FCCU_IRQ_ALARM_EN3   FCCU.IRQ_ALARM_EN[3].R        /* Non-critical Alarm-State Interrupt-Request Enable */
#define FCCU_NMI_EN0         FCCU.NMI_EN[0].R              /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable */
#define FCCU_NMI_EN1         FCCU.NMI_EN[1].R              /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable */
#define FCCU_NMI_EN2         FCCU.NMI_EN[2].R              /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable */
#define FCCU_NMI_EN3         FCCU.NMI_EN[3].R              /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable */
#define FCCU_EOUT_SIG_EN0    FCCU.EOUT_SIG_EN[0].R         /* Non-critical Fault-State EOUT Signaling Enable */
#define FCCU_EOUT_SIG_EN1    FCCU.EOUT_SIG_EN[1].R         /* Non-critical Fault-State EOUT Signaling Enable */
#define FCCU_EOUT_SIG_EN2    FCCU.EOUT_SIG_EN[2].R         /* Non-critical Fault-State EOUT Signaling Enable */
#define FCCU_EOUT_SIG_EN3    FCCU.EOUT_SIG_EN[3].R         /* Non-critical Fault-State EOUT Signaling Enable */
#define FCCU_TMR_ALARM       FCCU.TMR_ALARM.R              /* Alarm-State Timer */
#define FCCU_TMR_CFG         FCCU.TMR_CFG.R                /* Configuration-State Timer */
#define FCCU_TMR_ETMR        FCCU.TMR_ETMR.R               /* Fault-Output Timer */

/* FLEXPWM */
#define FLEXPWM_0_SUB0_CNT   FLEXPWM_0.SUB[0].CNT.R        /* Submodule n Counter */
#define FLEXPWM_0_SUB0_INIT  FLEXPWM_0.SUB[0].INIT.R       /* Submodule n Initial Count */
#define FLEXPWM_0_SUB0_CTRL2 FLEXPWM_0.SUB[0].CTRL2.R      /* Submodule n Control 2 */
#define FLEXPWM_0_SUB0_CTRL1 FLEXPWM_0.SUB[0].CTRL1.R      /* Submodule n Control 1 */
#define FLEXPWM_0_SUB0_VAL0  FLEXPWM_0.SUB[0].VAL0.R       /* Submodule n Value 0 */
#define FLEXPWM_0_SUB0_VAL1  FLEXPWM_0.SUB[0].VAL1.R       /* Submodule n Value 1 */
#define FLEXPWM_0_SUB0_VAL2  FLEXPWM_0.SUB[0].VAL2.R       /* Submodule n Value 2 */
#define FLEXPWM_0_SUB0_VAL3  FLEXPWM_0.SUB[0].VAL3.R       /* Submodule n Value 3 */
#define FLEXPWM_0_SUB0_VAL4  FLEXPWM_0.SUB[0].VAL4.R       /* Submodule n Value 4 */
#define FLEXPWM_0_SUB0_VAL5  FLEXPWM_0.SUB[0].VAL5.R       /* Submodule n Value 5 */
#define FLEXPWM_0_SUB0_OCTRL FLEXPWM_0.SUB[0].OCTRL.R      /* Submodule n Output Control */
#define FLEXPWM_0_SUB0_STS   FLEXPWM_0.SUB[0].STS.R        /* Submodule n Status */
#define FLEXPWM_0_SUB0_INTEN FLEXPWM_0.SUB[0].INTEN.R      /* Submodule n Interrupt Enable */
#define FLEXPWM_0_SUB0_DMAEN FLEXPWM_0.SUB[0].DMAEN.R      /* Submodule n DMA Enable */
#define FLEXPWM_0_SUB0_TCTRL FLEXPWM_0.SUB[0].TCTRL.R      /* Submodule n Output Trigger Control */
#define FLEXPWM_0_SUB0_DISMAP FLEXPWM_0.SUB[0].DISMAP.R    /* Submodule n Fault Disable Mapping */
#define FLEXPWM_0_SUB0_DTCNT0 FLEXPWM_0.SUB[0].DTCNT0.R    /* Submodule n Dead Time Count 0 */
#define FLEXPWM_0_SUB0_DTCNT1 FLEXPWM_0.SUB[0].DTCNT1.R    /* Submodule n Dead Time Count 1 */
#define FLEXPWM_0_SUB0_CAPTCTRLX FLEXPWM_0.SUB[0].CAPTCTRLX.R /* Submodule n Capture Control X */
#define FLEXPWM_0_SUB0_CAPTCMPX FLEXPWM_0.SUB[0].CAPTCMPX.R /* Submodule n Capture Compare X */
#define FLEXPWM_0_SUB0_CVAL0 FLEXPWM_0.SUB[0].CVAL0.R      /* Submodule n Capture Value 0 */
#define FLEXPWM_0_SUB0_CVAL0CYC FLEXPWM_0.SUB[0].CVAL0CYC.R /* Submodule n Capture Value 0 Cycle */
#define FLEXPWM_0_SUB0_CVAL1 FLEXPWM_0.SUB[0].CVAL1.R      /* Submodule n Capture Value 1 */
#define FLEXPWM_0_SUB0_CVAL1CYC FLEXPWM_0.SUB[0].CVAL1CYC.R /* Submodule n Capture Value 1 Cycle */
#define FLEXPWM_0_SUB1_CNT   FLEXPWM_0.SUB[1].CNT.R        /* Submodule n Counter */
#define FLEXPWM_0_SUB1_INIT  FLEXPWM_0.SUB[1].INIT.R       /* Submodule n Initial Count */
#define FLEXPWM_0_SUB1_CTRL2 FLEXPWM_0.SUB[1].CTRL2.R      /* Submodule n Control 2 */
#define FLEXPWM_0_SUB1_CTRL1 FLEXPWM_0.SUB[1].CTRL1.R      /* Submodule n Control 1 */
#define FLEXPWM_0_SUB1_VAL0  FLEXPWM_0.SUB[1].VAL0.R       /* Submodule n Value 0 */
#define FLEXPWM_0_SUB1_VAL1  FLEXPWM_0.SUB[1].VAL1.R       /* Submodule n Value 1 */
#define FLEXPWM_0_SUB1_VAL2  FLEXPWM_0.SUB[1].VAL2.R       /* Submodule n Value 2 */
#define FLEXPWM_0_SUB1_VAL3  FLEXPWM_0.SUB[1].VAL3.R       /* Submodule n Value 3 */
#define FLEXPWM_0_SUB1_VAL4  FLEXPWM_0.SUB[1].VAL4.R       /* Submodule n Value 4 */
#define FLEXPWM_0_SUB1_VAL5  FLEXPWM_0.SUB[1].VAL5.R       /* Submodule n Value 5 */
#define FLEXPWM_0_SUB1_OCTRL FLEXPWM_0.SUB[1].OCTRL.R      /* Submodule n Output Control */
#define FLEXPWM_0_SUB1_STS   FLEXPWM_0.SUB[1].STS.R        /* Submodule n Status */
#define FLEXPWM_0_SUB1_INTEN FLEXPWM_0.SUB[1].INTEN.R      /* Submodule n Interrupt Enable */
#define FLEXPWM_0_SUB1_DMAEN FLEXPWM_0.SUB[1].DMAEN.R      /* Submodule n DMA Enable */
#define FLEXPWM_0_SUB1_TCTRL FLEXPWM_0.SUB[1].TCTRL.R      /* Submodule n Output Trigger Control */
#define FLEXPWM_0_SUB1_DISMAP FLEXPWM_0.SUB[1].DISMAP.R    /* Submodule n Fault Disable Mapping */
#define FLEXPWM_0_SUB1_DTCNT0 FLEXPWM_0.SUB[1].DTCNT0.R    /* Submodule n Dead Time Count 0 */
#define FLEXPWM_0_SUB1_DTCNT1 FLEXPWM_0.SUB[1].DTCNT1.R    /* Submodule n Dead Time Count 1 */
#define FLEXPWM_0_SUB1_CAPTCTRLX FLEXPWM_0.SUB[1].CAPTCTRLX.R /* Submodule n Capture Control X */
#define FLEXPWM_0_SUB1_CAPTCMPX FLEXPWM_0.SUB[1].CAPTCMPX.R /* Submodule n Capture Compare X */
#define FLEXPWM_0_SUB1_CVAL0 FLEXPWM_0.SUB[1].CVAL0.R      /* Submodule n Capture Value 0 */
#define FLEXPWM_0_SUB1_CVAL0CYC FLEXPWM_0.SUB[1].CVAL0CYC.R /* Submodule n Capture Value 0 Cycle */
#define FLEXPWM_0_SUB1_CVAL1 FLEXPWM_0.SUB[1].CVAL1.R      /* Submodule n Capture Value 1 */
#define FLEXPWM_0_SUB1_CVAL1CYC FLEXPWM_0.SUB[1].CVAL1CYC.R /* Submodule n Capture Value 1 Cycle */
#define FLEXPWM_0_SUB2_CNT   FLEXPWM_0.SUB[2].CNT.R        /* Submodule n Counter */
#define FLEXPWM_0_SUB2_INIT  FLEXPWM_0.SUB[2].INIT.R       /* Submodule n Initial Count */
#define FLEXPWM_0_SUB2_CTRL2 FLEXPWM_0.SUB[2].CTRL2.R      /* Submodule n Control 2 */
#define FLEXPWM_0_SUB2_CTRL1 FLEXPWM_0.SUB[2].CTRL1.R      /* Submodule n Control 1 */
#define FLEXPWM_0_SUB2_VAL0  FLEXPWM_0.SUB[2].VAL0.R       /* Submodule n Value 0 */
#define FLEXPWM_0_SUB2_VAL1  FLEXPWM_0.SUB[2].VAL1.R       /* Submodule n Value 1 */
#define FLEXPWM_0_SUB2_VAL2  FLEXPWM_0.SUB[2].VAL2.R       /* Submodule n Value 2 */
#define FLEXPWM_0_SUB2_VAL3  FLEXPWM_0.SUB[2].VAL3.R       /* Submodule n Value 3 */
#define FLEXPWM_0_SUB2_VAL4  FLEXPWM_0.SUB[2].VAL4.R       /* Submodule n Value 4 */
#define FLEXPWM_0_SUB2_VAL5  FLEXPWM_0.SUB[2].VAL5.R       /* Submodule n Value 5 */
#define FLEXPWM_0_SUB2_OCTRL FLEXPWM_0.SUB[2].OCTRL.R      /* Submodule n Output Control */
#define FLEXPWM_0_SUB2_STS   FLEXPWM_0.SUB[2].STS.R        /* Submodule n Status */
#define FLEXPWM_0_SUB2_INTEN FLEXPWM_0.SUB[2].INTEN.R      /* Submodule n Interrupt Enable */
#define FLEXPWM_0_SUB2_DMAEN FLEXPWM_0.SUB[2].DMAEN.R      /* Submodule n DMA Enable */
#define FLEXPWM_0_SUB2_TCTRL FLEXPWM_0.SUB[2].TCTRL.R      /* Submodule n Output Trigger Control */
#define FLEXPWM_0_SUB2_DISMAP FLEXPWM_0.SUB[2].DISMAP.R    /* Submodule n Fault Disable Mapping */
#define FLEXPWM_0_SUB2_DTCNT0 FLEXPWM_0.SUB[2].DTCNT0.R    /* Submodule n Dead Time Count 0 */
#define FLEXPWM_0_SUB2_DTCNT1 FLEXPWM_0.SUB[2].DTCNT1.R    /* Submodule n Dead Time Count 1 */
#define FLEXPWM_0_SUB2_CAPTCTRLX FLEXPWM_0.SUB[2].CAPTCTRLX.R /* Submodule n Capture Control X */
#define FLEXPWM_0_SUB2_CAPTCMPX FLEXPWM_0.SUB[2].CAPTCMPX.R /* Submodule n Capture Compare X */
#define FLEXPWM_0_SUB2_CVAL0 FLEXPWM_0.SUB[2].CVAL0.R      /* Submodule n Capture Value 0 */
#define FLEXPWM_0_SUB2_CVAL0CYC FLEXPWM_0.SUB[2].CVAL0CYC.R /* Submodule n Capture Value 0 Cycle */
#define FLEXPWM_0_SUB2_CVAL1 FLEXPWM_0.SUB[2].CVAL1.R      /* Submodule n Capture Value 1 */
#define FLEXPWM_0_SUB2_CVAL1CYC FLEXPWM_0.SUB[2].CVAL1CYC.R /* Submodule n Capture Value 1 Cycle */
#define FLEXPWM_0_SUB3_CNT   FLEXPWM_0.SUB[3].CNT.R        /* Submodule n Counter */
#define FLEXPWM_0_SUB3_INIT  FLEXPWM_0.SUB[3].INIT.R       /* Submodule n Initial Count */
#define FLEXPWM_0_SUB3_CTRL2 FLEXPWM_0.SUB[3].CTRL2.R      /* Submodule n Control 2 */
#define FLEXPWM_0_SUB3_CTRL1 FLEXPWM_0.SUB[3].CTRL1.R      /* Submodule n Control 1 */
#define FLEXPWM_0_SUB3_VAL0  FLEXPWM_0.SUB[3].VAL0.R       /* Submodule n Value 0 */
#define FLEXPWM_0_SUB3_VAL1  FLEXPWM_0.SUB[3].VAL1.R       /* Submodule n Value 1 */
#define FLEXPWM_0_SUB3_VAL2  FLEXPWM_0.SUB[3].VAL2.R       /* Submodule n Value 2 */
#define FLEXPWM_0_SUB3_VAL3  FLEXPWM_0.SUB[3].VAL3.R       /* Submodule n Value 3 */
#define FLEXPWM_0_SUB3_VAL4  FLEXPWM_0.SUB[3].VAL4.R       /* Submodule n Value 4 */
#define FLEXPWM_0_SUB3_VAL5  FLEXPWM_0.SUB[3].VAL5.R       /* Submodule n Value 5 */
#define FLEXPWM_0_SUB3_OCTRL FLEXPWM_0.SUB[3].OCTRL.R      /* Submodule n Output Control */
#define FLEXPWM_0_SUB3_STS   FLEXPWM_0.SUB[3].STS.R        /* Submodule n Status */
#define FLEXPWM_0_SUB3_INTEN FLEXPWM_0.SUB[3].INTEN.R      /* Submodule n Interrupt Enable */
#define FLEXPWM_0_SUB3_DMAEN FLEXPWM_0.SUB[3].DMAEN.R      /* Submodule n DMA Enable */
#define FLEXPWM_0_SUB3_TCTRL FLEXPWM_0.SUB[3].TCTRL.R      /* Submodule n Output Trigger Control */
#define FLEXPWM_0_SUB3_DISMAP FLEXPWM_0.SUB[3].DISMAP.R    /* Submodule n Fault Disable Mapping */
#define FLEXPWM_0_SUB3_DTCNT0 FLEXPWM_0.SUB[3].DTCNT0.R    /* Submodule n Dead Time Count 0 */
#define FLEXPWM_0_SUB3_DTCNT1 FLEXPWM_0.SUB[3].DTCNT1.R    /* Submodule n Dead Time Count 1 */
#define FLEXPWM_0_SUB3_CAPTCTRLX FLEXPWM_0.SUB[3].CAPTCTRLX.R /* Submodule n Capture Control X */
#define FLEXPWM_0_SUB3_CAPTCMPX FLEXPWM_0.SUB[3].CAPTCMPX.R /* Submodule n Capture Compare X */
#define FLEXPWM_0_SUB3_CVAL0 FLEXPWM_0.SUB[3].CVAL0.R      /* Submodule n Capture Value 0 */
#define FLEXPWM_0_SUB3_CVAL0CYC FLEXPWM_0.SUB[3].CVAL0CYC.R /* Submodule n Capture Value 0 Cycle */
#define FLEXPWM_0_SUB3_CVAL1 FLEXPWM_0.SUB[3].CVAL1.R      /* Submodule n Capture Value 1 */
#define FLEXPWM_0_SUB3_CVAL1CYC FLEXPWM_0.SUB[3].CVAL1CYC.R /* Submodule n Capture Value 1 Cycle */
#define FLEXPWM_0_OUTEN      FLEXPWM_0.OUTEN.R             /* Output Enable */
#define FLEXPWM_0_MASK       FLEXPWM_0.MASK.R              /* Mask */
#define FLEXPWM_0_SWCOUT     FLEXPWM_0.SWCOUT.R            /* Software Controlled Output */
#define FLEXPWM_0_DTSRCSEL   FLEXPWM_0.DTSRCSEL.R          /* Dead Time Source Select */
#define FLEXPWM_0_MCTRL      FLEXPWM_0.MCTRL.R             /* Master Control */
#define FLEXPWM_0_FCTRL      FLEXPWM_0.FCTRL.R             /* Fault Control */
#define FLEXPWM_0_FSTS       FLEXPWM_0.FSTS.R              /* Fault Status */
#define FLEXPWM_0_FFILT      FLEXPWM_0.FFILT.R             /* Fault Filter */
#define FLEXPWM_0_FCTRL2     FLEXPWM_0.FCTRL2.R            /* Fault Control 2 */

/* FR */
#define FR_MVR               FR.MVR.R                      /* Module Version */
#define FR_MCR               FR.MCR.R                      /* Module Configuration */
#define FR_SYMBADHR          FR.SYMBADHR.R                 /* System Memory Base Address High */
#define FR_SYMBADLR          FR.SYMBADLR.R                 /* System Memory Base Address Low */
#define FR_STBSCR            FR.STBSCR.R                   /* Strobe Signal Control */
#define FR_MBDSR             FR.MBDSR.R                    /* MB Data Size */
#define FR_MBSSUTR           FR.MBSSUTR.R                  /* MB Segment Size and Utilization */
#define FR_PEDRAR            FR.PEDRAR.R                   /* PE DRAM Access */
#define FR_PEDRDR            FR.PEDRDR.R                   /* PE DRAM Data */
#define FR_POCR              FR.POCR.R                     /* Protocol Operation Control Register */
#define FR_GIFER             FR.GIFER.R                    /* Global Interrupt Flag And Enable */
#define FR_PIFR0             FR.PIFR0.R                    /* Protocol Interrupt Flag 0 */
#define FR_PIFR1             FR.PIFR1.R                    /* Protocol Interrupt Flag 1 */
#define FR_PIER0             FR.PIER0.R                    /* Protocol Interrupt Enable 0 */
#define FR_PIER1             FR.PIER1.R                    /* Protocol Interrupt Enable 1 */
#define FR_CHIERFR           FR.CHIERFR.R                  /* CHI Error Flag */
#define FR_MBIVEC            FR.MBIVEC.R                   /* Message Buffer Interrupt Vector */
#define FR_CASERCR           FR.CASERCR.R                  /* Channel A Status Error Counter Register */
#define FR_CBSERCR           FR.CBSERCR.R                  /* Channel B Status Error Counter */
#define FR_PSR0              FR.PSR0.R                     /* Protocol Status 0 */
#define FR_PSR1              FR.PSR1.R                     /* Protocol Status 1 */
#define FR_PSR2              FR.PSR2.R                     /* Protocol Status Register 2 */
#define FR_PSR3              FR.PSR3.R                     /* Protocol Status 3 */
#define FR_MTCTR             FR.MTCTR.R                    /* MT Counter */
#define FR_CYCTR             FR.CYCTR.R                    /* Cycle Counter */
#define FR_SLTCTAR           FR.SLTCTAR.R                  /* Slot Counter Channel A */
#define FR_SLTCTBR           FR.SLTCTBR.R                  /* Slot Counter Channel B */
#define FR_RTCORVR           FR.RTCORVR.R                  /* Rate Correction Value */
#define FR_OFCORVR           FR.OFCORVR.R                  /* Offset Correction Value */
#define FR_CIFR              FR.CIFR.R                     /* Combined Interrupt Flag */
#define FR_SYMATOR           FR.SYMATOR.R                  /* System Memory Access Timeout */
#define FR_SFCNTR            FR.SFCNTR.R                   /* Sync Frame Counter */
#define FR_SFTOR             FR.SFTOR.R                    /* Sync Frame Table Offset */
#define FR_SFTCCSR           FR.SFTCCSR.R                  /* Sync Frame Table Configuration Control Status */
#define FR_SFIDRFR           FR.SFIDRFR.R                  /* Sync Frame ID Rejection Filter */
#define FR_SFIDAFVR          FR.SFIDAFVR.R                 /* Sync Frame ID Acceptance Filter Value */
#define FR_SFIDAFMR          FR.SFIDAFMR.R                 /* Sync Frame ID Acceptance Filter Mask */
#define FR_NMVR0             FR.NMVR[0].R                  /* NMV 0 */
#define FR_NMVR1             FR.NMVR[1].R                  /* NMV 1 */
#define FR_NMVR2             FR.NMVR[2].R                  /* NMV 2 */
#define FR_NMVR3             FR.NMVR[3].R                  /* NMV 3 */
#define FR_NMVR4             FR.NMVR[4].R                  /* NMV 4 */
#define FR_NMVR5             FR.NMVR[5].R                  /* NMV 5 */
#define FR_NMVLR             FR.NMVLR.R                    /* Network Management Vector Length Register */
#define FR_TICCR             FR.TICCR.R                    /* Timer Configuration And Control */
#define FR_TI1CYSR           FR.TI1CYSR.R                  /* Timer 1 Cycle Set Register */
#define FR_TI1MTOR           FR.TI1MTOR.R                  /* Timer 1 MT Offset */
#define FR_TI2CR0_ABS        FR.TI2CR0.ABS.R               /* Timer 2 Configuration 0 (Absolute Timer Configuration) */
#define FR_TI2CR0_REL        FR.TI2CR0.REL.R               /* Timer 2 Configuration 0 (Relative Timer Configuration) */
#define FR_TI2CR1_ABS        FR.TI2CR1.ABS.R               /* Timer 2 Configuration 1 (Absolute Timer Configuration) */
#define FR_TI2CR1_REL        FR.TI2CR1.REL.R               /* Timer 2 Configuration 1 (Relative Timer Configuration) */
#define FR_SSSR              FR.SSSR.R                     /* Slot Status Selection */
#define FR_SSCCR             FR.SSCCR.R                    /* Slot Status Counter Condition */
#define FR_SSR0              FR.SSR[0].R                   /* Slot Status */
#define FR_SSR1              FR.SSR[1].R                   /* Slot Status */
#define FR_SSR2              FR.SSR[2].R                   /* Slot Status */
#define FR_SSR3              FR.SSR[3].R                   /* Slot Status */
#define FR_SSR4              FR.SSR[4].R                   /* Slot Status */
#define FR_SSR5              FR.SSR[5].R                   /* Slot Status */
#define FR_SSR6              FR.SSR[6].R                   /* Slot Status */
#define FR_SSR7              FR.SSR[7].R                   /* Slot Status */
#define FR_SSCR0             FR.SSCR[0].R                  /* Slot Status Counter */
#define FR_SSCR1             FR.SSCR[1].R                  /* Slot Status Counter */
#define FR_SSCR2             FR.SSCR[2].R                  /* Slot Status Counter */
#define FR_SSCR3             FR.SSCR[3].R                  /* Slot Status Counter */
#define FR_MTSACFR           FR.MTSACFR.R                  /* MTS A Configuration */
#define FR_MTSBCFR           FR.MTSBCFR.R                  /* MTS B Configuration */
#define FR_RSBIR             FR.RSBIR.R                    /* Receive Shadow Buffer Index */
#define FR_RFWMSR            FR.RFWMSR.R                   /* Receive FIFO Watermark And Selection */
#define FR_RFSIR             FR.RFSIR.R                    /* Receive FIFO Start Index */
#define FR_RFDSR             FR.RFDSR.R                    /* Receive FIFO Depth And Size */
#define FR_RFARIR            FR.RFARIR.R                   /* Receive FIFO A Read Index */
#define FR_RFBRIR            FR.RFBRIR.R                   /* Receive FIFO B Read Index */
#define FR_RFMIDAFVR         FR.RFMIDAFVR.R                /* Receive FIFO Message ID Acceptance Filter Value */
#define FR_RFMIDAFMR         FR.RFMIDAFMR.R                /* Receive FIFO Message ID Acceptance Filter Mask */
#define FR_RFFIDRFVR         FR.RFFIDRFVR.R                /* Receive FIFO Frame ID Rejection Filter Value */
#define FR_RFFIDRFMR         FR.RFFIDRFMR.R                /* Receive FIFO Frame ID Rejection Filter Mask */
#define FR_RFRFCFR           FR.RFRFCFR.R                  /* Receive FIFO Range Filter Configuration */
#define FR_RFRFCTR           FR.RFRFCTR.R                  /* Receive FIFO Range Filter Control */
#define FR_LDTXSLAR          FR.LDTXSLAR.R                 /* Last Dynamic Transmit Slot Channel A */
#define FR_LDTXSLBR          FR.LDTXSLBR.R                 /* Last Dynamic Transmit Slot Channel B */
#define FR_PCR0              FR.PCR0.R                     /* Protocol Configuration 0 */
#define FR_PCR1              FR.PCR1.R                     /* Protocol Configuration 1 */
#define FR_PCR2              FR.PCR2.R                     /* Protocol Configuration 2 */
#define FR_PCR3              FR.PCR3.R                     /* Protocol Configuration 3 */
#define FR_PCR4              FR.PCR4.R                     /* Protocol Configuration 4 */
#define FR_PCR5              FR.PCR5.R                     /* Protocol Configuration 5 */
#define FR_PCR6              FR.PCR6.R                     /* Protocol Configuration 6 */
#define FR_PCR7              FR.PCR7.R                     /* Protocol Configuration 7 */
#define FR_PCR8              FR.PCR8.R                     /* Protocol Configuration 8 */
#define FR_PCR9              FR.PCR9.R                     /* Protocol Configuration 9 */
#define FR_PCR10             FR.PCR10.R                    /* Protocol Configuration 10 */
#define FR_PCR11             FR.PCR11.R                    /* Protocol Configuration 11 */
#define FR_PCR12             FR.PCR12.R                    /* Protocol Configuration 12 */
#define FR_PCR13             FR.PCR13.R                    /* Protocol Configuration 13 */
#define FR_PCR14             FR.PCR14.R                    /* Protocol Configuration 14 */
#define FR_PCR15             FR.PCR15.R                    /* Protocol Configuration 15 */
#define FR_PCR16             FR.PCR16.R                    /* Protocol Configuration 16 */
#define FR_PCR17             FR.PCR17.R                    /* Protocol Configuration 17 */
#define FR_PCR18             FR.PCR18.R                    /* Protocol Configuration 18 */
#define FR_PCR19             FR.PCR19.R                    /* Protocol Configuration 19 */
#define FR_PCR20             FR.PCR20.R                    /* Protocol Configuration 20 */
#define FR_PCR21             FR.PCR21.R                    /* Protocol Configuration 21 */
#define FR_PCR22             FR.PCR22.R                    /* Protocol Configuration 22 */
#define FR_PCR23             FR.PCR23.R                    /* Protocol Configuration 23 */
#define FR_PCR24             FR.PCR24.R                    /* Protocol Configuration 24 */
#define FR_PCR25             FR.PCR25.R                    /* Protocol Configuration 25 */
#define FR_PCR26             FR.PCR26.R                    /* Protocol Configuration 26 */
#define FR_PCR27             FR.PCR27.R                    /* Protocol Configuration 27 */
#define FR_PCR28             FR.PCR28.R                    /* Protocol Configuration 28 */
#define FR_PCR29             FR.PCR29.R                    /* Protocol Configuration 29 */
#define FR_PCR30             FR.PCR30.R                    /* Protocol Configuration 30 */
#define FR_RFSDOR            FR.RFSDOR.R                   /* Receive FIFO Start Data Offset */
#define FR_RFSYMBADHR        FR.RFSYMBADHR.R               /* Receive FIFO System Memory Base Address High */
#define FR_RFSYMBADLR        FR.RFSYMBADLR.R               /* Receive FIFO System Memory Base Address Low */
#define FR_RFPTR             FR.RFPTR.R                    /* Receive FIFO Periodic Timer */
#define FR_RFFLPCR           FR.RFFLPCR.R                  /* Receive FIFO Fill Level and Pop Count */
#define FR_EEIFER            FR.EEIFER.R                   /* ECC Error Interrupt Flag And Enable */
#define FR_EERICR            FR.EERICR.R                   /* ECC Error Report And Injection Control */
#define FR_EERAR             FR.EERAR.R                    /* ECC Error Report Address */
#define FR_EERDR             FR.EERDR.R                    /* ECC Error Report Data */
#define FR_EERCR             FR.EERCR.R                    /* ECC Error Report Code */
#define FR_EEIAR             FR.EEIAR.R                    /* ECC Error Injection Address Register */
#define FR_EEIDR             FR.EEIDR.R                    /* ECC Error Injection Data */
#define FR_EEICR             FR.EEICR.R                    /* ECC Error Injection Code */
#define FR_MBCCSR0           FR.MB[0].CCSR.R               /* MB Configuration Control Status */
#define FR_MBCCFR0           FR.MB[0].CCFR.R               /* MB Cycle Counter Filter */
#define FR_MBFIDR0           FR.MB[0].FIDR.R               /* MB Frame ID */
#define FR_MBIDXR0           FR.MB[0].IDXR.R               /* MB Index */
#define FR_MBCCSR1           FR.MB[1].CCSR.R               /* MB Configuration Control Status */
#define FR_MBCCFR1           FR.MB[1].CCFR.R               /* MB Cycle Counter Filter */
#define FR_MBFIDR1           FR.MB[1].FIDR.R               /* MB Frame ID */
#define FR_MBIDXR1           FR.MB[1].IDXR.R               /* MB Index */
#define FR_MBCCSR2           FR.MB[2].CCSR.R               /* MB Configuration Control Status */
#define FR_MBCCFR2           FR.MB[2].CCFR.R               /* MB Cycle Counter Filter */
#define FR_MBFIDR2           FR.MB[2].FIDR.R               /* MB Frame ID */
#define FR_MBIDXR2           FR.MB[2].IDXR.R               /* MB Index */
#define FR_MBCCSR3           FR.MB[3].CCSR.R               /* MB Configuration Control Status */
#define FR_MBCCFR3           FR.MB[3].CCFR.R               /* MB Cycle Counter Filter */
#define FR_MBFIDR3           FR.MB[3].FIDR.R               /* MB Frame ID */
#define FR_MBIDXR3           FR.MB[3].IDXR.R               /* MB Index */
#define FR_MBCCSR4           FR.MB[4].CCSR.R               /* MB Configuration Control Status */
#define FR_MBCCFR4           FR.MB[4].CCFR.R               /* MB Cycle Counter Filter */
#define FR_MBFIDR4           FR.MB[4].FIDR.R               /* MB Frame ID */
#define FR_MBIDXR4           FR.MB[4].IDXR.R               /* MB Index */
#define FR_MBCCSR5           FR.MB[5].CCSR.R               /* MB Configuration Control Status */
#define FR_MBCCFR5           FR.MB[5].CCFR.R               /* MB Cycle Counter Filter */
#define FR_MBFIDR5           FR.MB[5].FIDR.R               /* MB Frame ID */
#define FR_MBIDXR5           FR.MB[5].IDXR.R               /* MB Index */
#define FR_MBCCSR6           FR.MB[6].CCSR.R               /* MB Configuration Control Status */
#define FR_MBCCFR6           FR.MB[6].CCFR.R               /* MB Cycle Counter Filter */
#define FR_MBFIDR6           FR.MB[6].FIDR.R               /* MB Frame ID */
#define FR_MBIDXR6           FR.MB[6].IDXR.R               /* MB Index */
#define FR_MBCCSR7           FR.MB[7].CCSR.R               /* MB Configuration Control Status */
#define FR_MBCCFR7           FR.MB[7].CCFR.R               /* MB Cycle Counter Filter */
#define FR_MBFIDR7           FR.MB[7].FIDR.R               /* MB Frame ID */
#define FR_MBIDXR7           FR.MB[7].IDXR.R               /* MB Index */
#define FR_MBCCSR8           FR.MB[8].CCSR.R               /* MB Configuration Control Status */
#define FR_MBCCFR8           FR.MB[8].CCFR.R               /* MB Cycle Counter Filter */
#define FR_MBFIDR8           FR.MB[8].FIDR.R               /* MB Frame ID */
#define FR_MBIDXR8           FR.MB[8].IDXR.R               /* MB Index */
#define FR_MBCCSR9           FR.MB[9].CCSR.R               /* MB Configuration Control Status */
#define FR_MBCCFR9           FR.MB[9].CCFR.R               /* MB Cycle Counter Filter */
#define FR_MBFIDR9           FR.MB[9].FIDR.R               /* MB Frame ID */
#define FR_MBIDXR9           FR.MB[9].IDXR.R               /* MB Index */
#define FR_MBCCSR10          FR.MB[10].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR10          FR.MB[10].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR10          FR.MB[10].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR10          FR.MB[10].IDXR.R              /* MB Index */
#define FR_MBCCSR11          FR.MB[11].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR11          FR.MB[11].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR11          FR.MB[11].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR11          FR.MB[11].IDXR.R              /* MB Index */
#define FR_MBCCSR12          FR.MB[12].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR12          FR.MB[12].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR12          FR.MB[12].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR12          FR.MB[12].IDXR.R              /* MB Index */
#define FR_MBCCSR13          FR.MB[13].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR13          FR.MB[13].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR13          FR.MB[13].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR13          FR.MB[13].IDXR.R              /* MB Index */
#define FR_MBCCSR14          FR.MB[14].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR14          FR.MB[14].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR14          FR.MB[14].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR14          FR.MB[14].IDXR.R              /* MB Index */
#define FR_MBCCSR15          FR.MB[15].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR15          FR.MB[15].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR15          FR.MB[15].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR15          FR.MB[15].IDXR.R              /* MB Index */
#define FR_MBCCSR16          FR.MB[16].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR16          FR.MB[16].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR16          FR.MB[16].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR16          FR.MB[16].IDXR.R              /* MB Index */
#define FR_MBCCSR17          FR.MB[17].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR17          FR.MB[17].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR17          FR.MB[17].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR17          FR.MB[17].IDXR.R              /* MB Index */
#define FR_MBCCSR18          FR.MB[18].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR18          FR.MB[18].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR18          FR.MB[18].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR18          FR.MB[18].IDXR.R              /* MB Index */
#define FR_MBCCSR19          FR.MB[19].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR19          FR.MB[19].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR19          FR.MB[19].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR19          FR.MB[19].IDXR.R              /* MB Index */
#define FR_MBCCSR20          FR.MB[20].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR20          FR.MB[20].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR20          FR.MB[20].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR20          FR.MB[20].IDXR.R              /* MB Index */
#define FR_MBCCSR21          FR.MB[21].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR21          FR.MB[21].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR21          FR.MB[21].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR21          FR.MB[21].IDXR.R              /* MB Index */
#define FR_MBCCSR22          FR.MB[22].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR22          FR.MB[22].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR22          FR.MB[22].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR22          FR.MB[22].IDXR.R              /* MB Index */
#define FR_MBCCSR23          FR.MB[23].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR23          FR.MB[23].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR23          FR.MB[23].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR23          FR.MB[23].IDXR.R              /* MB Index */
#define FR_MBCCSR24          FR.MB[24].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR24          FR.MB[24].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR24          FR.MB[24].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR24          FR.MB[24].IDXR.R              /* MB Index */
#define FR_MBCCSR25          FR.MB[25].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR25          FR.MB[25].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR25          FR.MB[25].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR25          FR.MB[25].IDXR.R              /* MB Index */
#define FR_MBCCSR26          FR.MB[26].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR26          FR.MB[26].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR26          FR.MB[26].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR26          FR.MB[26].IDXR.R              /* MB Index */
#define FR_MBCCSR27          FR.MB[27].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR27          FR.MB[27].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR27          FR.MB[27].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR27          FR.MB[27].IDXR.R              /* MB Index */
#define FR_MBCCSR28          FR.MB[28].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR28          FR.MB[28].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR28          FR.MB[28].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR28          FR.MB[28].IDXR.R              /* MB Index */
#define FR_MBCCSR29          FR.MB[29].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR29          FR.MB[29].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR29          FR.MB[29].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR29          FR.MB[29].IDXR.R              /* MB Index */
#define FR_MBCCSR30          FR.MB[30].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR30          FR.MB[30].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR30          FR.MB[30].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR30          FR.MB[30].IDXR.R              /* MB Index */
#define FR_MBCCSR31          FR.MB[31].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR31          FR.MB[31].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR31          FR.MB[31].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR31          FR.MB[31].IDXR.R              /* MB Index */
#define FR_MBCCSR32          FR.MB[32].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR32          FR.MB[32].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR32          FR.MB[32].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR32          FR.MB[32].IDXR.R              /* MB Index */
#define FR_MBCCSR33          FR.MB[33].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR33          FR.MB[33].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR33          FR.MB[33].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR33          FR.MB[33].IDXR.R              /* MB Index */
#define FR_MBCCSR34          FR.MB[34].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR34          FR.MB[34].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR34          FR.MB[34].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR34          FR.MB[34].IDXR.R              /* MB Index */
#define FR_MBCCSR35          FR.MB[35].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR35          FR.MB[35].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR35          FR.MB[35].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR35          FR.MB[35].IDXR.R              /* MB Index */
#define FR_MBCCSR36          FR.MB[36].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR36          FR.MB[36].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR36          FR.MB[36].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR36          FR.MB[36].IDXR.R              /* MB Index */
#define FR_MBCCSR37          FR.MB[37].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR37          FR.MB[37].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR37          FR.MB[37].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR37          FR.MB[37].IDXR.R              /* MB Index */
#define FR_MBCCSR38          FR.MB[38].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR38          FR.MB[38].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR38          FR.MB[38].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR38          FR.MB[38].IDXR.R              /* MB Index */
#define FR_MBCCSR39          FR.MB[39].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR39          FR.MB[39].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR39          FR.MB[39].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR39          FR.MB[39].IDXR.R              /* MB Index */
#define FR_MBCCSR40          FR.MB[40].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR40          FR.MB[40].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR40          FR.MB[40].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR40          FR.MB[40].IDXR.R              /* MB Index */
#define FR_MBCCSR41          FR.MB[41].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR41          FR.MB[41].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR41          FR.MB[41].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR41          FR.MB[41].IDXR.R              /* MB Index */
#define FR_MBCCSR42          FR.MB[42].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR42          FR.MB[42].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR42          FR.MB[42].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR42          FR.MB[42].IDXR.R              /* MB Index */
#define FR_MBCCSR43          FR.MB[43].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR43          FR.MB[43].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR43          FR.MB[43].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR43          FR.MB[43].IDXR.R              /* MB Index */
#define FR_MBCCSR44          FR.MB[44].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR44          FR.MB[44].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR44          FR.MB[44].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR44          FR.MB[44].IDXR.R              /* MB Index */
#define FR_MBCCSR45          FR.MB[45].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR45          FR.MB[45].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR45          FR.MB[45].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR45          FR.MB[45].IDXR.R              /* MB Index */
#define FR_MBCCSR46          FR.MB[46].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR46          FR.MB[46].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR46          FR.MB[46].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR46          FR.MB[46].IDXR.R              /* MB Index */
#define FR_MBCCSR47          FR.MB[47].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR47          FR.MB[47].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR47          FR.MB[47].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR47          FR.MB[47].IDXR.R              /* MB Index */
#define FR_MBCCSR48          FR.MB[48].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR48          FR.MB[48].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR48          FR.MB[48].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR48          FR.MB[48].IDXR.R              /* MB Index */
#define FR_MBCCSR49          FR.MB[49].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR49          FR.MB[49].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR49          FR.MB[49].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR49          FR.MB[49].IDXR.R              /* MB Index */
#define FR_MBCCSR50          FR.MB[50].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR50          FR.MB[50].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR50          FR.MB[50].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR50          FR.MB[50].IDXR.R              /* MB Index */
#define FR_MBCCSR51          FR.MB[51].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR51          FR.MB[51].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR51          FR.MB[51].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR51          FR.MB[51].IDXR.R              /* MB Index */
#define FR_MBCCSR52          FR.MB[52].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR52          FR.MB[52].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR52          FR.MB[52].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR52          FR.MB[52].IDXR.R              /* MB Index */
#define FR_MBCCSR53          FR.MB[53].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR53          FR.MB[53].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR53          FR.MB[53].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR53          FR.MB[53].IDXR.R              /* MB Index */
#define FR_MBCCSR54          FR.MB[54].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR54          FR.MB[54].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR54          FR.MB[54].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR54          FR.MB[54].IDXR.R              /* MB Index */
#define FR_MBCCSR55          FR.MB[55].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR55          FR.MB[55].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR55          FR.MB[55].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR55          FR.MB[55].IDXR.R              /* MB Index */
#define FR_MBCCSR56          FR.MB[56].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR56          FR.MB[56].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR56          FR.MB[56].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR56          FR.MB[56].IDXR.R              /* MB Index */
#define FR_MBCCSR57          FR.MB[57].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR57          FR.MB[57].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR57          FR.MB[57].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR57          FR.MB[57].IDXR.R              /* MB Index */
#define FR_MBCCSR58          FR.MB[58].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR58          FR.MB[58].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR58          FR.MB[58].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR58          FR.MB[58].IDXR.R              /* MB Index */
#define FR_MBCCSR59          FR.MB[59].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR59          FR.MB[59].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR59          FR.MB[59].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR59          FR.MB[59].IDXR.R              /* MB Index */
#define FR_MBCCSR60          FR.MB[60].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR60          FR.MB[60].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR60          FR.MB[60].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR60          FR.MB[60].IDXR.R              /* MB Index */
#define FR_MBCCSR61          FR.MB[61].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR61          FR.MB[61].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR61          FR.MB[61].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR61          FR.MB[61].IDXR.R              /* MB Index */
#define FR_MBCCSR62          FR.MB[62].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR62          FR.MB[62].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR62          FR.MB[62].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR62          FR.MB[62].IDXR.R              /* MB Index */
#define FR_MBCCSR63          FR.MB[63].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR63          FR.MB[63].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR63          FR.MB[63].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR63          FR.MB[63].IDXR.R              /* MB Index */
#define FR_MBCCSR64          FR.MB[64].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR64          FR.MB[64].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR64          FR.MB[64].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR64          FR.MB[64].IDXR.R              /* MB Index */
#define FR_MBCCSR65          FR.MB[65].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR65          FR.MB[65].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR65          FR.MB[65].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR65          FR.MB[65].IDXR.R              /* MB Index */
#define FR_MBCCSR66          FR.MB[66].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR66          FR.MB[66].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR66          FR.MB[66].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR66          FR.MB[66].IDXR.R              /* MB Index */
#define FR_MBCCSR67          FR.MB[67].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR67          FR.MB[67].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR67          FR.MB[67].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR67          FR.MB[67].IDXR.R              /* MB Index */
#define FR_MBCCSR68          FR.MB[68].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR68          FR.MB[68].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR68          FR.MB[68].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR68          FR.MB[68].IDXR.R              /* MB Index */
#define FR_MBCCSR69          FR.MB[69].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR69          FR.MB[69].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR69          FR.MB[69].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR69          FR.MB[69].IDXR.R              /* MB Index */
#define FR_MBCCSR70          FR.MB[70].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR70          FR.MB[70].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR70          FR.MB[70].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR70          FR.MB[70].IDXR.R              /* MB Index */
#define FR_MBCCSR71          FR.MB[71].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR71          FR.MB[71].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR71          FR.MB[71].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR71          FR.MB[71].IDXR.R              /* MB Index */
#define FR_MBCCSR72          FR.MB[72].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR72          FR.MB[72].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR72          FR.MB[72].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR72          FR.MB[72].IDXR.R              /* MB Index */
#define FR_MBCCSR73          FR.MB[73].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR73          FR.MB[73].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR73          FR.MB[73].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR73          FR.MB[73].IDXR.R              /* MB Index */
#define FR_MBCCSR74          FR.MB[74].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR74          FR.MB[74].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR74          FR.MB[74].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR74          FR.MB[74].IDXR.R              /* MB Index */
#define FR_MBCCSR75          FR.MB[75].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR75          FR.MB[75].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR75          FR.MB[75].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR75          FR.MB[75].IDXR.R              /* MB Index */
#define FR_MBCCSR76          FR.MB[76].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR76          FR.MB[76].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR76          FR.MB[76].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR76          FR.MB[76].IDXR.R              /* MB Index */
#define FR_MBCCSR77          FR.MB[77].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR77          FR.MB[77].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR77          FR.MB[77].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR77          FR.MB[77].IDXR.R              /* MB Index */
#define FR_MBCCSR78          FR.MB[78].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR78          FR.MB[78].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR78          FR.MB[78].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR78          FR.MB[78].IDXR.R              /* MB Index */
#define FR_MBCCSR79          FR.MB[79].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR79          FR.MB[79].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR79          FR.MB[79].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR79          FR.MB[79].IDXR.R              /* MB Index */
#define FR_MBCCSR80          FR.MB[80].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR80          FR.MB[80].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR80          FR.MB[80].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR80          FR.MB[80].IDXR.R              /* MB Index */
#define FR_MBCCSR81          FR.MB[81].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR81          FR.MB[81].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR81          FR.MB[81].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR81          FR.MB[81].IDXR.R              /* MB Index */
#define FR_MBCCSR82          FR.MB[82].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR82          FR.MB[82].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR82          FR.MB[82].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR82          FR.MB[82].IDXR.R              /* MB Index */
#define FR_MBCCSR83          FR.MB[83].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR83          FR.MB[83].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR83          FR.MB[83].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR83          FR.MB[83].IDXR.R              /* MB Index */
#define FR_MBCCSR84          FR.MB[84].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR84          FR.MB[84].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR84          FR.MB[84].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR84          FR.MB[84].IDXR.R              /* MB Index */
#define FR_MBCCSR85          FR.MB[85].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR85          FR.MB[85].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR85          FR.MB[85].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR85          FR.MB[85].IDXR.R              /* MB Index */
#define FR_MBCCSR86          FR.MB[86].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR86          FR.MB[86].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR86          FR.MB[86].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR86          FR.MB[86].IDXR.R              /* MB Index */
#define FR_MBCCSR87          FR.MB[87].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR87          FR.MB[87].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR87          FR.MB[87].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR87          FR.MB[87].IDXR.R              /* MB Index */
#define FR_MBCCSR88          FR.MB[88].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR88          FR.MB[88].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR88          FR.MB[88].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR88          FR.MB[88].IDXR.R              /* MB Index */
#define FR_MBCCSR89          FR.MB[89].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR89          FR.MB[89].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR89          FR.MB[89].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR89          FR.MB[89].IDXR.R              /* MB Index */
#define FR_MBCCSR90          FR.MB[90].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR90          FR.MB[90].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR90          FR.MB[90].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR90          FR.MB[90].IDXR.R              /* MB Index */
#define FR_MBCCSR91          FR.MB[91].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR91          FR.MB[91].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR91          FR.MB[91].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR91          FR.MB[91].IDXR.R              /* MB Index */
#define FR_MBCCSR92          FR.MB[92].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR92          FR.MB[92].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR92          FR.MB[92].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR92          FR.MB[92].IDXR.R              /* MB Index */
#define FR_MBCCSR93          FR.MB[93].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR93          FR.MB[93].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR93          FR.MB[93].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR93          FR.MB[93].IDXR.R              /* MB Index */
#define FR_MBCCSR94          FR.MB[94].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR94          FR.MB[94].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR94          FR.MB[94].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR94          FR.MB[94].IDXR.R              /* MB Index */
#define FR_MBCCSR95          FR.MB[95].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR95          FR.MB[95].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR95          FR.MB[95].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR95          FR.MB[95].IDXR.R              /* MB Index */
#define FR_MBCCSR96          FR.MB[96].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR96          FR.MB[96].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR96          FR.MB[96].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR96          FR.MB[96].IDXR.R              /* MB Index */
#define FR_MBCCSR97          FR.MB[97].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR97          FR.MB[97].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR97          FR.MB[97].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR97          FR.MB[97].IDXR.R              /* MB Index */
#define FR_MBCCSR98          FR.MB[98].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR98          FR.MB[98].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR98          FR.MB[98].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR98          FR.MB[98].IDXR.R              /* MB Index */
#define FR_MBCCSR99          FR.MB[99].CCSR.R              /* MB Configuration Control Status */
#define FR_MBCCFR99          FR.MB[99].CCFR.R              /* MB Cycle Counter Filter */
#define FR_MBFIDR99          FR.MB[99].FIDR.R              /* MB Frame ID */
#define FR_MBIDXR99          FR.MB[99].IDXR.R              /* MB Index */
#define FR_MBCCSR100         FR.MB[100].CCSR.R             /* MB Configuration Control Status */
#define FR_MBCCFR100         FR.MB[100].CCFR.R             /* MB Cycle Counter Filter */
#define FR_MBFIDR100         FR.MB[100].FIDR.R             /* MB Frame ID */
#define FR_MBIDXR100         FR.MB[100].IDXR.R             /* MB Index */
#define FR_MBCCSR101         FR.MB[101].CCSR.R             /* MB Configuration Control Status */
#define FR_MBCCFR101         FR.MB[101].CCFR.R             /* MB Cycle Counter Filter */
#define FR_MBFIDR101         FR.MB[101].FIDR.R             /* MB Frame ID */
#define FR_MBIDXR101         FR.MB[101].IDXR.R             /* MB Index */
#define FR_MBCCSR102         FR.MB[102].CCSR.R             /* MB Configuration Control Status */
#define FR_MBCCFR102         FR.MB[102].CCFR.R             /* MB Cycle Counter Filter */
#define FR_MBFIDR102         FR.MB[102].FIDR.R             /* MB Frame ID */
#define FR_MBIDXR102         FR.MB[102].IDXR.R             /* MB Index */
#define FR_MBCCSR103         FR.MB[103].CCSR.R             /* MB Configuration Control Status */
#define FR_MBCCFR103         FR.MB[103].CCFR.R             /* MB Cycle Counter Filter */
#define FR_MBFIDR103         FR.MB[103].FIDR.R             /* MB Frame ID */
#define FR_MBIDXR103         FR.MB[103].IDXR.R             /* MB Index */
#define FR_MBCCSR104         FR.MB[104].CCSR.R             /* MB Configuration Control Status */
#define FR_MBCCFR104         FR.MB[104].CCFR.R             /* MB Cycle Counter Filter */
#define FR_MBFIDR104         FR.MB[104].FIDR.R             /* MB Frame ID */
#define FR_MBIDXR104         FR.MB[104].IDXR.R             /* MB Index */
#define FR_MBCCSR105         FR.MB[105].CCSR.R             /* MB Configuration Control Status */
#define FR_MBCCFR105         FR.MB[105].CCFR.R             /* MB Cycle Counter Filter */
#define FR_MBFIDR105         FR.MB[105].FIDR.R             /* MB Frame ID */
#define FR_MBIDXR105         FR.MB[105].IDXR.R             /* MB Index */
#define FR_MBCCSR106         FR.MB[106].CCSR.R             /* MB Configuration Control Status */
#define FR_MBCCFR106         FR.MB[106].CCFR.R             /* MB Cycle Counter Filter */
#define FR_MBFIDR106         FR.MB[106].FIDR.R             /* MB Frame ID */
#define FR_MBIDXR106         FR.MB[106].IDXR.R             /* MB Index */
#define FR_MBCCSR107         FR.MB[107].CCSR.R             /* MB Configuration Control Status */
#define FR_MBCCFR107         FR.MB[107].CCFR.R             /* MB Cycle Counter Filter */
#define FR_MBFIDR107         FR.MB[107].FIDR.R             /* MB Frame ID */
#define FR_MBIDXR107         FR.MB[107].IDXR.R             /* MB Index */
#define FR_MBCCSR108         FR.MB[108].CCSR.R             /* MB Configuration Control Status */
#define FR_MBCCFR108         FR.MB[108].CCFR.R             /* MB Cycle Counter Filter */
#define FR_MBFIDR108         FR.MB[108].FIDR.R             /* MB Frame ID */
#define FR_MBIDXR108         FR.MB[108].IDXR.R             /* MB Index */
#define FR_MBCCSR109         FR.MB[109].CCSR.R             /* MB Configuration Control Status */
#define FR_MBCCFR109         FR.MB[109].CCFR.R             /* MB Cycle Counter Filter */
#define FR_MBFIDR109         FR.MB[109].FIDR.R             /* MB Frame ID */
#define FR_MBIDXR109         FR.MB[109].IDXR.R             /* MB Index */
#define FR_MBCCSR110         FR.MB[110].CCSR.R             /* MB Configuration Control Status */
#define FR_MBCCFR110         FR.MB[110].CCFR.R             /* MB Cycle Counter Filter */
#define FR_MBFIDR110         FR.MB[110].FIDR.R             /* MB Frame ID */
#define FR_MBIDXR110         FR.MB[110].IDXR.R             /* MB Index */
#define FR_MBCCSR111         FR.MB[111].CCSR.R             /* MB Configuration Control Status */
#define FR_MBCCFR111         FR.MB[111].CCFR.R             /* MB Cycle Counter Filter */
#define FR_MBFIDR111         FR.MB[111].FIDR.R             /* MB Frame ID */
#define FR_MBIDXR111         FR.MB[111].IDXR.R             /* MB Index */
#define FR_MBCCSR112         FR.MB[112].CCSR.R             /* MB Configuration Control Status */
#define FR_MBCCFR112         FR.MB[112].CCFR.R             /* MB Cycle Counter Filter */
#define FR_MBFIDR112         FR.MB[112].FIDR.R             /* MB Frame ID */
#define FR_MBIDXR112         FR.MB[112].IDXR.R             /* MB Index */
#define FR_MBCCSR113         FR.MB[113].CCSR.R             /* MB Configuration Control Status */
#define FR_MBCCFR113         FR.MB[113].CCFR.R             /* MB Cycle Counter Filter */
#define FR_MBFIDR113         FR.MB[113].FIDR.R             /* MB Frame ID */
#define FR_MBIDXR113         FR.MB[113].IDXR.R             /* MB Index */
#define FR_MBCCSR114         FR.MB[114].CCSR.R             /* MB Configuration Control Status */
#define FR_MBCCFR114         FR.MB[114].CCFR.R             /* MB Cycle Counter Filter */
#define FR_MBFIDR114         FR.MB[114].FIDR.R             /* MB Frame ID */
#define FR_MBIDXR114         FR.MB[114].IDXR.R             /* MB Index */
#define FR_MBCCSR115         FR.MB[115].CCSR.R             /* MB Configuration Control Status */
#define FR_MBCCFR115         FR.MB[115].CCFR.R             /* MB Cycle Counter Filter */
#define FR_MBFIDR115         FR.MB[115].FIDR.R             /* MB Frame ID */
#define FR_MBIDXR115         FR.MB[115].IDXR.R             /* MB Index */
#define FR_MBCCSR116         FR.MB[116].CCSR.R             /* MB Configuration Control Status */
#define FR_MBCCFR116         FR.MB[116].CCFR.R             /* MB Cycle Counter Filter */
#define FR_MBFIDR116         FR.MB[116].FIDR.R             /* MB Frame ID */
#define FR_MBIDXR116         FR.MB[116].IDXR.R             /* MB Index */
#define FR_MBCCSR117         FR.MB[117].CCSR.R             /* MB Configuration Control Status */
#define FR_MBCCFR117         FR.MB[117].CCFR.R             /* MB Cycle Counter Filter */
#define FR_MBFIDR117         FR.MB[117].FIDR.R             /* MB Frame ID */
#define FR_MBIDXR117         FR.MB[117].IDXR.R             /* MB Index */
#define FR_MBCCSR118         FR.MB[118].CCSR.R             /* MB Configuration Control Status */
#define FR_MBCCFR118         FR.MB[118].CCFR.R             /* MB Cycle Counter Filter */
#define FR_MBFIDR118         FR.MB[118].FIDR.R             /* MB Frame ID */
#define FR_MBIDXR118         FR.MB[118].IDXR.R             /* MB Index */
#define FR_MBCCSR119         FR.MB[119].CCSR.R             /* MB Configuration Control Status */
#define FR_MBCCFR119         FR.MB[119].CCFR.R             /* MB Cycle Counter Filter */
#define FR_MBFIDR119         FR.MB[119].FIDR.R             /* MB Frame ID */
#define FR_MBIDXR119         FR.MB[119].IDXR.R             /* MB Index */
#define FR_MBCCSR120         FR.MB[120].CCSR.R             /* MB Configuration Control Status */
#define FR_MBCCFR120         FR.MB[120].CCFR.R             /* MB Cycle Counter Filter */
#define FR_MBFIDR120         FR.MB[120].FIDR.R             /* MB Frame ID */
#define FR_MBIDXR120         FR.MB[120].IDXR.R             /* MB Index */
#define FR_MBCCSR121         FR.MB[121].CCSR.R             /* MB Configuration Control Status */
#define FR_MBCCFR121         FR.MB[121].CCFR.R             /* MB Cycle Counter Filter */
#define FR_MBFIDR121         FR.MB[121].FIDR.R             /* MB Frame ID */
#define FR_MBIDXR121         FR.MB[121].IDXR.R             /* MB Index */
#define FR_MBCCSR122         FR.MB[122].CCSR.R             /* MB Configuration Control Status */
#define FR_MBCCFR122         FR.MB[122].CCFR.R             /* MB Cycle Counter Filter */
#define FR_MBFIDR122         FR.MB[122].FIDR.R             /* MB Frame ID */
#define FR_MBIDXR122         FR.MB[122].IDXR.R             /* MB Index */
#define FR_MBCCSR123         FR.MB[123].CCSR.R             /* MB Configuration Control Status */
#define FR_MBCCFR123         FR.MB[123].CCFR.R             /* MB Cycle Counter Filter */
#define FR_MBFIDR123         FR.MB[123].FIDR.R             /* MB Frame ID */
#define FR_MBIDXR123         FR.MB[123].IDXR.R             /* MB Index */
#define FR_MBCCSR124         FR.MB[124].CCSR.R             /* MB Configuration Control Status */
#define FR_MBCCFR124         FR.MB[124].CCFR.R             /* MB Cycle Counter Filter */
#define FR_MBFIDR124         FR.MB[124].FIDR.R             /* MB Frame ID */
#define FR_MBIDXR124         FR.MB[124].IDXR.R             /* MB Index */
#define FR_MBCCSR125         FR.MB[125].CCSR.R             /* MB Configuration Control Status */
#define FR_MBCCFR125         FR.MB[125].CCFR.R             /* MB Cycle Counter Filter */
#define FR_MBFIDR125         FR.MB[125].FIDR.R             /* MB Frame ID */
#define FR_MBIDXR125         FR.MB[125].IDXR.R             /* MB Index */
#define FR_MBCCSR126         FR.MB[126].CCSR.R             /* MB Configuration Control Status */
#define FR_MBCCFR126         FR.MB[126].CCFR.R             /* MB Cycle Counter Filter */
#define FR_MBFIDR126         FR.MB[126].FIDR.R             /* MB Frame ID */
#define FR_MBIDXR126         FR.MB[126].IDXR.R             /* MB Index */
#define FR_MBCCSR127         FR.MB[127].CCSR.R             /* MB Configuration Control Status */
#define FR_MBCCFR127         FR.MB[127].CCFR.R             /* MB Cycle Counter Filter */
#define FR_MBFIDR127         FR.MB[127].FIDR.R             /* MB Frame ID */
#define FR_MBIDXR127         FR.MB[127].IDXR.R             /* MB Index */
#define FR_MBDOR0            FR.MBDOR[0].R                 /* MB Data Field Offset */
#define FR_MBDOR1            FR.MBDOR[1].R                 /* MB Data Field Offset */
#define FR_MBDOR2            FR.MBDOR[2].R                 /* MB Data Field Offset */
#define FR_MBDOR3            FR.MBDOR[3].R                 /* MB Data Field Offset */
#define FR_MBDOR4            FR.MBDOR[4].R                 /* MB Data Field Offset */
#define FR_MBDOR5            FR.MBDOR[5].R                 /* MB Data Field Offset */
#define FR_MBDOR6            FR.MBDOR[6].R                 /* MB Data Field Offset */
#define FR_MBDOR7            FR.MBDOR[7].R                 /* MB Data Field Offset */
#define FR_MBDOR8            FR.MBDOR[8].R                 /* MB Data Field Offset */
#define FR_MBDOR9            FR.MBDOR[9].R                 /* MB Data Field Offset */
#define FR_MBDOR10           FR.MBDOR[10].R                /* MB Data Field Offset */
#define FR_MBDOR11           FR.MBDOR[11].R                /* MB Data Field Offset */
#define FR_MBDOR12           FR.MBDOR[12].R                /* MB Data Field Offset */
#define FR_MBDOR13           FR.MBDOR[13].R                /* MB Data Field Offset */
#define FR_MBDOR14           FR.MBDOR[14].R                /* MB Data Field Offset */
#define FR_MBDOR15           FR.MBDOR[15].R                /* MB Data Field Offset */
#define FR_MBDOR16           FR.MBDOR[16].R                /* MB Data Field Offset */
#define FR_MBDOR17           FR.MBDOR[17].R                /* MB Data Field Offset */
#define FR_MBDOR18           FR.MBDOR[18].R                /* MB Data Field Offset */
#define FR_MBDOR19           FR.MBDOR[19].R                /* MB Data Field Offset */
#define FR_MBDOR20           FR.MBDOR[20].R                /* MB Data Field Offset */
#define FR_MBDOR21           FR.MBDOR[21].R                /* MB Data Field Offset */
#define FR_MBDOR22           FR.MBDOR[22].R                /* MB Data Field Offset */
#define FR_MBDOR23           FR.MBDOR[23].R                /* MB Data Field Offset */
#define FR_MBDOR24           FR.MBDOR[24].R                /* MB Data Field Offset */
#define FR_MBDOR25           FR.MBDOR[25].R                /* MB Data Field Offset */
#define FR_MBDOR26           FR.MBDOR[26].R                /* MB Data Field Offset */
#define FR_MBDOR27           FR.MBDOR[27].R                /* MB Data Field Offset */
#define FR_MBDOR28           FR.MBDOR[28].R                /* MB Data Field Offset */
#define FR_MBDOR29           FR.MBDOR[29].R                /* MB Data Field Offset */
#define FR_MBDOR30           FR.MBDOR[30].R                /* MB Data Field Offset */
#define FR_MBDOR31           FR.MBDOR[31].R                /* MB Data Field Offset */
#define FR_MBDOR32           FR.MBDOR[32].R                /* MB Data Field Offset */
#define FR_MBDOR33           FR.MBDOR[33].R                /* MB Data Field Offset */
#define FR_MBDOR34           FR.MBDOR[34].R                /* MB Data Field Offset */
#define FR_MBDOR35           FR.MBDOR[35].R                /* MB Data Field Offset */
#define FR_MBDOR36           FR.MBDOR[36].R                /* MB Data Field Offset */
#define FR_MBDOR37           FR.MBDOR[37].R                /* MB Data Field Offset */
#define FR_MBDOR38           FR.MBDOR[38].R                /* MB Data Field Offset */
#define FR_MBDOR39           FR.MBDOR[39].R                /* MB Data Field Offset */
#define FR_MBDOR40           FR.MBDOR[40].R                /* MB Data Field Offset */
#define FR_MBDOR41           FR.MBDOR[41].R                /* MB Data Field Offset */
#define FR_MBDOR42           FR.MBDOR[42].R                /* MB Data Field Offset */
#define FR_MBDOR43           FR.MBDOR[43].R                /* MB Data Field Offset */
#define FR_MBDOR44           FR.MBDOR[44].R                /* MB Data Field Offset */
#define FR_MBDOR45           FR.MBDOR[45].R                /* MB Data Field Offset */
#define FR_MBDOR46           FR.MBDOR[46].R                /* MB Data Field Offset */
#define FR_MBDOR47           FR.MBDOR[47].R                /* MB Data Field Offset */
#define FR_MBDOR48           FR.MBDOR[48].R                /* MB Data Field Offset */
#define FR_MBDOR49           FR.MBDOR[49].R                /* MB Data Field Offset */
#define FR_MBDOR50           FR.MBDOR[50].R                /* MB Data Field Offset */
#define FR_MBDOR51           FR.MBDOR[51].R                /* MB Data Field Offset */
#define FR_MBDOR52           FR.MBDOR[52].R                /* MB Data Field Offset */
#define FR_MBDOR53           FR.MBDOR[53].R                /* MB Data Field Offset */
#define FR_MBDOR54           FR.MBDOR[54].R                /* MB Data Field Offset */
#define FR_MBDOR55           FR.MBDOR[55].R                /* MB Data Field Offset */
#define FR_MBDOR56           FR.MBDOR[56].R                /* MB Data Field Offset */
#define FR_MBDOR57           FR.MBDOR[57].R                /* MB Data Field Offset */
#define FR_MBDOR58           FR.MBDOR[58].R                /* MB Data Field Offset */
#define FR_MBDOR59           FR.MBDOR[59].R                /* MB Data Field Offset */
#define FR_MBDOR60           FR.MBDOR[60].R                /* MB Data Field Offset */
#define FR_MBDOR61           FR.MBDOR[61].R                /* MB Data Field Offset */
#define FR_MBDOR62           FR.MBDOR[62].R                /* MB Data Field Offset */
#define FR_MBDOR63           FR.MBDOR[63].R                /* MB Data Field Offset */
#define FR_MBDOR64           FR.MBDOR[64].R                /* MB Data Field Offset */
#define FR_MBDOR65           FR.MBDOR[65].R                /* MB Data Field Offset */
#define FR_MBDOR66           FR.MBDOR[66].R                /* MB Data Field Offset */
#define FR_MBDOR67           FR.MBDOR[67].R                /* MB Data Field Offset */
#define FR_MBDOR68           FR.MBDOR[68].R                /* MB Data Field Offset */
#define FR_MBDOR69           FR.MBDOR[69].R                /* MB Data Field Offset */
#define FR_MBDOR70           FR.MBDOR[70].R                /* MB Data Field Offset */
#define FR_MBDOR71           FR.MBDOR[71].R                /* MB Data Field Offset */
#define FR_MBDOR72           FR.MBDOR[72].R                /* MB Data Field Offset */
#define FR_MBDOR73           FR.MBDOR[73].R                /* MB Data Field Offset */
#define FR_MBDOR74           FR.MBDOR[74].R                /* MB Data Field Offset */
#define FR_MBDOR75           FR.MBDOR[75].R                /* MB Data Field Offset */
#define FR_MBDOR76           FR.MBDOR[76].R                /* MB Data Field Offset */
#define FR_MBDOR77           FR.MBDOR[77].R                /* MB Data Field Offset */
#define FR_MBDOR78           FR.MBDOR[78].R                /* MB Data Field Offset */
#define FR_MBDOR79           FR.MBDOR[79].R                /* MB Data Field Offset */
#define FR_MBDOR80           FR.MBDOR[80].R                /* MB Data Field Offset */
#define FR_MBDOR81           FR.MBDOR[81].R                /* MB Data Field Offset */
#define FR_MBDOR82           FR.MBDOR[82].R                /* MB Data Field Offset */
#define FR_MBDOR83           FR.MBDOR[83].R                /* MB Data Field Offset */
#define FR_MBDOR84           FR.MBDOR[84].R                /* MB Data Field Offset */
#define FR_MBDOR85           FR.MBDOR[85].R                /* MB Data Field Offset */
#define FR_MBDOR86           FR.MBDOR[86].R                /* MB Data Field Offset */
#define FR_MBDOR87           FR.MBDOR[87].R                /* MB Data Field Offset */
#define FR_MBDOR88           FR.MBDOR[88].R                /* MB Data Field Offset */
#define FR_MBDOR89           FR.MBDOR[89].R                /* MB Data Field Offset */
#define FR_MBDOR90           FR.MBDOR[90].R                /* MB Data Field Offset */
#define FR_MBDOR91           FR.MBDOR[91].R                /* MB Data Field Offset */
#define FR_MBDOR92           FR.MBDOR[92].R                /* MB Data Field Offset */
#define FR_MBDOR93           FR.MBDOR[93].R                /* MB Data Field Offset */
#define FR_MBDOR94           FR.MBDOR[94].R                /* MB Data Field Offset */
#define FR_MBDOR95           FR.MBDOR[95].R                /* MB Data Field Offset */
#define FR_MBDOR96           FR.MBDOR[96].R                /* MB Data Field Offset */
#define FR_MBDOR97           FR.MBDOR[97].R                /* MB Data Field Offset */
#define FR_MBDOR98           FR.MBDOR[98].R                /* MB Data Field Offset */
#define FR_MBDOR99           FR.MBDOR[99].R                /* MB Data Field Offset */
#define FR_MBDOR100          FR.MBDOR[100].R               /* MB Data Field Offset */
#define FR_MBDOR101          FR.MBDOR[101].R               /* MB Data Field Offset */
#define FR_MBDOR102          FR.MBDOR[102].R               /* MB Data Field Offset */
#define FR_MBDOR103          FR.MBDOR[103].R               /* MB Data Field Offset */
#define FR_MBDOR104          FR.MBDOR[104].R               /* MB Data Field Offset */
#define FR_MBDOR105          FR.MBDOR[105].R               /* MB Data Field Offset */
#define FR_MBDOR106          FR.MBDOR[106].R               /* MB Data Field Offset */
#define FR_MBDOR107          FR.MBDOR[107].R               /* MB Data Field Offset */
#define FR_MBDOR108          FR.MBDOR[108].R               /* MB Data Field Offset */
#define FR_MBDOR109          FR.MBDOR[109].R               /* MB Data Field Offset */
#define FR_MBDOR110          FR.MBDOR[110].R               /* MB Data Field Offset */
#define FR_MBDOR111          FR.MBDOR[111].R               /* MB Data Field Offset */
#define FR_MBDOR112          FR.MBDOR[112].R               /* MB Data Field Offset */
#define FR_MBDOR113          FR.MBDOR[113].R               /* MB Data Field Offset */
#define FR_MBDOR114          FR.MBDOR[114].R               /* MB Data Field Offset */
#define FR_MBDOR115          FR.MBDOR[115].R               /* MB Data Field Offset */
#define FR_MBDOR116          FR.MBDOR[116].R               /* MB Data Field Offset */
#define FR_MBDOR117          FR.MBDOR[117].R               /* MB Data Field Offset */
#define FR_MBDOR118          FR.MBDOR[118].R               /* MB Data Field Offset */
#define FR_MBDOR119          FR.MBDOR[119].R               /* MB Data Field Offset */
#define FR_MBDOR120          FR.MBDOR[120].R               /* MB Data Field Offset */
#define FR_MBDOR121          FR.MBDOR[121].R               /* MB Data Field Offset */
#define FR_MBDOR122          FR.MBDOR[122].R               /* MB Data Field Offset */
#define FR_MBDOR123          FR.MBDOR[123].R               /* MB Data Field Offset */
#define FR_MBDOR124          FR.MBDOR[124].R               /* MB Data Field Offset */
#define FR_MBDOR125          FR.MBDOR[125].R               /* MB Data Field Offset */
#define FR_MBDOR126          FR.MBDOR[126].R               /* MB Data Field Offset */
#define FR_MBDOR127          FR.MBDOR[127].R               /* MB Data Field Offset */
#define FR_MBDOR128          FR.MBDOR[128].R               /* MB Data Field Offset */
#define FR_MBDOR129          FR.MBDOR[129].R               /* MB Data Field Offset */
#define FR_MBDOR130          FR.MBDOR[130].R               /* MB Data Field Offset */
#define FR_MBDOR131          FR.MBDOR[131].R               /* MB Data Field Offset */
#define FR_LEETR0            FR.LEETR[0].R                 /* LRAM ECC Error Test Register */
#define FR_LEETR1            FR.LEETR[1].R                 /* LRAM ECC Error Test Register */
#define FR_LEETR2            FR.LEETR[2].R                 /* LRAM ECC Error Test Register */
#define FR_LEETR3            FR.LEETR[3].R                 /* LRAM ECC Error Test Register */
#define FR_LEETR4            FR.LEETR[4].R                 /* LRAM ECC Error Test Register */
#define FR_LEETR5            FR.LEETR[5].R                 /* LRAM ECC Error Test Register */

/* FXOSC */
#define FXOSC_CTRL           FXOSC.CTRL.R                  /* FXOSC Control Register */
#define FXOSC_STAT           FXOSC.STAT.R                  /* Oscillator Status Register */

/* I2C */
#define I2C_1_IBAD           I2C_1.IBAD.R                  /* I2C Bus Address Register */
#define I2C_1_IBFD           I2C_1.IBFD.R                  /* I2C Bus Frequency Divider Register */
#define I2C_1_IBCR           I2C_1.IBCR.R                  /* I2C Bus Control Register */
#define I2C_1_IBSR           I2C_1.IBSR.R                  /* I2C Bus Status Register */
#define I2C_1_IBDR           I2C_1.IBDR.R                  /* I2C Bus Data I/O Register */
#define I2C_1_IBIC           I2C_1.IBIC.R                  /* I2C Bus Interrupt Config Register */
#define I2C_1_IBDBG          I2C_1.IBDBG.R                 /* I2C Bus Debug Register */

#define I2C_2_IBAD           I2C_2.IBAD.R                  /* I2C Bus Address Register */
#define I2C_2_IBFD           I2C_2.IBFD.R                  /* I2C Bus Frequency Divider Register */
#define I2C_2_IBCR           I2C_2.IBCR.R                  /* I2C Bus Control Register */
#define I2C_2_IBSR           I2C_2.IBSR.R                  /* I2C Bus Status Register */
#define I2C_2_IBDR           I2C_2.IBDR.R                  /* I2C Bus Data I/O Register */
#define I2C_2_IBIC           I2C_2.IBIC.R                  /* I2C Bus Interrupt Config Register */
#define I2C_2_IBDBG          I2C_2.IBDBG.R                 /* I2C Bus Debug Register */

/* INTC */
#define INTC_BCR             INTC.BCR.R                    /* Block Configuration */
#define INTC_MPROT           INTC.MPROT.R                  /* Master Protection */
#define INTC_CPR0            INTC.CPR[0].R                 /* Current Priority */
#define INTC_CPR1            INTC.CPR[1].R                 /* Current Priority */
#define INTC_CPR2            INTC.CPR[2].R                 /* Current Priority */
#define INTC_IACKR0          INTC.IACKR[0].R               /* Interrupt Acknowledge */
#define INTC_IACKR1          INTC.IACKR[1].R               /* Interrupt Acknowledge */
#define INTC_IACKR2          INTC.IACKR[2].R               /* Interrupt Acknowledge */
#define INTC_EOIR0           INTC.EOIR[0].R                /* End Of Interrupt */
#define INTC_EOIR1           INTC.EOIR[1].R                /* End Of Interrupt */
#define INTC_EOIR2           INTC.EOIR[2].R                /* End Of Interrupt */
#define INTC_SSCIR0          INTC.SSCIR[0].R               /* Software Set/Clear Interrupt */
#define INTC_SSCIR1          INTC.SSCIR[1].R               /* Software Set/Clear Interrupt */
#define INTC_SSCIR2          INTC.SSCIR[2].R               /* Software Set/Clear Interrupt */
#define INTC_SSCIR3          INTC.SSCIR[3].R               /* Software Set/Clear Interrupt */
#define INTC_SSCIR4          INTC.SSCIR[4].R               /* Software Set/Clear Interrupt */
#define INTC_SSCIR5          INTC.SSCIR[5].R               /* Software Set/Clear Interrupt */
#define INTC_SSCIR6          INTC.SSCIR[6].R               /* Software Set/Clear Interrupt */
#define INTC_SSCIR7          INTC.SSCIR[7].R               /* Software Set/Clear Interrupt */
#define INTC_SSCIR8          INTC.SSCIR[8].R               /* Software Set/Clear Interrupt */
#define INTC_SSCIR9          INTC.SSCIR[9].R               /* Software Set/Clear Interrupt */
#define INTC_SSCIR10         INTC.SSCIR[10].R              /* Software Set/Clear Interrupt */
#define INTC_SSCIR11         INTC.SSCIR[11].R              /* Software Set/Clear Interrupt */
#define INTC_SSCIR12         INTC.SSCIR[12].R              /* Software Set/Clear Interrupt */
#define INTC_SSCIR13         INTC.SSCIR[13].R              /* Software Set/Clear Interrupt */
#define INTC_SSCIR14         INTC.SSCIR[14].R              /* Software Set/Clear Interrupt */
#define INTC_SSCIR15         INTC.SSCIR[15].R              /* Software Set/Clear Interrupt */
#define INTC_PSR0            INTC.PSR[0].R                 /* Priority Select */
#define INTC_PSR1            INTC.PSR[1].R                 /* Priority Select */
#define INTC_PSR2            INTC.PSR[2].R                 /* Priority Select */
#define INTC_PSR3            INTC.PSR[3].R                 /* Priority Select */
#define INTC_PSR4            INTC.PSR[4].R                 /* Priority Select */
#define INTC_PSR5            INTC.PSR[5].R                 /* Priority Select */
#define INTC_PSR6            INTC.PSR[6].R                 /* Priority Select */
#define INTC_PSR7            INTC.PSR[7].R                 /* Priority Select */
#define INTC_PSR8            INTC.PSR[8].R                 /* Priority Select */
#define INTC_PSR9            INTC.PSR[9].R                 /* Priority Select */
#define INTC_PSR10           INTC.PSR[10].R                /* Priority Select */
#define INTC_PSR11           INTC.PSR[11].R                /* Priority Select */
#define INTC_PSR12           INTC.PSR[12].R                /* Priority Select */
#define INTC_PSR13           INTC.PSR[13].R                /* Priority Select */
#define INTC_PSR14           INTC.PSR[14].R                /* Priority Select */
#define INTC_PSR15           INTC.PSR[15].R                /* Priority Select */
#define INTC_PSR32           INTC.PSR[32].R                /* Priority Select */
#define INTC_PSR33           INTC.PSR[33].R                /* Priority Select */
#define INTC_PSR34           INTC.PSR[34].R                /* Priority Select */
#define INTC_PSR36           INTC.PSR[36].R                /* Priority Select */
#define INTC_PSR37           INTC.PSR[37].R                /* Priority Select */
#define INTC_PSR38           INTC.PSR[38].R                /* Priority Select */
#define INTC_PSR39           INTC.PSR[39].R                /* Priority Select */
#define INTC_PSR40           INTC.PSR[40].R                /* Priority Select */
#define INTC_PSR41           INTC.PSR[41].R                /* Priority Select */
#define INTC_PSR42           INTC.PSR[42].R                /* Priority Select */
#define INTC_PSR43           INTC.PSR[43].R                /* Priority Select */
#define INTC_PSR44           INTC.PSR[44].R                /* Priority Select */
#define INTC_PSR45           INTC.PSR[45].R                /* Priority Select */
#define INTC_PSR46           INTC.PSR[46].R                /* Priority Select */
#define INTC_PSR47           INTC.PSR[47].R                /* Priority Select */
#define INTC_PSR52           INTC.PSR[52].R                /* Priority Select */
#define INTC_PSR53           INTC.PSR[53].R                /* Priority Select */
#define INTC_PSR54           INTC.PSR[54].R                /* Priority Select */
#define INTC_PSR55           INTC.PSR[55].R                /* Priority Select */
#define INTC_PSR56           INTC.PSR[56].R                /* Priority Select */
#define INTC_PSR57           INTC.PSR[57].R                /* Priority Select */
#define INTC_PSR58           INTC.PSR[58].R                /* Priority Select */
#define INTC_PSR59           INTC.PSR[59].R                /* Priority Select */
#define INTC_PSR60           INTC.PSR[60].R                /* Priority Select */
#define INTC_PSR61           INTC.PSR[61].R                /* Priority Select */
#define INTC_PSR62           INTC.PSR[62].R                /* Priority Select */
#define INTC_PSR63           INTC.PSR[63].R                /* Priority Select */
#define INTC_PSR64           INTC.PSR[64].R                /* Priority Select */
#define INTC_PSR65           INTC.PSR[65].R                /* Priority Select */
#define INTC_PSR66           INTC.PSR[66].R                /* Priority Select */
#define INTC_PSR67           INTC.PSR[67].R                /* Priority Select */
#define INTC_PSR68           INTC.PSR[68].R                /* Priority Select */
#define INTC_PSR69           INTC.PSR[69].R                /* Priority Select */
#define INTC_PSR70           INTC.PSR[70].R                /* Priority Select */
#define INTC_PSR71           INTC.PSR[71].R                /* Priority Select */
#define INTC_PSR72           INTC.PSR[72].R                /* Priority Select */
#define INTC_PSR73           INTC.PSR[73].R                /* Priority Select */
#define INTC_PSR74           INTC.PSR[74].R                /* Priority Select */
#define INTC_PSR75           INTC.PSR[75].R                /* Priority Select */
#define INTC_PSR76           INTC.PSR[76].R                /* Priority Select */
#define INTC_PSR77           INTC.PSR[77].R                /* Priority Select */
#define INTC_PSR78           INTC.PSR[78].R                /* Priority Select */
#define INTC_PSR79           INTC.PSR[79].R                /* Priority Select */
#define INTC_PSR80           INTC.PSR[80].R                /* Priority Select */
#define INTC_PSR81           INTC.PSR[81].R                /* Priority Select */
#define INTC_PSR82           INTC.PSR[82].R                /* Priority Select */
#define INTC_PSR83           INTC.PSR[83].R                /* Priority Select */
#define INTC_PSR84           INTC.PSR[84].R                /* Priority Select */
#define INTC_PSR216          INTC.PSR[216].R               /* Priority Select */
#define INTC_PSR217          INTC.PSR[217].R               /* Priority Select */
#define INTC_PSR218          INTC.PSR[218].R               /* Priority Select */
#define INTC_PSR219          INTC.PSR[219].R               /* Priority Select */
#define INTC_PSR220          INTC.PSR[220].R               /* Priority Select */
#define INTC_PSR226          INTC.PSR[226].R               /* Priority Select */
#define INTC_PSR227          INTC.PSR[227].R               /* Priority Select */
#define INTC_PSR228          INTC.PSR[228].R               /* Priority Select */
#define INTC_PSR229          INTC.PSR[229].R               /* Priority Select */
#define INTC_PSR230          INTC.PSR[230].R               /* Priority Select */
#define INTC_PSR231          INTC.PSR[231].R               /* Priority Select */
#define INTC_PSR232          INTC.PSR[232].R               /* Priority Select */
#define INTC_PSR233          INTC.PSR[233].R               /* Priority Select */
#define INTC_PSR243          INTC.PSR[243].R               /* Priority Select */
#define INTC_PSR244          INTC.PSR[244].R               /* Priority Select */
#define INTC_PSR245          INTC.PSR[245].R               /* Priority Select */
#define INTC_PSR246          INTC.PSR[246].R               /* Priority Select */
#define INTC_PSR251          INTC.PSR[251].R               /* Priority Select */
#define INTC_PSR252          INTC.PSR[252].R               /* Priority Select */
#define INTC_PSR253          INTC.PSR[253].R               /* Priority Select */
#define INTC_PSR254          INTC.PSR[254].R               /* Priority Select */
#define INTC_PSR255          INTC.PSR[255].R               /* Priority Select */
#define INTC_PSR268          INTC.PSR[268].R               /* Priority Select */
#define INTC_PSR269          INTC.PSR[269].R               /* Priority Select */
#define INTC_PSR270          INTC.PSR[270].R               /* Priority Select */
#define INTC_PSR271          INTC.PSR[271].R               /* Priority Select */
#define INTC_PSR272          INTC.PSR[272].R               /* Priority Select */
#define INTC_PSR277          INTC.PSR[277].R               /* Priority Select */
#define INTC_PSR278          INTC.PSR[278].R               /* Priority Select */
#define INTC_PSR279          INTC.PSR[279].R               /* Priority Select */
#define INTC_PSR280          INTC.PSR[280].R               /* Priority Select */
#define INTC_PSR281          INTC.PSR[281].R               /* Priority Select */
#define INTC_PSR282          INTC.PSR[282].R               /* Priority Select */
#define INTC_PSR283          INTC.PSR[283].R               /* Priority Select */
#define INTC_PSR284          INTC.PSR[284].R               /* Priority Select */
#define INTC_PSR285          INTC.PSR[285].R               /* Priority Select */
#define INTC_PSR286          INTC.PSR[286].R               /* Priority Select */
#define INTC_PSR287          INTC.PSR[287].R               /* Priority Select */
#define INTC_PSR288          INTC.PSR[288].R               /* Priority Select */
#define INTC_PSR289          INTC.PSR[289].R               /* Priority Select */
#define INTC_PSR290          INTC.PSR[290].R               /* Priority Select */
#define INTC_PSR291          INTC.PSR[291].R               /* Priority Select */
#define INTC_PSR310          INTC.PSR[310].R               /* Priority Select */
#define INTC_PSR316          INTC.PSR[316].R               /* Priority Select */
#define INTC_PSR380          INTC.PSR[380].R               /* Priority Select */
#define INTC_PSR381          INTC.PSR[381].R               /* Priority Select */
#define INTC_PSR382          INTC.PSR[382].R               /* Priority Select */
#define INTC_PSR442          INTC.PSR[442].R               /* Priority Select */
#define INTC_PSR444          INTC.PSR[444].R               /* Priority Select */
#define INTC_PSR453          INTC.PSR[453].R               /* Priority Select */
#define INTC_PSR454          INTC.PSR[454].R               /* Priority Select */
#define INTC_PSR455          INTC.PSR[455].R               /* Priority Select */
#define INTC_PSR456          INTC.PSR[456].R               /* Priority Select */
#define INTC_PSR457          INTC.PSR[457].R               /* Priority Select */
#define INTC_PSR458          INTC.PSR[458].R               /* Priority Select */
#define INTC_PSR459          INTC.PSR[459].R               /* Priority Select */
#define INTC_PSR460          INTC.PSR[460].R               /* Priority Select */
#define INTC_PSR461          INTC.PSR[461].R               /* Priority Select */
#define INTC_PSR462          INTC.PSR[462].R               /* Priority Select */
#define INTC_PSR477          INTC.PSR[477].R               /* Priority Select */
#define INTC_PSR488          INTC.PSR[488].R               /* Priority Select */
#define INTC_PSR489          INTC.PSR[489].R               /* Priority Select */
#define INTC_PSR490          INTC.PSR[490].R               /* Priority Select */
#define INTC_PSR491          INTC.PSR[491].R               /* Priority Select */
#define INTC_PSR496          INTC.PSR[496].R               /* Priority Select */
#define INTC_PSR497          INTC.PSR[497].R               /* Priority Select */
#define INTC_PSR498          INTC.PSR[498].R               /* Priority Select */
#define INTC_PSR500          INTC.PSR[500].R               /* Priority Select */
#define INTC_PSR501          INTC.PSR[501].R               /* Priority Select */
#define INTC_PSR502          INTC.PSR[502].R               /* Priority Select */
#define INTC_PSR520          INTC.PSR[520].R               /* Priority Select */
#define INTC_PSR521          INTC.PSR[521].R               /* Priority Select */
#define INTC_PSR522          INTC.PSR[522].R               /* Priority Select */
#define INTC_PSR523          INTC.PSR[523].R               /* Priority Select */
#define INTC_PSR524          INTC.PSR[524].R               /* Priority Select */
#define INTC_PSR525          INTC.PSR[525].R               /* Priority Select */
#define INTC_PSR526          INTC.PSR[526].R               /* Priority Select */
#define INTC_PSR527          INTC.PSR[527].R               /* Priority Select */
#define INTC_PSR528          INTC.PSR[528].R               /* Priority Select */
#define INTC_PSR529          INTC.PSR[529].R               /* Priority Select */
#define INTC_PSR530          INTC.PSR[530].R               /* Priority Select */
#define INTC_PSR531          INTC.PSR[531].R               /* Priority Select */
#define INTC_PSR532          INTC.PSR[532].R               /* Priority Select */
#define INTC_PSR533          INTC.PSR[533].R               /* Priority Select */
#define INTC_PSR534          INTC.PSR[534].R               /* Priority Select */
#define INTC_PSR535          INTC.PSR[535].R               /* Priority Select */
#define INTC_PSR536          INTC.PSR[536].R               /* Priority Select */
#define INTC_PSR537          INTC.PSR[537].R               /* Priority Select */
#define INTC_PSR538          INTC.PSR[538].R               /* Priority Select */
#define INTC_PSR539          INTC.PSR[539].R               /* Priority Select */
#define INTC_PSR540          INTC.PSR[540].R               /* Priority Select */
#define INTC_PSR541          INTC.PSR[541].R               /* Priority Select */
#define INTC_PSR542          INTC.PSR[542].R               /* Priority Select */
#define INTC_PSR543          INTC.PSR[543].R               /* Priority Select */
#define INTC_PSR546          INTC.PSR[546].R               /* Priority Select */
#define INTC_PSR547          INTC.PSR[547].R               /* Priority Select */
#define INTC_PSR548          INTC.PSR[548].R               /* Priority Select */
#define INTC_PSR549          INTC.PSR[549].R               /* Priority Select */
#define INTC_PSR550          INTC.PSR[550].R               /* Priority Select */
#define INTC_PSR551          INTC.PSR[551].R               /* Priority Select */
#define INTC_PSR552          INTC.PSR[552].R               /* Priority Select */
#define INTC_PSR553          INTC.PSR[553].R               /* Priority Select */
#define INTC_PSR554          INTC.PSR[554].R               /* Priority Select */
#define INTC_PSR555          INTC.PSR[555].R               /* Priority Select */
#define INTC_PSR556          INTC.PSR[556].R               /* Priority Select */
#define INTC_PSR557          INTC.PSR[557].R               /* Priority Select */
#define INTC_PSR558          INTC.PSR[558].R               /* Priority Select */
#define INTC_PSR559          INTC.PSR[559].R               /* Priority Select */
#define INTC_PSR560          INTC.PSR[560].R               /* Priority Select */
#define INTC_PSR594          INTC.PSR[594].R               /* Priority Select */
#define INTC_PSR595          INTC.PSR[595].R               /* Priority Select */
#define INTC_PSR596          INTC.PSR[596].R               /* Priority Select */
#define INTC_PSR597          INTC.PSR[597].R               /* Priority Select */
#define INTC_PSR602          INTC.PSR[602].R               /* Priority Select */
#define INTC_PSR603          INTC.PSR[603].R               /* Priority Select */
#define INTC_PSR604          INTC.PSR[604].R               /* Priority Select */
#define INTC_PSR605          INTC.PSR[605].R               /* Priority Select */
#define INTC_PSR606          INTC.PSR[606].R               /* Priority Select */
#define INTC_PSR607          INTC.PSR[607].R               /* Priority Select */
#define INTC_PSR608          INTC.PSR[608].R               /* Priority Select */
#define INTC_PSR609          INTC.PSR[609].R               /* Priority Select */
#define INTC_PSR622          INTC.PSR[622].R               /* Priority Select */
#define INTC_PSR623          INTC.PSR[623].R               /* Priority Select */
#define INTC_PSR624          INTC.PSR[624].R               /* Priority Select */
#define INTC_PSR625          INTC.PSR[625].R               /* Priority Select */
#define INTC_PSR626          INTC.PSR[626].R               /* Priority Select */
#define INTC_PSR627          INTC.PSR[627].R               /* Priority Select */
#define INTC_PSR628          INTC.PSR[628].R               /* Priority Select */
#define INTC_PSR632          INTC.PSR[632].R               /* Priority Select */
#define INTC_PSR633          INTC.PSR[633].R               /* Priority Select */
#define INTC_PSR634          INTC.PSR[634].R               /* Priority Select */
#define INTC_PSR635          INTC.PSR[635].R               /* Priority Select */
#define INTC_PSR636          INTC.PSR[636].R               /* Priority Select */
#define INTC_PSR637          INTC.PSR[637].R               /* Priority Select */
#define INTC_PSR638          INTC.PSR[638].R               /* Priority Select */
#define INTC_PSR639          INTC.PSR[639].R               /* Priority Select */
#define INTC_PSR640          INTC.PSR[640].R               /* Priority Select */
#define INTC_PSR643          INTC.PSR[643].R               /* Priority Select */
#define INTC_PSR655          INTC.PSR[655].R               /* Priority Select */
#define INTC_PSR656          INTC.PSR[656].R               /* Priority Select */
#define INTC_PSR657          INTC.PSR[657].R               /* Priority Select */
#define INTC_PSR658          INTC.PSR[658].R               /* Priority Select */
#define INTC_PSR659          INTC.PSR[659].R               /* Priority Select */
#define INTC_PSR660          INTC.PSR[660].R               /* Priority Select */
#define INTC_PSR661          INTC.PSR[661].R               /* Priority Select */
#define INTC_PSR662          INTC.PSR[662].R               /* Priority Select */
#define INTC_PSR663          INTC.PSR[663].R               /* Priority Select */
#define INTC_PSR664          INTC.PSR[664].R               /* Priority Select */
#define INTC_PSR665          INTC.PSR[665].R               /* Priority Select */
#define INTC_PSR666          INTC.PSR[666].R               /* Priority Select */
#define INTC_PSR667          INTC.PSR[667].R               /* Priority Select */
#define INTC_PSR668          INTC.PSR[668].R               /* Priority Select */
#define INTC_PSR700          INTC.PSR[700].R               /* Priority Select */
#define INTC_PSR701          INTC.PSR[701].R               /* Priority Select */
#define INTC_PSR702          INTC.PSR[702].R               /* Priority Select */
#define INTC_PSR703          INTC.PSR[703].R               /* Priority Select */
#define INTC_PSR704          INTC.PSR[704].R               /* Priority Select */
#define INTC_PSR705          INTC.PSR[705].R               /* Priority Select */
#define INTC_PSR706          INTC.PSR[706].R               /* Priority Select */
#define INTC_PSR707          INTC.PSR[707].R               /* Priority Select */
#define INTC_PSR708          INTC.PSR[708].R               /* Priority Select */
#define INTC_PSR709          INTC.PSR[709].R               /* Priority Select */
#define INTC_PSR710          INTC.PSR[710].R               /* Priority Select */
#define INTC_PSR711          INTC.PSR[711].R               /* Priority Select */
#define INTC_PSR712          INTC.PSR[712].R               /* Priority Select */
#define INTC_PSR713          INTC.PSR[713].R               /* Priority Select */
#define INTC_PSR714          INTC.PSR[714].R               /* Priority Select */
#define INTC_PSR734          INTC.PSR[734].R               /* Priority Select */
#define INTC_PSR735          INTC.PSR[735].R               /* Priority Select */
#define INTC_PSR736          INTC.PSR[736].R               /* Priority Select */
#define INTC_PSR737          INTC.PSR[737].R               /* Priority Select */
#define INTC_PSR739          INTC.PSR[739].R               /* Priority Select */
#define INTC_PSR744          INTC.PSR[744].R               /* Priority Select */
#define INTC_PSR746          INTC.PSR[746].R               /* Priority Select */
#define INTC_PSR750          INTC.PSR[750].R               /* Priority Select */
#define INTC_PSR754          INTC.PSR[754].R               /* Priority Select */
#define INTC_PSR758          INTC.PSR[758].R               /* Priority Select */
#define INTC_PSR759          INTC.PSR[759].R               /* Priority Select */
#define INTC_PSR760          INTC.PSR[760].R               /* Priority Select */
#define INTC_PSR761          INTC.PSR[761].R               /* Priority Select */
#define INTC_PSR762          INTC.PSR[762].R               /* Priority Select */
#define INTC_PSR763          INTC.PSR[763].R               /* Priority Select */
#define INTC_PSR764          INTC.PSR[764].R               /* Priority Select */
#define INTC_PSR765          INTC.PSR[765].R               /* Priority Select */
#define INTC_MMRC0           INTC.CHANNEL[0].MMRC.R        /* Monitor Mode for Processor 0 */
#define INTC_HIPRI0C0        INTC.CHANNEL[0].HIPRIC[0].R   /* HIPRI for Processor 0 */
#define INTC_HIPRI1C0        INTC.CHANNEL[0].HIPRIC[1].R   /* HIPRI for Processor 0 */
#define INTC_HIPRI2C0        INTC.CHANNEL[0].HIPRIC[2].R   /* HIPRI for Processor 0 */
#define INTC_LAT0C0          INTC.CHANNEL[0].LATC[0].R     /* Maximum Latency for Processor 0 */
#define INTC_LAT1C0          INTC.CHANNEL[0].LATC[1].R     /* Maximum Latency for Processor 0 */
#define INTC_LAT2C0          INTC.CHANNEL[0].LATC[2].R     /* Maximum Latency for Processor 0 */
#define INTC_TIMER0C0        INTC.CHANNEL[0].TIMERC[0].R   /* Timer for Processor 0 */
#define INTC_TIMER1C0        INTC.CHANNEL[0].TIMERC[1].R   /* Timer for Processor 0 */
#define INTC_TIMER2C0        INTC.CHANNEL[0].TIMERC[2].R   /* Timer for Processor 0 */
#define INTC_MMRC1           INTC.CHANNEL[1].MMRC.R        /* Monitor Mode for Processor 1 */
#define INTC_HIPRI0C1        INTC.CHANNEL[1].HIPRIC[0].R   /* HIPRI for Processor 1 */
#define INTC_HIPRI1C1        INTC.CHANNEL[1].HIPRIC[1].R   /* HIPRI for Processor 1 */
#define INTC_HIPRI2C1        INTC.CHANNEL[1].HIPRIC[2].R   /* HIPRI for Processor 1 */
#define INTC_LAT0C1          INTC.CHANNEL[1].LATC[0].R     /* Maximum Latency for Processor 1 */
#define INTC_LAT1C1          INTC.CHANNEL[1].LATC[1].R     /* Maximum Latency for Processor 1 */
#define INTC_LAT2C1          INTC.CHANNEL[1].LATC[2].R     /* Maximum Latency for Processor 1 */
#define INTC_TIMER0C1        INTC.CHANNEL[1].TIMERC[0].R   /* Timer for Processor 1 */
#define INTC_TIMER1C1        INTC.CHANNEL[1].TIMERC[1].R   /* Timer for Processor 1 */
#define INTC_TIMER2C1        INTC.CHANNEL[1].TIMERC[2].R   /* Timer for Processor 1 */
#define INTC_MMRC2           INTC.CHANNEL[2].MMRC.R        /* Monitor Mode for Processor 2 */
#define INTC_HIPRI0C2        INTC.CHANNEL[2].HIPRIC[0].R   /* HIPRI for Processor 2 */
#define INTC_HIPRI1C2        INTC.CHANNEL[2].HIPRIC[1].R   /* HIPRI for Processor 2 */
#define INTC_HIPRI2C2        INTC.CHANNEL[2].HIPRIC[2].R   /* HIPRI for Processor 2 */
#define INTC_LAT0C2          INTC.CHANNEL[2].LATC[0].R     /* Maximum Latency for Processor 2 */
#define INTC_LAT1C2          INTC.CHANNEL[2].LATC[1].R     /* Maximum Latency for Processor 2 */
#define INTC_LAT2C2          INTC.CHANNEL[2].LATC[2].R     /* Maximum Latency for Processor 2 */
#define INTC_TIMER0C2        INTC.CHANNEL[2].TIMERC[0].R   /* Timer for Processor 2 */
#define INTC_TIMER1C2        INTC.CHANNEL[2].TIMERC[1].R   /* Timer for Processor 2 */
#define INTC_TIMER2C2        INTC.CHANNEL[2].TIMERC[2].R   /* Timer for Processor 2 */

/* JTAGM */
#define JTAGM_MCR            JTAGM.MCR.R                   /* Module Configuration Register */
#define JTAGM_SR             JTAGM.SR.R                    /* Status Register */
#define JTAGM_DOR0           JTAGM.DOR0.R                  /* Data Out Register 0 */
#define JTAGM_DOR1           JTAGM.DOR1.R                  /* Data Out Register 1 */
#define JTAGM_DOR2           JTAGM.DOR2.R                  /* Data Out Register 2 */
#define JTAGM_DOR3           JTAGM.DOR3.R                  /* Data Out Register 3 */
#define JTAGM_DIR0           JTAGM.DIR0.R                  /* Data Input Register 0 */
#define JTAGM_DIR1           JTAGM.DIR1.R                  /* Data Input Register 1 */

/* LFAST */
#define LFAST_MCR            LFAST.MCR.R                   /* LFAST Mode Configuration Register */
#define LFAST_SCR            LFAST.SCR.R                   /* LFAST Speed Control Register */
#define LFAST_COCR           LFAST.COCR.R                  /* LFAST Correlator Control Register */
#define LFAST_TMCR           LFAST.TMCR.R                  /* LFAST Test Mode Control Register */
#define LFAST_ALCR           LFAST.ALCR.R                  /* LFAST Auto Loopback Control Register */
#define LFAST_RCDCR          LFAST.RCDCR.R                 /* LFAST Rate Change Delay Control Register */
#define LFAST_SLCR           LFAST.SLCR.R                  /* LFAST Wakeup Delay Control Register */
#define LFAST_ICR            LFAST.ICR.R                   /* LFAST ICLC Control Register */
#define LFAST_PICR           LFAST.PICR.R                  /* LFAST Ping Control Register */
#define LFAST_RFCR           LFAST.RFCR.R                  /* LFAST Rx FIFO CTS Control Register */
#define LFAST_TIER           LFAST.TIER.R                  /* LFAST Tx Interrupt Enable Register */
#define LFAST_RIER           LFAST.RIER.R                  /* LFAST Rx Interrupt Enable Register */
#define LFAST_RIIER          LFAST.RIIER.R                 /* LFAST Rx ICLC Interrupt Enable Register */
#define LFAST_PLLCR          LFAST.PLLCR.R                 /* LFAST PLL Control Register */
#define LFAST_UNSTCR         LFAST.UNSTCR.R                /* LFAST Unsolicited Tx Control Register */
#define LFAST_UNSTDR0        LFAST.UNSTDR[0].R             /* LFAST Unsolicited Tx Data Registers */
#define LFAST_UNSTDR1        LFAST.UNSTDR[1].R             /* LFAST Unsolicited Tx Data Registers */
#define LFAST_UNSTDR2        LFAST.UNSTDR[2].R             /* LFAST Unsolicited Tx Data Registers */
#define LFAST_UNSTDR3        LFAST.UNSTDR[3].R             /* LFAST Unsolicited Tx Data Registers */
#define LFAST_UNSTDR4        LFAST.UNSTDR[4].R             /* LFAST Unsolicited Tx Data Registers */
#define LFAST_UNSTDR5        LFAST.UNSTDR[5].R             /* LFAST Unsolicited Tx Data Registers */
#define LFAST_UNSTDR6        LFAST.UNSTDR[6].R             /* LFAST Unsolicited Tx Data Registers */
#define LFAST_UNSTDR7        LFAST.UNSTDR[7].R             /* LFAST Unsolicited Tx Data Registers */
#define LFAST_UNSTDR8        LFAST.UNSTDR[8].R             /* LFAST Unsolicited Tx Data Registers */
#define LFAST_GSR            LFAST.GSR.R                   /* LFAST Global Status Register */
#define LFAST_PISR           LFAST.PISR.R                  /* LFAST Ping Status Register */
#define LFAST_DFSR           LFAST.DFSR.R                  /* LFAST Data Frame Status Register */
#define LFAST_TISR           LFAST.TISR.R                  /* LFAST Tx Interrupt Status Register */
#define LFAST_RISR           LFAST.RISR.R                  /* LFAST Rx Interrupt Status Register */
#define LFAST_RIISR          LFAST.RIISR.R                 /* LFAST Rx ICLC Interrupt Status Register */
#define LFAST_PLLLSR         LFAST.PLLLSR.R                /* LFAST PLL and LVDS Status Register */
#define LFAST_UNSRSR         LFAST.UNSRSR.R                /* LFAST Unsolicited Rx Status Register */
#define LFAST_UNSRDR0        LFAST.UNSRDR[0].R             /* LFAST Unsolicited Rx Data Register */
#define LFAST_UNSRDR1        LFAST.UNSRDR[1].R             /* LFAST Unsolicited Rx Data Register */
#define LFAST_UNSRDR2        LFAST.UNSRDR[2].R             /* LFAST Unsolicited Rx Data Register */
#define LFAST_UNSRDR3        LFAST.UNSRDR[3].R             /* LFAST Unsolicited Rx Data Register */
#define LFAST_UNSRDR4        LFAST.UNSRDR[4].R             /* LFAST Unsolicited Rx Data Register */
#define LFAST_UNSRDR5        LFAST.UNSRDR[5].R             /* LFAST Unsolicited Rx Data Register */
#define LFAST_UNSRDR6        LFAST.UNSRDR[6].R             /* LFAST Unsolicited Rx Data Register */
#define LFAST_UNSRDR7        LFAST.UNSRDR[7].R             /* LFAST Unsolicited Rx Data Register */
#define LFAST_UNSRDR8        LFAST.UNSRDR[8].R             /* LFAST Unsolicited Rx Data Register */

/* LINFLEXD */
#define LINFLEXD_1_LINCR1    LINFLEXD_1.LINCR1.R           /* LIN Control Register 1 */
#define LINFLEXD_1_LINIER    LINFLEXD_1.LINIER.R           /* LIN Interrupt Enable Register */
#define LINFLEXD_1_LINSR     LINFLEXD_1.LINSR.R            /* LIN Status Register */
#define LINFLEXD_1_LINESR    LINFLEXD_1.LINESR.R           /* LIN Error Status Register */
#define LINFLEXD_1_UARTCR    LINFLEXD_1.UARTCR.R           /* UART Mode Control Register */
#define LINFLEXD_1_UARTSR    LINFLEXD_1.UARTSR.R           /* UART Mode Status Register */
#define LINFLEXD_1_LINTCSR   LINFLEXD_1.LINTCSR.R          /* LIN Time-Out Control Status Register */
#define LINFLEXD_1_LINOCR    LINFLEXD_1.LINOCR.R           /* LIN Output Compare Register */
#define LINFLEXD_1_LINTOCR   LINFLEXD_1.LINTOCR.R          /* LIN Time-Out Control Register */
#define LINFLEXD_1_LINFBRR   LINFLEXD_1.LINFBRR.R          /* LIN Fractional Baud Rate Register */
#define LINFLEXD_1_LINIBRR   LINFLEXD_1.LINIBRR.R          /* LIN Integer Baud Rate Register */
#define LINFLEXD_1_LINCFR    LINFLEXD_1.LINCFR.R           /* LIN Checksum Field Register */
#define LINFLEXD_1_LINCR2    LINFLEXD_1.LINCR2.R           /* LIN Control Register 2 */
#define LINFLEXD_1_BIDR      LINFLEXD_1.BIDR.R             /* Buffer Identifier Register */
#define LINFLEXD_1_BDRL      LINFLEXD_1.BDRL.R             /* Buffer Data Register Least Significant */
#define LINFLEXD_1_BDRM      LINFLEXD_1.BDRM.R             /* Buffer Data Register Most Significant */
#define LINFLEXD_1_IFER      LINFLEXD_1.IFER.R             /* Identifier Filter Enable Register */
#define LINFLEXD_1_IFMI      LINFLEXD_1.IFMI.R             /* Identifier Filter Match Index */
#define LINFLEXD_1_IFMR      LINFLEXD_1.IFMR.R             /* Identifier Filter Mode Register */
#define LINFLEXD_1_IFCR0     LINFLEXD_1.IFCR[0].R          /* Identifier Filter Control Register */
#define LINFLEXD_1_IFCR1     LINFLEXD_1.IFCR[1].R          /* Identifier Filter Control Register */
#define LINFLEXD_1_IFCR2     LINFLEXD_1.IFCR[2].R          /* Identifier Filter Control Register */
#define LINFLEXD_1_IFCR3     LINFLEXD_1.IFCR[3].R          /* Identifier Filter Control Register */
#define LINFLEXD_1_IFCR4     LINFLEXD_1.IFCR[4].R          /* Identifier Filter Control Register */
#define LINFLEXD_1_IFCR5     LINFLEXD_1.IFCR[5].R          /* Identifier Filter Control Register */
#define LINFLEXD_1_IFCR6     LINFLEXD_1.IFCR[6].R          /* Identifier Filter Control Register */
#define LINFLEXD_1_IFCR7     LINFLEXD_1.IFCR[7].R          /* Identifier Filter Control Register */
#define LINFLEXD_1_IFCR8     LINFLEXD_1.IFCR[8].R          /* Identifier Filter Control Register */
#define LINFLEXD_1_IFCR9     LINFLEXD_1.IFCR[9].R          /* Identifier Filter Control Register */
#define LINFLEXD_1_IFCR10    LINFLEXD_1.IFCR[10].R         /* Identifier Filter Control Register */
#define LINFLEXD_1_IFCR11    LINFLEXD_1.IFCR[11].R         /* Identifier Filter Control Register */
#define LINFLEXD_1_IFCR12    LINFLEXD_1.IFCR[12].R         /* Identifier Filter Control Register */
#define LINFLEXD_1_IFCR13    LINFLEXD_1.IFCR[13].R         /* Identifier Filter Control Register */
#define LINFLEXD_1_IFCR14    LINFLEXD_1.IFCR[14].R         /* Identifier Filter Control Register */
#define LINFLEXD_1_IFCR15    LINFLEXD_1.IFCR[15].R         /* Identifier Filter Control Register */
#define LINFLEXD_1_GCR       LINFLEXD_1.GCR.R              /* Global Control Register */
#define LINFLEXD_1_UARTPTO   LINFLEXD_1.UARTPTO.R          /* UART Preset Timeout Register */
#define LINFLEXD_1_UARTCTO   LINFLEXD_1.UARTCTO.R          /* UART Current Timeout Register */
#define LINFLEXD_1_DMATXE    LINFLEXD_1.DMATXE.R           /* DMA Tx Enable Register */
#define LINFLEXD_1_DMARXE    LINFLEXD_1.DMARXE.R           /* DMA Rx Enable Register */

/* MCB */
#define MCB_MISC4            MCB.MISC4.R                   /* Miscellaneous 4 */
#define MCB_NPC_SPECIAL_ENABLE MCB.NPC_SPECIAL_ENABLE.R    /* NPC Special Enable Control */
#define MCB_MISC0            MCB.MISC0.R                   /* Miscellaneous 0 */
#define MCB_MISC1            MCB.MISC1.R                   /* Miscellaneous 1 */
#define MCB_MISC2            MCB.MISC2.R                   /* Miscellaneous 2 */
#define MCB_MISC3            MCB.MISC3.R                   /* Miscellaneous 3 */
#define MCB_NEX_FIFO_STATUS  MCB.NEX_FIFO_STATUS.R         /* Nexus Trace FIFO Status */
#define MCB_PAD_LFAST_Tx     MCB.PAD_LFAST_TX.R            /* LFAST Tx/Ref Supply Pad Setting */
#define MCB_PAD_LFAST_RX     MCB.PAD_LFAST_RX.R            /* LFAST RX Pads Setting */
#define MCB_CORE_NEXUS_ENABLE_STATUS MCB.CORE_NEXUS_ENABLE_STATUS.R /* Nexus Core Enable Status */

/* MC_CGM */
#define MC_CGM_PCS_SDUR      MC_CGM.PCS_SDUR.R             /* PCS Switch Duration */
#define MC_CGM_PCS_DIVC2     MC_CGM.PCS_DIVC2.R            /* PCS Divider Change */
#define MC_CGM_PCS_DIVE2     MC_CGM.PCS_DIVE2.R            /* PCS Divider End */
#define MC_CGM_PCS_DIVS2     MC_CGM.PCS_DIVS2.R            /* PCS Divider Start */
#define MC_CGM_PCS_DIVC4     MC_CGM.PCS_DIVC4.R            /* PCS Divider Change */
#define MC_CGM_PCS_DIVE4     MC_CGM.PCS_DIVE4.R            /* PCS Divider End */
#define MC_CGM_PCS_DIVS4     MC_CGM.PCS_DIVS4.R            /* PCS Divider Start */
#define MC_CGM_DIV_UPD_STAT  MC_CGM.DIV_UPD_STAT.R         /* Divider Update Status */
#define MC_CGM_SC_SS         MC_CGM.SC_SS.R                /* System Clock Select */
#define MC_CGM_AC0_SC        MC_CGM.AC0_SC.R               /* Auxiliary Clock Select Control */
#define MC_CGM_AC0_SS        MC_CGM.AC0_SS.R               /* Auxiliary Clock Select Status */
#define MC_CGM_AC0_DC0       MC_CGM.AC0_DC0.R              /* Auxiliary Clock Divider Configuration */
#define MC_CGM_AC0_DC1       MC_CGM.AC0_DC1.R              /* Auxiliary Clock Divider Configuration */
#define MC_CGM_AC0_DC2       MC_CGM.AC0_DC2.R              /* Auxiliary Clock Divider Configuration */
#define MC_CGM_AC1_SC        MC_CGM.AC1_SC.R               /* Auxiliary Clock Select Control */
#define MC_CGM_AC1_SS        MC_CGM.AC1_SS.R               /* Auxiliary Clock Select Status */
#define MC_CGM_AC2_SC        MC_CGM.AC2_SC.R               /* Auxiliary Clock Select Control */
#define MC_CGM_AC2_SS        MC_CGM.AC2_SS.R               /* Auxiliary Clock Select Status */
#define MC_CGM_AC3_SC        MC_CGM.AC3_SC.R               /* Auxiliary Clock Select Control */
#define MC_CGM_AC3_SS        MC_CGM.AC3_SS.R               /* Auxiliary Clock Select Status */
#define MC_CGM_AC4_SC        MC_CGM.AC4_SC.R               /* Auxiliary Clock Select Control */
#define MC_CGM_AC4_SS        MC_CGM.AC4_SS.R               /* Auxiliary Clock Select Status */
#define MC_CGM_AC5_SC        MC_CGM.AC5_SC.R               /* Auxiliary Clock Select Control */
#define MC_CGM_AC5_SS        MC_CGM.AC5_SS.R               /* Auxiliary Clock Select Status */
#define MC_CGM_AC6_SC        MC_CGM.AC6_SC.R               /* Auxiliary Clock Select Control */
#define MC_CGM_AC6_SS        MC_CGM.AC6_SS.R               /* Auxiliary Clock Select Status */
#define MC_CGM_AC7_SC        MC_CGM.AC7_SC.R               /* Auxiliary Clock Select Control */
#define MC_CGM_AC7_SS        MC_CGM.AC7_SS.R               /* Auxiliary Clock Select Status */
#define MC_CGM_AC8_SC        MC_CGM.AC8_SC.R               /* Auxiliary Clock Select Control */
#define MC_CGM_AC8_SS        MC_CGM.AC8_SS.R               /* Auxiliary Clock Select Status */
#define MC_CGM_AC9_SC        MC_CGM.AC9_SC.R               /* Auxiliary Clock Select Control */
#define MC_CGM_AC9_SS        MC_CGM.AC9_SS.R               /* Auxiliary Clock Select Status */
#define MC_CGM_AC9_DC0       MC_CGM.AC9_DC0.R              /* Auxiliary Clock Divider Configuration */
#define MC_CGM_AC10_SC       MC_CGM.AC10_SC.R              /* Auxiliary Clock Select Control */
#define MC_CGM_AC10_SS       MC_CGM.AC10_SS.R              /* Auxiliary Clock Select Status */
#define MC_CGM_AC10_DC0      MC_CGM.AC10_DC0.R             /* Auxiliary Clock Divider Configuration */
#define MC_CGM_AC11_SC       MC_CGM.AC11_SC.R              /* Auxiliary Clock Select Control */
#define MC_CGM_AC11_SS       MC_CGM.AC11_SS.R              /* Auxiliary Clock Select Status */
#define MC_CGM_AC12_SC       MC_CGM.AC12_SC.R              /* Auxiliary Clock Select Control */
#define MC_CGM_AC12_SS       MC_CGM.AC12_SS.R              /* Auxiliary Clock Select Status */
#define MC_CGM_AC13_SC       MC_CGM.AC13_SC.R              /* Auxiliary Clock Select Control */
#define MC_CGM_AC13_SS       MC_CGM.AC13_SS.R              /* Auxiliary Clock Select Status */
#define MC_CGM_AC14_SC       MC_CGM.AC14_SC.R              /* Auxiliary Clock Select Control */
#define MC_CGM_AC14_SS       MC_CGM.AC14_SS.R              /* Auxiliary Clock Select Status */
#define MC_CGM_AC14_DC0      MC_CGM.AC14_DC0.R             /* Auxiliary Clock Divider Configuration */
#define MC_CGM_AC15_SC       MC_CGM.AC15_SC.R              /* Auxiliary Clock Select Control */
#define MC_CGM_AC15_SS       MC_CGM.AC15_SS.R              /* Auxiliary Clock Select Status */

/* MC_ME */
#define MC_ME_GS             MC_ME.GS.R                    /* Global Status */
#define MC_ME_MCTL           MC_ME.MCTL.R                  /* Mode Control */
#define MC_ME_ME             MC_ME.ME.R                    /* Mode Enable */
#define MC_ME_IS             MC_ME.IS.R                    /* Interrupt Status */
#define MC_ME_IM             MC_ME.IM.R                    /* Interrupt Mask */
#define MC_ME_IMTS           MC_ME.IMTS.R                  /* Invalid Mode Transition Status */
#define MC_ME_DMTS           MC_ME.DMTS.R                  /* Debug Mode Transition Status */
#define MC_ME_RESET_MC       MC_ME.RESET_MC.R              /* RESET Mode Configuration */
#define MC_ME_DRUN_MC        MC_ME.DRUN_MC.R               /* DRUN Mode Configuration */
#define MC_ME_RUN0_MC        MC_ME.RUN0_MC.R               /* RUN0 Mode Configuration */
#define MC_ME_RUN1_MC        MC_ME.RUN1_MC.R               /* RUN1 Mode Configuration */
#define MC_ME_RUN2_MC        MC_ME.RUN2_MC.R               /* RUN2 Mode Configuration */
#define MC_ME_RUN3_MC        MC_ME.RUN3_MC.R               /* RUN3 Mode Configuration */
#define MC_ME_HALT0_MC       MC_ME.HALT0_MC.R              /* HALT0 Mode Configuration */
#define MC_ME_STOP0_MC       MC_ME.STOP0_MC.R              /* STOP0 Mode Configuration */
#define MC_ME_PS0            MC_ME.PS[0].R                 /* Peripheral Status */
#define MC_ME_PS1            MC_ME.PS[1].R                 /* Peripheral Status */
#define MC_ME_PS2            MC_ME.PS[2].R                 /* Peripheral Status */
#define MC_ME_PS3            MC_ME.PS[3].R                 /* Peripheral Status */
#define MC_ME_PS4            MC_ME.PS[4].R                 /* Peripheral Status */
#define MC_ME_PS5            MC_ME.PS[5].R                 /* Peripheral Status */
#define MC_ME_PS6            MC_ME.PS[6].R                 /* Peripheral Status */
#define MC_ME_PS7            MC_ME.PS[7].R                 /* Peripheral Status */
#define MC_ME_RUN_PC0        MC_ME.RUN_PC[0].R             /* Run Peripheral Configuration */
#define MC_ME_RUN_PC1        MC_ME.RUN_PC[1].R             /* Run Peripheral Configuration */
#define MC_ME_RUN_PC2        MC_ME.RUN_PC[2].R             /* Run Peripheral Configuration */
#define MC_ME_RUN_PC3        MC_ME.RUN_PC[3].R             /* Run Peripheral Configuration */
#define MC_ME_RUN_PC4        MC_ME.RUN_PC[4].R             /* Run Peripheral Configuration */
#define MC_ME_RUN_PC5        MC_ME.RUN_PC[5].R             /* Run Peripheral Configuration */
#define MC_ME_RUN_PC6        MC_ME.RUN_PC[6].R             /* Run Peripheral Configuration */
#define MC_ME_RUN_PC7        MC_ME.RUN_PC[7].R             /* Run Peripheral Configuration */
#define MC_ME_LP_PC0         MC_ME.LP_PC[0].R              /* Low-power peripheral configuration */
#define MC_ME_LP_PC1         MC_ME.LP_PC[1].R              /* Low-power peripheral configuration */
#define MC_ME_LP_PC2         MC_ME.LP_PC[2].R              /* Low-power peripheral configuration */
#define MC_ME_LP_PC3         MC_ME.LP_PC[3].R              /* Low-power peripheral configuration */
#define MC_ME_LP_PC4         MC_ME.LP_PC[4].R              /* Low-power peripheral configuration */
#define MC_ME_LP_PC5         MC_ME.LP_PC[5].R              /* Low-power peripheral configuration */
#define MC_ME_LP_PC6         MC_ME.LP_PC[6].R              /* Low-power peripheral configuration */
#define MC_ME_LP_PC7         MC_ME.LP_PC[7].R              /* Low-power peripheral configuration */
#define MC_ME_PCTL0          MC_ME.PCTL[0].R               /* Peripheral Control */
#define MC_ME_PCTL1          MC_ME.PCTL[1].R               /* Peripheral Control */
#define MC_ME_PCTL2          MC_ME.PCTL[2].R               /* Peripheral Control */
#define MC_ME_PCTL3          MC_ME.PCTL[3].R               /* Peripheral Control */
#define MC_ME_PCTL4          MC_ME.PCTL[4].R               /* Peripheral Control */
#define MC_ME_PCTL5          MC_ME.PCTL[5].R               /* Peripheral Control */
#define MC_ME_PCTL6          MC_ME.PCTL[6].R               /* Peripheral Control */
#define MC_ME_PCTL7          MC_ME.PCTL[7].R               /* Peripheral Control */
#define MC_ME_PCTL8          MC_ME.PCTL[8].R               /* Peripheral Control */
#define MC_ME_PCTL9          MC_ME.PCTL[9].R               /* Peripheral Control */
#define MC_ME_PCTL10         MC_ME.PCTL[10].R              /* Peripheral Control */
#define MC_ME_PCTL11         MC_ME.PCTL[11].R              /* Peripheral Control */
#define MC_ME_PCTL12         MC_ME.PCTL[12].R              /* Peripheral Control */
#define MC_ME_PCTL13         MC_ME.PCTL[13].R              /* Peripheral Control */
#define MC_ME_PCTL14         MC_ME.PCTL[14].R              /* Peripheral Control */
#define MC_ME_PCTL15         MC_ME.PCTL[15].R              /* Peripheral Control */
#define MC_ME_PCTL16         MC_ME.PCTL[16].R              /* Peripheral Control */
#define MC_ME_PCTL17         MC_ME.PCTL[17].R              /* Peripheral Control */
#define MC_ME_PCTL18         MC_ME.PCTL[18].R              /* Peripheral Control */
#define MC_ME_PCTL19         MC_ME.PCTL[19].R              /* Peripheral Control */
#define MC_ME_PCTL20         MC_ME.PCTL[20].R              /* Peripheral Control */
#define MC_ME_PCTL21         MC_ME.PCTL[21].R              /* Peripheral Control */
#define MC_ME_PCTL22         MC_ME.PCTL[22].R              /* Peripheral Control */
#define MC_ME_PCTL23         MC_ME.PCTL[23].R              /* Peripheral Control */
#define MC_ME_PCTL24         MC_ME.PCTL[24].R              /* Peripheral Control */
#define MC_ME_PCTL25         MC_ME.PCTL[25].R              /* Peripheral Control */
#define MC_ME_PCTL26         MC_ME.PCTL[26].R              /* Peripheral Control */
#define MC_ME_PCTL27         MC_ME.PCTL[27].R              /* Peripheral Control */
#define MC_ME_PCTL28         MC_ME.PCTL[28].R              /* Peripheral Control */
#define MC_ME_PCTL29         MC_ME.PCTL[29].R              /* Peripheral Control */
#define MC_ME_PCTL30         MC_ME.PCTL[30].R              /* Peripheral Control */
#define MC_ME_PCTL31         MC_ME.PCTL[31].R              /* Peripheral Control */
#define MC_ME_PCTL32         MC_ME.PCTL[32].R              /* Peripheral Control */
#define MC_ME_PCTL33         MC_ME.PCTL[33].R              /* Peripheral Control */
#define MC_ME_PCTL34         MC_ME.PCTL[34].R              /* Peripheral Control */
#define MC_ME_PCTL35         MC_ME.PCTL[35].R              /* Peripheral Control */
#define MC_ME_PCTL36         MC_ME.PCTL[36].R              /* Peripheral Control */
#define MC_ME_PCTL37         MC_ME.PCTL[37].R              /* Peripheral Control */
#define MC_ME_PCTL38         MC_ME.PCTL[38].R              /* Peripheral Control */
#define MC_ME_PCTL39         MC_ME.PCTL[39].R              /* Peripheral Control */
#define MC_ME_PCTL40         MC_ME.PCTL[40].R              /* Peripheral Control */
#define MC_ME_PCTL41         MC_ME.PCTL[41].R              /* Peripheral Control */
#define MC_ME_PCTL42         MC_ME.PCTL[42].R              /* Peripheral Control */
#define MC_ME_PCTL43         MC_ME.PCTL[43].R              /* Peripheral Control */
#define MC_ME_PCTL44         MC_ME.PCTL[44].R              /* Peripheral Control */
#define MC_ME_PCTL45         MC_ME.PCTL[45].R              /* Peripheral Control */
#define MC_ME_PCTL46         MC_ME.PCTL[46].R              /* Peripheral Control */
#define MC_ME_PCTL47         MC_ME.PCTL[47].R              /* Peripheral Control */
#define MC_ME_PCTL48         MC_ME.PCTL[48].R              /* Peripheral Control */
#define MC_ME_PCTL49         MC_ME.PCTL[49].R              /* Peripheral Control */
#define MC_ME_PCTL50         MC_ME.PCTL[50].R              /* Peripheral Control */
#define MC_ME_PCTL51         MC_ME.PCTL[51].R              /* Peripheral Control */
#define MC_ME_PCTL52         MC_ME.PCTL[52].R              /* Peripheral Control */
#define MC_ME_PCTL53         MC_ME.PCTL[53].R              /* Peripheral Control */
#define MC_ME_PCTL54         MC_ME.PCTL[54].R              /* Peripheral Control */
#define MC_ME_PCTL55         MC_ME.PCTL[55].R              /* Peripheral Control */
#define MC_ME_PCTL56         MC_ME.PCTL[56].R              /* Peripheral Control */
#define MC_ME_PCTL57         MC_ME.PCTL[57].R              /* Peripheral Control */
#define MC_ME_PCTL58         MC_ME.PCTL[58].R              /* Peripheral Control */
#define MC_ME_PCTL59         MC_ME.PCTL[59].R              /* Peripheral Control */
#define MC_ME_PCTL60         MC_ME.PCTL[60].R              /* Peripheral Control */
#define MC_ME_PCTL61         MC_ME.PCTL[61].R              /* Peripheral Control */
#define MC_ME_PCTL62         MC_ME.PCTL[62].R              /* Peripheral Control */
#define MC_ME_PCTL63         MC_ME.PCTL[63].R              /* Peripheral Control */
#define MC_ME_PCTL64         MC_ME.PCTL[64].R              /* Peripheral Control */
#define MC_ME_PCTL65         MC_ME.PCTL[65].R              /* Peripheral Control */
#define MC_ME_PCTL66         MC_ME.PCTL[66].R              /* Peripheral Control */
#define MC_ME_PCTL67         MC_ME.PCTL[67].R              /* Peripheral Control */
#define MC_ME_PCTL68         MC_ME.PCTL[68].R              /* Peripheral Control */
#define MC_ME_PCTL69         MC_ME.PCTL[69].R              /* Peripheral Control */
#define MC_ME_PCTL70         MC_ME.PCTL[70].R              /* Peripheral Control */
#define MC_ME_PCTL71         MC_ME.PCTL[71].R              /* Peripheral Control */
#define MC_ME_PCTL72         MC_ME.PCTL[72].R              /* Peripheral Control */
#define MC_ME_PCTL73         MC_ME.PCTL[73].R              /* Peripheral Control */
#define MC_ME_PCTL74         MC_ME.PCTL[74].R              /* Peripheral Control */
#define MC_ME_PCTL75         MC_ME.PCTL[75].R              /* Peripheral Control */
#define MC_ME_PCTL76         MC_ME.PCTL[76].R              /* Peripheral Control */
#define MC_ME_PCTL77         MC_ME.PCTL[77].R              /* Peripheral Control */
#define MC_ME_PCTL78         MC_ME.PCTL[78].R              /* Peripheral Control */
#define MC_ME_PCTL79         MC_ME.PCTL[79].R              /* Peripheral Control */
#define MC_ME_PCTL80         MC_ME.PCTL[80].R              /* Peripheral Control */
#define MC_ME_PCTL81         MC_ME.PCTL[81].R              /* Peripheral Control */
#define MC_ME_PCTL82         MC_ME.PCTL[82].R              /* Peripheral Control */
#define MC_ME_PCTL83         MC_ME.PCTL[83].R              /* Peripheral Control */
#define MC_ME_PCTL84         MC_ME.PCTL[84].R              /* Peripheral Control */
#define MC_ME_PCTL85         MC_ME.PCTL[85].R              /* Peripheral Control */
#define MC_ME_PCTL86         MC_ME.PCTL[86].R              /* Peripheral Control */
#define MC_ME_PCTL87         MC_ME.PCTL[87].R              /* Peripheral Control */
#define MC_ME_PCTL88         MC_ME.PCTL[88].R              /* Peripheral Control */
#define MC_ME_PCTL89         MC_ME.PCTL[89].R              /* Peripheral Control */
#define MC_ME_PCTL90         MC_ME.PCTL[90].R              /* Peripheral Control */
#define MC_ME_PCTL91         MC_ME.PCTL[91].R              /* Peripheral Control */
#define MC_ME_PCTL92         MC_ME.PCTL[92].R              /* Peripheral Control */
#define MC_ME_PCTL93         MC_ME.PCTL[93].R              /* Peripheral Control */
#define MC_ME_PCTL94         MC_ME.PCTL[94].R              /* Peripheral Control */
#define MC_ME_PCTL95         MC_ME.PCTL[95].R              /* Peripheral Control */
#define MC_ME_PCTL96         MC_ME.PCTL[96].R              /* Peripheral Control */
#define MC_ME_PCTL97         MC_ME.PCTL[97].R              /* Peripheral Control */
#define MC_ME_PCTL98         MC_ME.PCTL[98].R              /* Peripheral Control */
#define MC_ME_PCTL99         MC_ME.PCTL[99].R              /* Peripheral Control */
#define MC_ME_PCTL100        MC_ME.PCTL[100].R             /* Peripheral Control */
#define MC_ME_PCTL101        MC_ME.PCTL[101].R             /* Peripheral Control */
#define MC_ME_PCTL102        MC_ME.PCTL[102].R             /* Peripheral Control */
#define MC_ME_PCTL103        MC_ME.PCTL[103].R             /* Peripheral Control */
#define MC_ME_PCTL104        MC_ME.PCTL[104].R             /* Peripheral Control */
#define MC_ME_PCTL105        MC_ME.PCTL[105].R             /* Peripheral Control */
#define MC_ME_PCTL106        MC_ME.PCTL[106].R             /* Peripheral Control */
#define MC_ME_PCTL107        MC_ME.PCTL[107].R             /* Peripheral Control */
#define MC_ME_PCTL108        MC_ME.PCTL[108].R             /* Peripheral Control */
#define MC_ME_PCTL109        MC_ME.PCTL[109].R             /* Peripheral Control */
#define MC_ME_PCTL110        MC_ME.PCTL[110].R             /* Peripheral Control */
#define MC_ME_PCTL111        MC_ME.PCTL[111].R             /* Peripheral Control */
#define MC_ME_PCTL112        MC_ME.PCTL[112].R             /* Peripheral Control */
#define MC_ME_PCTL113        MC_ME.PCTL[113].R             /* Peripheral Control */
#define MC_ME_PCTL114        MC_ME.PCTL[114].R             /* Peripheral Control */
#define MC_ME_PCTL115        MC_ME.PCTL[115].R             /* Peripheral Control */
#define MC_ME_PCTL116        MC_ME.PCTL[116].R             /* Peripheral Control */
#define MC_ME_PCTL117        MC_ME.PCTL[117].R             /* Peripheral Control */
#define MC_ME_PCTL118        MC_ME.PCTL[118].R             /* Peripheral Control */
#define MC_ME_PCTL119        MC_ME.PCTL[119].R             /* Peripheral Control */
#define MC_ME_PCTL120        MC_ME.PCTL[120].R             /* Peripheral Control */
#define MC_ME_PCTL121        MC_ME.PCTL[121].R             /* Peripheral Control */
#define MC_ME_PCTL122        MC_ME.PCTL[122].R             /* Peripheral Control */
#define MC_ME_PCTL123        MC_ME.PCTL[123].R             /* Peripheral Control */
#define MC_ME_PCTL124        MC_ME.PCTL[124].R             /* Peripheral Control */
#define MC_ME_PCTL125        MC_ME.PCTL[125].R             /* Peripheral Control */
#define MC_ME_PCTL126        MC_ME.PCTL[126].R             /* Peripheral Control */
#define MC_ME_PCTL127        MC_ME.PCTL[127].R             /* Peripheral Control */
#define MC_ME_PCTL128        MC_ME.PCTL[128].R             /* Peripheral Control */
#define MC_ME_PCTL129        MC_ME.PCTL[129].R             /* Peripheral Control */
#define MC_ME_PCTL130        MC_ME.PCTL[130].R             /* Peripheral Control */
#define MC_ME_PCTL131        MC_ME.PCTL[131].R             /* Peripheral Control */
#define MC_ME_PCTL132        MC_ME.PCTL[132].R             /* Peripheral Control */
#define MC_ME_PCTL133        MC_ME.PCTL[133].R             /* Peripheral Control */
#define MC_ME_PCTL134        MC_ME.PCTL[134].R             /* Peripheral Control */
#define MC_ME_PCTL135        MC_ME.PCTL[135].R             /* Peripheral Control */
#define MC_ME_PCTL136        MC_ME.PCTL[136].R             /* Peripheral Control */
#define MC_ME_PCTL137        MC_ME.PCTL[137].R             /* Peripheral Control */
#define MC_ME_PCTL138        MC_ME.PCTL[138].R             /* Peripheral Control */
#define MC_ME_PCTL139        MC_ME.PCTL[139].R             /* Peripheral Control */
#define MC_ME_PCTL140        MC_ME.PCTL[140].R             /* Peripheral Control */
#define MC_ME_PCTL141        MC_ME.PCTL[141].R             /* Peripheral Control */
#define MC_ME_PCTL142        MC_ME.PCTL[142].R             /* Peripheral Control */
#define MC_ME_PCTL143        MC_ME.PCTL[143].R             /* Peripheral Control */
#define MC_ME_PCTL144        MC_ME.PCTL[144].R             /* Peripheral Control */
#define MC_ME_PCTL145        MC_ME.PCTL[145].R             /* Peripheral Control */
#define MC_ME_PCTL146        MC_ME.PCTL[146].R             /* Peripheral Control */
#define MC_ME_PCTL147        MC_ME.PCTL[147].R             /* Peripheral Control */
#define MC_ME_PCTL148        MC_ME.PCTL[148].R             /* Peripheral Control */
#define MC_ME_PCTL149        MC_ME.PCTL[149].R             /* Peripheral Control */
#define MC_ME_PCTL150        MC_ME.PCTL[150].R             /* Peripheral Control */
#define MC_ME_PCTL151        MC_ME.PCTL[151].R             /* Peripheral Control */
#define MC_ME_PCTL152        MC_ME.PCTL[152].R             /* Peripheral Control */
#define MC_ME_PCTL153        MC_ME.PCTL[153].R             /* Peripheral Control */
#define MC_ME_PCTL154        MC_ME.PCTL[154].R             /* Peripheral Control */
#define MC_ME_PCTL155        MC_ME.PCTL[155].R             /* Peripheral Control */
#define MC_ME_PCTL156        MC_ME.PCTL[156].R             /* Peripheral Control */
#define MC_ME_PCTL157        MC_ME.PCTL[157].R             /* Peripheral Control */
#define MC_ME_PCTL158        MC_ME.PCTL[158].R             /* Peripheral Control */
#define MC_ME_PCTL159        MC_ME.PCTL[159].R             /* Peripheral Control */
#define MC_ME_PCTL160        MC_ME.PCTL[160].R             /* Peripheral Control */
#define MC_ME_PCTL161        MC_ME.PCTL[161].R             /* Peripheral Control */
#define MC_ME_PCTL162        MC_ME.PCTL[162].R             /* Peripheral Control */
#define MC_ME_PCTL163        MC_ME.PCTL[163].R             /* Peripheral Control */
#define MC_ME_PCTL164        MC_ME.PCTL[164].R             /* Peripheral Control */
#define MC_ME_PCTL165        MC_ME.PCTL[165].R             /* Peripheral Control */
#define MC_ME_PCTL166        MC_ME.PCTL[166].R             /* Peripheral Control */
#define MC_ME_PCTL167        MC_ME.PCTL[167].R             /* Peripheral Control */
#define MC_ME_PCTL168        MC_ME.PCTL[168].R             /* Peripheral Control */
#define MC_ME_PCTL169        MC_ME.PCTL[169].R             /* Peripheral Control */
#define MC_ME_PCTL170        MC_ME.PCTL[170].R             /* Peripheral Control */
#define MC_ME_PCTL171        MC_ME.PCTL[171].R             /* Peripheral Control */
#define MC_ME_PCTL172        MC_ME.PCTL[172].R             /* Peripheral Control */
#define MC_ME_PCTL173        MC_ME.PCTL[173].R             /* Peripheral Control */
#define MC_ME_PCTL174        MC_ME.PCTL[174].R             /* Peripheral Control */
#define MC_ME_PCTL175        MC_ME.PCTL[175].R             /* Peripheral Control */
#define MC_ME_PCTL176        MC_ME.PCTL[176].R             /* Peripheral Control */
#define MC_ME_PCTL177        MC_ME.PCTL[177].R             /* Peripheral Control */
#define MC_ME_PCTL178        MC_ME.PCTL[178].R             /* Peripheral Control */
#define MC_ME_PCTL179        MC_ME.PCTL[179].R             /* Peripheral Control */
#define MC_ME_PCTL180        MC_ME.PCTL[180].R             /* Peripheral Control */
#define MC_ME_PCTL181        MC_ME.PCTL[181].R             /* Peripheral Control */
#define MC_ME_PCTL182        MC_ME.PCTL[182].R             /* Peripheral Control */
#define MC_ME_PCTL183        MC_ME.PCTL[183].R             /* Peripheral Control */
#define MC_ME_PCTL184        MC_ME.PCTL[184].R             /* Peripheral Control */
#define MC_ME_PCTL185        MC_ME.PCTL[185].R             /* Peripheral Control */
#define MC_ME_PCTL186        MC_ME.PCTL[186].R             /* Peripheral Control */
#define MC_ME_PCTL187        MC_ME.PCTL[187].R             /* Peripheral Control */
#define MC_ME_PCTL188        MC_ME.PCTL[188].R             /* Peripheral Control */
#define MC_ME_PCTL189        MC_ME.PCTL[189].R             /* Peripheral Control */
#define MC_ME_PCTL190        MC_ME.PCTL[190].R             /* Peripheral Control */
#define MC_ME_PCTL191        MC_ME.PCTL[191].R             /* Peripheral Control */
#define MC_ME_PCTL192        MC_ME.PCTL[192].R             /* Peripheral Control */
#define MC_ME_PCTL193        MC_ME.PCTL[193].R             /* Peripheral Control */
#define MC_ME_PCTL194        MC_ME.PCTL[194].R             /* Peripheral Control */
#define MC_ME_PCTL195        MC_ME.PCTL[195].R             /* Peripheral Control */
#define MC_ME_PCTL196        MC_ME.PCTL[196].R             /* Peripheral Control */
#define MC_ME_PCTL197        MC_ME.PCTL[197].R             /* Peripheral Control */
#define MC_ME_PCTL198        MC_ME.PCTL[198].R             /* Peripheral Control */
#define MC_ME_PCTL199        MC_ME.PCTL[199].R             /* Peripheral Control */
#define MC_ME_PCTL200        MC_ME.PCTL[200].R             /* Peripheral Control */
#define MC_ME_PCTL201        MC_ME.PCTL[201].R             /* Peripheral Control */
#define MC_ME_PCTL202        MC_ME.PCTL[202].R             /* Peripheral Control */
#define MC_ME_PCTL203        MC_ME.PCTL[203].R             /* Peripheral Control */
#define MC_ME_PCTL204        MC_ME.PCTL[204].R             /* Peripheral Control */
#define MC_ME_PCTL205        MC_ME.PCTL[205].R             /* Peripheral Control */
#define MC_ME_PCTL206        MC_ME.PCTL[206].R             /* Peripheral Control */
#define MC_ME_PCTL207        MC_ME.PCTL[207].R             /* Peripheral Control */
#define MC_ME_PCTL208        MC_ME.PCTL[208].R             /* Peripheral Control */
#define MC_ME_PCTL209        MC_ME.PCTL[209].R             /* Peripheral Control */
#define MC_ME_PCTL210        MC_ME.PCTL[210].R             /* Peripheral Control */
#define MC_ME_PCTL211        MC_ME.PCTL[211].R             /* Peripheral Control */
#define MC_ME_PCTL212        MC_ME.PCTL[212].R             /* Peripheral Control */
#define MC_ME_PCTL213        MC_ME.PCTL[213].R             /* Peripheral Control */
#define MC_ME_PCTL214        MC_ME.PCTL[214].R             /* Peripheral Control */
#define MC_ME_PCTL215        MC_ME.PCTL[215].R             /* Peripheral Control */
#define MC_ME_PCTL216        MC_ME.PCTL[216].R             /* Peripheral Control */
#define MC_ME_PCTL217        MC_ME.PCTL[217].R             /* Peripheral Control */
#define MC_ME_PCTL218        MC_ME.PCTL[218].R             /* Peripheral Control */
#define MC_ME_PCTL219        MC_ME.PCTL[219].R             /* Peripheral Control */
#define MC_ME_PCTL220        MC_ME.PCTL[220].R             /* Peripheral Control */
#define MC_ME_PCTL221        MC_ME.PCTL[221].R             /* Peripheral Control */
#define MC_ME_PCTL222        MC_ME.PCTL[222].R             /* Peripheral Control */
#define MC_ME_PCTL223        MC_ME.PCTL[223].R             /* Peripheral Control */
#define MC_ME_PCTL224        MC_ME.PCTL[224].R             /* Peripheral Control */
#define MC_ME_PCTL225        MC_ME.PCTL[225].R             /* Peripheral Control */
#define MC_ME_PCTL226        MC_ME.PCTL[226].R             /* Peripheral Control */
#define MC_ME_PCTL227        MC_ME.PCTL[227].R             /* Peripheral Control */
#define MC_ME_PCTL228        MC_ME.PCTL[228].R             /* Peripheral Control */
#define MC_ME_PCTL229        MC_ME.PCTL[229].R             /* Peripheral Control */
#define MC_ME_PCTL230        MC_ME.PCTL[230].R             /* Peripheral Control */
#define MC_ME_PCTL231        MC_ME.PCTL[231].R             /* Peripheral Control */
#define MC_ME_PCTL232        MC_ME.PCTL[232].R             /* Peripheral Control */
#define MC_ME_PCTL233        MC_ME.PCTL[233].R             /* Peripheral Control */
#define MC_ME_PCTL234        MC_ME.PCTL[234].R             /* Peripheral Control */
#define MC_ME_PCTL235        MC_ME.PCTL[235].R             /* Peripheral Control */
#define MC_ME_PCTL236        MC_ME.PCTL[236].R             /* Peripheral Control */
#define MC_ME_PCTL237        MC_ME.PCTL[237].R             /* Peripheral Control */
#define MC_ME_PCTL238        MC_ME.PCTL[238].R             /* Peripheral Control */
#define MC_ME_PCTL239        MC_ME.PCTL[239].R             /* Peripheral Control */
#define MC_ME_PCTL240        MC_ME.PCTL[240].R             /* Peripheral Control */
#define MC_ME_PCTL241        MC_ME.PCTL[241].R             /* Peripheral Control */
#define MC_ME_PCTL242        MC_ME.PCTL[242].R             /* Peripheral Control */
#define MC_ME_PCTL243        MC_ME.PCTL[243].R             /* Peripheral Control */
#define MC_ME_PCTL244        MC_ME.PCTL[244].R             /* Peripheral Control */
#define MC_ME_PCTL245        MC_ME.PCTL[245].R             /* Peripheral Control */
#define MC_ME_PCTL246        MC_ME.PCTL[246].R             /* Peripheral Control */
#define MC_ME_PCTL247        MC_ME.PCTL[247].R             /* Peripheral Control */
#define MC_ME_PCTL248        MC_ME.PCTL[248].R             /* Peripheral Control */
#define MC_ME_PCTL249        MC_ME.PCTL[249].R             /* Peripheral Control */
#define MC_ME_PCTL250        MC_ME.PCTL[250].R             /* Peripheral Control */
#define MC_ME_PCTL251        MC_ME.PCTL[251].R             /* Peripheral Control */
#define MC_ME_PCTL252        MC_ME.PCTL[252].R             /* Peripheral Control */
#define MC_ME_PCTL253        MC_ME.PCTL[253].R             /* Peripheral Control */
#define MC_ME_PCTL254        MC_ME.PCTL[254].R             /* Peripheral Control */
#define MC_ME_PCTL255        MC_ME.PCTL[255].R             /* Peripheral Control */
#define MC_ME_CS             MC_ME.CS.R                    /* Core Status */
#define MC_ME_CCTL1          MC_ME.CCTL1.R                 /* Core Control */
#define MC_ME_CCTL2          MC_ME.CCTL2.R                 /* Core Control */
#define MC_ME_CCTL3          MC_ME.CCTL3.R                 /* Core Control */
#define MC_ME_CADDR1         MC_ME.CADDR1.R                /* Core Address */
#define MC_ME_CADDR2         MC_ME.CADDR2.R                /* Core Address */
#define MC_ME_CADDR3         MC_ME.CADDR3.R                /* Core Address */

/* MC_RGM */
#define MC_RGM_DES           MC_RGM.DES.R                  /* Destructive Event Status */
#define MC_RGM_DBRE          MC_RGM.DBRE.R                 /* Destructive Bidirectional Reset Enable */
#define MC_RGM_FES           MC_RGM.FES.R                  /* Functional Event Status */
#define MC_RGM_FERD          MC_RGM.FERD.R                 /* Functional Event Reset Disable */
#define MC_RGM_FEAR          MC_RGM.FEAR.R                 /* Functional Event Alternate Request */
#define MC_RGM_FBRE          MC_RGM.FBRE.R                 /* Functional Bidirectional Reset Enable */
#define MC_RGM_FREC          MC_RGM.FREC.R                 /* Functional Reset Escalation Counter */
#define MC_RGM_FRET          MC_RGM.FRET.R                 /* Functional Reset Escalation Threshold */
#define MC_RGM_DRET          MC_RGM.DRET.R                 /* Destructive Reset Escalation Threshold */

/* MEMU */
#define MEMU_CTRL            MEMU.CTRL.R                   /* Control */
#define MEMU_ERR_FLAG        MEMU.ERR_FLAG.R               /* Error Flag */
#define MEMU_DEBUG           MEMU.DEBUG.R                  /* Debug */
#define MEMU_SYS_RAM_CERR_STS0 MEMU.SYS_RAM_CERR[0].STS.R  /* System RAM Correctable Error Reporting Table Status */
#define MEMU_SYS_RAM_CERR_ADDR0 MEMU.SYS_RAM_CERR[0].ADDR.R /* System RAM Correctable Error Reporting Table Address */
#define MEMU_SYS_RAM_CERR_STS1 MEMU.SYS_RAM_CERR[1].STS.R  /* System RAM Correctable Error Reporting Table Status */
#define MEMU_SYS_RAM_CERR_ADDR1 MEMU.SYS_RAM_CERR[1].ADDR.R /* System RAM Correctable Error Reporting Table Address */
#define MEMU_SYS_RAM_CERR_STS2 MEMU.SYS_RAM_CERR[2].STS.R  /* System RAM Correctable Error Reporting Table Status */
#define MEMU_SYS_RAM_CERR_ADDR2 MEMU.SYS_RAM_CERR[2].ADDR.R /* System RAM Correctable Error Reporting Table Address */
#define MEMU_SYS_RAM_CERR_STS3 MEMU.SYS_RAM_CERR[3].STS.R  /* System RAM Correctable Error Reporting Table Status */
#define MEMU_SYS_RAM_CERR_ADDR3 MEMU.SYS_RAM_CERR[3].ADDR.R /* System RAM Correctable Error Reporting Table Address */
#define MEMU_SYS_RAM_CERR_STS4 MEMU.SYS_RAM_CERR[4].STS.R  /* System RAM Correctable Error Reporting Table Status */
#define MEMU_SYS_RAM_CERR_ADDR4 MEMU.SYS_RAM_CERR[4].ADDR.R /* System RAM Correctable Error Reporting Table Address */
#define MEMU_SYS_RAM_CERR_STS5 MEMU.SYS_RAM_CERR[5].STS.R  /* System RAM Correctable Error Reporting Table Status */
#define MEMU_SYS_RAM_CERR_ADDR5 MEMU.SYS_RAM_CERR[5].ADDR.R /* System RAM Correctable Error Reporting Table Address */
#define MEMU_SYS_RAM_CERR_STS6 MEMU.SYS_RAM_CERR[6].STS.R  /* System RAM Correctable Error Reporting Table Status */
#define MEMU_SYS_RAM_CERR_ADDR6 MEMU.SYS_RAM_CERR[6].ADDR.R /* System RAM Correctable Error Reporting Table Address */
#define MEMU_SYS_RAM_CERR_STS7 MEMU.SYS_RAM_CERR[7].STS.R  /* System RAM Correctable Error Reporting Table Status */
#define MEMU_SYS_RAM_CERR_ADDR7 MEMU.SYS_RAM_CERR[7].ADDR.R /* System RAM Correctable Error Reporting Table Address */
#define MEMU_SYS_RAM_CERR_STS8 MEMU.SYS_RAM_CERR[8].STS.R  /* System RAM Correctable Error Reporting Table Status */
#define MEMU_SYS_RAM_CERR_ADDR8 MEMU.SYS_RAM_CERR[8].ADDR.R /* System RAM Correctable Error Reporting Table Address */
#define MEMU_SYS_RAM_CERR_STS9 MEMU.SYS_RAM_CERR[9].STS.R  /* System RAM Correctable Error Reporting Table Status */
#define MEMU_SYS_RAM_CERR_ADDR9 MEMU.SYS_RAM_CERR[9].ADDR.R /* System RAM Correctable Error Reporting Table Address */
#define MEMU_SYS_RAM_UNCERR_STS MEMU.SYS_RAM_UNCERR_STS.R  /* System RAM Uncorrectable Error Reporting Table Status */
#define MEMU_SYS_RAM_UNCERR_ADDR MEMU.SYS_RAM_UNCERR_ADDR.R /* System RAM Uncorrectable Error Reporting Table Address */
#define MEMU_SYS_RAM_OFLW0   MEMU.SYS_RAM_OFLW[0].R        /* System RAM Concurrent Overflow */
#define MEMU_SYS_RAM_OFLW1   MEMU.SYS_RAM_OFLW[1].R        /* System RAM Concurrent Overflow */
#define MEMU_PERIPH_RAM_CERR_STS0 MEMU.PERIPH_RAM_CERR[0].STS.R /* Peripheral RAM Correctable Error Reporting Table Status */
#define MEMU_PERIPH_RAM_CERR_ADDR0 MEMU.PERIPH_RAM_CERR[0].ADDR.R /* Peripheral RAM Correctable Error Reporting Table Address */
#define MEMU_PERIPH_RAM_CERR_STS1 MEMU.PERIPH_RAM_CERR[1].STS.R /* Peripheral RAM Correctable Error Reporting Table Status */
#define MEMU_PERIPH_RAM_CERR_ADDR1 MEMU.PERIPH_RAM_CERR[1].ADDR.R /* Peripheral RAM Correctable Error Reporting Table Address */
#define MEMU_PERIPH_RAM_UNCERR_STS MEMU.PERIPH_RAM_UNCERR_STS.R /* Peripheral RAM Uncorrectable Error Reporting Table Status */
#define MEMU_PERIPH_RAM_UNCERR_ADDR MEMU.PERIPH_RAM_UNCERR_ADDR.R /* Peripheral RAM Uncorrectable Error Reporting Table Address */
#define MEMU_PERIPH_RAM_OFLW0 MEMU.PERIPH_RAM_OFLW[0].R    /* Peripheral RAM Concurrent Overflow */

/* OCOTP */
#define OCOTP_CTRL_SYS       OCOTP.CTRL_SYS.R              /* System master's control */
#define OCOTP_ADDR_SYS       OCOTP.ADDR_SYS.R              /* System master's eFuse address for read or write operation */
#define OCOTP_WRDATA_SYS     OCOTP.WRDATA_SYS.R            /* System master's eFuse write data */
#define OCOTP_RDATA_SYS      OCOTP.RDATA_SYS.R             /* System master's eFuse read data */
#define OCOTP_CTRL_FBX       OCOTP.CTRL_FBX.R              /* FBXC control */
#define OCOTP_GPR0           OCOTP.GPR[0].R                /* General purpose */
#define OCOTP_GPR1           OCOTP.GPR[1].R                /* General purpose */
#define OCOTP_STATUS_SYS     OCOTP.STATUS_SYS.R            /* System master's access status */
#define OCOTP_VERSION        OCOTP.VERSION.R               /* OCOTP design version */
#define OCOTP_SEC0           OCOTP.SEC[0].R                /* ECC status for single-bit ECC error */
#define OCOTP_SEC1           OCOTP.SEC[1].R                /* ECC status for single-bit ECC error */
#define OCOTP_SEC2           OCOTP.SEC[2].R                /* ECC status for single-bit ECC error */
#define OCOTP_SEC3           OCOTP.SEC[3].R                /* ECC status for single-bit ECC error */
#define OCOTP_SEC4           OCOTP.SEC[4].R                /* ECC status for single-bit ECC error */
#define OCOTP_SEC5           OCOTP.SEC[5].R                /* ECC status for single-bit ECC error */
#define OCOTP_DED0           OCOTP.DED[0].R                /* ECC status for double-bit ECC error */
#define OCOTP_DED1           OCOTP.DED[1].R                /* ECC status for double-bit ECC error */
#define OCOTP_DED2           OCOTP.DED[2].R                /* ECC status for double-bit ECC error */
#define OCOTP_DED3           OCOTP.DED[3].R                /* ECC status for double-bit ECC error */
#define OCOTP_DED4           OCOTP.DED[4].R                /* ECC status for double-bit ECC error */
#define OCOTP_DED5           OCOTP.DED[5].R                /* ECC status for double-bit ECC error */
#define OCOTP_ERR_INJCTR     OCOTP.ERR_INJCTR.R            /* ECC error injector */
#define OCOTP_FBXC_REGS0     OCOTP.FBXC_REGS[0].R          /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS1     OCOTP.FBXC_REGS[1].R          /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS2     OCOTP.FBXC_REGS[2].R          /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS3     OCOTP.FBXC_REGS[3].R          /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS4     OCOTP.FBXC_REGS[4].R          /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS5     OCOTP.FBXC_REGS[5].R          /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS6     OCOTP.FBXC_REGS[6].R          /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS7     OCOTP.FBXC_REGS[7].R          /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS8     OCOTP.FBXC_REGS[8].R          /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS9     OCOTP.FBXC_REGS[9].R          /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS10    OCOTP.FBXC_REGS[10].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS11    OCOTP.FBXC_REGS[11].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS12    OCOTP.FBXC_REGS[12].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS13    OCOTP.FBXC_REGS[13].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS14    OCOTP.FBXC_REGS[14].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS15    OCOTP.FBXC_REGS[15].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS16    OCOTP.FBXC_REGS[16].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS17    OCOTP.FBXC_REGS[17].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS18    OCOTP.FBXC_REGS[18].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS19    OCOTP.FBXC_REGS[19].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS20    OCOTP.FBXC_REGS[20].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS21    OCOTP.FBXC_REGS[21].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS22    OCOTP.FBXC_REGS[22].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS23    OCOTP.FBXC_REGS[23].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS24    OCOTP.FBXC_REGS[24].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS25    OCOTP.FBXC_REGS[25].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS26    OCOTP.FBXC_REGS[26].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS27    OCOTP.FBXC_REGS[27].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS28    OCOTP.FBXC_REGS[28].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS29    OCOTP.FBXC_REGS[29].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS30    OCOTP.FBXC_REGS[30].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS31    OCOTP.FBXC_REGS[31].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS32    OCOTP.FBXC_REGS[32].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS33    OCOTP.FBXC_REGS[33].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS34    OCOTP.FBXC_REGS[34].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS35    OCOTP.FBXC_REGS[35].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS36    OCOTP.FBXC_REGS[36].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS37    OCOTP.FBXC_REGS[37].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS38    OCOTP.FBXC_REGS[38].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS39    OCOTP.FBXC_REGS[39].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS40    OCOTP.FBXC_REGS[40].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS41    OCOTP.FBXC_REGS[41].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS42    OCOTP.FBXC_REGS[42].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS43    OCOTP.FBXC_REGS[43].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS44    OCOTP.FBXC_REGS[44].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS45    OCOTP.FBXC_REGS[45].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS46    OCOTP.FBXC_REGS[46].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS47    OCOTP.FBXC_REGS[47].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS48    OCOTP.FBXC_REGS[48].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS49    OCOTP.FBXC_REGS[49].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS50    OCOTP.FBXC_REGS[50].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS51    OCOTP.FBXC_REGS[51].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS52    OCOTP.FBXC_REGS[52].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS53    OCOTP.FBXC_REGS[53].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS54    OCOTP.FBXC_REGS[54].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS55    OCOTP.FBXC_REGS[55].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS56    OCOTP.FBXC_REGS[56].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS57    OCOTP.FBXC_REGS[57].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS58    OCOTP.FBXC_REGS[58].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS59    OCOTP.FBXC_REGS[59].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS60    OCOTP.FBXC_REGS[60].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS61    OCOTP.FBXC_REGS[61].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS62    OCOTP.FBXC_REGS[62].R         /* Memory-mapped to FBXC register space */
#define OCOTP_FBXC_REGS63    OCOTP.FBXC_REGS[63].R         /* Memory-mapped to FBXC register space */
#define OCOTP_SHADOWS0       OCOTP.SHADOWS[0].R            /* Shadow */
#define OCOTP_SHADOWS1       OCOTP.SHADOWS[1].R            /* Shadow */
#define OCOTP_SHADOWS2       OCOTP.SHADOWS[2].R            /* Shadow */
#define OCOTP_SHADOWS3       OCOTP.SHADOWS[3].R            /* Shadow */
#define OCOTP_SHADOWS4       OCOTP.SHADOWS[4].R            /* Shadow */
#define OCOTP_SHADOWS5       OCOTP.SHADOWS[5].R            /* Shadow */
#define OCOTP_SHADOWS6       OCOTP.SHADOWS[6].R            /* Shadow */
#define OCOTP_SHADOWS7       OCOTP.SHADOWS[7].R            /* Shadow */
#define OCOTP_SHADOWS8       OCOTP.SHADOWS[8].R            /* Shadow */
#define OCOTP_SHADOWS9       OCOTP.SHADOWS[9].R            /* Shadow */
#define OCOTP_SHADOWS10      OCOTP.SHADOWS[10].R           /* Shadow */
#define OCOTP_SHADOWS11      OCOTP.SHADOWS[11].R           /* Shadow */
#define OCOTP_SHADOWS12      OCOTP.SHADOWS[12].R           /* Shadow */
#define OCOTP_SHADOWS13      OCOTP.SHADOWS[13].R           /* Shadow */
#define OCOTP_SHADOWS14      OCOTP.SHADOWS[14].R           /* Shadow */
#define OCOTP_SHADOWS15      OCOTP.SHADOWS[15].R           /* Shadow */
#define OCOTP_SHADOWS16      OCOTP.SHADOWS[16].R           /* Shadow */
#define OCOTP_SHADOWS17      OCOTP.SHADOWS[17].R           /* Shadow */
#define OCOTP_SHADOWS18      OCOTP.SHADOWS[18].R           /* Shadow */
#define OCOTP_SHADOWS19      OCOTP.SHADOWS[19].R           /* Shadow */
#define OCOTP_SHADOWS20      OCOTP.SHADOWS[20].R           /* Shadow */
#define OCOTP_SHADOWS21      OCOTP.SHADOWS[21].R           /* Shadow */
#define OCOTP_SHADOWS22      OCOTP.SHADOWS[22].R           /* Shadow */
#define OCOTP_SHADOWS23      OCOTP.SHADOWS[23].R           /* Shadow */
#define OCOTP_SHADOWS24      OCOTP.SHADOWS[24].R           /* Shadow */
#define OCOTP_SHADOWS25      OCOTP.SHADOWS[25].R           /* Shadow */
#define OCOTP_SHADOWS26      OCOTP.SHADOWS[26].R           /* Shadow */
#define OCOTP_SHADOWS27      OCOTP.SHADOWS[27].R           /* Shadow */
#define OCOTP_SHADOWS28      OCOTP.SHADOWS[28].R           /* Shadow */
#define OCOTP_SHADOWS29      OCOTP.SHADOWS[29].R           /* Shadow */
#define OCOTP_SHADOWS30      OCOTP.SHADOWS[30].R           /* Shadow */
#define OCOTP_SHADOWS31      OCOTP.SHADOWS[31].R           /* Shadow */
#define OCOTP_SHADOWS32      OCOTP.SHADOWS[32].R           /* Shadow */
#define OCOTP_SHADOWS33      OCOTP.SHADOWS[33].R           /* Shadow */
#define OCOTP_SHADOWS34      OCOTP.SHADOWS[34].R           /* Shadow */
#define OCOTP_SHADOWS35      OCOTP.SHADOWS[35].R           /* Shadow */
#define OCOTP_SHADOWS36      OCOTP.SHADOWS[36].R           /* Shadow */
#define OCOTP_SHADOWS37      OCOTP.SHADOWS[37].R           /* Shadow */
#define OCOTP_SHADOWS38      OCOTP.SHADOWS[38].R           /* Shadow */
#define OCOTP_SHADOWS39      OCOTP.SHADOWS[39].R           /* Shadow */
#define OCOTP_SHADOWS40      OCOTP.SHADOWS[40].R           /* Shadow */
#define OCOTP_SHADOWS41      OCOTP.SHADOWS[41].R           /* Shadow */
#define OCOTP_SHADOWS42      OCOTP.SHADOWS[42].R           /* Shadow */
#define OCOTP_SHADOWS43      OCOTP.SHADOWS[43].R           /* Shadow */
#define OCOTP_SHADOWS44      OCOTP.SHADOWS[44].R           /* Shadow */
#define OCOTP_SHADOWS45      OCOTP.SHADOWS[45].R           /* Shadow */
#define OCOTP_SHADOWS46      OCOTP.SHADOWS[46].R           /* Shadow */
#define OCOTP_SHADOWS47      OCOTP.SHADOWS[47].R           /* Shadow */
#define OCOTP_SHADOWS48      OCOTP.SHADOWS[48].R           /* Shadow */
#define OCOTP_SHADOWS49      OCOTP.SHADOWS[49].R           /* Shadow */
#define OCOTP_SHADOWS50      OCOTP.SHADOWS[50].R           /* Shadow */
#define OCOTP_SHADOWS51      OCOTP.SHADOWS[51].R           /* Shadow */
#define OCOTP_SHADOWS52      OCOTP.SHADOWS[52].R           /* Shadow */
#define OCOTP_SHADOWS53      OCOTP.SHADOWS[53].R           /* Shadow */
#define OCOTP_SHADOWS54      OCOTP.SHADOWS[54].R           /* Shadow */
#define OCOTP_SHADOWS55      OCOTP.SHADOWS[55].R           /* Shadow */
#define OCOTP_SHADOWS56      OCOTP.SHADOWS[56].R           /* Shadow */
#define OCOTP_SHADOWS57      OCOTP.SHADOWS[57].R           /* Shadow */
#define OCOTP_SHADOWS58      OCOTP.SHADOWS[58].R           /* Shadow */
#define OCOTP_SHADOWS59      OCOTP.SHADOWS[59].R           /* Shadow */
#define OCOTP_SHADOWS60      OCOTP.SHADOWS[60].R           /* Shadow */
#define OCOTP_SHADOWS61      OCOTP.SHADOWS[61].R           /* Shadow */
#define OCOTP_SHADOWS62      OCOTP.SHADOWS[62].R           /* Shadow */
#define OCOTP_SHADOWS63      OCOTP.SHADOWS[63].R           /* Shadow */
#define OCOTP_SHADOWS64      OCOTP.SHADOWS[64].R           /* Shadow */
#define OCOTP_SHADOWS65      OCOTP.SHADOWS[65].R           /* Shadow */
#define OCOTP_SHADOWS66      OCOTP.SHADOWS[66].R           /* Shadow */
#define OCOTP_SHADOWS67      OCOTP.SHADOWS[67].R           /* Shadow */
#define OCOTP_SHADOWS68      OCOTP.SHADOWS[68].R           /* Shadow */
#define OCOTP_SHADOWS69      OCOTP.SHADOWS[69].R           /* Shadow */
#define OCOTP_SHADOWS70      OCOTP.SHADOWS[70].R           /* Shadow */
#define OCOTP_SHADOWS71      OCOTP.SHADOWS[71].R           /* Shadow */
#define OCOTP_SHADOWS72      OCOTP.SHADOWS[72].R           /* Shadow */
#define OCOTP_SHADOWS73      OCOTP.SHADOWS[73].R           /* Shadow */
#define OCOTP_SHADOWS74      OCOTP.SHADOWS[74].R           /* Shadow */
#define OCOTP_SHADOWS75      OCOTP.SHADOWS[75].R           /* Shadow */
#define OCOTP_SHADOWS76      OCOTP.SHADOWS[76].R           /* Shadow */
#define OCOTP_SHADOWS77      OCOTP.SHADOWS[77].R           /* Shadow */
#define OCOTP_SHADOWS78      OCOTP.SHADOWS[78].R           /* Shadow */
#define OCOTP_SHADOWS79      OCOTP.SHADOWS[79].R           /* Shadow */
#define OCOTP_SHADOWS80      OCOTP.SHADOWS[80].R           /* Shadow */
#define OCOTP_SHADOWS81      OCOTP.SHADOWS[81].R           /* Shadow */
#define OCOTP_SHADOWS82      OCOTP.SHADOWS[82].R           /* Shadow */
#define OCOTP_SHADOWS83      OCOTP.SHADOWS[83].R           /* Shadow */
#define OCOTP_SHADOWS84      OCOTP.SHADOWS[84].R           /* Shadow */
#define OCOTP_SHADOWS85      OCOTP.SHADOWS[85].R           /* Shadow */
#define OCOTP_SHADOWS86      OCOTP.SHADOWS[86].R           /* Shadow */
#define OCOTP_SHADOWS87      OCOTP.SHADOWS[87].R           /* Shadow */
#define OCOTP_SHADOWS88      OCOTP.SHADOWS[88].R           /* Shadow */
#define OCOTP_SHADOWS89      OCOTP.SHADOWS[89].R           /* Shadow */
#define OCOTP_SHADOWS90      OCOTP.SHADOWS[90].R           /* Shadow */
#define OCOTP_SHADOWS91      OCOTP.SHADOWS[91].R           /* Shadow */
#define OCOTP_SHADOWS92      OCOTP.SHADOWS[92].R           /* Shadow */
#define OCOTP_SHADOWS93      OCOTP.SHADOWS[93].R           /* Shadow */
#define OCOTP_SHADOWS94      OCOTP.SHADOWS[94].R           /* Shadow */
#define OCOTP_SHADOWS95      OCOTP.SHADOWS[95].R           /* Shadow */
#define OCOTP_SHADOWS96      OCOTP.SHADOWS[96].R           /* Shadow */
#define OCOTP_SHADOWS97      OCOTP.SHADOWS[97].R           /* Shadow */
#define OCOTP_SHADOWS98      OCOTP.SHADOWS[98].R           /* Shadow */
#define OCOTP_SHADOWS99      OCOTP.SHADOWS[99].R           /* Shadow */
#define OCOTP_SHADOWS100     OCOTP.SHADOWS[100].R          /* Shadow */
#define OCOTP_SHADOWS101     OCOTP.SHADOWS[101].R          /* Shadow */
#define OCOTP_SHADOWS102     OCOTP.SHADOWS[102].R          /* Shadow */
#define OCOTP_SHADOWS103     OCOTP.SHADOWS[103].R          /* Shadow */
#define OCOTP_SHADOWS104     OCOTP.SHADOWS[104].R          /* Shadow */
#define OCOTP_SHADOWS105     OCOTP.SHADOWS[105].R          /* Shadow */
#define OCOTP_SHADOWS106     OCOTP.SHADOWS[106].R          /* Shadow */
#define OCOTP_SHADOWS107     OCOTP.SHADOWS[107].R          /* Shadow */
#define OCOTP_SHADOWS108     OCOTP.SHADOWS[108].R          /* Shadow */
#define OCOTP_SHADOWS109     OCOTP.SHADOWS[109].R          /* Shadow */
#define OCOTP_SHADOWS110     OCOTP.SHADOWS[110].R          /* Shadow */
#define OCOTP_SHADOWS111     OCOTP.SHADOWS[111].R          /* Shadow */
#define OCOTP_SHADOWS112     OCOTP.SHADOWS[112].R          /* Shadow */
#define OCOTP_SHADOWS113     OCOTP.SHADOWS[113].R          /* Shadow */
#define OCOTP_SHADOWS114     OCOTP.SHADOWS[114].R          /* Shadow */
#define OCOTP_SHADOWS115     OCOTP.SHADOWS[115].R          /* Shadow */
#define OCOTP_SHADOWS116     OCOTP.SHADOWS[116].R          /* Shadow */
#define OCOTP_SHADOWS117     OCOTP.SHADOWS[117].R          /* Shadow */
#define OCOTP_SHADOWS118     OCOTP.SHADOWS[118].R          /* Shadow */
#define OCOTP_SHADOWS119     OCOTP.SHADOWS[119].R          /* Shadow */
#define OCOTP_SHADOWS120     OCOTP.SHADOWS[120].R          /* Shadow */
#define OCOTP_SHADOWS121     OCOTP.SHADOWS[121].R          /* Shadow */
#define OCOTP_SHADOWS122     OCOTP.SHADOWS[122].R          /* Shadow */
#define OCOTP_SHADOWS123     OCOTP.SHADOWS[123].R          /* Shadow */
#define OCOTP_SHADOWS124     OCOTP.SHADOWS[124].R          /* Shadow */
#define OCOTP_SHADOWS125     OCOTP.SHADOWS[125].R          /* Shadow */
#define OCOTP_SHADOWS126     OCOTP.SHADOWS[126].R          /* Shadow */
#define OCOTP_SHADOWS127     OCOTP.SHADOWS[127].R          /* Shadow */
#define OCOTP_SHADOWS128     OCOTP.SHADOWS[128].R          /* Shadow */
#define OCOTP_SHADOWS129     OCOTP.SHADOWS[129].R          /* Shadow */
#define OCOTP_SHADOWS130     OCOTP.SHADOWS[130].R          /* Shadow */
#define OCOTP_SHADOWS131     OCOTP.SHADOWS[131].R          /* Shadow */
#define OCOTP_SHADOWS132     OCOTP.SHADOWS[132].R          /* Shadow */
#define OCOTP_SHADOWS133     OCOTP.SHADOWS[133].R          /* Shadow */
#define OCOTP_SHADOWS134     OCOTP.SHADOWS[134].R          /* Shadow */
#define OCOTP_SHADOWS135     OCOTP.SHADOWS[135].R          /* Shadow */
#define OCOTP_SHADOWS136     OCOTP.SHADOWS[136].R          /* Shadow */
#define OCOTP_SHADOWS137     OCOTP.SHADOWS[137].R          /* Shadow */
#define OCOTP_SHADOWS138     OCOTP.SHADOWS[138].R          /* Shadow */
#define OCOTP_SHADOWS139     OCOTP.SHADOWS[139].R          /* Shadow */
#define OCOTP_SHADOWS140     OCOTP.SHADOWS[140].R          /* Shadow */
#define OCOTP_SHADOWS141     OCOTP.SHADOWS[141].R          /* Shadow */
#define OCOTP_SHADOWS142     OCOTP.SHADOWS[142].R          /* Shadow */
#define OCOTP_SHADOWS143     OCOTP.SHADOWS[143].R          /* Shadow */
#define OCOTP_SHADOWS144     OCOTP.SHADOWS[144].R          /* Shadow */
#define OCOTP_SHADOWS145     OCOTP.SHADOWS[145].R          /* Shadow */
#define OCOTP_SHADOWS146     OCOTP.SHADOWS[146].R          /* Shadow */
#define OCOTP_SHADOWS147     OCOTP.SHADOWS[147].R          /* Shadow */
#define OCOTP_SHADOWS148     OCOTP.SHADOWS[148].R          /* Shadow */
#define OCOTP_SHADOWS149     OCOTP.SHADOWS[149].R          /* Shadow */
#define OCOTP_SHADOWS150     OCOTP.SHADOWS[150].R          /* Shadow */
#define OCOTP_SHADOWS151     OCOTP.SHADOWS[151].R          /* Shadow */
#define OCOTP_SHADOWS152     OCOTP.SHADOWS[152].R          /* Shadow */
#define OCOTP_SHADOWS153     OCOTP.SHADOWS[153].R          /* Shadow */
#define OCOTP_SHADOWS154     OCOTP.SHADOWS[154].R          /* Shadow */
#define OCOTP_SHADOWS155     OCOTP.SHADOWS[155].R          /* Shadow */
#define OCOTP_SHADOWS156     OCOTP.SHADOWS[156].R          /* Shadow */
#define OCOTP_SHADOWS157     OCOTP.SHADOWS[157].R          /* Shadow */
#define OCOTP_SHADOWS158     OCOTP.SHADOWS[158].R          /* Shadow */
#define OCOTP_SHADOWS159     OCOTP.SHADOWS[159].R          /* Shadow */
#define OCOTP_SHADOWS160     OCOTP.SHADOWS[160].R          /* Shadow */
#define OCOTP_SHADOWS161     OCOTP.SHADOWS[161].R          /* Shadow */
#define OCOTP_SHADOWS162     OCOTP.SHADOWS[162].R          /* Shadow */
#define OCOTP_SHADOWS163     OCOTP.SHADOWS[163].R          /* Shadow */
#define OCOTP_SHADOWS164     OCOTP.SHADOWS[164].R          /* Shadow */
#define OCOTP_SHADOWS165     OCOTP.SHADOWS[165].R          /* Shadow */
#define OCOTP_SHADOWS166     OCOTP.SHADOWS[166].R          /* Shadow */
#define OCOTP_SHADOWS167     OCOTP.SHADOWS[167].R          /* Shadow */
#define OCOTP_SHADOWS168     OCOTP.SHADOWS[168].R          /* Shadow */
#define OCOTP_SHADOWS169     OCOTP.SHADOWS[169].R          /* Shadow */
#define OCOTP_SHADOWS170     OCOTP.SHADOWS[170].R          /* Shadow */
#define OCOTP_SHADOWS171     OCOTP.SHADOWS[171].R          /* Shadow */
#define OCOTP_SHADOWS172     OCOTP.SHADOWS[172].R          /* Shadow */
#define OCOTP_SHADOWS173     OCOTP.SHADOWS[173].R          /* Shadow */
#define OCOTP_SHADOWS174     OCOTP.SHADOWS[174].R          /* Shadow */
#define OCOTP_SHADOWS175     OCOTP.SHADOWS[175].R          /* Shadow */
#define OCOTP_SHADOWS176     OCOTP.SHADOWS[176].R          /* Shadow */
#define OCOTP_SHADOWS177     OCOTP.SHADOWS[177].R          /* Shadow */
#define OCOTP_SHADOWS178     OCOTP.SHADOWS[178].R          /* Shadow */
#define OCOTP_SHADOWS179     OCOTP.SHADOWS[179].R          /* Shadow */
#define OCOTP_SHADOWS180     OCOTP.SHADOWS[180].R          /* Shadow */
#define OCOTP_SHADOWS181     OCOTP.SHADOWS[181].R          /* Shadow */
#define OCOTP_SHADOWS182     OCOTP.SHADOWS[182].R          /* Shadow */
#define OCOTP_SHADOWS183     OCOTP.SHADOWS[183].R          /* Shadow */
#define OCOTP_SHADOWS184     OCOTP.SHADOWS[184].R          /* Shadow */
#define OCOTP_SHADOWS185     OCOTP.SHADOWS[185].R          /* Shadow */
#define OCOTP_SHADOWS186     OCOTP.SHADOWS[186].R          /* Shadow */
#define OCOTP_SHADOWS187     OCOTP.SHADOWS[187].R          /* Shadow */
#define OCOTP_SHADOWS188     OCOTP.SHADOWS[188].R          /* Shadow */
#define OCOTP_SHADOWS189     OCOTP.SHADOWS[189].R          /* Shadow */
#define OCOTP_SHADOWS190     OCOTP.SHADOWS[190].R          /* Shadow */
#define OCOTP_SHADOWS191     OCOTP.SHADOWS[191].R          /* Shadow */
#define OCOTP_SHADOWS192     OCOTP.SHADOWS[192].R          /* Shadow */
#define OCOTP_SHADOWS193     OCOTP.SHADOWS[193].R          /* Shadow */
#define OCOTP_SHADOWS194     OCOTP.SHADOWS[194].R          /* Shadow */
#define OCOTP_SHADOWS195     OCOTP.SHADOWS[195].R          /* Shadow */
#define OCOTP_SHADOWS196     OCOTP.SHADOWS[196].R          /* Shadow */
#define OCOTP_SHADOWS197     OCOTP.SHADOWS[197].R          /* Shadow */
#define OCOTP_SHADOWS198     OCOTP.SHADOWS[198].R          /* Shadow */
#define OCOTP_SHADOWS199     OCOTP.SHADOWS[199].R          /* Shadow */
#define OCOTP_SHADOWS200     OCOTP.SHADOWS[200].R          /* Shadow */
#define OCOTP_SHADOWS201     OCOTP.SHADOWS[201].R          /* Shadow */
#define OCOTP_SHADOWS202     OCOTP.SHADOWS[202].R          /* Shadow */
#define OCOTP_SHADOWS203     OCOTP.SHADOWS[203].R          /* Shadow */
#define OCOTP_SHADOWS204     OCOTP.SHADOWS[204].R          /* Shadow */
#define OCOTP_SHADOWS205     OCOTP.SHADOWS[205].R          /* Shadow */
#define OCOTP_SHADOWS206     OCOTP.SHADOWS[206].R          /* Shadow */
#define OCOTP_SHADOWS207     OCOTP.SHADOWS[207].R          /* Shadow */
#define OCOTP_SHADOWS208     OCOTP.SHADOWS[208].R          /* Shadow */
#define OCOTP_SHADOWS209     OCOTP.SHADOWS[209].R          /* Shadow */
#define OCOTP_SHADOWS210     OCOTP.SHADOWS[210].R          /* Shadow */
#define OCOTP_SHADOWS211     OCOTP.SHADOWS[211].R          /* Shadow */
#define OCOTP_SHADOWS212     OCOTP.SHADOWS[212].R          /* Shadow */
#define OCOTP_SHADOWS213     OCOTP.SHADOWS[213].R          /* Shadow */
#define OCOTP_SHADOWS214     OCOTP.SHADOWS[214].R          /* Shadow */
#define OCOTP_SHADOWS215     OCOTP.SHADOWS[215].R          /* Shadow */
#define OCOTP_SHADOWS216     OCOTP.SHADOWS[216].R          /* Shadow */
#define OCOTP_SHADOWS217     OCOTP.SHADOWS[217].R          /* Shadow */
#define OCOTP_SHADOWS218     OCOTP.SHADOWS[218].R          /* Shadow */
#define OCOTP_SHADOWS219     OCOTP.SHADOWS[219].R          /* Shadow */
#define OCOTP_SHADOWS220     OCOTP.SHADOWS[220].R          /* Shadow */
#define OCOTP_SHADOWS221     OCOTP.SHADOWS[221].R          /* Shadow */
#define OCOTP_SHADOWS222     OCOTP.SHADOWS[222].R          /* Shadow */
#define OCOTP_SHADOWS223     OCOTP.SHADOWS[223].R          /* Shadow */
#define OCOTP_SHADOWS224     OCOTP.SHADOWS[224].R          /* Shadow */
#define OCOTP_SHADOWS225     OCOTP.SHADOWS[225].R          /* Shadow */
#define OCOTP_SHADOWS226     OCOTP.SHADOWS[226].R          /* Shadow */
#define OCOTP_SHADOWS227     OCOTP.SHADOWS[227].R          /* Shadow */
#define OCOTP_SHADOWS228     OCOTP.SHADOWS[228].R          /* Shadow */
#define OCOTP_SHADOWS229     OCOTP.SHADOWS[229].R          /* Shadow */
#define OCOTP_SHADOWS230     OCOTP.SHADOWS[230].R          /* Shadow */
#define OCOTP_SHADOWS231     OCOTP.SHADOWS[231].R          /* Shadow */
#define OCOTP_SHADOWS232     OCOTP.SHADOWS[232].R          /* Shadow */
#define OCOTP_SHADOWS233     OCOTP.SHADOWS[233].R          /* Shadow */
#define OCOTP_SHADOWS234     OCOTP.SHADOWS[234].R          /* Shadow */
#define OCOTP_SHADOWS235     OCOTP.SHADOWS[235].R          /* Shadow */
#define OCOTP_SHADOWS236     OCOTP.SHADOWS[236].R          /* Shadow */
#define OCOTP_SHADOWS237     OCOTP.SHADOWS[237].R          /* Shadow */
#define OCOTP_SHADOWS238     OCOTP.SHADOWS[238].R          /* Shadow */
#define OCOTP_SHADOWS239     OCOTP.SHADOWS[239].R          /* Shadow */
#define OCOTP_SHADOWS240     OCOTP.SHADOWS[240].R          /* Shadow */
#define OCOTP_SHADOWS241     OCOTP.SHADOWS[241].R          /* Shadow */
#define OCOTP_SHADOWS242     OCOTP.SHADOWS[242].R          /* Shadow */
#define OCOTP_SHADOWS243     OCOTP.SHADOWS[243].R          /* Shadow */
#define OCOTP_SHADOWS244     OCOTP.SHADOWS[244].R          /* Shadow */
#define OCOTP_SHADOWS245     OCOTP.SHADOWS[245].R          /* Shadow */
#define OCOTP_SHADOWS246     OCOTP.SHADOWS[246].R          /* Shadow */
#define OCOTP_SHADOWS247     OCOTP.SHADOWS[247].R          /* Shadow */
#define OCOTP_SHADOWS248     OCOTP.SHADOWS[248].R          /* Shadow */
#define OCOTP_SHADOWS249     OCOTP.SHADOWS[249].R          /* Shadow */
#define OCOTP_SHADOWS250     OCOTP.SHADOWS[250].R          /* Shadow */
#define OCOTP_SHADOWS251     OCOTP.SHADOWS[251].R          /* Shadow */
#define OCOTP_SHADOWS252     OCOTP.SHADOWS[252].R          /* Shadow */
#define OCOTP_SHADOWS253     OCOTP.SHADOWS[253].R          /* Shadow */
#define OCOTP_SHADOWS254     OCOTP.SHADOWS[254].R          /* Shadow */
#define OCOTP_SHADOWS255     OCOTP.SHADOWS[255].R          /* Shadow */

/* PCM */
#define PCM_IAHB_BE1         PCM.IAHB_BE1.R                /* IAHB Burst Enable 1 */
#define PCM_IAHB_BE2         PCM.IAHB_BE2.R                /* IAHB Burst Enable 2 */
#define PCM_IAHB_BE3         PCM.IAHB_BE3.R                /* IAHB Burst Enable 3 */
#define PCM_IAHB_BE4         PCM.IAHB_BE4.R                /* IAHB Burst Enable 4 */
#define PCM_IAHB_BE5         PCM.IAHB_BE5.R                /* IAHB Burst Enable 5 */
#define PCM_IAHB_BE6         PCM.IAHB_BE6.R                /* IAHB Burst Enable 6 */
#define PCM_IAHB_BE7         PCM.IAHB_BE7.R                /* IAHB Burst Enable 7 */

/* PERIPH_PLL */
#define PERIPH_PLL_PLLCR     PERIPH_PLL.PLLCR.R            /* PLL Control Register */
#define PERIPH_PLL_PLLSR     PERIPH_PLL.PLLSR.R            /* PLL Status Register */
#define PERIPH_PLL_PLLDV     PERIPH_PLL.PLLDV.R            /* PLL Divider */
#define PERIPH_PLL_PLLFD     PERIPH_PLL.PLLFD.R            /* PLL Fractional Divider */
#define PERIPH_PLL_PLLCLKMUX PERIPH_PLL.PLLCLKMUX.R        /* PLL Clock Multiplexer */
#define PERIPH_PLL_PLLODIV_0 PERIPH_PLL.PLLODIV[0].R       /* PLL Output Divider */
#define PERIPH_PLL_PLLODIV_1 PERIPH_PLL.PLLODIV[1].R       /* PLL Output Divider */
#define PERIPH_PLL_PLLODIV_2 PERIPH_PLL.PLLODIV[2].R       /* PLL Output Divider */
#define PERIPH_PLL_PLLODIV_3 PERIPH_PLL.PLLODIV[3].R       /* PLL Output Divider */
#define PERIPH_PLL_PLLODIV_4 PERIPH_PLL.PLLODIV[4].R       /* PLL Output Divider */
#define PERIPH_PLL_PLLODIV_5 PERIPH_PLL.PLLODIV[5].R       /* PLL Output Divider */
#define PERIPH_PLL_PLLODIV_6 PERIPH_PLL.PLLODIV[6].R       /* PLL Output Divider */
#define PERIPH_PLL_PLLODIV_7 PERIPH_PLL.PLLODIV[7].R       /* PLL Output Divider */
#define PERIPH_PLL_PLLODIV_8 PERIPH_PLL.PLLODIV[8].R       /* PLL Output Divider */
#define PERIPH_PLL_PLLODIV_9 PERIPH_PLL.PLLODIV[9].R       /* PLL Output Divider */

/* PIT */
#define PIT_0_MCR            PIT_0.MCR.R                   /* PIT Module Control Register */
#define PIT_0_LTMR64H        PIT_0.LTMR64H.R               /* PIT Upper Lifetime Timer Register */
#define PIT_0_LTMR64L        PIT_0.LTMR64L.R               /* PIT Lower Lifetime Timer Register */
#define PIT_0_LDVAL0         PIT_0.TIMER[0].LDVAL.R        /* Timer Load Value Register */
#define PIT_0_CVAL0          PIT_0.TIMER[0].CVAL.R         /* Current Timer Value Register */
#define PIT_0_TCTRL0         PIT_0.TIMER[0].TCTRL.R        /* Timer Control Register */
#define PIT_0_TFLG0          PIT_0.TIMER[0].TFLG.R         /* Timer Flag Register */
#define PIT_0_LDVAL1         PIT_0.TIMER[1].LDVAL.R        /* Timer Load Value Register */
#define PIT_0_CVAL1          PIT_0.TIMER[1].CVAL.R         /* Current Timer Value Register */
#define PIT_0_TCTRL1         PIT_0.TIMER[1].TCTRL.R        /* Timer Control Register */
#define PIT_0_TFLG1          PIT_0.TIMER[1].TFLG.R         /* Timer Flag Register */
#define PIT_0_LDVAL2         PIT_0.TIMER[2].LDVAL.R        /* Timer Load Value Register */
#define PIT_0_CVAL2          PIT_0.TIMER[2].CVAL.R         /* Current Timer Value Register */
#define PIT_0_TCTRL2         PIT_0.TIMER[2].TCTRL.R        /* Timer Control Register */
#define PIT_0_TFLG2          PIT_0.TIMER[2].TFLG.R         /* Timer Flag Register */
#define PIT_0_LDVAL3         PIT_0.TIMER[3].LDVAL.R        /* Timer Load Value Register */
#define PIT_0_CVAL3          PIT_0.TIMER[3].CVAL.R         /* Current Timer Value Register */
#define PIT_0_TCTRL3         PIT_0.TIMER[3].TCTRL.R        /* Timer Control Register */
#define PIT_0_TFLG3          PIT_0.TIMER[3].TFLG.R         /* Timer Flag Register */

#define PIT_1_MCR            PIT_1.MCR.R                   /* PIT Module Control Register */
#define PIT_1_LTMR64H        PIT_1.LTMR64H.R               /* PIT Upper Lifetime Timer Register */
#define PIT_1_LTMR64L        PIT_1.LTMR64L.R               /* PIT Lower Lifetime Timer Register */
#define PIT_1_LDVAL0         PIT_1.TIMER[0].LDVAL.R        /* Timer Load Value Register */
#define PIT_1_CVAL0          PIT_1.TIMER[0].CVAL.R         /* Current Timer Value Register */
#define PIT_1_TCTRL0         PIT_1.TIMER[0].TCTRL.R        /* Timer Control Register */
#define PIT_1_TFLG0          PIT_1.TIMER[0].TFLG.R         /* Timer Flag Register */
#define PIT_1_LDVAL1         PIT_1.TIMER[1].LDVAL.R        /* Timer Load Value Register */
#define PIT_1_CVAL1          PIT_1.TIMER[1].CVAL.R         /* Current Timer Value Register */
#define PIT_1_TCTRL1         PIT_1.TIMER[1].TCTRL.R        /* Timer Control Register */
#define PIT_1_TFLG1          PIT_1.TIMER[1].TFLG.R         /* Timer Flag Register */
#define PIT_1_LDVAL2         PIT_1.TIMER[2].LDVAL.R        /* Timer Load Value Register */
#define PIT_1_CVAL2          PIT_1.TIMER[2].CVAL.R         /* Current Timer Value Register */
#define PIT_1_TCTRL2         PIT_1.TIMER[2].TCTRL.R        /* Timer Control Register */
#define PIT_1_TFLG2          PIT_1.TIMER[2].TFLG.R         /* Timer Flag Register */
#define PIT_1_LDVAL3         PIT_1.TIMER[3].LDVAL.R        /* Timer Load Value Register */
#define PIT_1_CVAL3          PIT_1.TIMER[3].CVAL.R         /* Current Timer Value Register */
#define PIT_1_TCTRL3         PIT_1.TIMER[3].TCTRL.R        /* Timer Control Register */
#define PIT_1_TFLG3          PIT_1.TIMER[3].TFLG.R         /* Timer Flag Register */

/* PMC */
#define PMC_SSR              PMC.SSR.R                     /* Source of System Reset */
#define PMC_NCSPD_CTL        PMC.NCSPD_CTL.R               /* Non-Critical Supply Presence Detector Control */
#define PMC_NCSPD_STAT       PMC.NCSPD_STAT.R              /* NCSPD Status Register */
#define PMC_CSPD_EVENT_CAPTURE PMC.CSPD_EVENT_CAPTURE.R    /* CSPD Event Capture (CSPDEF) */
#define PMC_NCSPD_EVENT_CAPTURE PMC.NCSPD_EVENT_CAPTURE.R  /* NCSPD Event Flag (NCSPDEF) */
#define PMC_POR_WDOG_EVENT_CAPTURE0 PMC.POR_WDOG_EVENT_CAPTURE[0].R /* Device Status Flag (DSF0) */
#define PMC_POR_WDOG_EVENT_CAPTURE1 PMC.POR_WDOG_EVENT_CAPTURE[1].R /* Device Status Flag (DSF1) */

/* PRAMC */
#define IRAM0_PRCR1          IRAM0.PRCR1.R                 /* Platform RAM Configuration register 1 */

#define IRAM1_PRCR1          IRAM1.PRCR1.R                 /* Platform RAM Configuration register 1 */

#define IRAM2_PRCR1          IRAM2.PRCR1.R                 /* Platform RAM Configuration register 1 */

#define IRAM3_PRCR1          IRAM3.PRCR1.R                 /* Platform RAM Configuration register 1 */

#define IRAM4_PRCR1          IRAM4.PRCR1.R                 /* Platform RAM Configuration register 1 */

#define PRAMC_PRCR1          PRAMC.PRCR1.R                 /* Platform RAM Configuration register 1 */
#define PRAMC_PRCR2          PRAMC.PRCR2.R                 /* Platform RAM Configuration register 2 */
#define PRAMC_PRCR3          PRAMC.PRCR3.R                 /* Platform RAM Configuration register 3 */
#define PRAMC_PRCR4          PRAMC.PRCR4.R                 /* Platform RAM Configuration register 4 */
#define PRAMC_PRCR5          PRAMC.PRCR5.R                 /* Platform RAM Configuration register 5 */
#define PRAMC_PRCR6          PRAMC.PRCR6.R                 /* Platform RAM Configuration register 6 */
#define PRAMC_PRCR7          PRAMC.PRCR7.R                 /* Platform RAM Configuration register 7 */
#define PRAMC_PRCR8          PRAMC.PRCR8.R                 /* Platform RAM Configuration register 8 */
#define PRAMC_PRCR9          PRAMC.PRCR9.R                 /* Platform RAM Configuration register 9 */

/* PRAM_XBAR */
#define PRAM_XBAR_PRS0       PRAM_XBAR.CHANNEL[0].PRS.R    /* Priority Register Slave */
#define PRAM_XBAR_CRS0       PRAM_XBAR.CHANNEL[0].CRS.R    /* Control */
#define PRAM_XBAR_PRS1       PRAM_XBAR.CHANNEL[1].PRS.R    /* Priority Register Slave */
#define PRAM_XBAR_CRS1       PRAM_XBAR.CHANNEL[1].CRS.R    /* Control */
#define PRAM_XBAR_PRS2       PRAM_XBAR.CHANNEL[2].PRS.R    /* Priority Register Slave */
#define PRAM_XBAR_CRS2       PRAM_XBAR.CHANNEL[2].CRS.R    /* Control */
#define PRAM_XBAR_PRS3       PRAM_XBAR.CHANNEL[3].PRS.R    /* Priority Register Slave */
#define PRAM_XBAR_CRS3       PRAM_XBAR.CHANNEL[3].CRS.R    /* Control */
#define PRAM_XBAR_PRS4       PRAM_XBAR.CHANNEL[4].PRS.R    /* Priority Register Slave */
#define PRAM_XBAR_CRS4       PRAM_XBAR.CHANNEL[4].CRS.R    /* Control */
#define PRAM_XBAR_PRS5       PRAM_XBAR.CHANNEL[5].PRS.R    /* Priority Register Slave */
#define PRAM_XBAR_CRS5       PRAM_XBAR.CHANNEL[5].CRS.R    /* Control */
#define PRAM_XBAR_PRS6       PRAM_XBAR.CHANNEL[6].PRS.R    /* Priority Register Slave */
#define PRAM_XBAR_CRS6       PRAM_XBAR.CHANNEL[6].CRS.R    /* Control */
#define PRAM_XBAR_PRS7       PRAM_XBAR.CHANNEL[7].PRS.R    /* Priority Register Slave */
#define PRAM_XBAR_CRS7       PRAM_XBAR.CHANNEL[7].CRS.R    /* Control */
#define PRAM_XBAR_MGPCR0     PRAM_XBAR.MGPCR0.R            /* Master General Purpose Control */
#define PRAM_XBAR_MGPCR1     PRAM_XBAR.MGPCR1.R            /* Master General Purpose Control */
#define PRAM_XBAR_MGPCR2     PRAM_XBAR.MGPCR2.R            /* Master General Purpose Control */
#define PRAM_XBAR_MGPCR3     PRAM_XBAR.MGPCR3.R            /* Master General Purpose Control */
#define PRAM_XBAR_MGPCR4     PRAM_XBAR.MGPCR4.R            /* Master General Purpose Control */

/* QuadSPI */
#define QUADSPI_MCR          QUADSPI.MCR.R                 /* Module Configuration Register */
#define QUADSPI_IPCR         QUADSPI.IPCR.R                /* IP Configuration Register */
#define QUADSPI_FLSHCR       QUADSPI.FLSHCR.R              /* Flash Memory Configuration Register */
#define QUADSPI_BUF0CR       QUADSPI.BUF0CR.R              /* Buffer 0 Configuration Register */
#define QUADSPI_BUF1CR       QUADSPI.BUF1CR.R              /* Buffer 1 Configuration Register */
#define QUADSPI_BUF2CR       QUADSPI.BUF2CR.R              /* Buffer 2 Configuration Register */
#define QUADSPI_BUF3CR       QUADSPI.BUF3CR.R              /* Buffer 3 Configuration Register */
#define QUADSPI_BFGENCR      QUADSPI.BFGENCR.R             /* Buffer Generic Configuration Register */
#define QUADSPI_BUF0IND      QUADSPI.BUF0IND.R             /* Buffer 0 Top Index Register */
#define QUADSPI_BUF1IND      QUADSPI.BUF1IND.R             /* Buffer 1 Top Index Register */
#define QUADSPI_BUF2IND      QUADSPI.BUF2IND.R             /* Buffer 2 Top Index Register */
#define QUADSPI_DLLCRA       QUADSPI.DLLCRA.R              /* DLL Flash Memory A Configuration Register */
#define QUADSPI_SFAR         QUADSPI.SFAR.R                /* Serial Flash Memory Address Register */
#define QUADSPI_SFACR        QUADSPI.SFACR.R               /* Serial Flash Memory Address Configuration Register */
#define QUADSPI_SMPR         QUADSPI.SMPR.R                /* Sampling Register */
#define QUADSPI_RBSR         QUADSPI.RBSR.R                /* RX Buffer Status Register */
#define QUADSPI_RBCT         QUADSPI.RBCT.R                /* RX Buffer Control Register */
#define QUADSPI_DLLSR        QUADSPI.DLLSR.R               /* DLL Status Register */
#define QUADSPI_DLCR         QUADSPI.DLCR.R                /* Data Learning Configuration Register */
#define QUADSPI_DLSR_FA      QUADSPI.DLSR_FA.R             /* Data Learning Status Flash Memory A Register */
#define QUADSPI_TBSR         QUADSPI.TBSR.R                /* TX Buffer Status Register */
#define QUADSPI_TBDR         QUADSPI.TBDR.R                /* TX Buffer Data Register */
#define QUADSPI_TBCT         QUADSPI.TBCT.R                /* TX Buffer Control Register */
#define QUADSPI_SR           QUADSPI.SR.R                  /* Status Register */
#define QUADSPI_FR           QUADSPI.FRr.R                 /* Flag Register */
#define QUADSPI_RSER         QUADSPI.RSER.R                /* Interrupt and DMA Request Select and Enable Register */
#define QUADSPI_SPTRCLR      QUADSPI.SPTRCLR.R             /* Sequence Pointer Clear Register */
#define QUADSPI_SFA1AD       QUADSPI.SFA1AD.R              /* Serial Flash Memory A1 Top Address Register */
#define QUADSPI_SFA2AD       QUADSPI.SFA2AD.R              /* Serial Flash Memory A2 Top Address Register */
#define QUADSPI_SFB1AD       QUADSPI.SFB1AD.R              /* Serial Flash Memory B1 Top Address Register */
#define QUADSPI_SFB2AD       QUADSPI.SFB2AD.R              /* Serial Flash Memory B2 Top Address Register */
#define QUADSPI_DLPR         QUADSPI.DLPR.R                /* Data Learn Pattern Register */
#define QUADSPI_RBDR0        QUADSPI.RBDR[0].R             /* RX Buffer Data Register */
#define QUADSPI_RBDR1        QUADSPI.RBDR[1].R             /* RX Buffer Data Register */
#define QUADSPI_RBDR2        QUADSPI.RBDR[2].R             /* RX Buffer Data Register */
#define QUADSPI_RBDR3        QUADSPI.RBDR[3].R             /* RX Buffer Data Register */
#define QUADSPI_RBDR4        QUADSPI.RBDR[4].R             /* RX Buffer Data Register */
#define QUADSPI_RBDR5        QUADSPI.RBDR[5].R             /* RX Buffer Data Register */
#define QUADSPI_RBDR6        QUADSPI.RBDR[6].R             /* RX Buffer Data Register */
#define QUADSPI_RBDR7        QUADSPI.RBDR[7].R             /* RX Buffer Data Register */
#define QUADSPI_RBDR8        QUADSPI.RBDR[8].R             /* RX Buffer Data Register */
#define QUADSPI_RBDR9        QUADSPI.RBDR[9].R             /* RX Buffer Data Register */
#define QUADSPI_RBDR10       QUADSPI.RBDR[10].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR11       QUADSPI.RBDR[11].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR12       QUADSPI.RBDR[12].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR13       QUADSPI.RBDR[13].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR14       QUADSPI.RBDR[14].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR15       QUADSPI.RBDR[15].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR16       QUADSPI.RBDR[16].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR17       QUADSPI.RBDR[17].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR18       QUADSPI.RBDR[18].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR19       QUADSPI.RBDR[19].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR20       QUADSPI.RBDR[20].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR21       QUADSPI.RBDR[21].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR22       QUADSPI.RBDR[22].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR23       QUADSPI.RBDR[23].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR24       QUADSPI.RBDR[24].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR25       QUADSPI.RBDR[25].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR26       QUADSPI.RBDR[26].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR27       QUADSPI.RBDR[27].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR28       QUADSPI.RBDR[28].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR29       QUADSPI.RBDR[29].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR30       QUADSPI.RBDR[30].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR31       QUADSPI.RBDR[31].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR32       QUADSPI.RBDR[32].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR33       QUADSPI.RBDR[33].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR34       QUADSPI.RBDR[34].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR35       QUADSPI.RBDR[35].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR36       QUADSPI.RBDR[36].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR37       QUADSPI.RBDR[37].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR38       QUADSPI.RBDR[38].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR39       QUADSPI.RBDR[39].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR40       QUADSPI.RBDR[40].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR41       QUADSPI.RBDR[41].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR42       QUADSPI.RBDR[42].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR43       QUADSPI.RBDR[43].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR44       QUADSPI.RBDR[44].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR45       QUADSPI.RBDR[45].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR46       QUADSPI.RBDR[46].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR47       QUADSPI.RBDR[47].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR48       QUADSPI.RBDR[48].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR49       QUADSPI.RBDR[49].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR50       QUADSPI.RBDR[50].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR51       QUADSPI.RBDR[51].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR52       QUADSPI.RBDR[52].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR53       QUADSPI.RBDR[53].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR54       QUADSPI.RBDR[54].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR55       QUADSPI.RBDR[55].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR56       QUADSPI.RBDR[56].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR57       QUADSPI.RBDR[57].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR58       QUADSPI.RBDR[58].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR59       QUADSPI.RBDR[59].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR60       QUADSPI.RBDR[60].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR61       QUADSPI.RBDR[61].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR62       QUADSPI.RBDR[62].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR63       QUADSPI.RBDR[63].R            /* RX Buffer Data Register */
#define QUADSPI_LUTKEY       QUADSPI.LUTKEY.R              /* LUT Key Register */
#define QUADSPI_LCKCR        QUADSPI.LCKCR.R               /* LUT Lock Configuration Register */
#define QUADSPI_LUT0         QUADSPI.LUT[0].R              /* LUT Register */
#define QUADSPI_LUT1         QUADSPI.LUT[1].R              /* LUT Register */
#define QUADSPI_LUT2         QUADSPI.LUT[2].R              /* LUT Register */
#define QUADSPI_LUT3         QUADSPI.LUT[3].R              /* LUT Register */
#define QUADSPI_LUT4         QUADSPI.LUT[4].R              /* LUT Register */
#define QUADSPI_LUT5         QUADSPI.LUT[5].R              /* LUT Register */
#define QUADSPI_LUT6         QUADSPI.LUT[6].R              /* LUT Register */
#define QUADSPI_LUT7         QUADSPI.LUT[7].R              /* LUT Register */
#define QUADSPI_LUT8         QUADSPI.LUT[8].R              /* LUT Register */
#define QUADSPI_LUT9         QUADSPI.LUT[9].R              /* LUT Register */
#define QUADSPI_LUT10        QUADSPI.LUT[10].R             /* LUT Register */
#define QUADSPI_LUT11        QUADSPI.LUT[11].R             /* LUT Register */
#define QUADSPI_LUT12        QUADSPI.LUT[12].R             /* LUT Register */
#define QUADSPI_LUT13        QUADSPI.LUT[13].R             /* LUT Register */
#define QUADSPI_LUT14        QUADSPI.LUT[14].R             /* LUT Register */
#define QUADSPI_LUT15        QUADSPI.LUT[15].R             /* LUT Register */
#define QUADSPI_LUT16        QUADSPI.LUT[16].R             /* LUT Register */
#define QUADSPI_LUT17        QUADSPI.LUT[17].R             /* LUT Register */
#define QUADSPI_LUT18        QUADSPI.LUT[18].R             /* LUT Register */
#define QUADSPI_LUT19        QUADSPI.LUT[19].R             /* LUT Register */
#define QUADSPI_LUT20        QUADSPI.LUT[20].R             /* LUT Register */
#define QUADSPI_LUT21        QUADSPI.LUT[21].R             /* LUT Register */
#define QUADSPI_LUT22        QUADSPI.LUT[22].R             /* LUT Register */
#define QUADSPI_LUT23        QUADSPI.LUT[23].R             /* LUT Register */
#define QUADSPI_LUT24        QUADSPI.LUT[24].R             /* LUT Register */
#define QUADSPI_LUT25        QUADSPI.LUT[25].R             /* LUT Register */
#define QUADSPI_LUT26        QUADSPI.LUT[26].R             /* LUT Register */
#define QUADSPI_LUT27        QUADSPI.LUT[27].R             /* LUT Register */
#define QUADSPI_LUT28        QUADSPI.LUT[28].R             /* LUT Register */
#define QUADSPI_LUT29        QUADSPI.LUT[29].R             /* LUT Register */
#define QUADSPI_LUT30        QUADSPI.LUT[30].R             /* LUT Register */
#define QUADSPI_LUT31        QUADSPI.LUT[31].R             /* LUT Register */
#define QUADSPI_LUT32        QUADSPI.LUT[32].R             /* LUT Register */
#define QUADSPI_LUT33        QUADSPI.LUT[33].R             /* LUT Register */
#define QUADSPI_LUT34        QUADSPI.LUT[34].R             /* LUT Register */
#define QUADSPI_LUT35        QUADSPI.LUT[35].R             /* LUT Register */
#define QUADSPI_LUT36        QUADSPI.LUT[36].R             /* LUT Register */
#define QUADSPI_LUT37        QUADSPI.LUT[37].R             /* LUT Register */
#define QUADSPI_LUT38        QUADSPI.LUT[38].R             /* LUT Register */
#define QUADSPI_LUT39        QUADSPI.LUT[39].R             /* LUT Register */
#define QUADSPI_LUT40        QUADSPI.LUT[40].R             /* LUT Register */
#define QUADSPI_LUT41        QUADSPI.LUT[41].R             /* LUT Register */
#define QUADSPI_LUT42        QUADSPI.LUT[42].R             /* LUT Register */
#define QUADSPI_LUT43        QUADSPI.LUT[43].R             /* LUT Register */
#define QUADSPI_LUT44        QUADSPI.LUT[44].R             /* LUT Register */
#define QUADSPI_LUT45        QUADSPI.LUT[45].R             /* LUT Register */
#define QUADSPI_LUT46        QUADSPI.LUT[46].R             /* LUT Register */
#define QUADSPI_LUT47        QUADSPI.LUT[47].R             /* LUT Register */
#define QUADSPI_LUT48        QUADSPI.LUT[48].R             /* LUT Register */
#define QUADSPI_LUT49        QUADSPI.LUT[49].R             /* LUT Register */
#define QUADSPI_LUT50        QUADSPI.LUT[50].R             /* LUT Register */
#define QUADSPI_LUT51        QUADSPI.LUT[51].R             /* LUT Register */
#define QUADSPI_LUT52        QUADSPI.LUT[52].R             /* LUT Register */
#define QUADSPI_LUT53        QUADSPI.LUT[53].R             /* LUT Register */
#define QUADSPI_LUT54        QUADSPI.LUT[54].R             /* LUT Register */
#define QUADSPI_LUT55        QUADSPI.LUT[55].R             /* LUT Register */
#define QUADSPI_LUT56        QUADSPI.LUT[56].R             /* LUT Register */
#define QUADSPI_LUT57        QUADSPI.LUT[57].R             /* LUT Register */
#define QUADSPI_LUT58        QUADSPI.LUT[58].R             /* LUT Register */
#define QUADSPI_LUT59        QUADSPI.LUT[59].R             /* LUT Register */
#define QUADSPI_LUT60        QUADSPI.LUT[60].R             /* LUT Register */
#define QUADSPI_LUT61        QUADSPI.LUT[61].R             /* LUT Register */
#define QUADSPI_LUT62        QUADSPI.LUT[62].R             /* LUT Register */
#define QUADSPI_LUT63        QUADSPI.LUT[63].R             /* LUT Register */
#define QUADSPI_LUT64        QUADSPI.LUT[64].R             /* LUT Register */
#define QUADSPI_LUT65        QUADSPI.LUT[65].R             /* LUT Register */
#define QUADSPI_LUT66        QUADSPI.LUT[66].R             /* LUT Register */
#define QUADSPI_LUT67        QUADSPI.LUT[67].R             /* LUT Register */
#define QUADSPI_LUT68        QUADSPI.LUT[68].R             /* LUT Register */
#define QUADSPI_LUT69        QUADSPI.LUT[69].R             /* LUT Register */
#define QUADSPI_LUT70        QUADSPI.LUT[70].R             /* LUT Register */
#define QUADSPI_LUT71        QUADSPI.LUT[71].R             /* LUT Register */
#define QUADSPI_LUT72        QUADSPI.LUT[72].R             /* LUT Register */
#define QUADSPI_LUT73        QUADSPI.LUT[73].R             /* LUT Register */
#define QUADSPI_LUT74        QUADSPI.LUT[74].R             /* LUT Register */
#define QUADSPI_LUT75        QUADSPI.LUT[75].R             /* LUT Register */
#define QUADSPI_LUT76        QUADSPI.LUT[76].R             /* LUT Register */
#define QUADSPI_LUT77        QUADSPI.LUT[77].R             /* LUT Register */
#define QUADSPI_LUT78        QUADSPI.LUT[78].R             /* LUT Register */
#define QUADSPI_LUT79        QUADSPI.LUT[79].R             /* LUT Register */

/* QuadSPI_ARDB */
#define QUADSPI_ARDB_ARDB0   QUADSPI_ARDB.ARDB[0].R        /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB1   QUADSPI_ARDB.ARDB[1].R        /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB2   QUADSPI_ARDB.ARDB[2].R        /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB3   QUADSPI_ARDB.ARDB[3].R        /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB4   QUADSPI_ARDB.ARDB[4].R        /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB5   QUADSPI_ARDB.ARDB[5].R        /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB6   QUADSPI_ARDB.ARDB[6].R        /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB7   QUADSPI_ARDB.ARDB[7].R        /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB8   QUADSPI_ARDB.ARDB[8].R        /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB9   QUADSPI_ARDB.ARDB[9].R        /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB10  QUADSPI_ARDB.ARDB[10].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB11  QUADSPI_ARDB.ARDB[11].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB12  QUADSPI_ARDB.ARDB[12].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB13  QUADSPI_ARDB.ARDB[13].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB14  QUADSPI_ARDB.ARDB[14].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB15  QUADSPI_ARDB.ARDB[15].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB16  QUADSPI_ARDB.ARDB[16].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB17  QUADSPI_ARDB.ARDB[17].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB18  QUADSPI_ARDB.ARDB[18].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB19  QUADSPI_ARDB.ARDB[19].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB20  QUADSPI_ARDB.ARDB[20].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB21  QUADSPI_ARDB.ARDB[21].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB22  QUADSPI_ARDB.ARDB[22].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB23  QUADSPI_ARDB.ARDB[23].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB24  QUADSPI_ARDB.ARDB[24].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB25  QUADSPI_ARDB.ARDB[25].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB26  QUADSPI_ARDB.ARDB[26].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB27  QUADSPI_ARDB.ARDB[27].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB28  QUADSPI_ARDB.ARDB[28].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB29  QUADSPI_ARDB.ARDB[29].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB30  QUADSPI_ARDB.ARDB[30].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB31  QUADSPI_ARDB.ARDB[31].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB32  QUADSPI_ARDB.ARDB[32].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB33  QUADSPI_ARDB.ARDB[33].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB34  QUADSPI_ARDB.ARDB[34].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB35  QUADSPI_ARDB.ARDB[35].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB36  QUADSPI_ARDB.ARDB[36].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB37  QUADSPI_ARDB.ARDB[37].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB38  QUADSPI_ARDB.ARDB[38].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB39  QUADSPI_ARDB.ARDB[39].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB40  QUADSPI_ARDB.ARDB[40].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB41  QUADSPI_ARDB.ARDB[41].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB42  QUADSPI_ARDB.ARDB[42].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB43  QUADSPI_ARDB.ARDB[43].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB44  QUADSPI_ARDB.ARDB[44].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB45  QUADSPI_ARDB.ARDB[45].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB46  QUADSPI_ARDB.ARDB[46].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB47  QUADSPI_ARDB.ARDB[47].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB48  QUADSPI_ARDB.ARDB[48].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB49  QUADSPI_ARDB.ARDB[49].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB50  QUADSPI_ARDB.ARDB[50].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB51  QUADSPI_ARDB.ARDB[51].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB52  QUADSPI_ARDB.ARDB[52].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB53  QUADSPI_ARDB.ARDB[53].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB54  QUADSPI_ARDB.ARDB[54].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB55  QUADSPI_ARDB.ARDB[55].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB56  QUADSPI_ARDB.ARDB[56].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB57  QUADSPI_ARDB.ARDB[57].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB58  QUADSPI_ARDB.ARDB[58].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB59  QUADSPI_ARDB.ARDB[59].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB60  QUADSPI_ARDB.ARDB[60].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB61  QUADSPI_ARDB.ARDB[61].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB62  QUADSPI_ARDB.ARDB[62].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB63  QUADSPI_ARDB.ARDB[63].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB64  QUADSPI_ARDB.ARDB[64].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB65  QUADSPI_ARDB.ARDB[65].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB66  QUADSPI_ARDB.ARDB[66].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB67  QUADSPI_ARDB.ARDB[67].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB68  QUADSPI_ARDB.ARDB[68].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB69  QUADSPI_ARDB.ARDB[69].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB70  QUADSPI_ARDB.ARDB[70].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB71  QUADSPI_ARDB.ARDB[71].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB72  QUADSPI_ARDB.ARDB[72].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB73  QUADSPI_ARDB.ARDB[73].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB74  QUADSPI_ARDB.ARDB[74].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB75  QUADSPI_ARDB.ARDB[75].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB76  QUADSPI_ARDB.ARDB[76].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB77  QUADSPI_ARDB.ARDB[77].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB78  QUADSPI_ARDB.ARDB[78].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB79  QUADSPI_ARDB.ARDB[79].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB80  QUADSPI_ARDB.ARDB[80].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB81  QUADSPI_ARDB.ARDB[81].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB82  QUADSPI_ARDB.ARDB[82].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB83  QUADSPI_ARDB.ARDB[83].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB84  QUADSPI_ARDB.ARDB[84].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB85  QUADSPI_ARDB.ARDB[85].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB86  QUADSPI_ARDB.ARDB[86].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB87  QUADSPI_ARDB.ARDB[87].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB88  QUADSPI_ARDB.ARDB[88].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB89  QUADSPI_ARDB.ARDB[89].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB90  QUADSPI_ARDB.ARDB[90].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB91  QUADSPI_ARDB.ARDB[91].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB92  QUADSPI_ARDB.ARDB[92].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB93  QUADSPI_ARDB.ARDB[93].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB94  QUADSPI_ARDB.ARDB[94].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB95  QUADSPI_ARDB.ARDB[95].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB96  QUADSPI_ARDB.ARDB[96].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB97  QUADSPI_ARDB.ARDB[97].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB98  QUADSPI_ARDB.ARDB[98].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB99  QUADSPI_ARDB.ARDB[99].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB100 QUADSPI_ARDB.ARDB[100].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB101 QUADSPI_ARDB.ARDB[101].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB102 QUADSPI_ARDB.ARDB[102].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB103 QUADSPI_ARDB.ARDB[103].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB104 QUADSPI_ARDB.ARDB[104].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB105 QUADSPI_ARDB.ARDB[105].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB106 QUADSPI_ARDB.ARDB[106].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB107 QUADSPI_ARDB.ARDB[107].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB108 QUADSPI_ARDB.ARDB[108].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB109 QUADSPI_ARDB.ARDB[109].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB110 QUADSPI_ARDB.ARDB[110].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB111 QUADSPI_ARDB.ARDB[111].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB112 QUADSPI_ARDB.ARDB[112].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB113 QUADSPI_ARDB.ARDB[113].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB114 QUADSPI_ARDB.ARDB[114].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB115 QUADSPI_ARDB.ARDB[115].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB116 QUADSPI_ARDB.ARDB[116].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB117 QUADSPI_ARDB.ARDB[117].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB118 QUADSPI_ARDB.ARDB[118].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB119 QUADSPI_ARDB.ARDB[119].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB120 QUADSPI_ARDB.ARDB[120].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB121 QUADSPI_ARDB.ARDB[121].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB122 QUADSPI_ARDB.ARDB[122].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB123 QUADSPI_ARDB.ARDB[123].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB124 QUADSPI_ARDB.ARDB[124].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB125 QUADSPI_ARDB.ARDB[125].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB126 QUADSPI_ARDB.ARDB[126].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB127 QUADSPI_ARDB.ARDB[127].R      /* AHB RX Data Buffer Register */

/* REG_PROT */
#define REG_PROT_SLBRn       REG_PROT.SLBRN.R              /* Soft Lock Bit n */
#define REG_PROT_GCR         REG_PROT.GCR.R                /* Global Configuration */

/* SEMA42 */
#define SEMA42_GATE0         SEMA42.GATE[0].R              /* Gate Register */
#define SEMA42_GATE1         SEMA42.GATE[1].R              /* Gate Register */
#define SEMA42_GATE2         SEMA42.GATE[2].R              /* Gate Register */
#define SEMA42_GATE3         SEMA42.GATE[3].R              /* Gate Register */
#define SEMA42_GATE4         SEMA42.GATE[4].R              /* Gate Register */
#define SEMA42_GATE5         SEMA42.GATE[5].R              /* Gate Register */
#define SEMA42_GATE6         SEMA42.GATE[6].R              /* Gate Register */
#define SEMA42_GATE7         SEMA42.GATE[7].R              /* Gate Register */
#define SEMA42_GATE8         SEMA42.GATE[8].R              /* Gate Register */
#define SEMA42_GATE9         SEMA42.GATE[9].R              /* Gate Register */
#define SEMA42_GATE10        SEMA42.GATE[10].R             /* Gate Register */
#define SEMA42_GATE11        SEMA42.GATE[11].R             /* Gate Register */
#define SEMA42_GATE12        SEMA42.GATE[12].R             /* Gate Register */
#define SEMA42_GATE13        SEMA42.GATE[13].R             /* Gate Register */
#define SEMA42_GATE14        SEMA42.GATE[14].R             /* Gate Register */
#define SEMA42_GATE15        SEMA42.GATE[15].R             /* Gate Register */
#define SEMA42_RSTGT_R       SEMA42.RSTGT.R.R              /* Reset Gate Read */
#define SEMA42_RSTGT_W       SEMA42.RSTGT.W.R              /* Reset Gate Write */

/* SIPI */
#define SIPI_0_CCR0          SIPI_0.CCR0.R                 /* SIPI Channel Control Register 0 */
#define SIPI_0_CSR0          SIPI_0.CSR0.R                 /* SIPI Channel Status Register 0 */
#define SIPI_0_CIR0          SIPI_0.CIR0.R                 /* SIPI Channel Interrupt Register 0 */
#define SIPI_0_CTOR0         SIPI_0.CTOR0.R                /* SIPI Channel Timeout Register 0 */
#define SIPI_0_CCRC0         SIPI_0.CCRC0.R                /* SIPI Channel CRC Register 0 */
#define SIPI_0_CAR0          SIPI_0.CAR0.R                 /* SIPI Channel Address Register 0 */
#define SIPI_0_CDR0          SIPI_0.CDR0.R                 /* SIPI Channel Data Register 0 */
#define SIPI_0_CCR1          SIPI_0.CCR1.R                 /* SIPI Channel Control Register 1 */
#define SIPI_0_CSR1          SIPI_0.CSR1.R                 /* SIPI Channel Status Register 1 */
#define SIPI_0_CIR1          SIPI_0.CIR1.R                 /* SIPI Channel Interrupt Register 1 */
#define SIPI_0_CTOR1         SIPI_0.CTOR1.R                /* SIPI Channel Timeout Register 1 */
#define SIPI_0_CCRC1         SIPI_0.CCRC1.R                /* SIPI Channel CRC Register 1 */
#define SIPI_0_CAR1          SIPI_0.CAR1.R                 /* SIPI Channel Address Register 1 */
#define SIPI_0_CDR1          SIPI_0.CDR1.R                 /* SIPI Channel Data Register 1 */
#define SIPI_0_CCR2          SIPI_0.CCR2.R                 /* SIPI Channel Control Register 2 */
#define SIPI_0_CSR2          SIPI_0.CSR2.R                 /* SIPI Channel Status Register 2 */
#define SIPI_0_CIR2          SIPI_0.CIR2.R                 /* SIPI Channel Interrupt Register 2 */
#define SIPI_0_CTOR2         SIPI_0.CTOR2.R                /* SIPI Channel Timeout Register 2 */
#define SIPI_0_CCRC2         SIPI_0.CCRC2.R                /* SIPI Channel CRC Register 2 */
#define SIPI_0_CAR2          SIPI_0.CAR2.R                 /* SIPI Channel Address Register 2 */
#define SIPI_0_CDR2_0        SIPI_0.CDR2[0].R              /* SIPI Channel Data Register 2 */
#define SIPI_0_CDR2_1        SIPI_0.CDR2[1].R              /* SIPI Channel Data Register 2 */
#define SIPI_0_CDR2_2        SIPI_0.CDR2[2].R              /* SIPI Channel Data Register 2 */
#define SIPI_0_CDR2_3        SIPI_0.CDR2[3].R              /* SIPI Channel Data Register 2 */
#define SIPI_0_CDR2_4        SIPI_0.CDR2[4].R              /* SIPI Channel Data Register 2 */
#define SIPI_0_CDR2_5        SIPI_0.CDR2[5].R              /* SIPI Channel Data Register 2 */
#define SIPI_0_CDR2_6        SIPI_0.CDR2[6].R              /* SIPI Channel Data Register 2 */
#define SIPI_0_CDR2_7        SIPI_0.CDR2[7].R              /* SIPI Channel Data Register 2 */
#define SIPI_0_CCR3          SIPI_0.CCR3.R                 /* SIPI Channel Control Register 3 */
#define SIPI_0_CSR3          SIPI_0.CSR3.R                 /* SIPI Channel Status Register 3 */
#define SIPI_0_CIR3          SIPI_0.CIR3.R                 /* SIPI Channel Interrupt Register 3 */
#define SIPI_0_CTOR3         SIPI_0.CTOR3.R                /* SIPI Channel Timeout Register 3 */
#define SIPI_0_CCRC3         SIPI_0.CCRC3.R                /* SIPI Channel CRC Register 3 */
#define SIPI_0_CAR3          SIPI_0.CAR3.R                 /* SIPI Channel Address Register 3 */
#define SIPI_0_CDR3          SIPI_0.CDR3.R                 /* SIPI Channel Data Register 3 */
#define SIPI_0_MCR           SIPI_0.MCR.R                  /* SIPI Module Configuration Register */
#define SIPI_0_SR            SIPI_0.SR.R                   /* SIPI Status Register */
#define SIPI_0_MAXCR         SIPI_0.MAXCR.R                /* SIPI Max Count Register */
#define SIPI_0_ARR           SIPI_0.ARR.R                  /* SIPI Address Reload Register */
#define SIPI_0_ACR           SIPI_0.ACR.R                  /* SIPI Address Count Register */
#define SIPI_0_ERR           SIPI_0.ERR.R                  /* SIPI Error Register */

/* SIUL2 */
#define SIUL2_MIDR1          SIUL2.MIDR1.R                 /* SIUL2 MCU ID Register #1 */
#define SIUL2_MIDR2          SIUL2.MIDR2.R                 /* SIUL2 MCU ID Register #2 */
#define SIUL2_DISR0          SIUL2.DISR0.R                 /* SIUL2 DMA/Interrupt Status Flag Register0 */
#define SIUL2_DIRER0         SIUL2.DIRER0.R                /* SIUL2 DMA/Interrupt Request Enable Register0 */
#define SIUL2_DIRSR0         SIUL2.DIRSR0.R                /* SIUL2 DMA/Interrupt Request Select Register0 */
#define SIUL2_IREER0         SIUL2.IREER0.R                /* SIUL2 Interrupt Rising-Edge Event Enable Register 0 */
#define SIUL2_IFEER0         SIUL2.IFEER0.R                /* SIUL2 Interrupt Falling-Edge Event Enable Register 0 */
#define SIUL2_IFER0          SIUL2.IFER0.R                 /* SIUL2 Interrupt Filter Enable Register 0 */
#define SIUL2_IFMCR0         SIUL2.IFMCR[0].R              /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR1         SIUL2.IFMCR[1].R              /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR2         SIUL2.IFMCR[2].R              /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR3         SIUL2.IFMCR[3].R              /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR4         SIUL2.IFMCR[4].R              /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR5         SIUL2.IFMCR[5].R              /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR6         SIUL2.IFMCR[6].R              /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR7         SIUL2.IFMCR[7].R              /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR8         SIUL2.IFMCR[8].R              /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR9         SIUL2.IFMCR[9].R              /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR10        SIUL2.IFMCR[10].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR11        SIUL2.IFMCR[11].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR12        SIUL2.IFMCR[12].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR13        SIUL2.IFMCR[13].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR14        SIUL2.IFMCR[14].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR15        SIUL2.IFMCR[15].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR16        SIUL2.IFMCR[16].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR17        SIUL2.IFMCR[17].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR18        SIUL2.IFMCR[18].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR19        SIUL2.IFMCR[19].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR20        SIUL2.IFMCR[20].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR21        SIUL2.IFMCR[21].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR22        SIUL2.IFMCR[22].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR23        SIUL2.IFMCR[23].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR24        SIUL2.IFMCR[24].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR25        SIUL2.IFMCR[25].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR26        SIUL2.IFMCR[26].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR27        SIUL2.IFMCR[27].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR28        SIUL2.IFMCR[28].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR29        SIUL2.IFMCR[29].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR30        SIUL2.IFMCR[30].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR31        SIUL2.IFMCR[31].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFCPR          SIUL2.IFCPR.R                 /* SIUL2 Interrupt Filter Clock Prescaler Register */
#define SIUL2_MSCR0          SIUL2.MSCR[0].R               /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR1          SIUL2.MSCR[1].R               /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR2          SIUL2.MSCR[2].R               /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR3          SIUL2.MSCR[3].R               /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR4          SIUL2.MSCR[4].R               /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR5          SIUL2.MSCR[5].R               /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR6          SIUL2.MSCR[6].R               /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR7          SIUL2.MSCR[7].R               /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR8          SIUL2.MSCR[8].R               /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR9          SIUL2.MSCR[9].R               /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR10         SIUL2.MSCR[10].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR11         SIUL2.MSCR[11].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR12         SIUL2.MSCR[12].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR13         SIUL2.MSCR[13].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR14         SIUL2.MSCR[14].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR15         SIUL2.MSCR[15].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR16         SIUL2.MSCR[16].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR17         SIUL2.MSCR[17].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR18         SIUL2.MSCR[18].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR19         SIUL2.MSCR[19].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR20         SIUL2.MSCR[20].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR21         SIUL2.MSCR[21].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR22         SIUL2.MSCR[22].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR42         SIUL2.MSCR[42].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR43         SIUL2.MSCR[43].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR44         SIUL2.MSCR[44].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR47         SIUL2.MSCR[47].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR48         SIUL2.MSCR[48].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR49         SIUL2.MSCR[49].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR50         SIUL2.MSCR[50].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR51         SIUL2.MSCR[51].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR52         SIUL2.MSCR[52].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR53         SIUL2.MSCR[53].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR54         SIUL2.MSCR[54].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR56         SIUL2.MSCR[56].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR59         SIUL2.MSCR[59].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR62         SIUL2.MSCR[62].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR77         SIUL2.MSCR[77].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR79         SIUL2.MSCR[79].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR80         SIUL2.MSCR[80].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR94         SIUL2.MSCR[94].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR95         SIUL2.MSCR[95].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR101        SIUL2.MSCR[101].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR104        SIUL2.MSCR[104].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR105        SIUL2.MSCR[105].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR106        SIUL2.MSCR[106].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR107        SIUL2.MSCR[107].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR116        SIUL2.MSCR[116].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR117        SIUL2.MSCR[117].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR118        SIUL2.MSCR[118].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR119        SIUL2.MSCR[119].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR120        SIUL2.MSCR[120].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR121        SIUL2.MSCR[121].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR123        SIUL2.MSCR[123].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR124        SIUL2.MSCR[124].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR125        SIUL2.MSCR[125].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR128        SIUL2.MSCR[128].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR129        SIUL2.MSCR[129].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR130        SIUL2.MSCR[130].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR132        SIUL2.MSCR[132].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR133        SIUL2.MSCR[133].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR134        SIUL2.MSCR[134].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR135        SIUL2.MSCR[135].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR136        SIUL2.MSCR[136].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR137        SIUL2.MSCR[137].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR200        SIUL2.MSCR[200].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR201        SIUL2.MSCR[201].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR202        SIUL2.MSCR[202].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR203        SIUL2.MSCR[203].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR204        SIUL2.MSCR[204].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR205        SIUL2.MSCR[205].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR206        SIUL2.MSCR[206].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR207        SIUL2.MSCR[207].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR210        SIUL2.MSCR[210].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR211        SIUL2.MSCR[211].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR212        SIUL2.MSCR[212].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR213        SIUL2.MSCR[213].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR214        SIUL2.MSCR[214].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR215        SIUL2.MSCR[215].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR216        SIUL2.MSCR[216].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR217        SIUL2.MSCR[217].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_IMCR0          SIUL2.IMCR[0].R               /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR1          SIUL2.IMCR[1].R               /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR2          SIUL2.IMCR[2].R               /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR4          SIUL2.IMCR[4].R               /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR5          SIUL2.IMCR[5].R               /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR6          SIUL2.IMCR[6].R               /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR7          SIUL2.IMCR[7].R               /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR8          SIUL2.IMCR[8].R               /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR9          SIUL2.IMCR[9].R               /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR10         SIUL2.IMCR[10].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR20         SIUL2.IMCR[20].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR27         SIUL2.IMCR[27].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR28         SIUL2.IMCR[28].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR29         SIUL2.IMCR[29].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR30         SIUL2.IMCR[30].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR31         SIUL2.IMCR[31].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR32         SIUL2.IMCR[32].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR33         SIUL2.IMCR[33].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR34         SIUL2.IMCR[34].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR35         SIUL2.IMCR[35].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR36         SIUL2.IMCR[36].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR37         SIUL2.IMCR[37].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR38         SIUL2.IMCR[38].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR39         SIUL2.IMCR[39].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR40         SIUL2.IMCR[40].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR41         SIUL2.IMCR[41].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR42         SIUL2.IMCR[42].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR43         SIUL2.IMCR[43].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR52         SIUL2.IMCR[52].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR53         SIUL2.IMCR[53].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR54         SIUL2.IMCR[54].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR60         SIUL2.IMCR[60].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR61         SIUL2.IMCR[61].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR63         SIUL2.IMCR[63].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR88         SIUL2.IMCR[88].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR89         SIUL2.IMCR[89].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR90         SIUL2.IMCR[90].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR91         SIUL2.IMCR[91].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR93         SIUL2.IMCR[93].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR100        SIUL2.IMCR[100].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR101        SIUL2.IMCR[101].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR102        SIUL2.IMCR[102].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR103        SIUL2.IMCR[103].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR104        SIUL2.IMCR[104].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR105        SIUL2.IMCR[105].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR106        SIUL2.IMCR[106].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR107        SIUL2.IMCR[107].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR108        SIUL2.IMCR[108].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR109        SIUL2.IMCR[109].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR110        SIUL2.IMCR[110].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR137        SIUL2.IMCR[137].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR138        SIUL2.IMCR[138].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR139        SIUL2.IMCR[139].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR140        SIUL2.IMCR[140].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR141        SIUL2.IMCR[141].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR142        SIUL2.IMCR[142].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR143        SIUL2.IMCR[143].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR144        SIUL2.IMCR[144].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR145        SIUL2.IMCR[145].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR146        SIUL2.IMCR[146].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR147        SIUL2.IMCR[147].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR148        SIUL2.IMCR[148].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR149        SIUL2.IMCR[149].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR150        SIUL2.IMCR[150].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR151        SIUL2.IMCR[151].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR152        SIUL2.IMCR[152].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR153        SIUL2.IMCR[153].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_GPDO0          SIUL2.GPDO[0].R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO1          SIUL2.GPDO[1].R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO2          SIUL2.GPDO[2].R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO3          SIUL2.GPDO[3].R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO4          SIUL2.GPDO[4].R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO5          SIUL2.GPDO[5].R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO6          SIUL2.GPDO[6].R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO7          SIUL2.GPDO[7].R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO8          SIUL2.GPDO[8].R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO9          SIUL2.GPDO[9].R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO10         SIUL2.GPDO[10].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO11         SIUL2.GPDO[11].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO12         SIUL2.GPDO[12].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO13         SIUL2.GPDO[13].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO14         SIUL2.GPDO[14].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO15         SIUL2.GPDO[15].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO16         SIUL2.GPDO[16].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO17         SIUL2.GPDO[17].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO18         SIUL2.GPDO[18].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO19         SIUL2.GPDO[19].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO20         SIUL2.GPDO[20].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO21         SIUL2.GPDO[21].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO22         SIUL2.GPDO[22].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO23         SIUL2.GPDO[23].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO24         SIUL2.GPDO[24].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO25         SIUL2.GPDO[25].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO26         SIUL2.GPDO[26].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO27         SIUL2.GPDO[27].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO28         SIUL2.GPDO[28].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO29         SIUL2.GPDO[29].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO30         SIUL2.GPDO[30].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO31         SIUL2.GPDO[31].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO32         SIUL2.GPDO[32].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO33         SIUL2.GPDO[33].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO34         SIUL2.GPDO[34].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO35         SIUL2.GPDO[35].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO36         SIUL2.GPDO[36].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO37         SIUL2.GPDO[37].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO38         SIUL2.GPDO[38].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO39         SIUL2.GPDO[39].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO40         SIUL2.GPDO[40].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO41         SIUL2.GPDO[41].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO42         SIUL2.GPDO[42].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO43         SIUL2.GPDO[43].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO44         SIUL2.GPDO[44].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO45         SIUL2.GPDO[45].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO46         SIUL2.GPDO[46].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO47         SIUL2.GPDO[47].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO48         SIUL2.GPDO[48].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO49         SIUL2.GPDO[49].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO50         SIUL2.GPDO[50].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO51         SIUL2.GPDO[51].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO52         SIUL2.GPDO[52].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO53         SIUL2.GPDO[53].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO54         SIUL2.GPDO[54].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO55         SIUL2.GPDO[55].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO56         SIUL2.GPDO[56].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO57         SIUL2.GPDO[57].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO58         SIUL2.GPDO[58].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO59         SIUL2.GPDO[59].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO60         SIUL2.GPDO[60].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO61         SIUL2.GPDO[61].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO62         SIUL2.GPDO[62].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO63         SIUL2.GPDO[63].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO64         SIUL2.GPDO[64].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO65         SIUL2.GPDO[65].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO66         SIUL2.GPDO[66].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO67         SIUL2.GPDO[67].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO68         SIUL2.GPDO[68].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO69         SIUL2.GPDO[69].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO70         SIUL2.GPDO[70].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO71         SIUL2.GPDO[71].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO72         SIUL2.GPDO[72].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO73         SIUL2.GPDO[73].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO74         SIUL2.GPDO[74].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO75         SIUL2.GPDO[75].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO76         SIUL2.GPDO[76].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO77         SIUL2.GPDO[77].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO78         SIUL2.GPDO[78].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO79         SIUL2.GPDO[79].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO80         SIUL2.GPDO[80].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO81         SIUL2.GPDO[81].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO82         SIUL2.GPDO[82].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO83         SIUL2.GPDO[83].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO84         SIUL2.GPDO[84].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO85         SIUL2.GPDO[85].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO86         SIUL2.GPDO[86].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO87         SIUL2.GPDO[87].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO88         SIUL2.GPDO[88].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO89         SIUL2.GPDO[89].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO90         SIUL2.GPDO[90].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO91         SIUL2.GPDO[91].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO92         SIUL2.GPDO[92].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO93         SIUL2.GPDO[93].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO94         SIUL2.GPDO[94].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO95         SIUL2.GPDO[95].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO96         SIUL2.GPDO[96].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO97         SIUL2.GPDO[97].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO98         SIUL2.GPDO[98].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO99         SIUL2.GPDO[99].R              /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO100        SIUL2.GPDO[100].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO101        SIUL2.GPDO[101].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO102        SIUL2.GPDO[102].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO103        SIUL2.GPDO[103].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO104        SIUL2.GPDO[104].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO105        SIUL2.GPDO[105].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO106        SIUL2.GPDO[106].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO107        SIUL2.GPDO[107].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO108        SIUL2.GPDO[108].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO109        SIUL2.GPDO[109].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO110        SIUL2.GPDO[110].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO111        SIUL2.GPDO[111].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO112        SIUL2.GPDO[112].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO113        SIUL2.GPDO[113].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO114        SIUL2.GPDO[114].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO115        SIUL2.GPDO[115].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO116        SIUL2.GPDO[116].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO117        SIUL2.GPDO[117].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO118        SIUL2.GPDO[118].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO119        SIUL2.GPDO[119].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO120        SIUL2.GPDO[120].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO121        SIUL2.GPDO[121].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO122        SIUL2.GPDO[122].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO123        SIUL2.GPDO[123].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO124        SIUL2.GPDO[124].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO125        SIUL2.GPDO[125].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO126        SIUL2.GPDO[126].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO127        SIUL2.GPDO[127].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO128        SIUL2.GPDO[128].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO129        SIUL2.GPDO[129].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO130        SIUL2.GPDO[130].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO131        SIUL2.GPDO[131].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO132        SIUL2.GPDO[132].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO133        SIUL2.GPDO[133].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO134        SIUL2.GPDO[134].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO135        SIUL2.GPDO[135].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO136        SIUL2.GPDO[136].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO137        SIUL2.GPDO[137].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO138        SIUL2.GPDO[138].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO139        SIUL2.GPDO[139].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO140        SIUL2.GPDO[140].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO141        SIUL2.GPDO[141].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO142        SIUL2.GPDO[142].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO143        SIUL2.GPDO[143].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO144        SIUL2.GPDO[144].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO145        SIUL2.GPDO[145].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO146        SIUL2.GPDO[146].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO147        SIUL2.GPDO[147].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO148        SIUL2.GPDO[148].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO149        SIUL2.GPDO[149].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO150        SIUL2.GPDO[150].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO151        SIUL2.GPDO[151].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO152        SIUL2.GPDO[152].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO153        SIUL2.GPDO[153].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO154        SIUL2.GPDO[154].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO155        SIUL2.GPDO[155].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO156        SIUL2.GPDO[156].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO157        SIUL2.GPDO[157].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO158        SIUL2.GPDO[158].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO159        SIUL2.GPDO[159].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO160        SIUL2.GPDO[160].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO161        SIUL2.GPDO[161].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO162        SIUL2.GPDO[162].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO163        SIUL2.GPDO[163].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO164        SIUL2.GPDO[164].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO165        SIUL2.GPDO[165].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO166        SIUL2.GPDO[166].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO167        SIUL2.GPDO[167].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO168        SIUL2.GPDO[168].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO169        SIUL2.GPDO[169].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO170        SIUL2.GPDO[170].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO171        SIUL2.GPDO[171].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO172        SIUL2.GPDO[172].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO173        SIUL2.GPDO[173].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO174        SIUL2.GPDO[174].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO175        SIUL2.GPDO[175].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO176        SIUL2.GPDO[176].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO177        SIUL2.GPDO[177].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO178        SIUL2.GPDO[178].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO179        SIUL2.GPDO[179].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO180        SIUL2.GPDO[180].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO181        SIUL2.GPDO[181].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO182        SIUL2.GPDO[182].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO183        SIUL2.GPDO[183].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO184        SIUL2.GPDO[184].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO185        SIUL2.GPDO[185].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO186        SIUL2.GPDO[186].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO187        SIUL2.GPDO[187].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO188        SIUL2.GPDO[188].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO189        SIUL2.GPDO[189].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO190        SIUL2.GPDO[190].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO191        SIUL2.GPDO[191].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO192        SIUL2.GPDO[192].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO193        SIUL2.GPDO[193].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO194        SIUL2.GPDO[194].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO195        SIUL2.GPDO[195].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO196        SIUL2.GPDO[196].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO197        SIUL2.GPDO[197].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO198        SIUL2.GPDO[198].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO199        SIUL2.GPDO[199].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO200        SIUL2.GPDO[200].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO201        SIUL2.GPDO[201].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO202        SIUL2.GPDO[202].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO203        SIUL2.GPDO[203].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO204        SIUL2.GPDO[204].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO205        SIUL2.GPDO[205].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO206        SIUL2.GPDO[206].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO207        SIUL2.GPDO[207].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO208        SIUL2.GPDO[208].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO209        SIUL2.GPDO[209].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO210        SIUL2.GPDO[210].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO211        SIUL2.GPDO[211].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO212        SIUL2.GPDO[212].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO213        SIUL2.GPDO[213].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO214        SIUL2.GPDO[214].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO215        SIUL2.GPDO[215].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO216        SIUL2.GPDO[216].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO217        SIUL2.GPDO[217].R             /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDI0          SIUL2.GPDI[0].R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI1          SIUL2.GPDI[1].R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI2          SIUL2.GPDI[2].R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI3          SIUL2.GPDI[3].R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI4          SIUL2.GPDI[4].R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI5          SIUL2.GPDI[5].R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI6          SIUL2.GPDI[6].R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI7          SIUL2.GPDI[7].R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI8          SIUL2.GPDI[8].R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI9          SIUL2.GPDI[9].R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI10         SIUL2.GPDI[10].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI11         SIUL2.GPDI[11].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI12         SIUL2.GPDI[12].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI13         SIUL2.GPDI[13].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI14         SIUL2.GPDI[14].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI15         SIUL2.GPDI[15].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI16         SIUL2.GPDI[16].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI17         SIUL2.GPDI[17].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI18         SIUL2.GPDI[18].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI19         SIUL2.GPDI[19].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI20         SIUL2.GPDI[20].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI21         SIUL2.GPDI[21].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI22         SIUL2.GPDI[22].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI23         SIUL2.GPDI[23].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI24         SIUL2.GPDI[24].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI25         SIUL2.GPDI[25].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI26         SIUL2.GPDI[26].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI27         SIUL2.GPDI[27].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI28         SIUL2.GPDI[28].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI29         SIUL2.GPDI[29].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI30         SIUL2.GPDI[30].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI31         SIUL2.GPDI[31].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI32         SIUL2.GPDI[32].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI33         SIUL2.GPDI[33].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI34         SIUL2.GPDI[34].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI35         SIUL2.GPDI[35].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI36         SIUL2.GPDI[36].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI37         SIUL2.GPDI[37].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI38         SIUL2.GPDI[38].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI39         SIUL2.GPDI[39].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI40         SIUL2.GPDI[40].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI41         SIUL2.GPDI[41].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI42         SIUL2.GPDI[42].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI43         SIUL2.GPDI[43].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI44         SIUL2.GPDI[44].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI45         SIUL2.GPDI[45].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI46         SIUL2.GPDI[46].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI47         SIUL2.GPDI[47].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI48         SIUL2.GPDI[48].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI49         SIUL2.GPDI[49].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI50         SIUL2.GPDI[50].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI51         SIUL2.GPDI[51].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI52         SIUL2.GPDI[52].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI53         SIUL2.GPDI[53].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI54         SIUL2.GPDI[54].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI55         SIUL2.GPDI[55].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI56         SIUL2.GPDI[56].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI57         SIUL2.GPDI[57].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI58         SIUL2.GPDI[58].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI59         SIUL2.GPDI[59].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI60         SIUL2.GPDI[60].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI61         SIUL2.GPDI[61].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI62         SIUL2.GPDI[62].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI63         SIUL2.GPDI[63].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI64         SIUL2.GPDI[64].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI65         SIUL2.GPDI[65].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI66         SIUL2.GPDI[66].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI67         SIUL2.GPDI[67].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI68         SIUL2.GPDI[68].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI69         SIUL2.GPDI[69].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI70         SIUL2.GPDI[70].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI71         SIUL2.GPDI[71].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI72         SIUL2.GPDI[72].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI73         SIUL2.GPDI[73].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI74         SIUL2.GPDI[74].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI75         SIUL2.GPDI[75].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI76         SIUL2.GPDI[76].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI77         SIUL2.GPDI[77].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI78         SIUL2.GPDI[78].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI79         SIUL2.GPDI[79].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI80         SIUL2.GPDI[80].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI81         SIUL2.GPDI[81].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI82         SIUL2.GPDI[82].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI83         SIUL2.GPDI[83].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI84         SIUL2.GPDI[84].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI85         SIUL2.GPDI[85].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI86         SIUL2.GPDI[86].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI87         SIUL2.GPDI[87].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI88         SIUL2.GPDI[88].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI89         SIUL2.GPDI[89].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI90         SIUL2.GPDI[90].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI91         SIUL2.GPDI[91].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI92         SIUL2.GPDI[92].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI93         SIUL2.GPDI[93].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI94         SIUL2.GPDI[94].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI95         SIUL2.GPDI[95].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI96         SIUL2.GPDI[96].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI97         SIUL2.GPDI[97].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI98         SIUL2.GPDI[98].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI99         SIUL2.GPDI[99].R              /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI100        SIUL2.GPDI[100].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI101        SIUL2.GPDI[101].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI102        SIUL2.GPDI[102].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI103        SIUL2.GPDI[103].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI104        SIUL2.GPDI[104].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI105        SIUL2.GPDI[105].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI106        SIUL2.GPDI[106].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI107        SIUL2.GPDI[107].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI108        SIUL2.GPDI[108].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI109        SIUL2.GPDI[109].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI110        SIUL2.GPDI[110].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI111        SIUL2.GPDI[111].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI112        SIUL2.GPDI[112].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI113        SIUL2.GPDI[113].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI114        SIUL2.GPDI[114].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI115        SIUL2.GPDI[115].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI116        SIUL2.GPDI[116].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI117        SIUL2.GPDI[117].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI118        SIUL2.GPDI[118].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI119        SIUL2.GPDI[119].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI120        SIUL2.GPDI[120].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI121        SIUL2.GPDI[121].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI122        SIUL2.GPDI[122].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI123        SIUL2.GPDI[123].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI124        SIUL2.GPDI[124].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI125        SIUL2.GPDI[125].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI126        SIUL2.GPDI[126].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI127        SIUL2.GPDI[127].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI128        SIUL2.GPDI[128].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI129        SIUL2.GPDI[129].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI130        SIUL2.GPDI[130].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI131        SIUL2.GPDI[131].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI132        SIUL2.GPDI[132].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI133        SIUL2.GPDI[133].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI134        SIUL2.GPDI[134].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI135        SIUL2.GPDI[135].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI136        SIUL2.GPDI[136].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI137        SIUL2.GPDI[137].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI138        SIUL2.GPDI[138].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI139        SIUL2.GPDI[139].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI140        SIUL2.GPDI[140].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI141        SIUL2.GPDI[141].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI142        SIUL2.GPDI[142].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI143        SIUL2.GPDI[143].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI144        SIUL2.GPDI[144].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI145        SIUL2.GPDI[145].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI146        SIUL2.GPDI[146].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI147        SIUL2.GPDI[147].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI148        SIUL2.GPDI[148].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI149        SIUL2.GPDI[149].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI150        SIUL2.GPDI[150].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI151        SIUL2.GPDI[151].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI152        SIUL2.GPDI[152].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI153        SIUL2.GPDI[153].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI154        SIUL2.GPDI[154].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI155        SIUL2.GPDI[155].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI156        SIUL2.GPDI[156].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI157        SIUL2.GPDI[157].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI158        SIUL2.GPDI[158].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI159        SIUL2.GPDI[159].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI160        SIUL2.GPDI[160].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI161        SIUL2.GPDI[161].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI162        SIUL2.GPDI[162].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI163        SIUL2.GPDI[163].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI164        SIUL2.GPDI[164].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI165        SIUL2.GPDI[165].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI166        SIUL2.GPDI[166].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI167        SIUL2.GPDI[167].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI168        SIUL2.GPDI[168].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI169        SIUL2.GPDI[169].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI170        SIUL2.GPDI[170].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI171        SIUL2.GPDI[171].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI172        SIUL2.GPDI[172].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI173        SIUL2.GPDI[173].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI174        SIUL2.GPDI[174].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI175        SIUL2.GPDI[175].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI176        SIUL2.GPDI[176].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI177        SIUL2.GPDI[177].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI178        SIUL2.GPDI[178].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI179        SIUL2.GPDI[179].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI180        SIUL2.GPDI[180].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI181        SIUL2.GPDI[181].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI182        SIUL2.GPDI[182].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI183        SIUL2.GPDI[183].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI184        SIUL2.GPDI[184].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI185        SIUL2.GPDI[185].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI186        SIUL2.GPDI[186].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI187        SIUL2.GPDI[187].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI188        SIUL2.GPDI[188].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI189        SIUL2.GPDI[189].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI190        SIUL2.GPDI[190].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI191        SIUL2.GPDI[191].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI192        SIUL2.GPDI[192].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI193        SIUL2.GPDI[193].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI194        SIUL2.GPDI[194].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI195        SIUL2.GPDI[195].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI196        SIUL2.GPDI[196].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI197        SIUL2.GPDI[197].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI198        SIUL2.GPDI[198].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI199        SIUL2.GPDI[199].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI200        SIUL2.GPDI[200].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI201        SIUL2.GPDI[201].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI202        SIUL2.GPDI[202].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI203        SIUL2.GPDI[203].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI204        SIUL2.GPDI[204].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI205        SIUL2.GPDI[205].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI206        SIUL2.GPDI[206].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI207        SIUL2.GPDI[207].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI208        SIUL2.GPDI[208].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI209        SIUL2.GPDI[209].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI210        SIUL2.GPDI[210].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI211        SIUL2.GPDI[211].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI212        SIUL2.GPDI[212].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI213        SIUL2.GPDI[213].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI214        SIUL2.GPDI[214].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI215        SIUL2.GPDI[215].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI216        SIUL2.GPDI[216].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI217        SIUL2.GPDI[217].R             /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_PGPDO0         SIUL2.PGPDO[0].R              /* SIUL2 Parallel GPIO Pad Data Out Register */
#define SIUL2_PGPDO1         SIUL2.PGPDO[1].R              /* SIUL2 Parallel GPIO Pad Data Out Register */
#define SIUL2_PGPDO2         SIUL2.PGPDO[2].R              /* SIUL2 Parallel GPIO Pad Data Out Register */
#define SIUL2_PGPDO3         SIUL2.PGPDO[3].R              /* SIUL2 Parallel GPIO Pad Data Out Register */
#define SIUL2_PGPDO4         SIUL2.PGPDO[4].R              /* SIUL2 Parallel GPIO Pad Data Out Register */
#define SIUL2_PGPDO5         SIUL2.PGPDO[5].R              /* SIUL2 Parallel GPIO Pad Data Out Register */
#define SIUL2_PGPDO6         SIUL2.PGPDO[6].R              /* SIUL2 Parallel GPIO Pad Data Out Register */
#define SIUL2_PGPDO7         SIUL2.PGPDO[7].R              /* SIUL2 Parallel GPIO Pad Data Out Register */
#define SIUL2_PGPDO8         SIUL2.PGPDO[8].R              /* SIUL2 Parallel GPIO Pad Data Out Register */
#define SIUL2_PGPDO9         SIUL2.PGPDO[9].R              /* SIUL2 Parallel GPIO Pad Data Out Register */
#define SIUL2_PGPDO10        SIUL2.PGPDO[10].R             /* SIUL2 Parallel GPIO Pad Data Out Register */
#define SIUL2_PGPDO11        SIUL2.PGPDO[11].R             /* SIUL2 Parallel GPIO Pad Data Out Register */
#define SIUL2_PGPDO12        SIUL2.PGPDO[12].R             /* SIUL2 Parallel GPIO Pad Data Out Register */
#define SIUL2_PGPDO13        SIUL2.PGPDO[13].R             /* SIUL2 Parallel GPIO Pad Data Out Register */
#define SIUL2_PGPDI0         SIUL2.PGPDI[0].R              /* SIUL2 Parallel GPIO Pad Data In Register */
#define SIUL2_PGPDI1         SIUL2.PGPDI[1].R              /* SIUL2 Parallel GPIO Pad Data In Register */
#define SIUL2_PGPDI2         SIUL2.PGPDI[2].R              /* SIUL2 Parallel GPIO Pad Data In Register */
#define SIUL2_PGPDI3         SIUL2.PGPDI[3].R              /* SIUL2 Parallel GPIO Pad Data In Register */
#define SIUL2_PGPDI4         SIUL2.PGPDI[4].R              /* SIUL2 Parallel GPIO Pad Data In Register */
#define SIUL2_PGPDI5         SIUL2.PGPDI[5].R              /* SIUL2 Parallel GPIO Pad Data In Register */
#define SIUL2_PGPDI6         SIUL2.PGPDI[6].R              /* SIUL2 Parallel GPIO Pad Data In Register */
#define SIUL2_PGPDI7         SIUL2.PGPDI[7].R              /* SIUL2 Parallel GPIO Pad Data In Register */
#define SIUL2_PGPDI8         SIUL2.PGPDI[8].R              /* SIUL2 Parallel GPIO Pad Data In Register */
#define SIUL2_PGPDI9         SIUL2.PGPDI[9].R              /* SIUL2 Parallel GPIO Pad Data In Register */
#define SIUL2_PGPDI10        SIUL2.PGPDI[10].R             /* SIUL2 Parallel GPIO Pad Data In Register */
#define SIUL2_PGPDI11        SIUL2.PGPDI[11].R             /* SIUL2 Parallel GPIO Pad Data In Register */
#define SIUL2_PGPDI12        SIUL2.PGPDI[12].R             /* SIUL2 Parallel GPIO Pad Data In Register */
#define SIUL2_PGPDI13        SIUL2.PGPDI[13].R             /* SIUL2 Parallel GPIO Pad Data In Register */
#define SIUL2_MPGPDO0        SIUL2.MPGPDO[0].R             /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
#define SIUL2_MPGPDO1        SIUL2.MPGPDO[1].R             /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
#define SIUL2_MPGPDO2        SIUL2.MPGPDO[2].R             /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
#define SIUL2_MPGPDO3        SIUL2.MPGPDO[3].R             /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
#define SIUL2_MPGPDO4        SIUL2.MPGPDO[4].R             /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
#define SIUL2_MPGPDO5        SIUL2.MPGPDO[5].R             /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
#define SIUL2_MPGPDO6        SIUL2.MPGPDO[6].R             /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
#define SIUL2_MPGPDO7        SIUL2.MPGPDO[7].R             /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
#define SIUL2_MPGPDO8        SIUL2.MPGPDO[8].R             /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
#define SIUL2_MPGPDO9        SIUL2.MPGPDO[9].R             /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
#define SIUL2_MPGPDO10       SIUL2.MPGPDO[10].R            /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
#define SIUL2_MPGPDO11       SIUL2.MPGPDO[11].R            /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
#define SIUL2_MPGPDO12       SIUL2.MPGPDO[12].R            /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
#define SIUL2_MPGPDO13       SIUL2.MPGPDO[13].R            /* SIUL2 Masked Parallel GPIO Pad Data Out Register */

/* SMPU_0 */
#define SMPU_0_CESR0         SMPU_0.CESR0.R                /* Control/Error Status Register 0 */
#define SMPU_0_CESR1         SMPU_0.CESR1.R                /* Control/Error Status Register 1 */
#define SMPU_0_EAR0          SMPU_0.ERROR[0].EAR.R         /* Error Address Register, Bus Master n */
#define SMPU_0_EDR0          SMPU_0.ERROR[0].EDR.R         /* Error Detail Register, Bus Master n */
#define SMPU_0_EAR1          SMPU_0.ERROR[1].EAR.R         /* Error Address Register, Bus Master n */
#define SMPU_0_EDR1          SMPU_0.ERROR[1].EDR.R         /* Error Detail Register, Bus Master n */
#define SMPU_0_EAR2          SMPU_0.ERROR[2].EAR.R         /* Error Address Register, Bus Master n */
#define SMPU_0_EDR2          SMPU_0.ERROR[2].EDR.R         /* Error Detail Register, Bus Master n */
#define SMPU_0_EAR3          SMPU_0.ERROR[3].EAR.R         /* Error Address Register, Bus Master n */
#define SMPU_0_EDR3          SMPU_0.ERROR[3].EDR.R         /* Error Detail Register, Bus Master n */
#define SMPU_0_EAR4          SMPU_0.ERROR[4].EAR.R         /* Error Address Register, Bus Master n */
#define SMPU_0_EDR4          SMPU_0.ERROR[4].EDR.R         /* Error Detail Register, Bus Master n */
#define SMPU_0_EAR5          SMPU_0.ERROR[5].EAR.R         /* Error Address Register, Bus Master n */
#define SMPU_0_EDR5          SMPU_0.ERROR[5].EDR.R         /* Error Detail Register, Bus Master n */
#define SMPU_0_EAR6          SMPU_0.ERROR[6].EAR.R         /* Error Address Register, Bus Master n */
#define SMPU_0_EDR6          SMPU_0.ERROR[6].EDR.R         /* Error Detail Register, Bus Master n */
#define SMPU_0_EAR7          SMPU_0.ERROR[7].EAR.R         /* Error Address Register, Bus Master n */
#define SMPU_0_EDR7          SMPU_0.ERROR[7].EDR.R         /* Error Detail Register, Bus Master n */
#define SMPU_0_EAR8          SMPU_0.ERROR[8].EAR.R         /* Error Address Register, Bus Master n */
#define SMPU_0_EDR8          SMPU_0.ERROR[8].EDR.R         /* Error Detail Register, Bus Master n */
#define SMPU_0_EAR9          SMPU_0.ERROR[9].EAR.R         /* Error Address Register, Bus Master n */
#define SMPU_0_EDR9          SMPU_0.ERROR[9].EDR.R         /* Error Detail Register, Bus Master n */
#define SMPU_0_EAR10         SMPU_0.ERROR[10].EAR.R        /* Error Address Register, Bus Master n */
#define SMPU_0_EDR10         SMPU_0.ERROR[10].EDR.R        /* Error Detail Register, Bus Master n */
#define SMPU_0_EAR11         SMPU_0.ERROR[11].EAR.R        /* Error Address Register, Bus Master n */
#define SMPU_0_EDR11         SMPU_0.ERROR[11].EDR.R        /* Error Detail Register, Bus Master n */
#define SMPU_0_EAR12         SMPU_0.ERROR[12].EAR.R        /* Error Address Register, Bus Master n */
#define SMPU_0_EDR12         SMPU_0.ERROR[12].EDR.R        /* Error Detail Register, Bus Master n */
#define SMPU_0_EAR13         SMPU_0.ERROR[13].EAR.R        /* Error Address Register, Bus Master n */
#define SMPU_0_EDR13         SMPU_0.ERROR[13].EDR.R        /* Error Detail Register, Bus Master n */
#define SMPU_0_EAR14         SMPU_0.ERROR[14].EAR.R        /* Error Address Register, Bus Master n */
#define SMPU_0_EDR14         SMPU_0.ERROR[14].EDR.R        /* Error Detail Register, Bus Master n */
#define SMPU_0_EAR15         SMPU_0.ERROR[15].EAR.R        /* Error Address Register, Bus Master n */
#define SMPU_0_EDR15         SMPU_0.ERROR[15].EDR.R        /* Error Detail Register, Bus Master n */
#define SMPU_0_RGD0_WORD0    SMPU_0.RGD[0].WORD0.R         /* Region Descriptor n, Word 0 */
#define SMPU_0_RGD0_WORD1    SMPU_0.RGD[0].WORD1.R         /* Region Descriptor n, Word 1 */
#define SMPU_0_RGD0_WORD2    SMPU_0.RGD[0].WORD2.R         /* Region Descriptor n, Word 2 */
#define SMPU_0_RGD0_WORD3    SMPU_0.RGD[0].WORD3.R         /* Region Descriptor n, Word 3 */
#define SMPU_0_RGD1_WORD0    SMPU_0.RGD[1].WORD0.R         /* Region Descriptor n, Word 0 */
#define SMPU_0_RGD1_WORD1    SMPU_0.RGD[1].WORD1.R         /* Region Descriptor n, Word 1 */
#define SMPU_0_RGD1_WORD2    SMPU_0.RGD[1].WORD2.R         /* Region Descriptor n, Word 2 */
#define SMPU_0_RGD1_WORD3    SMPU_0.RGD[1].WORD3.R         /* Region Descriptor n, Word 3 */
#define SMPU_0_RGD2_WORD0    SMPU_0.RGD[2].WORD0.R         /* Region Descriptor n, Word 0 */
#define SMPU_0_RGD2_WORD1    SMPU_0.RGD[2].WORD1.R         /* Region Descriptor n, Word 1 */
#define SMPU_0_RGD2_WORD2    SMPU_0.RGD[2].WORD2.R         /* Region Descriptor n, Word 2 */
#define SMPU_0_RGD2_WORD3    SMPU_0.RGD[2].WORD3.R         /* Region Descriptor n, Word 3 */
#define SMPU_0_RGD3_WORD0    SMPU_0.RGD[3].WORD0.R         /* Region Descriptor n, Word 0 */
#define SMPU_0_RGD3_WORD1    SMPU_0.RGD[3].WORD1.R         /* Region Descriptor n, Word 1 */
#define SMPU_0_RGD3_WORD2    SMPU_0.RGD[3].WORD2.R         /* Region Descriptor n, Word 2 */
#define SMPU_0_RGD3_WORD3    SMPU_0.RGD[3].WORD3.R         /* Region Descriptor n, Word 3 */
#define SMPU_0_RGD4_WORD0    SMPU_0.RGD[4].WORD0.R         /* Region Descriptor n, Word 0 */
#define SMPU_0_RGD4_WORD1    SMPU_0.RGD[4].WORD1.R         /* Region Descriptor n, Word 1 */
#define SMPU_0_RGD4_WORD2    SMPU_0.RGD[4].WORD2.R         /* Region Descriptor n, Word 2 */
#define SMPU_0_RGD4_WORD3    SMPU_0.RGD[4].WORD3.R         /* Region Descriptor n, Word 3 */
#define SMPU_0_RGD5_WORD0    SMPU_0.RGD[5].WORD0.R         /* Region Descriptor n, Word 0 */
#define SMPU_0_RGD5_WORD1    SMPU_0.RGD[5].WORD1.R         /* Region Descriptor n, Word 1 */
#define SMPU_0_RGD5_WORD2    SMPU_0.RGD[5].WORD2.R         /* Region Descriptor n, Word 2 */
#define SMPU_0_RGD5_WORD3    SMPU_0.RGD[5].WORD3.R         /* Region Descriptor n, Word 3 */
#define SMPU_0_RGD6_WORD0    SMPU_0.RGD[6].WORD0.R         /* Region Descriptor n, Word 0 */
#define SMPU_0_RGD6_WORD1    SMPU_0.RGD[6].WORD1.R         /* Region Descriptor n, Word 1 */
#define SMPU_0_RGD6_WORD2    SMPU_0.RGD[6].WORD2.R         /* Region Descriptor n, Word 2 */
#define SMPU_0_RGD6_WORD3    SMPU_0.RGD[6].WORD3.R         /* Region Descriptor n, Word 3 */
#define SMPU_0_RGD7_WORD0    SMPU_0.RGD[7].WORD0.R         /* Region Descriptor n, Word 0 */
#define SMPU_0_RGD7_WORD1    SMPU_0.RGD[7].WORD1.R         /* Region Descriptor n, Word 1 */
#define SMPU_0_RGD7_WORD2    SMPU_0.RGD[7].WORD2.R         /* Region Descriptor n, Word 2 */
#define SMPU_0_RGD7_WORD3    SMPU_0.RGD[7].WORD3.R         /* Region Descriptor n, Word 3 */
#define SMPU_0_RGD8_WORD0    SMPU_0.RGD[8].WORD0.R         /* Region Descriptor n, Word 0 */
#define SMPU_0_RGD8_WORD1    SMPU_0.RGD[8].WORD1.R         /* Region Descriptor n, Word 1 */
#define SMPU_0_RGD8_WORD2    SMPU_0.RGD[8].WORD2.R         /* Region Descriptor n, Word 2 */
#define SMPU_0_RGD8_WORD3    SMPU_0.RGD[8].WORD3.R         /* Region Descriptor n, Word 3 */
#define SMPU_0_RGD9_WORD0    SMPU_0.RGD[9].WORD0.R         /* Region Descriptor n, Word 0 */
#define SMPU_0_RGD9_WORD1    SMPU_0.RGD[9].WORD1.R         /* Region Descriptor n, Word 1 */
#define SMPU_0_RGD9_WORD2    SMPU_0.RGD[9].WORD2.R         /* Region Descriptor n, Word 2 */
#define SMPU_0_RGD9_WORD3    SMPU_0.RGD[9].WORD3.R         /* Region Descriptor n, Word 3 */
#define SMPU_0_RGD10_WORD0   SMPU_0.RGD[10].WORD0.R        /* Region Descriptor n, Word 0 */
#define SMPU_0_RGD10_WORD1   SMPU_0.RGD[10].WORD1.R        /* Region Descriptor n, Word 1 */
#define SMPU_0_RGD10_WORD2   SMPU_0.RGD[10].WORD2.R        /* Region Descriptor n, Word 2 */
#define SMPU_0_RGD10_WORD3   SMPU_0.RGD[10].WORD3.R        /* Region Descriptor n, Word 3 */
#define SMPU_0_RGD11_WORD0   SMPU_0.RGD[11].WORD0.R        /* Region Descriptor n, Word 0 */
#define SMPU_0_RGD11_WORD1   SMPU_0.RGD[11].WORD1.R        /* Region Descriptor n, Word 1 */
#define SMPU_0_RGD11_WORD2   SMPU_0.RGD[11].WORD2.R        /* Region Descriptor n, Word 2 */
#define SMPU_0_RGD11_WORD3   SMPU_0.RGD[11].WORD3.R        /* Region Descriptor n, Word 3 */
#define SMPU_0_RGD12_WORD0   SMPU_0.RGD[12].WORD0.R        /* Region Descriptor n, Word 0 */
#define SMPU_0_RGD12_WORD1   SMPU_0.RGD[12].WORD1.R        /* Region Descriptor n, Word 1 */
#define SMPU_0_RGD12_WORD2   SMPU_0.RGD[12].WORD2.R        /* Region Descriptor n, Word 2 */
#define SMPU_0_RGD12_WORD3   SMPU_0.RGD[12].WORD3.R        /* Region Descriptor n, Word 3 */
#define SMPU_0_RGD13_WORD0   SMPU_0.RGD[13].WORD0.R        /* Region Descriptor n, Word 0 */
#define SMPU_0_RGD13_WORD1   SMPU_0.RGD[13].WORD1.R        /* Region Descriptor n, Word 1 */
#define SMPU_0_RGD13_WORD2   SMPU_0.RGD[13].WORD2.R        /* Region Descriptor n, Word 2 */
#define SMPU_0_RGD13_WORD3   SMPU_0.RGD[13].WORD3.R        /* Region Descriptor n, Word 3 */
#define SMPU_0_RGD14_WORD0   SMPU_0.RGD[14].WORD0.R        /* Region Descriptor n, Word 0 */
#define SMPU_0_RGD14_WORD1   SMPU_0.RGD[14].WORD1.R        /* Region Descriptor n, Word 1 */
#define SMPU_0_RGD14_WORD2   SMPU_0.RGD[14].WORD2.R        /* Region Descriptor n, Word 2 */
#define SMPU_0_RGD14_WORD3   SMPU_0.RGD[14].WORD3.R        /* Region Descriptor n, Word 3 */
#define SMPU_0_RGD15_WORD0   SMPU_0.RGD[15].WORD0.R        /* Region Descriptor n, Word 0 */
#define SMPU_0_RGD15_WORD1   SMPU_0.RGD[15].WORD1.R        /* Region Descriptor n, Word 1 */
#define SMPU_0_RGD15_WORD2   SMPU_0.RGD[15].WORD2.R        /* Region Descriptor n, Word 2 */
#define SMPU_0_RGD15_WORD3   SMPU_0.RGD[15].WORD3.R        /* Region Descriptor n, Word 3 */

/* SMPU_1 */
#define SMPU_1_CESR0         SMPU_1.CESR0.R                /* Control/Error Status Register 0 */
#define SMPU_1_CESR1         SMPU_1.CESR1.R                /* Control/Error Status Register 1 */
#define SMPU_1_EAR0          SMPU_1.ERROR[0].EAR.R         /* Error Address Register, Bus Master n */
#define SMPU_1_EDR0          SMPU_1.ERROR[0].EDR.R         /* Error Detail Register, Bus Master n */
#define SMPU_1_EAR1          SMPU_1.ERROR[1].EAR.R         /* Error Address Register, Bus Master n */
#define SMPU_1_EDR1          SMPU_1.ERROR[1].EDR.R         /* Error Detail Register, Bus Master n */
#define SMPU_1_EAR2          SMPU_1.ERROR[2].EAR.R         /* Error Address Register, Bus Master n */
#define SMPU_1_EDR2          SMPU_1.ERROR[2].EDR.R         /* Error Detail Register, Bus Master n */
#define SMPU_1_EAR3          SMPU_1.ERROR[3].EAR.R         /* Error Address Register, Bus Master n */
#define SMPU_1_EDR3          SMPU_1.ERROR[3].EDR.R         /* Error Detail Register, Bus Master n */
#define SMPU_1_EAR4          SMPU_1.ERROR[4].EAR.R         /* Error Address Register, Bus Master n */
#define SMPU_1_EDR4          SMPU_1.ERROR[4].EDR.R         /* Error Detail Register, Bus Master n */
#define SMPU_1_EAR5          SMPU_1.ERROR[5].EAR.R         /* Error Address Register, Bus Master n */
#define SMPU_1_EDR5          SMPU_1.ERROR[5].EDR.R         /* Error Detail Register, Bus Master n */
#define SMPU_1_EAR6          SMPU_1.ERROR[6].EAR.R         /* Error Address Register, Bus Master n */
#define SMPU_1_EDR6          SMPU_1.ERROR[6].EDR.R         /* Error Detail Register, Bus Master n */
#define SMPU_1_EAR7          SMPU_1.ERROR[7].EAR.R         /* Error Address Register, Bus Master n */
#define SMPU_1_EDR7          SMPU_1.ERROR[7].EDR.R         /* Error Detail Register, Bus Master n */
#define SMPU_1_EAR8          SMPU_1.ERROR[8].EAR.R         /* Error Address Register, Bus Master n */
#define SMPU_1_EDR8          SMPU_1.ERROR[8].EDR.R         /* Error Detail Register, Bus Master n */
#define SMPU_1_EAR9          SMPU_1.ERROR[9].EAR.R         /* Error Address Register, Bus Master n */
#define SMPU_1_EDR9          SMPU_1.ERROR[9].EDR.R         /* Error Detail Register, Bus Master n */
#define SMPU_1_EAR10         SMPU_1.ERROR[10].EAR.R        /* Error Address Register, Bus Master n */
#define SMPU_1_EDR10         SMPU_1.ERROR[10].EDR.R        /* Error Detail Register, Bus Master n */
#define SMPU_1_EAR11         SMPU_1.ERROR[11].EAR.R        /* Error Address Register, Bus Master n */
#define SMPU_1_EDR11         SMPU_1.ERROR[11].EDR.R        /* Error Detail Register, Bus Master n */
#define SMPU_1_EAR12         SMPU_1.ERROR[12].EAR.R        /* Error Address Register, Bus Master n */
#define SMPU_1_EDR12         SMPU_1.ERROR[12].EDR.R        /* Error Detail Register, Bus Master n */
#define SMPU_1_EAR13         SMPU_1.ERROR[13].EAR.R        /* Error Address Register, Bus Master n */
#define SMPU_1_EDR13         SMPU_1.ERROR[13].EDR.R        /* Error Detail Register, Bus Master n */
#define SMPU_1_EAR14         SMPU_1.ERROR[14].EAR.R        /* Error Address Register, Bus Master n */
#define SMPU_1_EDR14         SMPU_1.ERROR[14].EDR.R        /* Error Detail Register, Bus Master n */
#define SMPU_1_EAR15         SMPU_1.ERROR[15].EAR.R        /* Error Address Register, Bus Master n */
#define SMPU_1_EDR15         SMPU_1.ERROR[15].EDR.R        /* Error Detail Register, Bus Master n */
#define SMPU_1_RGD0_WORD0    SMPU_1.RGD[0].WORD0.R         /* Region Descriptor n, Word 0 */
#define SMPU_1_RGD0_WORD1    SMPU_1.RGD[0].WORD1.R         /* Region Descriptor n, Word 1 */
#define SMPU_1_RGD0_WORD2    SMPU_1.RGD[0].WORD2.R         /* Region Descriptor n, Word 2 */
#define SMPU_1_RGD0_WORD3    SMPU_1.RGD[0].WORD3.R         /* Region Descriptor n, Word 3 */
#define SMPU_1_RGD1_WORD0    SMPU_1.RGD[1].WORD0.R         /* Region Descriptor n, Word 0 */
#define SMPU_1_RGD1_WORD1    SMPU_1.RGD[1].WORD1.R         /* Region Descriptor n, Word 1 */
#define SMPU_1_RGD1_WORD2    SMPU_1.RGD[1].WORD2.R         /* Region Descriptor n, Word 2 */
#define SMPU_1_RGD1_WORD3    SMPU_1.RGD[1].WORD3.R         /* Region Descriptor n, Word 3 */
#define SMPU_1_RGD2_WORD0    SMPU_1.RGD[2].WORD0.R         /* Region Descriptor n, Word 0 */
#define SMPU_1_RGD2_WORD1    SMPU_1.RGD[2].WORD1.R         /* Region Descriptor n, Word 1 */
#define SMPU_1_RGD2_WORD2    SMPU_1.RGD[2].WORD2.R         /* Region Descriptor n, Word 2 */
#define SMPU_1_RGD2_WORD3    SMPU_1.RGD[2].WORD3.R         /* Region Descriptor n, Word 3 */
#define SMPU_1_RGD3_WORD0    SMPU_1.RGD[3].WORD0.R         /* Region Descriptor n, Word 0 */
#define SMPU_1_RGD3_WORD1    SMPU_1.RGD[3].WORD1.R         /* Region Descriptor n, Word 1 */
#define SMPU_1_RGD3_WORD2    SMPU_1.RGD[3].WORD2.R         /* Region Descriptor n, Word 2 */
#define SMPU_1_RGD3_WORD3    SMPU_1.RGD[3].WORD3.R         /* Region Descriptor n, Word 3 */
#define SMPU_1_RGD4_WORD0    SMPU_1.RGD[4].WORD0.R         /* Region Descriptor n, Word 0 */
#define SMPU_1_RGD4_WORD1    SMPU_1.RGD[4].WORD1.R         /* Region Descriptor n, Word 1 */
#define SMPU_1_RGD4_WORD2    SMPU_1.RGD[4].WORD2.R         /* Region Descriptor n, Word 2 */
#define SMPU_1_RGD4_WORD3    SMPU_1.RGD[4].WORD3.R         /* Region Descriptor n, Word 3 */
#define SMPU_1_RGD5_WORD0    SMPU_1.RGD[5].WORD0.R         /* Region Descriptor n, Word 0 */
#define SMPU_1_RGD5_WORD1    SMPU_1.RGD[5].WORD1.R         /* Region Descriptor n, Word 1 */
#define SMPU_1_RGD5_WORD2    SMPU_1.RGD[5].WORD2.R         /* Region Descriptor n, Word 2 */
#define SMPU_1_RGD5_WORD3    SMPU_1.RGD[5].WORD3.R         /* Region Descriptor n, Word 3 */
#define SMPU_1_RGD6_WORD0    SMPU_1.RGD[6].WORD0.R         /* Region Descriptor n, Word 0 */
#define SMPU_1_RGD6_WORD1    SMPU_1.RGD[6].WORD1.R         /* Region Descriptor n, Word 1 */
#define SMPU_1_RGD6_WORD2    SMPU_1.RGD[6].WORD2.R         /* Region Descriptor n, Word 2 */
#define SMPU_1_RGD6_WORD3    SMPU_1.RGD[6].WORD3.R         /* Region Descriptor n, Word 3 */
#define SMPU_1_RGD7_WORD0    SMPU_1.RGD[7].WORD0.R         /* Region Descriptor n, Word 0 */
#define SMPU_1_RGD7_WORD1    SMPU_1.RGD[7].WORD1.R         /* Region Descriptor n, Word 1 */
#define SMPU_1_RGD7_WORD2    SMPU_1.RGD[7].WORD2.R         /* Region Descriptor n, Word 2 */
#define SMPU_1_RGD7_WORD3    SMPU_1.RGD[7].WORD3.R         /* Region Descriptor n, Word 3 */
#define SMPU_1_RGD8_WORD0    SMPU_1.RGD[8].WORD0.R         /* Region Descriptor n, Word 0 */
#define SMPU_1_RGD8_WORD1    SMPU_1.RGD[8].WORD1.R         /* Region Descriptor n, Word 1 */
#define SMPU_1_RGD8_WORD2    SMPU_1.RGD[8].WORD2.R         /* Region Descriptor n, Word 2 */
#define SMPU_1_RGD8_WORD3    SMPU_1.RGD[8].WORD3.R         /* Region Descriptor n, Word 3 */
#define SMPU_1_RGD9_WORD0    SMPU_1.RGD[9].WORD0.R         /* Region Descriptor n, Word 0 */
#define SMPU_1_RGD9_WORD1    SMPU_1.RGD[9].WORD1.R         /* Region Descriptor n, Word 1 */
#define SMPU_1_RGD9_WORD2    SMPU_1.RGD[9].WORD2.R         /* Region Descriptor n, Word 2 */
#define SMPU_1_RGD9_WORD3    SMPU_1.RGD[9].WORD3.R         /* Region Descriptor n, Word 3 */
#define SMPU_1_RGD10_WORD0   SMPU_1.RGD[10].WORD0.R        /* Region Descriptor n, Word 0 */
#define SMPU_1_RGD10_WORD1   SMPU_1.RGD[10].WORD1.R        /* Region Descriptor n, Word 1 */
#define SMPU_1_RGD10_WORD2   SMPU_1.RGD[10].WORD2.R        /* Region Descriptor n, Word 2 */
#define SMPU_1_RGD10_WORD3   SMPU_1.RGD[10].WORD3.R        /* Region Descriptor n, Word 3 */
#define SMPU_1_RGD11_WORD0   SMPU_1.RGD[11].WORD0.R        /* Region Descriptor n, Word 0 */
#define SMPU_1_RGD11_WORD1   SMPU_1.RGD[11].WORD1.R        /* Region Descriptor n, Word 1 */
#define SMPU_1_RGD11_WORD2   SMPU_1.RGD[11].WORD2.R        /* Region Descriptor n, Word 2 */
#define SMPU_1_RGD11_WORD3   SMPU_1.RGD[11].WORD3.R        /* Region Descriptor n, Word 3 */
#define SMPU_1_RGD12_WORD0   SMPU_1.RGD[12].WORD0.R        /* Region Descriptor n, Word 0 */
#define SMPU_1_RGD12_WORD1   SMPU_1.RGD[12].WORD1.R        /* Region Descriptor n, Word 1 */
#define SMPU_1_RGD12_WORD2   SMPU_1.RGD[12].WORD2.R        /* Region Descriptor n, Word 2 */
#define SMPU_1_RGD12_WORD3   SMPU_1.RGD[12].WORD3.R        /* Region Descriptor n, Word 3 */
#define SMPU_1_RGD13_WORD0   SMPU_1.RGD[13].WORD0.R        /* Region Descriptor n, Word 0 */
#define SMPU_1_RGD13_WORD1   SMPU_1.RGD[13].WORD1.R        /* Region Descriptor n, Word 1 */
#define SMPU_1_RGD13_WORD2   SMPU_1.RGD[13].WORD2.R        /* Region Descriptor n, Word 2 */
#define SMPU_1_RGD13_WORD3   SMPU_1.RGD[13].WORD3.R        /* Region Descriptor n, Word 3 */
#define SMPU_1_RGD14_WORD0   SMPU_1.RGD[14].WORD0.R        /* Region Descriptor n, Word 0 */
#define SMPU_1_RGD14_WORD1   SMPU_1.RGD[14].WORD1.R        /* Region Descriptor n, Word 1 */
#define SMPU_1_RGD14_WORD2   SMPU_1.RGD[14].WORD2.R        /* Region Descriptor n, Word 2 */
#define SMPU_1_RGD14_WORD3   SMPU_1.RGD[14].WORD3.R        /* Region Descriptor n, Word 3 */
#define SMPU_1_RGD15_WORD0   SMPU_1.RGD[15].WORD0.R        /* Region Descriptor n, Word 0 */
#define SMPU_1_RGD15_WORD1   SMPU_1.RGD[15].WORD1.R        /* Region Descriptor n, Word 1 */
#define SMPU_1_RGD15_WORD2   SMPU_1.RGD[15].WORD2.R        /* Region Descriptor n, Word 2 */
#define SMPU_1_RGD15_WORD3   SMPU_1.RGD[15].WORD3.R        /* Region Descriptor n, Word 3 */

/* SPI_1 */
#define SPI_1_MCR            SPI_1.MCR.R                   /* Module Configuration Register */
#define SPI_1_TCR            SPI_1.TCR.R                   /* Transfer Count Register */
#define SPI_1_CTAR0          SPI_1.MODE.CTAR[0].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_1_CTAR1          SPI_1.MODE.CTAR[1].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_1_CTAR2          SPI_1.MODE.CTAR[2].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_1_CTAR3          SPI_1.MODE.CTAR[3].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_1_CTAR4          SPI_1.MODE.CTAR[4].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_1_CTAR5          SPI_1.MODE.CTAR[5].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_1_CTAR6          SPI_1.MODE.CTAR[6].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_1_CTAR7          SPI_1.MODE.CTAR[7].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_1_CTAR0_SLAVE    SPI_1.MODE.CTAR_SLAVE[0].R    /* Clock and Transfer Attributes Register (in Slave mode) */
#define SPI_1_SR             SPI_1.SR.R                    /* Status Register */
#define SPI_1_RSER           SPI_1.RSER.R                  /* DMA/Interrupt Request Select and Enable Register */
#define SPI_1_PUSHR          SPI_1.PUSHR.PUSHR.R           /* PUSH TX FIFO Register In Master Mode */
#define SPI_1_PUSHR_SLAVE    SPI_1.PUSHR.PUSHR_SLAVE.R     /* PUSH TX FIFO Register In Slave Mode */
#define SPI_1_POPR           SPI_1.POPR.R                  /* POP RX FIFO Register */
#define SPI_1_TXFR0          SPI_1.TXFR[0].R               /* Transmit FIFO Registers */
#define SPI_1_TXFR1          SPI_1.TXFR[1].R               /* Transmit FIFO Registers */
#define SPI_1_TXFR2          SPI_1.TXFR[2].R               /* Transmit FIFO Registers */
#define SPI_1_TXFR3          SPI_1.TXFR[3].R               /* Transmit FIFO Registers */
#define SPI_1_TXFR4          SPI_1.TXFR[4].R               /* Transmit FIFO Registers */
#define SPI_1_RXFR0          SPI_1.RXFR[0].R               /* Receive FIFO Registers */
#define SPI_1_RXFR1          SPI_1.RXFR[1].R               /* Receive FIFO Registers */
#define SPI_1_RXFR2          SPI_1.RXFR[2].R               /* Receive FIFO Registers */
#define SPI_1_RXFR3          SPI_1.RXFR[3].R               /* Receive FIFO Registers */
#define SPI_1_RXFR4          SPI_1.RXFR[4].R               /* Receive FIFO Registers */

/* SPI_2 */
#define SPI_2_MCR            SPI_2.MCR.R                   /* Module Configuration Register */
#define SPI_2_TCR            SPI_2.TCR.R                   /* Transfer Count Register */
#define SPI_2_CTAR0          SPI_2.MODE.CTAR[0].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_2_CTAR1          SPI_2.MODE.CTAR[1].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_2_CTAR2          SPI_2.MODE.CTAR[2].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_2_CTAR3          SPI_2.MODE.CTAR[3].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_2_CTAR4          SPI_2.MODE.CTAR[4].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_2_CTAR5          SPI_2.MODE.CTAR[5].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_2_CTAR6          SPI_2.MODE.CTAR[6].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_2_CTAR7          SPI_2.MODE.CTAR[7].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_2_CTAR0_SLAVE    SPI_2.MODE.CTAR_SLAVE[0].R    /* Clock and Transfer Attributes Register (in Slave mode) */
#define SPI_2_SR             SPI_2.SR.R                    /* Status Register */
#define SPI_2_RSER           SPI_2.RSER.R                  /* DMA/Interrupt Request Select and Enable Register */
#define SPI_2_PUSHR          SPI_2.PUSHR.PUSHR.R           /* PUSH TX FIFO Register In Master Mode */
#define SPI_2_PUSHR_SLAVE    SPI_2.PUSHR.PUSHR_SLAVE.R     /* PUSH TX FIFO Register In Slave Mode */
#define SPI_2_POPR           SPI_2.POPR.R                  /* POP RX FIFO Register */
#define SPI_2_TXFR0          SPI_2.TXFR[0].R               /* Transmit FIFO Registers */
#define SPI_2_TXFR1          SPI_2.TXFR[1].R               /* Transmit FIFO Registers */
#define SPI_2_TXFR2          SPI_2.TXFR[2].R               /* Transmit FIFO Registers */
#define SPI_2_TXFR3          SPI_2.TXFR[3].R               /* Transmit FIFO Registers */
#define SPI_2_TXFR4          SPI_2.TXFR[4].R               /* Transmit FIFO Registers */
#define SPI_2_RXFR0          SPI_2.RXFR[0].R               /* Receive FIFO Registers */
#define SPI_2_RXFR1          SPI_2.RXFR[1].R               /* Receive FIFO Registers */
#define SPI_2_RXFR2          SPI_2.RXFR[2].R               /* Receive FIFO Registers */
#define SPI_2_RXFR3          SPI_2.RXFR[3].R               /* Receive FIFO Registers */
#define SPI_2_RXFR4          SPI_2.RXFR[4].R               /* Receive FIFO Registers */

/* SPI_3 */
#define SPI_3_MCR            SPI_3.MCR.R                   /* Module Configuration Register */
#define SPI_3_TCR            SPI_3.TCR.R                   /* Transfer Count Register */
#define SPI_3_CTAR0          SPI_3.MODE.CTAR[0].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_3_CTAR1          SPI_3.MODE.CTAR[1].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_3_CTAR2          SPI_3.MODE.CTAR[2].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_3_CTAR3          SPI_3.MODE.CTAR[3].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_3_CTAR4          SPI_3.MODE.CTAR[4].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_3_CTAR5          SPI_3.MODE.CTAR[5].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_3_CTAR6          SPI_3.MODE.CTAR[6].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_3_CTAR7          SPI_3.MODE.CTAR[7].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_3_CTAR0_SLAVE    SPI_3.MODE.CTAR_SLAVE[0].R    /* Clock and Transfer Attributes Register (in Slave mode) */
#define SPI_3_SR             SPI_3.SR.R                    /* Status Register */
#define SPI_3_RSER           SPI_3.RSER.R                  /* DMA/Interrupt Request Select and Enable Register */
#define SPI_3_PUSHR          SPI_3.PUSHR.PUSHR.R           /* PUSH TX FIFO Register In Master Mode */
#define SPI_3_PUSHR_SLAVE    SPI_3.PUSHR.PUSHR_SLAVE.R     /* PUSH TX FIFO Register In Slave Mode */
#define SPI_3_POPR           SPI_3.POPR.R                  /* POP RX FIFO Register */
#define SPI_3_TXFR0          SPI_3.TXFR[0].R               /* Transmit FIFO Registers */
#define SPI_3_TXFR1          SPI_3.TXFR[1].R               /* Transmit FIFO Registers */
#define SPI_3_TXFR2          SPI_3.TXFR[2].R               /* Transmit FIFO Registers */
#define SPI_3_TXFR3          SPI_3.TXFR[3].R               /* Transmit FIFO Registers */
#define SPI_3_TXFR4          SPI_3.TXFR[4].R               /* Transmit FIFO Registers */
#define SPI_3_RXFR0          SPI_3.RXFR[0].R               /* Receive FIFO Registers */
#define SPI_3_RXFR1          SPI_3.RXFR[1].R               /* Receive FIFO Registers */
#define SPI_3_RXFR2          SPI_3.RXFR[2].R               /* Receive FIFO Registers */
#define SPI_3_RXFR3          SPI_3.RXFR[3].R               /* Receive FIFO Registers */
#define SPI_3_RXFR4          SPI_3.RXFR[4].R               /* Receive FIFO Registers */

/* SPI_4 */
#define SPI_4_MCR            SPI_4.MCR.R                   /* Module Configuration Register */
#define SPI_4_TCR            SPI_4.TCR.R                   /* Transfer Count Register */
#define SPI_4_CTAR0          SPI_4.MODE.CTAR[0].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_4_CTAR1          SPI_4.MODE.CTAR[1].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_4_CTAR2          SPI_4.MODE.CTAR[2].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_4_CTAR3          SPI_4.MODE.CTAR[3].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_4_CTAR4          SPI_4.MODE.CTAR[4].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_4_CTAR5          SPI_4.MODE.CTAR[5].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_4_CTAR6          SPI_4.MODE.CTAR[6].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_4_CTAR7          SPI_4.MODE.CTAR[7].R          /* Clock and Transfer Attributes Register (in Master mode) */
#define SPI_4_CTAR0_SLAVE    SPI_4.MODE.CTAR_SLAVE[0].R    /* Clock and Transfer Attributes Register (in Slave mode) */
#define SPI_4_SR             SPI_4.SR.R                    /* Status Register */
#define SPI_4_RSER           SPI_4.RSER.R                  /* DMA/Interrupt Request Select and Enable Register */
#define SPI_4_PUSHR          SPI_4.PUSHR.PUSHR.R           /* PUSH TX FIFO Register In Master Mode */
#define SPI_4_PUSHR_SLAVE    SPI_4.PUSHR.PUSHR_SLAVE.R     /* PUSH TX FIFO Register In Slave Mode */
#define SPI_4_POPR           SPI_4.POPR.R                  /* POP RX FIFO Register */
#define SPI_4_TXFR0          SPI_4.TXFR[0].R               /* Transmit FIFO Registers */
#define SPI_4_TXFR1          SPI_4.TXFR[1].R               /* Transmit FIFO Registers */
#define SPI_4_TXFR2          SPI_4.TXFR[2].R               /* Transmit FIFO Registers */
#define SPI_4_TXFR3          SPI_4.TXFR[3].R               /* Transmit FIFO Registers */
#define SPI_4_TXFR4          SPI_4.TXFR[4].R               /* Transmit FIFO Registers */
#define SPI_4_RXFR0          SPI_4.RXFR[0].R               /* Receive FIFO Registers */
#define SPI_4_RXFR1          SPI_4.RXFR[1].R               /* Receive FIFO Registers */
#define SPI_4_RXFR2          SPI_4.RXFR[2].R               /* Receive FIFO Registers */
#define SPI_4_RXFR3          SPI_4.RXFR[3].R               /* Receive FIFO Registers */
#define SPI_4_RXFR4          SPI_4.RXFR[4].R               /* Receive FIFO Registers */

/* SPT */
#define SPT_GBL_CTRL         SPT.GBL_CTRL.R                /* SPT Global Control */
#define SPT_CS_PG_ST_ADDR    SPT.CS_PG_ST_ADDR.R           /* Program Start Address */
#define SPT_CS_MODE_CTRL     SPT.CS_MODE_CTRL.R            /* Mode Control */
#define SPT_CS_WD_COUNT      SPT.CS_WD_COUNT.R             /* Watchdog Counter */
#define SPT_CS_BKPT0_ADDR    SPT.CS_BKPT0_ADDR.R           /* Breakpoint 0 Address */
#define SPT_CS_BKPT1_ADDR    SPT.CS_BKPT1_ADDR.R           /* Breakpoint 1 Address */
#define SPT_CS_BKPT2_ADDR    SPT.CS_BKPT2_ADDR.R           /* Breakpoint 2 Address */
#define SPT_CS_BKPT3_ADDR    SPT.CS_BKPT3_ADDR.R           /* Breakpoint 3 Address */
#define SPT_CS_JAM_INST0     SPT.CS_JAM_INST0.R            /* Jamming Instruction 0 */
#define SPT_CS_JAM_INST1     SPT.CS_JAM_INST1.R            /* Jamming Instruction 1 */
#define SPT_CS_JAM_INST2     SPT.CS_JAM_INST2.R            /* Jamming Instruction 2 */
#define SPT_CS_JAM_INST3     SPT.CS_JAM_INST3.R            /* Jamming Instruction 3 */
#define SPT_CS_CURR_INST_ADDR SPT.CS_CURR_INST_ADDR.R      /* Current Instruction Address */
#define SPT_CS_CURR_INST0    SPT.CS_CURR_INST0.R           /* Current Instruction 0 */
#define SPT_CS_CURR_INST1    SPT.CS_CURR_INST1.R           /* Current Instruction 1 */
#define SPT_CS_CURR_INST2    SPT.CS_CURR_INST2.R           /* Current Instruction 2 */
#define SPT_CS_CURR_INST3    SPT.CS_CURR_INST3.R           /* Current Instruction 3 */
#define SPT_CS_LOOPCNTR01    SPT.CS_LOOPCNTR01.R           /* Loop Counters 0 and 1 */
#define SPT_CS_LOOPCNTR23    SPT.CS_LOOPCNTR23.R           /* Loop Counters 2 and 3 */
#define SPT_CS_ERR_INST_ADDR SPT.CS_ERR_INST_ADDR.R        /* Error Instruction Address */
#define SPT_CS_ERR_INST0     SPT.CS_ERR_INST0.R            /* Error Instruction 0 */
#define SPT_CS_ERR_INST1     SPT.CS_ERR_INST1.R            /* Error Instruction 1 */
#define SPT_CS_ERR_INST2     SPT.CS_ERR_INST2.R            /* Error Instruction 2 */
#define SPT_CS_ERR_INST3     SPT.CS_ERR_INST3.R            /* Error Instruction 3 */
#define SPT_CS_STATUS0       SPT.CS_STATUS0.R              /* General Status 0 */
#define SPT_CS_STATUS1       SPT.CS_STATUS1.R              /* General Status 1 */
#define SPT_CS_STATUS2       SPT.CS_STATUS2.R              /* General Status 2 */
#define SPT_CS_STATUS3       SPT.CS_STATUS3.R              /* General Status 3 */
#define SPT_CS_EVTREG1       SPT.CS_EVTREG1.R              /* EVT1 Status */
#define SPT_CS_EVTREG2       SPT.CS_EVTREG2.R              /* EVT2 Status */
#define SPT_CS_SW_EVTREG     SPT.CS_SW_EVTREG.R            /* Software Event Trigger */
#define SPT_CORE1_VER_EVT    SPT.CORE1_VER_EVT.R           /* Core 1 Version Register Events */
#define SPT_CORE2_VER_EVT    SPT.CORE2_VER_EVT.R           /* Core 2 Version Register Events */
#define SPT_EVENT_RST_CTRL   SPT.EVENT_RST_CTRL.R          /* SPT Event Reset Control */
#define SPT_PDMA_LFSR_LOAD_VAL_HIGH SPT.PDMA_LFSR_LOAD_VAL_HIGH.R /* LFSR Load High Value */
#define SPT_PDMA_LFSR_LOAD_VAL_LOW SPT.PDMA_LFSR_LOAD_VAL_LOW.R /* LFSR Load Low Value */
#define SPT_PDMA_CONTROL     SPT.PDMA_CONTROL.R            /* PDMA Control */
#define SPT_PDMA_TRANSFER_COUNT_STATUS SPT.PDMA_TRANSFER_COUNT_STATUS.R /* PDMA Transfer Count Status */
#define SPT_PDMA_FMTB_EXP_ADDR_STATUS SPT.PDMA_FMTB_EXP_ADDR_STATUS.R /* PDMA Format B Exponent Address Status */
#define SPT_MEM_ERR_INJECT_CTRL SPT.MEM_ERR_INJECT_CTRL.R  /* Memory Error Injection */
#define SPT_MEM_ERR_STATUS   SPT.MEM_ERR_STATUS.R          /* Memory Error Status */
#define SPT_MEM_ERR_INT_EN   SPT.MEM_ERR_INT_EN.R          /* Memory Error Interrupt Enable */
#define SPT_DMA_ERR_STATUS   SPT.DMA_ERR_STATUS.R          /* DMA Error Status */
#define SPT_DMA_ERR_INT_EN   SPT.DMA_ERR_INT_EN.R          /* DMA Error Interrupt Enable */
#define SPT_GBL_STATUS       SPT.GBL_STATUS.R              /* Global Status */
#define SPT_GBL_STATUS_IE    SPT.GBL_STATUS_IE.R           /* Global Status Interrupt Enable */
#define SPT_HW_ACC_ERR_STATUS SPT.HW_ACC_ERR_STATUS.R      /* Hardware Accelerator Error Status */
#define SPT_HW_ACC_ERR_IE    SPT.HW_ACC_ERR_IE.R           /* Hardware Accelerator Error Interrupt Enable */
#define SPT_HIST_OVF_STATUS0 SPT.HIST_OVF_STATUS0.R        /* HIST Overflow Status 0 */
#define SPT_HIST_OVF_STATUS1 SPT.HIST_OVF_STATUS1.R        /* HIST Overflow Status 1 */
#define SPT_HIST_OVF_IE      SPT.HIST_OVF_IE.R             /* HIST Overflow Interrupt Enable */
#define SPT_CS_INTEN0        SPT.CS_INTEN0.R               /* Interrupt Enable 0 */
#define SPT_CS_INTEN1        SPT.CS_INTEN1.R               /* Interrupt Enable Register 1 */
#define SPT_CS_EVT1_INTEN    SPT.CS_EVT1_INTEN.R           /* EVT1 Interrupt Enable */
#define SPT_CS_EVT2_INTEN    SPT.CS_EVT2_INTEN.R           /* EVT2 Interrupt Enable */
#define SPT_WR_0_15_CTRL_REG SPT.WR_0_15_CTRL_REG.R        /* Access Control */
#define SPT_WR_16_31_CTRL_REG SPT.WR_16_31_CTRL_REG.R      /* Access Control */
#define SPT_WR_32_47_CTRL_REG SPT.WR_32_47_CTRL_REG.R      /* Access Control */
#define SPT_WR_R0_RE         SPT.WR_R0_RE.R                /* Work Register R0 Real */
#define SPT_WR_R0_IM         SPT.WR_R0_IM.R                /* Work Register R0 Imaginary */
#define SPT_WR_R1_RE         SPT.WR_R1_RE.R                /* Work Register R1 Real */
#define SPT_WR_R1_IM         SPT.WR_R1_IM.R                /* Work Register R1 Imaginary */
#define SPT_WR_R2_RE         SPT.WR_R2_RE.R                /* Work Register R2 Real */
#define SPT_WR_R2_IM         SPT.WR_R2_IM.R                /* Work Register R2 Imaginary */
#define SPT_WR_R3_RE         SPT.WR_R3_RE.R                /* Work Register R3 Real */
#define SPT_WR_R3_IM         SPT.WR_R3_IM.R                /* Work Register R3 Imaginary */
#define SPT_WR_R4_RE         SPT.WR_R4_RE.R                /* Work Register R4 Real */
#define SPT_WR_R4_IM         SPT.WR_R4_IM.R                /* Work Register R4 Imaginary */
#define SPT_WR_R5_RE         SPT.WR_R5_RE.R                /* Work Register R5 Real */
#define SPT_WR_R5_IM         SPT.WR_R5_IM.R                /* Work Register R5 Imaginary */
#define SPT_WR_R6_RE         SPT.WR_R6_RE.R                /* Work Register R6 Real */
#define SPT_WR_R6_IM         SPT.WR_R6_IM.R                /* Work Register R6 Imaginary */
#define SPT_WR_R7_RE         SPT.WR_R7_RE.R                /* Work Register R7 Real */
#define SPT_WR_R7_IM         SPT.WR_R7_IM.R                /* Work Register R7 Imaginary */
#define SPT_WR_R8_RE         SPT.WR_R8_RE.R                /* Work Register R8 Real */
#define SPT_WR_R8_IM         SPT.WR_R8_IM.R                /* Work Register R8 Imaginary */
#define SPT_WR_R9_RE         SPT.WR_R9_RE.R                /* Work Register R9 Real */
#define SPT_WR_R9_IM         SPT.WR_R9_IM.R                /* Work Register R9 Imaginary */
#define SPT_WR_R10_RE        SPT.WR_R10_RE.R               /* Work Register R10 Real */
#define SPT_WR_R10_IM        SPT.WR_R10_IM.R               /* Work Register R10 Imaginary */
#define SPT_WR_R11_RE        SPT.WR_R11_RE.R               /* Work Register R11 Real */
#define SPT_WR_R11_IM        SPT.WR_R11_IM.R               /* Work Register R11 Imaginary */
#define SPT_WR_R12_RE        SPT.WR_R12_RE.R               /* Work Register R12 Real */
#define SPT_WR_R12_IM        SPT.WR_R12_IM.R               /* Work Register R12 Imaginary */
#define SPT_WR_R13_RE        SPT.WR_R13_RE.R               /* Work Register R13 Real */
#define SPT_WR_R13_IM        SPT.WR_R13_IM.R               /* Work Register R13 Imaginary */
#define SPT_WR_R14_RE        SPT.WR_R14_RE.R               /* Work Register R14 Real */
#define SPT_WR_R14_IM        SPT.WR_R14_IM.R               /* Work Register R14 Imaginary */
#define SPT_WR_R15_RE        SPT.WR_R15_RE.R               /* Work Register R15 Real */
#define SPT_WR_R15_IM        SPT.WR_R15_IM.R               /* Work Register R15 Imaginary */
#define SPT_WR_R16_RE        SPT.WR_R16_RE.R               /* Work Register R16 Real */
#define SPT_WR_R16_IM        SPT.WR_R16_IM.R               /* Work Register R16 Imaginary */
#define SPT_WR_R17_RE        SPT.WR_R17_RE.R               /* Work Register R17 Real */
#define SPT_WR_R17_IM        SPT.WR_R17_IM.R               /* Work Register R17 Imaginary */
#define SPT_WR_R18_RE        SPT.WR_R18_RE.R               /* Work Register R18 Real */
#define SPT_WR_R18_IM        SPT.WR_R18_IM.R               /* Work Register R18 Imaginary */
#define SPT_WR_R19_RE        SPT.WR_R19_RE.R               /* Work Register R19 Real */
#define SPT_WR_R19_IM        SPT.WR_R19_IM.R               /* Work Register R19 Imaginary */
#define SPT_WR_R20_RE        SPT.WR_R20_RE.R               /* Work Register R20 Real */
#define SPT_WR_R20_IM        SPT.WR_R20_IM.R               /* Work Register R20 Imaginary */
#define SPT_WR_R21_RE        SPT.WR_R21_RE.R               /* Work Register R21 Real */
#define SPT_WR_R21_IM        SPT.WR_R21_IM.R               /* Work Register R21 Imaginary */
#define SPT_WR_R22_RE        SPT.WR_R22_RE.R               /* Work Register R22 Real */
#define SPT_WR_R22_IM        SPT.WR_R22_IM.R               /* Work Register R22 Imaginary */
#define SPT_WR_R23_RE        SPT.WR_R23_RE.R               /* Work Register R23 Real */
#define SPT_WR_R23_IM        SPT.WR_R23_IM.R               /* Work Register R23 Imaginary */
#define SPT_WR_R24_RE        SPT.WR_R24_RE.R               /* Work Register R24 Real */
#define SPT_WR_R24_IM        SPT.WR_R24_IM.R               /* Work Register R24 Imaginary */
#define SPT_WR_R25_RE        SPT.WR_R25_RE.R               /* Work Register R25 Real */
#define SPT_WR_R25_IM        SPT.WR_R25_IM.R               /* Work Register R25 Imaginary */
#define SPT_WR_R26_RE        SPT.WR_R26_RE.R               /* Work Register R26 Real */
#define SPT_WR_R26_IM        SPT.WR_R26_IM.R               /* Work Register R26 Imaginary */
#define SPT_WR_R27_RE        SPT.WR_R27_RE.R               /* Work Register R27 Real */
#define SPT_WR_R27_IM        SPT.WR_R27_IM.R               /* Work Register R27 Imaginary */
#define SPT_WR_R28_RE        SPT.WR_R28_RE.R               /* Work Register R28 Real */
#define SPT_WR_R28_IM        SPT.WR_R28_IM.R               /* Work Register R28 Imaginary */
#define SPT_WR_R29_RE        SPT.WR_R29_RE.R               /* Work Register R29 Real */
#define SPT_WR_R29_IM        SPT.WR_R29_IM.R               /* Work Register R29 Imaginary */
#define SPT_WR_R30_RE        SPT.WR_R30_RE.R               /* Work Register R30 Real */
#define SPT_WR_R30_IM        SPT.WR_R30_IM.R               /* Work Register R30 Imaginary */
#define SPT_WR_R31_RE        SPT.WR_R31_RE.R               /* Work Register R31 Real */
#define SPT_WR_R31_IM        SPT.WR_R31_IM.R               /* Work Register R31 Imaginary */
#define SPT_WR_R32_RE        SPT.WR_R32_RE.R               /* Work Register R32 Real */
#define SPT_WR_R32_IM        SPT.WR_R32_IM.R               /* Work Register R32 Imaginary */
#define SPT_WR_R33_RE        SPT.WR_R33_RE.R               /* Work Register R33 Real */
#define SPT_WR_R33_IM        SPT.WR_R33_IM.R               /* Work Register R33 Imaginary */
#define SPT_WR_R34_RE        SPT.WR_R34_RE.R               /* Work Register R34 Real */
#define SPT_WR_R34_IM        SPT.WR_R34_IM.R               /* Work Register R34 Imaginary */
#define SPT_WR_R35_RE        SPT.WR_R35_RE.R               /* Work Register R35 Real */
#define SPT_WR_R35_IM        SPT.WR_R35_IM.R               /* Work Register R35 Imaginary */
#define SPT_WR_R36_RE        SPT.WR_R36_RE.R               /* Work Register R36 Real */
#define SPT_WR_R36_IM        SPT.WR_R36_IM.R               /* Work Register R36 Imaginary */
#define SPT_WR_R37_RE        SPT.WR_R37_RE.R               /* Work Register R37 Real */
#define SPT_WR_R37_IM        SPT.WR_R37_IM.R               /* Work Register R37 Imaginary */
#define SPT_WR_R38_RE        SPT.WR_R38_RE.R               /* Work Register R38 Real */
#define SPT_WR_R38_IM        SPT.WR_R38_IM.R               /* Work Register R38 Imaginary */
#define SPT_WR_R39_RE        SPT.WR_R39_RE.R               /* Work Register R39 Real */
#define SPT_WR_R39_IM        SPT.WR_R39_IM.R               /* Work Register R39 Imaginary */
#define SPT_WR_R40_RE        SPT.WR_R40_RE.R               /* Work Register R40 Real */
#define SPT_WR_R40_IM        SPT.WR_R40_IM.R               /* Work Register R40 Imaginary */
#define SPT_WR_R41_RE        SPT.WR_R41_RE.R               /* Work Register R41 Real */
#define SPT_WR_R41_IM        SPT.WR_R41_IM.R               /* Work Register R41 Imaginary */
#define SPT_WR_R42_RE        SPT.WR_R42_RE.R               /* Work Register R42 Real */
#define SPT_WR_R42_IM        SPT.WR_R42_IM.R               /* Work Register R42 Imaginary */
#define SPT_WR_R43_RE        SPT.WR_R43_RE.R               /* Work Register R43 Real */
#define SPT_WR_R43_IM        SPT.WR_R43_IM.R               /* Work Register R43 Imaginary */
#define SPT_WR_R44_RE        SPT.WR_R44_RE.R               /* Work Register R44 Real */
#define SPT_WR_R44_IM        SPT.WR_R44_IM.R               /* Work Register R44 Imaginary */
#define SPT_WR_R45_RE        SPT.WR_R45_RE.R               /* Work Register R45 Real */
#define SPT_WR_R45_IM        SPT.WR_R45_IM.R               /* Work Register R45 Imaginary */
#define SPT_WR_R46_RE        SPT.WR_R46_RE.R               /* Work Register R46 Real */
#define SPT_WR_R46_IM        SPT.WR_R46_IM.R               /* Work Register R46 Imaginary */
#define SPT_WR_R47_RE        SPT.WR_R47_RE.R               /* Work Register R47 Real */
#define SPT_WR_R47_IM        SPT.WR_R47_IM.R               /* Work Register R47 Imaginary */
#define SPT_CS_CHRP_CNTR_RST SPT.CS_CHRP_CNTR_RST.R        /* External Events Chirp Counter Reset Mapping */
#define SPT_CS_CHRP_CNTR_LD  SPT.CS_CHRP_CNTR_LD.R         /* External Events Chirp Counter Load Mapping */

/* SRC */
#define SRC_BMR1             SRC.BMR1.R                    /* Boot Mode 1 */
#define SRC_BMR2             SRC.BMR2.R                    /* Boot Mode 2 */
#define SRC_LC               SRC.LC.R                      /* Life Cycle Latch Register */
#define SRC_SEC_BOOT         SRC.SEC_BOOT.R                /* Secure Boot */

/* STCU2 */
#define STCU2_RUNSW          STCU2.RUNSW.R                 /* STCU2 Run Software */
#define STCU2_SKC            STCU2.SKC.R                   /* STCU2 SK Code */
#define STCU2_CFG            STCU2.CFG.R                   /* STCU2 Configuration */
#define STCU2_WDG            STCU2.WDG.R                   /* STCU2 Watchdog Granularity */
#define STCU2_ERR_STAT       STCU2.ERR_STAT.R              /* STCU2 Error */
#define STCU2_ERR_FM         STCU2.ERR_FM.R                /* STCU2 Error FM */
#define STCU2_LBSSW0         STCU2.LBSSW0.R                /* STCU2 Online LBIST Status */
#define STCU2_LBESW0         STCU2.LBESW0.R                /* STCU2 Online LBIST End Flag */
#define STCU2_LBUFM0         STCU2.LBUFM0.R                /* STCU2 Online LBIST Unrecoverable FM */
#define STCU2_MBSSW0         STCU2.MBSSW0.R                /* STCU2 Online MBIST Status */
#define STCU2_MBESW0         STCU2.MBESW0.R                /* STCU2 Online MBIST End Flag */
#define STCU2_MBUFM0         STCU2.MBUFM0.R                /* STCU2 MBIST Unrecoverable FM */
#define STCU2_LB_CTRL0       STCU2.LB[0].CTRL.R            /* STCU2 LBIST Control */
#define STCU2_LB_PCS0        STCU2.LB[0].PCS.R             /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW0   STCU2.LB[0].MISRELSW.R        /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW0   STCU2.LB[0].MISREHSW.R        /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW0   STCU2.LB[0].MISRRLSW.R        /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW0   STCU2.LB[0].MISRRHSW.R        /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL1       STCU2.LB[1].CTRL.R            /* STCU2 LBIST Control */
#define STCU2_LB_PCS1        STCU2.LB[1].PCS.R             /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW1   STCU2.LB[1].MISRELSW.R        /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW1   STCU2.LB[1].MISREHSW.R        /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW1   STCU2.LB[1].MISRRLSW.R        /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW1   STCU2.LB[1].MISRRHSW.R        /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL2       STCU2.LB[2].CTRL.R            /* STCU2 LBIST Control */
#define STCU2_LB_PCS2        STCU2.LB[2].PCS.R             /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW2   STCU2.LB[2].MISRELSW.R        /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW2   STCU2.LB[2].MISREHSW.R        /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW2   STCU2.LB[2].MISRRLSW.R        /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW2   STCU2.LB[2].MISRRHSW.R        /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL3       STCU2.LB[3].CTRL.R            /* STCU2 LBIST Control */
#define STCU2_LB_PCS3        STCU2.LB[3].PCS.R             /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW3   STCU2.LB[3].MISRELSW.R        /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW3   STCU2.LB[3].MISREHSW.R        /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW3   STCU2.LB[3].MISRRLSW.R        /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW3   STCU2.LB[3].MISRRHSW.R        /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL4       STCU2.LB[4].CTRL.R            /* STCU2 LBIST Control */
#define STCU2_LB_PCS4        STCU2.LB[4].PCS.R             /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW4   STCU2.LB[4].MISRELSW.R        /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW4   STCU2.LB[4].MISREHSW.R        /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW4   STCU2.LB[4].MISRRLSW.R        /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW4   STCU2.LB[4].MISRRHSW.R        /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL5       STCU2.LB[5].CTRL.R            /* STCU2 LBIST Control */
#define STCU2_LB_PCS5        STCU2.LB[5].PCS.R             /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW5   STCU2.LB[5].MISRELSW.R        /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW5   STCU2.LB[5].MISREHSW.R        /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW5   STCU2.LB[5].MISRRLSW.R        /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW5   STCU2.LB[5].MISRRHSW.R        /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL6       STCU2.LB[6].CTRL.R            /* STCU2 LBIST Control */
#define STCU2_LB_PCS6        STCU2.LB[6].PCS.R             /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW6   STCU2.LB[6].MISRELSW.R        /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW6   STCU2.LB[6].MISREHSW.R        /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW6   STCU2.LB[6].MISRRLSW.R        /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW6   STCU2.LB[6].MISRRHSW.R        /* STCU2 Online LBIST MISR Read High */
#define STCU2_LB_CTRL7       STCU2.LB[7].CTRL.R            /* STCU2 LBIST Control */
#define STCU2_LB_PCS7        STCU2.LB[7].PCS.R             /* STCU2 LBIST PC Stop */
#define STCU2_LB_MISRELSW7   STCU2.LB[7].MISRELSW.R        /* STCU2 Online LBIST MISR Expected Low */
#define STCU2_LB_MISREHSW7   STCU2.LB[7].MISREHSW.R        /* STCU2 Online LBIST MISR Expected High */
#define STCU2_LB_MISRRLSW7   STCU2.LB[7].MISRRLSW.R        /* STCU2 Online LBIST MISR Read Low */
#define STCU2_LB_MISRRHSW7   STCU2.LB[7].MISRRHSW.R        /* STCU2 Online LBIST MISR Read High */
#define STCU2_ALGOSEL        STCU2.ALGOSEL.R               /* STCU2 Algorithm Select */
#define STCU2_STGGR          STCU2.STGGR.R                 /* STCU2 MBIST Stagger */
#define STCU2_BSTART         STCU2.BSTART.R                /* STCU2 BIST Start */
#define STCU2_MB_CTRL0       STCU2.MB_CTRL[0].R            /* STCU2 MBIST Control */
#define STCU2_MB_CTRL1       STCU2.MB_CTRL[1].R            /* STCU2 MBIST Control */
#define STCU2_MB_CTRL2       STCU2.MB_CTRL[2].R            /* STCU2 MBIST Control */
#define STCU2_MB_CTRL3       STCU2.MB_CTRL[3].R            /* STCU2 MBIST Control */
#define STCU2_MB_CTRL4       STCU2.MB_CTRL[4].R            /* STCU2 MBIST Control */
#define STCU2_MB_CTRL5       STCU2.MB_CTRL[5].R            /* STCU2 MBIST Control */
#define STCU2_MB_CTRL6       STCU2.MB_CTRL[6].R            /* STCU2 MBIST Control */
#define STCU2_MB_CTRL7       STCU2.MB_CTRL[7].R            /* STCU2 MBIST Control */
#define STCU2_MB_CTRL8       STCU2.MB_CTRL[8].R            /* STCU2 MBIST Control */
#define STCU2_MB_CTRL9       STCU2.MB_CTRL[9].R            /* STCU2 MBIST Control */
#define STCU2_MB_CTRL10      STCU2.MB_CTRL[10].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL11      STCU2.MB_CTRL[11].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL12      STCU2.MB_CTRL[12].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL13      STCU2.MB_CTRL[13].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL14      STCU2.MB_CTRL[14].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL15      STCU2.MB_CTRL[15].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL16      STCU2.MB_CTRL[16].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL17      STCU2.MB_CTRL[17].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL18      STCU2.MB_CTRL[18].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL19      STCU2.MB_CTRL[19].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL20      STCU2.MB_CTRL[20].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL21      STCU2.MB_CTRL[21].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL22      STCU2.MB_CTRL[22].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL23      STCU2.MB_CTRL[23].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL24      STCU2.MB_CTRL[24].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL25      STCU2.MB_CTRL[25].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL26      STCU2.MB_CTRL[26].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL27      STCU2.MB_CTRL[27].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL28      STCU2.MB_CTRL[28].R           /* STCU2 MBIST Control */
#define STCU2_MB_CTRL29      STCU2.MB_CTRL[29].R           /* STCU2 MBIST Control */

/* STM */
#define STM_0_CR             STM_0.CR.R                    /* Control */
#define STM_0_CNT            STM_0.CNT.R                   /* Count */
#define STM_0_CCR0           STM_0.CHANNEL[0].CCR.R        /* Channel Control */
#define STM_0_CIR0           STM_0.CHANNEL[0].CIR.R        /* Channel Interrupt */
#define STM_0_CMP0           STM_0.CHANNEL[0].CMP.R        /* Channel Compare */
#define STM_0_CCR1           STM_0.CHANNEL[1].CCR.R        /* Channel Control */
#define STM_0_CIR1           STM_0.CHANNEL[1].CIR.R        /* Channel Interrupt */
#define STM_0_CMP1           STM_0.CHANNEL[1].CMP.R        /* Channel Compare */
#define STM_0_CCR2           STM_0.CHANNEL[2].CCR.R        /* Channel Control */
#define STM_0_CIR2           STM_0.CHANNEL[2].CIR.R        /* Channel Interrupt */
#define STM_0_CMP2           STM_0.CHANNEL[2].CMP.R        /* Channel Compare */
#define STM_0_CCR3           STM_0.CHANNEL[3].CCR.R        /* Channel Control */
#define STM_0_CIR3           STM_0.CHANNEL[3].CIR.R        /* Channel Interrupt */
#define STM_0_CMP3           STM_0.CHANNEL[3].CMP.R        /* Channel Compare */

#define STM_1_CR             STM_1.CR.R                    /* Control */
#define STM_1_CNT            STM_1.CNT.R                   /* Count */
#define STM_1_CCR0           STM_1.CHANNEL[0].CCR.R        /* Channel Control */
#define STM_1_CIR0           STM_1.CHANNEL[0].CIR.R        /* Channel Interrupt */
#define STM_1_CMP0           STM_1.CHANNEL[0].CMP.R        /* Channel Compare */
#define STM_1_CCR1           STM_1.CHANNEL[1].CCR.R        /* Channel Control */
#define STM_1_CIR1           STM_1.CHANNEL[1].CIR.R        /* Channel Interrupt */
#define STM_1_CMP1           STM_1.CHANNEL[1].CMP.R        /* Channel Compare */
#define STM_1_CCR2           STM_1.CHANNEL[2].CCR.R        /* Channel Control */
#define STM_1_CIR2           STM_1.CHANNEL[2].CIR.R        /* Channel Interrupt */
#define STM_1_CMP2           STM_1.CHANNEL[2].CMP.R        /* Channel Compare */
#define STM_1_CCR3           STM_1.CHANNEL[3].CCR.R        /* Channel Control */
#define STM_1_CIR3           STM_1.CHANNEL[3].CIR.R        /* Channel Interrupt */
#define STM_1_CMP3           STM_1.CHANNEL[3].CMP.R        /* Channel Compare */

#define STM_2_CR             STM_2.CR.R                    /* Control */
#define STM_2_CNT            STM_2.CNT.R                   /* Count */
#define STM_2_CCR0           STM_2.CHANNEL[0].CCR.R        /* Channel Control */
#define STM_2_CIR0           STM_2.CHANNEL[0].CIR.R        /* Channel Interrupt */
#define STM_2_CMP0           STM_2.CHANNEL[0].CMP.R        /* Channel Compare */
#define STM_2_CCR1           STM_2.CHANNEL[1].CCR.R        /* Channel Control */
#define STM_2_CIR1           STM_2.CHANNEL[1].CIR.R        /* Channel Interrupt */
#define STM_2_CMP1           STM_2.CHANNEL[1].CMP.R        /* Channel Compare */
#define STM_2_CCR2           STM_2.CHANNEL[2].CCR.R        /* Channel Control */
#define STM_2_CIR2           STM_2.CHANNEL[2].CIR.R        /* Channel Interrupt */
#define STM_2_CMP2           STM_2.CHANNEL[2].CMP.R        /* Channel Compare */
#define STM_2_CCR3           STM_2.CHANNEL[3].CCR.R        /* Channel Control */
#define STM_2_CIR3           STM_2.CHANNEL[3].CIR.R        /* Channel Interrupt */
#define STM_2_CMP3           STM_2.CHANNEL[3].CMP.R        /* Channel Compare */

/* SWT */
#define SWT_2_CR             SWT_2.CR.R                    /* Control */
#define SWT_2_IR             SWT_2.IR.R                    /* Interrupt */
#define SWT_2_TO             SWT_2.TO.R                    /* Timeout */
#define SWT_2_WN             SWT_2.WN.R                    /* Window */
#define SWT_2_SR             SWT_2.SR.R                    /* Service */
#define SWT_2_CO             SWT_2.CO.R                    /* Counter Output */
#define SWT_2_SK             SWT_2.SK.R                    /* Service Key */

#define SWT_0_CR             SWT_0.CR.R                    /* Control */
#define SWT_0_IR             SWT_0.IR.R                    /* Interrupt */
#define SWT_0_TO             SWT_0.TO.R                    /* Timeout */
#define SWT_0_WN             SWT_0.WN.R                    /* Window */
#define SWT_0_SR             SWT_0.SR.R                    /* Service */
#define SWT_0_CO             SWT_0.CO.R                    /* Counter Output */
#define SWT_0_SK             SWT_0.SK.R                    /* Service Key */

#define SWT_1_CR             SWT_1.CR.R                    /* Control */
#define SWT_1_IR             SWT_1.IR.R                    /* Interrupt */
#define SWT_1_TO             SWT_1.TO.R                    /* Timeout */
#define SWT_1_WN             SWT_1.WN.R                    /* Window */
#define SWT_1_SR             SWT_1.SR.R                    /* Service */
#define SWT_1_CO             SWT_1.CO.R                    /* Counter Output */
#define SWT_1_SK             SWT_1.SK.R                    /* Service Key */

/* Selftest_GPR */
#define SELFTEST_GPR_LBIST0_Prog_Reg SELFTEST_GPR.LBIST0_PROG_REG.R /* LBIST0 Program */
#define SELFTEST_GPR_LBIST1_Prog_Reg SELFTEST_GPR.LBIST1_PROG_REG.R /* LBIST1 Program */
#define SELFTEST_GPR_LBIST2_Prog_Reg SELFTEST_GPR.LBIST2_PROG_REG.R /* LBIST2 Program */
#define SELFTEST_GPR_LBIST3_Prog_Reg SELFTEST_GPR.LBIST3_PROG_REG.R /* LBIST3 Program */
#define SELFTEST_GPR_LBIST4_Prog_Reg SELFTEST_GPR.LBIST4_PROG_REG.R /* LBIST4 Program */
#define SELFTEST_GPR_LBIST5_Prog_Reg SELFTEST_GPR.LBIST5_PROG_REG.R /* LBIST5 Program */
#define SELFTEST_GPR_LBIST6_Prog_Reg SELFTEST_GPR.LBIST6_PROG_REG.R /* LBIST6 Program */
#define SELFTEST_GPR_LBIST7_Prog_Reg SELFTEST_GPR.LBIST7_PROG_REG.R /* LBIST7 Program */

/* TMU */
#define TMU_TMR              TMU.TMR.R                     /* Mode */
#define TMU_TSR              TMU.TSR.R                     /* Status */
#define TMU_TMSR             TMU.TMSR.R                    /* Monitor Site */
#define TMU_TMTMIR           TMU.TMTMIR.R                  /* Monitor Temperature Measurement Interval */
#define TMU_TIER             TMU.TIER.R                    /* Interrupt Enable */
#define TMU_TIDR             TMU.TIDR.R                    /* Interrupt Detect */
#define TMU_TIISCR           TMU.TIISCR.R                  /* Interrupt Immediate Site Capture */
#define TMU_TIASCR           TMU.TIASCR.R                  /* Interrupt Average Site Capture */
#define TMU_TICSCR           TMU.TICSCR.R                  /* Interrupt Critical Site Capture */
#define TMU_TMHTCR           TMU.TMHTCR.R                  /* Monitor High Temperature Capture */
#define TMU_TMLTCR           TMU.TMLTCR.R                  /* Monitor Low Temperature Capture */
#define TMU_TMRTRCR          TMU.TMRTRCR.R                 /* Monitor Rising Temperature Rate Capture */
#define TMU_TMFTRCR          TMU.TMFTRCR.R                 /* Monitor Falling Temperature Rate Capture */
#define TMU_TMHTITR          TMU.TMHTITR.R                 /* Monitor High Temperature Immediate Threshold */
#define TMU_TMHTATR          TMU.TMHTATR.R                 /* Monitor High Temperature Average Threshold */
#define TMU_TMHTACTR         TMU.TMHTACTR.R                /* Monitor High Temperature Average Critical Threshold */
#define TMU_TMLTITR          TMU.TMLTITR.R                 /* Monitor Low Temperature Immediate Threshold */
#define TMU_TMLTATR          TMU.TMLTATR.R                 /* Monitor Low Temperature Average Threshold */
#define TMU_TMLTACTR         TMU.TMLTACTR.R                /* Monitor Low Temperature Average Critical Threshold */
#define TMU_TMRTRCTR         TMU.TMRTRCTR.R                /* Monitor Rising Temperature Rate Critical Threshold */
#define TMU_TMFTRCTR         TMU.TMFTRCTR.R                /* Monitor Falling Temperature Rate Critical Threshold */
#define TMU_TTCFGR           TMU.TTCFGR.R                  /* Temperature Configuration */
#define TMU_TSCFGR           TMU.TSCFGR.R                  /* Sensor Configuration */
#define TMU_TRITSR0          TMU.TRITRATSR[0].TRITSR.R     /* Report Immediate Temperature at Site */
#define TMU_TRATSR0          TMU.TRITRATSR[0].TRATSR.R     /* Report Average Temperature at Site */
#define TMU_TRITSR1          TMU.TRITRATSR[1].TRITSR.R     /* Report Immediate Temperature at Site */
#define TMU_TRATSR1          TMU.TRITRATSR[1].TRATSR.R     /* Report Average Temperature at Site */
#define TMU_TRITSR2          TMU.TRITRATSR[2].TRITSR.R     /* Report Immediate Temperature at Site */
#define TMU_TRATSR2          TMU.TRITRATSR[2].TRATSR.R     /* Report Average Temperature at Site */
#define TMU_TCMCFG           TMU.TCMCFG.R                  /* Central Module Configuration */
#define TMU_TTRCR0           TMU.TTRCR[0].R                /* Temperature Range Control 0 */
#define TMU_TTRCR1           TMU.TTRCR[1].R                /* Temperature Range Control 1 */
#define TMU_TTRCR2           TMU.TTRCR[2].R                /* Temperature Range Control 2 */
#define TMU_TTRCR3           TMU.TTRCR[3].R                /* Temperature Range Control 3 */
#define TMU_TTRCR4           TMU.TTRCR[4].R                /* Temperature Range Control 4 */
#define TMU_TTRCR5           TMU.TTRCR[5].R                /* Temperature Range Control 5 */
#define TMU_TTRCR6           TMU.TTRCR[6].R                /* Temperature Range Control 6 */
#define TMU_TTRCR7           TMU.TTRCR[7].R                /* Temperature Range Control 7 */
#define TMU_TTRCR8           TMU.TTRCR[8].R                /* Temperature Range Control 8 */
#define TMU_TTRCR9           TMU.TTRCR[9].R                /* Temperature Range Control 9 */
#define TMU_TTRCR10          TMU.TTRCR[10].R               /* Temperature Range Control 10 */
#define TMU_TTRCR11          TMU.TTRCR[11].R               /* Temperature Range Control 11 */
#define TMU_TTRCR12          TMU.TTRCR[12].R               /* Temperature Range Control 12 */
#define TMU_TTRCR13          TMU.TTRCR[13].R               /* Temperature Range Control 13 */
#define TMU_TTRCR14          TMU.TTRCR[14].R               /* Temperature Range Control 14 */
#define TMU_TTRCR15          TMU.TTRCR[15].R               /* Temperature Range Control 15 */

/* WKPU */
#define WKPU_NSR             WKPU.NSR.R                    /* NMI Status Flag Register */
#define WKPU_NCR             WKPU.NCR.R                    /* NMI Configuration Register */

/* XBIC */
#define XBIC_6_MCR           XBIC_6.MCR.R                  /* XBIC Module Control */
#define XBIC_6_EIR           XBIC_6.EIR.R                  /* XBIC Error Injection */
#define XBIC_6_ESR           XBIC_6.ESR.R                  /* XBIC Error Status */
#define XBIC_6_EAR           XBIC_6.EAR.R                  /* XBIC Error Address */

#define XBIC_0_MCR           XBIC_0.MCR.R                  /* XBIC Module Control */
#define XBIC_0_EIR           XBIC_0.EIR.R                  /* XBIC Error Injection */
#define XBIC_0_ESR           XBIC_0.ESR.R                  /* XBIC Error Status */
#define XBIC_0_EAR           XBIC_0.EAR.R                  /* XBIC Error Address */

#define XBIC_1_MCR           XBIC_1.MCR.R                  /* XBIC Module Control */
#define XBIC_1_EIR           XBIC_1.EIR.R                  /* XBIC Error Injection */
#define XBIC_1_ESR           XBIC_1.ESR.R                  /* XBIC Error Status */
#define XBIC_1_EAR           XBIC_1.EAR.R                  /* XBIC Error Address */

#define XBIC_3_MCR           XBIC_3.MCR.R                  /* XBIC Module Control */
#define XBIC_3_EIR           XBIC_3.EIR.R                  /* XBIC Error Injection */
#define XBIC_3_ESR           XBIC_3.ESR.R                  /* XBIC Error Status */
#define XBIC_3_EAR           XBIC_3.EAR.R                  /* XBIC Error Address */

#define XBIC_5_MCR           XBIC_5.MCR.R                  /* XBIC Module Control */
#define XBIC_5_EIR           XBIC_5.EIR.R                  /* XBIC Error Injection */
#define XBIC_5_ESR           XBIC_5.ESR.R                  /* XBIC Error Status */
#define XBIC_5_EAR           XBIC_5.EAR.R                  /* XBIC Error Address */

#define XBIC_4_MCR           XBIC_4.MCR.R                  /* XBIC Module Control */
#define XBIC_4_EIR           XBIC_4.EIR.R                  /* XBIC Error Injection */
#define XBIC_4_ESR           XBIC_4.ESR.R                  /* XBIC Error Status */
#define XBIC_4_EAR           XBIC_4.EAR.R                  /* XBIC Error Address */

#define XBIC_2_MCR           XBIC_2.MCR.R                  /* XBIC Module Control */
#define XBIC_2_EIR           XBIC_2.EIR.R                  /* XBIC Error Injection */
#define XBIC_2_ESR           XBIC_2.ESR.R                  /* XBIC Error Status */
#define XBIC_2_EAR           XBIC_2.EAR.R                  /* XBIC Error Address */

/* eDMA_0_MP */
#define EDMA_0_MP_CSR        EDMA_0_MP.CSR.R               /* Management Page Control */
#define EDMA_0_MP_ES         EDMA_0_MP.ES.R                /* Management Page Error Status */
#define EDMA_0_MP_INT        EDMA_0_MP.INT.R               /* Management Page Interrupt Request Status */
#define EDMA_0_MP_HRS        EDMA_0_MP.HRS.R               /* Management Page Hardware Request Status */
#define EDMA_0_MP_CH0_GRPRI  EDMA_0_MP.CH_GRPRI[0].R       /* Channel Arbitration Group */
#define EDMA_0_MP_CH1_GRPRI  EDMA_0_MP.CH_GRPRI[1].R       /* Channel Arbitration Group */
#define EDMA_0_MP_CH2_GRPRI  EDMA_0_MP.CH_GRPRI[2].R       /* Channel Arbitration Group */
#define EDMA_0_MP_CH3_GRPRI  EDMA_0_MP.CH_GRPRI[3].R       /* Channel Arbitration Group */
#define EDMA_0_MP_CH4_GRPRI  EDMA_0_MP.CH_GRPRI[4].R       /* Channel Arbitration Group */
#define EDMA_0_MP_CH5_GRPRI  EDMA_0_MP.CH_GRPRI[5].R       /* Channel Arbitration Group */
#define EDMA_0_MP_CH6_GRPRI  EDMA_0_MP.CH_GRPRI[6].R       /* Channel Arbitration Group */
#define EDMA_0_MP_CH7_GRPRI  EDMA_0_MP.CH_GRPRI[7].R       /* Channel Arbitration Group */
#define EDMA_0_MP_CH8_GRPRI  EDMA_0_MP.CH_GRPRI[8].R       /* Channel Arbitration Group */
#define EDMA_0_MP_CH9_GRPRI  EDMA_0_MP.CH_GRPRI[9].R       /* Channel Arbitration Group */
#define EDMA_0_MP_CH10_GRPRI EDMA_0_MP.CH_GRPRI[10].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH11_GRPRI EDMA_0_MP.CH_GRPRI[11].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH12_GRPRI EDMA_0_MP.CH_GRPRI[12].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH13_GRPRI EDMA_0_MP.CH_GRPRI[13].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH14_GRPRI EDMA_0_MP.CH_GRPRI[14].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH15_GRPRI EDMA_0_MP.CH_GRPRI[15].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH16_GRPRI EDMA_0_MP.CH_GRPRI[16].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH17_GRPRI EDMA_0_MP.CH_GRPRI[17].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH18_GRPRI EDMA_0_MP.CH_GRPRI[18].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH19_GRPRI EDMA_0_MP.CH_GRPRI[19].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH20_GRPRI EDMA_0_MP.CH_GRPRI[20].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH21_GRPRI EDMA_0_MP.CH_GRPRI[21].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH22_GRPRI EDMA_0_MP.CH_GRPRI[22].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH23_GRPRI EDMA_0_MP.CH_GRPRI[23].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH24_GRPRI EDMA_0_MP.CH_GRPRI[24].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH25_GRPRI EDMA_0_MP.CH_GRPRI[25].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH26_GRPRI EDMA_0_MP.CH_GRPRI[26].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH27_GRPRI EDMA_0_MP.CH_GRPRI[27].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH28_GRPRI EDMA_0_MP.CH_GRPRI[28].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH29_GRPRI EDMA_0_MP.CH_GRPRI[29].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH30_GRPRI EDMA_0_MP.CH_GRPRI[30].R      /* Channel Arbitration Group */
#define EDMA_0_MP_CH31_GRPRI EDMA_0_MP.CH_GRPRI[31].R      /* Channel Arbitration Group */

/* eDMA_0_TCD */
#define EDMA_0_TCD_CH1_CSR   EDMA_0_TCD.CH1_CSR.R          /* Channel Control and Status */
#define EDMA_0_TCD_CH1_ES    EDMA_0_TCD.CH1_ES.R           /* Channel Error Status */
#define EDMA_0_TCD_CH1_INT   EDMA_0_TCD.CH1_INT.R          /* Channel Interrupt Status */
#define EDMA_0_TCD_CH1_SBR   EDMA_0_TCD.CH1_SBR.R          /* Channel System Bus */
#define EDMA_0_TCD_CH1_PRI   EDMA_0_TCD.CH1_PRI.R          /* Channel Priority */
#define EDMA_0_TCD_TCD1_SADDR EDMA_0_TCD.TCD1_SADDR.R      /* TCD Source Address */
#define EDMA_0_TCD_TCD1_ATTR EDMA_0_TCD.TCD1_ATTR.R        /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD1_SOFF EDMA_0_TCD.TCD1_SOFF.R        /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD1_NBYTES_MLOFFNO EDMA_0_TCD.NBYTES1.TCD1_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD1_NBYTES_MLOFFYES EDMA_0_TCD.NBYTES1.TCD1_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD1_SLAST_SDA EDMA_0_TCD.TCD1_SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD1_DADDR EDMA_0_TCD.TCD1_DADDR.R      /* TCD Destination Address */
#define EDMA_0_TCD_TCD1_CITER_ELINKNO EDMA_0_TCD.CITER1.TCD1_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD1_CITER_ELINKYES EDMA_0_TCD.CITER1.TCD1_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD1_DOFF EDMA_0_TCD.TCD1_DOFF.R        /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD1_DLAST_SGA EDMA_0_TCD.TCD1_DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD1_BITER_ELINKNO EDMA_0_TCD.BITER1.TCD1_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD1_BITER_ELINKYES EDMA_0_TCD.BITER1.TCD1_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD1_CSR  EDMA_0_TCD.TCD1_CSR.R         /* TCD Control and Status */
#define EDMA_0_TCD_CH2_CSR   EDMA_0_TCD.CH2_CSR.R          /* Channel Control and Status */
#define EDMA_0_TCD_CH2_ES    EDMA_0_TCD.CH2_ES.R           /* Channel Error Status */
#define EDMA_0_TCD_CH2_INT   EDMA_0_TCD.CH2_INT.R          /* Channel Interrupt Status */
#define EDMA_0_TCD_CH2_SBR   EDMA_0_TCD.CH2_SBR.R          /* Channel System Bus */
#define EDMA_0_TCD_CH2_PRI   EDMA_0_TCD.CH2_PRI.R          /* Channel Priority */
#define EDMA_0_TCD_TCD2_SADDR EDMA_0_TCD.TCD2_SADDR.R      /* TCD Source Address */
#define EDMA_0_TCD_TCD2_ATTR EDMA_0_TCD.TCD2_ATTR.R        /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD2_SOFF EDMA_0_TCD.TCD2_SOFF.R        /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD2_NBYTES_MLOFFNO EDMA_0_TCD.NBYTES2.TCD2_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD2_NBYTES_MLOFFYES EDMA_0_TCD.NBYTES2.TCD2_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD2_SLAST_SDA EDMA_0_TCD.TCD2_SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD2_DADDR EDMA_0_TCD.TCD2_DADDR.R      /* TCD Destination Address */
#define EDMA_0_TCD_TCD2_CITER_ELINKNO EDMA_0_TCD.CITER2.TCD2_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD2_CITER_ELINKYES EDMA_0_TCD.CITER2.TCD2_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD2_DOFF EDMA_0_TCD.TCD2_DOFF.R        /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD2_DLAST_SGA EDMA_0_TCD.TCD2_DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD2_BITER_ELINKNO EDMA_0_TCD.BITER2.TCD2_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD2_BITER_ELINKYES EDMA_0_TCD.BITER2.TCD2_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD2_CSR  EDMA_0_TCD.TCD2_CSR.R         /* TCD Control and Status */
#define EDMA_0_TCD_CH3_CSR   EDMA_0_TCD.CH3_CSR.R          /* Channel Control and Status */
#define EDMA_0_TCD_CH3_ES    EDMA_0_TCD.CH3_ES.R           /* Channel Error Status */
#define EDMA_0_TCD_CH3_INT   EDMA_0_TCD.CH3_INT.R          /* Channel Interrupt Status */
#define EDMA_0_TCD_CH3_SBR   EDMA_0_TCD.CH3_SBR.R          /* Channel System Bus */
#define EDMA_0_TCD_CH3_PRI   EDMA_0_TCD.CH3_PRI.R          /* Channel Priority */
#define EDMA_0_TCD_TCD3_SADDR EDMA_0_TCD.TCD3_SADDR.R      /* TCD Source Address */
#define EDMA_0_TCD_TCD3_ATTR EDMA_0_TCD.TCD3_ATTR.R        /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD3_SOFF EDMA_0_TCD.TCD3_SOFF.R        /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD3_NBYTES_MLOFFNO EDMA_0_TCD.NBYTES3.TCD3_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD3_NBYTES_MLOFFYES EDMA_0_TCD.NBYTES3.TCD3_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD3_SLAST_SDA EDMA_0_TCD.TCD3_SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD3_DADDR EDMA_0_TCD.TCD3_DADDR.R      /* TCD Destination Address */
#define EDMA_0_TCD_TCD3_CITER_ELINKNO EDMA_0_TCD.CITER3.TCD3_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD3_CITER_ELINKYES EDMA_0_TCD.CITER3.TCD3_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD3_DOFF EDMA_0_TCD.TCD3_DOFF.R        /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD3_DLAST_SGA EDMA_0_TCD.TCD3_DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD3_BITER_ELINKNO EDMA_0_TCD.BITER3.TCD3_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD3_BITER_ELINKYES EDMA_0_TCD.BITER3.TCD3_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD3_CSR  EDMA_0_TCD.TCD3_CSR.R         /* TCD Control and Status */
#define EDMA_0_TCD_CH4_CSR   EDMA_0_TCD.CH4_CSR.R          /* Channel Control and Status */
#define EDMA_0_TCD_CH4_ES    EDMA_0_TCD.CH4_ES.R           /* Channel Error Status */
#define EDMA_0_TCD_CH4_INT   EDMA_0_TCD.CH4_INT.R          /* Channel Interrupt Status */
#define EDMA_0_TCD_CH4_SBR   EDMA_0_TCD.CH4_SBR.R          /* Channel System Bus */
#define EDMA_0_TCD_CH4_PRI   EDMA_0_TCD.CH4_PRI.R          /* Channel Priority */
#define EDMA_0_TCD_TCD4_SADDR EDMA_0_TCD.TCD4_SADDR.R      /* TCD Source Address */
#define EDMA_0_TCD_TCD4_ATTR EDMA_0_TCD.TCD4_ATTR.R        /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD4_SOFF EDMA_0_TCD.TCD4_SOFF.R        /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD4_NBYTES_MLOFFNO EDMA_0_TCD.NBYTES4.TCD4_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD4_NBYTES_MLOFFYES EDMA_0_TCD.NBYTES4.TCD4_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD4_SLAST_SDA EDMA_0_TCD.TCD4_SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD4_DADDR EDMA_0_TCD.TCD4_DADDR.R      /* TCD Destination Address */
#define EDMA_0_TCD_TCD4_CITER_ELINKNO EDMA_0_TCD.CITER4.TCD4_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD4_CITER_ELINKYES EDMA_0_TCD.CITER4.TCD4_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD4_DOFF EDMA_0_TCD.TCD4_DOFF.R        /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD4_DLAST_SGA EDMA_0_TCD.TCD4_DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD4_BITER_ELINKNO EDMA_0_TCD.BITER4.TCD4_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD4_BITER_ELINKYES EDMA_0_TCD.BITER4.TCD4_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD4_CSR  EDMA_0_TCD.TCD4_CSR.R         /* TCD Control and Status */
#define EDMA_0_TCD_CH5_CSR   EDMA_0_TCD.CH5_CSR.R          /* Channel Control and Status */
#define EDMA_0_TCD_CH5_ES    EDMA_0_TCD.CH5_ES.R           /* Channel Error Status */
#define EDMA_0_TCD_CH5_INT   EDMA_0_TCD.CH5_INT.R          /* Channel Interrupt Status */
#define EDMA_0_TCD_CH5_SBR   EDMA_0_TCD.CH5_SBR.R          /* Channel System Bus */
#define EDMA_0_TCD_CH5_PRI   EDMA_0_TCD.CH5_PRI.R          /* Channel Priority */
#define EDMA_0_TCD_TCD5_SADDR EDMA_0_TCD.TCD5_SADDR.R      /* TCD Source Address */
#define EDMA_0_TCD_TCD5_ATTR EDMA_0_TCD.TCD5_ATTR.R        /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD5_SOFF EDMA_0_TCD.TCD5_SOFF.R        /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD5_NBYTES_MLOFFNO EDMA_0_TCD.NBYTES5.TCD5_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD5_NBYTES_MLOFFYES EDMA_0_TCD.NBYTES5.TCD5_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD5_SLAST_SDA EDMA_0_TCD.TCD5_SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD5_DADDR EDMA_0_TCD.TCD5_DADDR.R      /* TCD Destination Address */
#define EDMA_0_TCD_TCD5_CITER_ELINKNO EDMA_0_TCD.CITER5.TCD5_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD5_CITER_ELINKYES EDMA_0_TCD.CITER5.TCD5_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD5_DOFF EDMA_0_TCD.TCD5_DOFF.R        /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD5_DLAST_SGA EDMA_0_TCD.TCD5_DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD5_BITER_ELINKNO EDMA_0_TCD.BITER5.TCD5_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD5_BITER_ELINKYES EDMA_0_TCD.BITER5.TCD5_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD5_CSR  EDMA_0_TCD.TCD5_CSR.R         /* TCD Control and Status */
#define EDMA_0_TCD_CH6_CSR   EDMA_0_TCD.CH6_CSR.R          /* Channel Control and Status */
#define EDMA_0_TCD_CH6_ES    EDMA_0_TCD.CH6_ES.R           /* Channel Error Status */
#define EDMA_0_TCD_CH6_INT   EDMA_0_TCD.CH6_INT.R          /* Channel Interrupt Status */
#define EDMA_0_TCD_CH6_SBR   EDMA_0_TCD.CH6_SBR.R          /* Channel System Bus */
#define EDMA_0_TCD_CH6_PRI   EDMA_0_TCD.CH6_PRI.R          /* Channel Priority */
#define EDMA_0_TCD_TCD6_SADDR EDMA_0_TCD.TCD6_SADDR.R      /* TCD Source Address */
#define EDMA_0_TCD_TCD6_ATTR EDMA_0_TCD.TCD6_ATTR.R        /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD6_SOFF EDMA_0_TCD.TCD6_SOFF.R        /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD6_NBYTES_MLOFFNO EDMA_0_TCD.NBYTES6.TCD6_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD6_NBYTES_MLOFFYES EDMA_0_TCD.NBYTES6.TCD6_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD6_SLAST_SDA EDMA_0_TCD.TCD6_SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD6_DADDR EDMA_0_TCD.TCD6_DADDR.R      /* TCD Destination Address */
#define EDMA_0_TCD_TCD6_CITER_ELINKNO EDMA_0_TCD.CITER6.TCD6_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD6_CITER_ELINKYES EDMA_0_TCD.CITER6.TCD6_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD6_DOFF EDMA_0_TCD.TCD6_DOFF.R        /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD6_DLAST_SGA EDMA_0_TCD.TCD6_DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD6_BITER_ELINKNO EDMA_0_TCD.BITER6.TCD6_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD6_BITER_ELINKYES EDMA_0_TCD.BITER6.TCD6_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD6_CSR  EDMA_0_TCD.TCD6_CSR.R         /* TCD Control and Status */
#define EDMA_0_TCD_CH7_CSR   EDMA_0_TCD.CH7_CSR.R          /* Channel Control and Status */
#define EDMA_0_TCD_CH7_ES    EDMA_0_TCD.CH7_ES.R           /* Channel Error Status */
#define EDMA_0_TCD_CH7_INT   EDMA_0_TCD.CH7_INT.R          /* Channel Interrupt Status */
#define EDMA_0_TCD_CH7_SBR   EDMA_0_TCD.CH7_SBR.R          /* Channel System Bus */
#define EDMA_0_TCD_CH7_PRI   EDMA_0_TCD.CH7_PRI.R          /* Channel Priority */
#define EDMA_0_TCD_TCD7_SADDR EDMA_0_TCD.TCD7_SADDR.R      /* TCD Source Address */
#define EDMA_0_TCD_TCD7_ATTR EDMA_0_TCD.TCD7_ATTR.R        /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD7_SOFF EDMA_0_TCD.TCD7_SOFF.R        /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD7_NBYTES_MLOFFNO EDMA_0_TCD.NBYTES7.TCD7_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD7_NBYTES_MLOFFYES EDMA_0_TCD.NBYTES7.TCD7_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD7_SLAST_SDA EDMA_0_TCD.TCD7_SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD7_DADDR EDMA_0_TCD.TCD7_DADDR.R      /* TCD Destination Address */
#define EDMA_0_TCD_TCD7_CITER_ELINKNO EDMA_0_TCD.CITER7.TCD7_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD7_CITER_ELINKYES EDMA_0_TCD.CITER7.TCD7_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD7_DOFF EDMA_0_TCD.TCD7_DOFF.R        /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD7_DLAST_SGA EDMA_0_TCD.TCD7_DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD7_BITER_ELINKNO EDMA_0_TCD.BITER7.TCD7_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD7_BITER_ELINKYES EDMA_0_TCD.BITER7.TCD7_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD7_CSR  EDMA_0_TCD.TCD7_CSR.R         /* TCD Control and Status */
#define EDMA_0_TCD_CH8_CSR   EDMA_0_TCD.CH8_CSR.R          /* Channel Control and Status */
#define EDMA_0_TCD_CH8_ES    EDMA_0_TCD.CH8_ES.R           /* Channel Error Status */
#define EDMA_0_TCD_CH8_INT   EDMA_0_TCD.CH8_INT.R          /* Channel Interrupt Status */
#define EDMA_0_TCD_CH8_SBR   EDMA_0_TCD.CH8_SBR.R          /* Channel System Bus */
#define EDMA_0_TCD_CH8_PRI   EDMA_0_TCD.CH8_PRI.R          /* Channel Priority */
#define EDMA_0_TCD_TCD8_SADDR EDMA_0_TCD.TCD8_SADDR.R      /* TCD Source Address */
#define EDMA_0_TCD_TCD8_ATTR EDMA_0_TCD.TCD8_ATTR.R        /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD8_SOFF EDMA_0_TCD.TCD8_SOFF.R        /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD8_NBYTES_MLOFFNO EDMA_0_TCD.NBYTES8.TCD8_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD8_NBYTES_MLOFFYES EDMA_0_TCD.NBYTES8.TCD8_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD8_SLAST_SDA EDMA_0_TCD.TCD8_SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD8_DADDR EDMA_0_TCD.TCD8_DADDR.R      /* TCD Destination Address */
#define EDMA_0_TCD_TCD8_CITER_ELINKNO EDMA_0_TCD.CITER8.TCD8_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD8_CITER_ELINKYES EDMA_0_TCD.CITER8.TCD8_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD8_DOFF EDMA_0_TCD.TCD8_DOFF.R        /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD8_DLAST_SGA EDMA_0_TCD.TCD8_DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD8_BITER_ELINKNO EDMA_0_TCD.BITER8.TCD8_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD8_BITER_ELINKYES EDMA_0_TCD.BITER8.TCD8_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD8_CSR  EDMA_0_TCD.TCD8_CSR.R         /* TCD Control and Status */
#define EDMA_0_TCD_CH9_CSR   EDMA_0_TCD.CH9_CSR.R          /* Channel Control and Status */
#define EDMA_0_TCD_CH9_ES    EDMA_0_TCD.CH9_ES.R           /* Channel Error Status */
#define EDMA_0_TCD_CH9_INT   EDMA_0_TCD.CH9_INT.R          /* Channel Interrupt Status */
#define EDMA_0_TCD_CH9_SBR   EDMA_0_TCD.CH9_SBR.R          /* Channel System Bus */
#define EDMA_0_TCD_CH9_PRI   EDMA_0_TCD.CH9_PRI.R          /* Channel Priority */
#define EDMA_0_TCD_TCD9_SADDR EDMA_0_TCD.TCD9_SADDR.R      /* TCD Source Address */
#define EDMA_0_TCD_TCD9_ATTR EDMA_0_TCD.TCD9_ATTR.R        /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD9_SOFF EDMA_0_TCD.TCD9_SOFF.R        /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD9_NBYTES_MLOFFNO EDMA_0_TCD.NBYTES9.TCD9_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD9_NBYTES_MLOFFYES EDMA_0_TCD.NBYTES9.TCD9_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD9_SLAST_SDA EDMA_0_TCD.TCD9_SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD9_DADDR EDMA_0_TCD.TCD9_DADDR.R      /* TCD Destination Address */
#define EDMA_0_TCD_TCD9_CITER_ELINKNO EDMA_0_TCD.CITER9.TCD9_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD9_CITER_ELINKYES EDMA_0_TCD.CITER9.TCD9_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD9_DOFF EDMA_0_TCD.TCD9_DOFF.R        /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD9_DLAST_SGA EDMA_0_TCD.TCD9_DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD9_BITER_ELINKNO EDMA_0_TCD.BITER9.TCD9_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD9_BITER_ELINKYES EDMA_0_TCD.BITER9.TCD9_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD9_CSR  EDMA_0_TCD.TCD9_CSR.R         /* TCD Control and Status */
#define EDMA_0_TCD_CH10_CSR  EDMA_0_TCD.CH10_CSR.R         /* Channel Control and Status */
#define EDMA_0_TCD_CH10_ES   EDMA_0_TCD.CH10_ES.R          /* Channel Error Status */
#define EDMA_0_TCD_CH10_INT  EDMA_0_TCD.CH10_INT.R         /* Channel Interrupt Status */
#define EDMA_0_TCD_CH10_SBR  EDMA_0_TCD.CH10_SBR.R         /* Channel System Bus */
#define EDMA_0_TCD_CH10_PRI  EDMA_0_TCD.CH10_PRI.R         /* Channel Priority */
#define EDMA_0_TCD_TCD10_SADDR EDMA_0_TCD.TCD10_SADDR.R    /* TCD Source Address */
#define EDMA_0_TCD_TCD10_ATTR EDMA_0_TCD.TCD10_ATTR.R      /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD10_SOFF EDMA_0_TCD.TCD10_SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD10_NBYTES_MLOFFNO EDMA_0_TCD.NBYTES10.TCD10_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD10_NBYTES_MLOFFYES EDMA_0_TCD.NBYTES10.TCD10_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD10_SLAST_SDA EDMA_0_TCD.TCD10_SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD10_DADDR EDMA_0_TCD.TCD10_DADDR.R    /* TCD Destination Address */
#define EDMA_0_TCD_TCD10_CITER_ELINKNO EDMA_0_TCD.CITER10.TCD10_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD10_CITER_ELINKYES EDMA_0_TCD.CITER10.TCD10_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD10_DOFF EDMA_0_TCD.TCD10_DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD10_DLAST_SGA EDMA_0_TCD.TCD10_DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD10_BITER_ELINKNO EDMA_0_TCD.BITER10.TCD10_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD10_BITER_ELINKYES EDMA_0_TCD.BITER10.TCD10_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD10_CSR EDMA_0_TCD.TCD10_CSR.R        /* TCD Control and Status */
#define EDMA_0_TCD_CH11_CSR  EDMA_0_TCD.CH11_CSR.R         /* Channel Control and Status */
#define EDMA_0_TCD_CH11_ES   EDMA_0_TCD.CH11_ES.R          /* Channel Error Status */
#define EDMA_0_TCD_CH11_INT  EDMA_0_TCD.CH11_INT.R         /* Channel Interrupt Status */
#define EDMA_0_TCD_CH11_SBR  EDMA_0_TCD.CH11_SBR.R         /* Channel System Bus */
#define EDMA_0_TCD_CH11_PRI  EDMA_0_TCD.CH11_PRI.R         /* Channel Priority */
#define EDMA_0_TCD_TCD11_SADDR EDMA_0_TCD.TCD11_SADDR.R    /* TCD Source Address */
#define EDMA_0_TCD_TCD11_ATTR EDMA_0_TCD.TCD11_ATTR.R      /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD11_SOFF EDMA_0_TCD.TCD11_SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD11_NBYTES_MLOFFNO EDMA_0_TCD.NBYTES11.TCD11_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD11_NBYTES_MLOFFYES EDMA_0_TCD.NBYTES11.TCD11_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD11_SLAST_SDA EDMA_0_TCD.TCD11_SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD11_DADDR EDMA_0_TCD.TCD11_DADDR.R    /* TCD Destination Address */
#define EDMA_0_TCD_TCD11_CITER_ELINKNO EDMA_0_TCD.CITER11.TCD11_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD11_CITER_ELINKYES EDMA_0_TCD.CITER11.TCD11_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD11_DOFF EDMA_0_TCD.TCD11_DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD11_DLAST_SGA EDMA_0_TCD.TCD11_DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD11_BITER_ELINKNO EDMA_0_TCD.BITER11.TCD11_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD11_BITER_ELINKYES EDMA_0_TCD.BITER11.TCD11_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD11_CSR EDMA_0_TCD.TCD11_CSR.R        /* TCD Control and Status */
#define EDMA_0_TCD_CH12_CSR  EDMA_0_TCD.CH12_CSR.R         /* Channel Control and Status */
#define EDMA_0_TCD_CH12_ES   EDMA_0_TCD.CH12_ES.R          /* Channel Error Status */
#define EDMA_0_TCD_CH12_INT  EDMA_0_TCD.CH12_INT.R         /* Channel Interrupt Status */
#define EDMA_0_TCD_CH12_SBR  EDMA_0_TCD.CH12_SBR.R         /* Channel System Bus */
#define EDMA_0_TCD_CH12_PRI  EDMA_0_TCD.CH12_PRI.R         /* Channel Priority */
#define EDMA_0_TCD_TCD12_SADDR EDMA_0_TCD.TCD12_SADDR.R    /* TCD Source Address */
#define EDMA_0_TCD_TCD12_ATTR EDMA_0_TCD.TCD12_ATTR.R      /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD12_SOFF EDMA_0_TCD.TCD12_SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD12_NBYTES_MLOFFNO EDMA_0_TCD.NBYTES12.TCD12_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD12_NBYTES_MLOFFYES EDMA_0_TCD.NBYTES12.TCD12_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD12_SLAST_SDA EDMA_0_TCD.TCD12_SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD12_DADDR EDMA_0_TCD.TCD12_DADDR.R    /* TCD Destination Address */
#define EDMA_0_TCD_TCD12_CITER_ELINKNO EDMA_0_TCD.CITER12.TCD12_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD12_CITER_ELINKYES EDMA_0_TCD.CITER12.TCD12_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD12_DOFF EDMA_0_TCD.TCD12_DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD12_DLAST_SGA EDMA_0_TCD.TCD12_DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD12_BITER_ELINKNO EDMA_0_TCD.BITER12.TCD12_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD12_BITER_ELINKYES EDMA_0_TCD.BITER12.TCD12_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD12_CSR EDMA_0_TCD.TCD12_CSR.R        /* TCD Control and Status */
#define EDMA_0_TCD_CH13_CSR  EDMA_0_TCD.CH13_CSR.R         /* Channel Control and Status */
#define EDMA_0_TCD_CH13_ES   EDMA_0_TCD.CH13_ES.R          /* Channel Error Status */
#define EDMA_0_TCD_CH13_INT  EDMA_0_TCD.CH13_INT.R         /* Channel Interrupt Status */
#define EDMA_0_TCD_CH13_SBR  EDMA_0_TCD.CH13_SBR.R         /* Channel System Bus */
#define EDMA_0_TCD_CH13_PRI  EDMA_0_TCD.CH13_PRI.R         /* Channel Priority */
#define EDMA_0_TCD_TCD13_SADDR EDMA_0_TCD.TCD13_SADDR.R    /* TCD Source Address */
#define EDMA_0_TCD_TCD13_ATTR EDMA_0_TCD.TCD13_ATTR.R      /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD13_SOFF EDMA_0_TCD.TCD13_SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD13_NBYTES_MLOFFNO EDMA_0_TCD.NBYTES13.TCD13_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD13_NBYTES_MLOFFYES EDMA_0_TCD.NBYTES13.TCD13_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD13_SLAST_SDA EDMA_0_TCD.TCD13_SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD13_DADDR EDMA_0_TCD.TCD13_DADDR.R    /* TCD Destination Address */
#define EDMA_0_TCD_TCD13_CITER_ELINKNO EDMA_0_TCD.CITER13.TCD13_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD13_CITER_ELINKYES EDMA_0_TCD.CITER13.TCD13_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD13_DOFF EDMA_0_TCD.TCD13_DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD13_DLAST_SGA EDMA_0_TCD.TCD13_DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD13_BITER_ELINKNO EDMA_0_TCD.BITER13.TCD13_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD13_BITER_ELINKYES EDMA_0_TCD.BITER13.TCD13_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD13_CSR EDMA_0_TCD.TCD13_CSR.R        /* TCD Control and Status */
#define EDMA_0_TCD_CH14_CSR  EDMA_0_TCD.CH14_CSR.R         /* Channel Control and Status */
#define EDMA_0_TCD_CH14_ES   EDMA_0_TCD.CH14_ES.R          /* Channel Error Status */
#define EDMA_0_TCD_CH14_INT  EDMA_0_TCD.CH14_INT.R         /* Channel Interrupt Status */
#define EDMA_0_TCD_CH14_SBR  EDMA_0_TCD.CH14_SBR.R         /* Channel System Bus */
#define EDMA_0_TCD_CH14_PRI  EDMA_0_TCD.CH14_PRI.R         /* Channel Priority */
#define EDMA_0_TCD_TCD14_SADDR EDMA_0_TCD.TCD14_SADDR.R    /* TCD Source Address */
#define EDMA_0_TCD_TCD14_ATTR EDMA_0_TCD.TCD14_ATTR.R      /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD14_SOFF EDMA_0_TCD.TCD14_SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD14_NBYTES_MLOFFNO EDMA_0_TCD.NBYTES14.TCD14_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD14_NBYTES_MLOFFYES EDMA_0_TCD.NBYTES14.TCD14_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD14_SLAST_SDA EDMA_0_TCD.TCD14_SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD14_DADDR EDMA_0_TCD.TCD14_DADDR.R    /* TCD Destination Address */
#define EDMA_0_TCD_TCD14_CITER_ELINKNO EDMA_0_TCD.CITER14.TCD14_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD14_CITER_ELINKYES EDMA_0_TCD.CITER14.TCD14_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD14_DOFF EDMA_0_TCD.TCD14_DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD14_DLAST_SGA EDMA_0_TCD.TCD14_DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD14_BITER_ELINKNO EDMA_0_TCD.BITER14.TCD14_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD14_BITER_ELINKYES EDMA_0_TCD.BITER14.TCD14_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD14_CSR EDMA_0_TCD.TCD14_CSR.R        /* TCD Control and Status */
#define EDMA_0_TCD_CH15_CSR  EDMA_0_TCD.CH15_CSR.R         /* Channel Control and Status */
#define EDMA_0_TCD_CH15_ES   EDMA_0_TCD.CH15_ES.R          /* Channel Error Status */
#define EDMA_0_TCD_CH15_INT  EDMA_0_TCD.CH15_INT.R         /* Channel Interrupt Status */
#define EDMA_0_TCD_CH15_SBR  EDMA_0_TCD.CH15_SBR.R         /* Channel System Bus */
#define EDMA_0_TCD_CH15_PRI  EDMA_0_TCD.CH15_PRI.R         /* Channel Priority */
#define EDMA_0_TCD_TCD15_SADDR EDMA_0_TCD.TCD15_SADDR.R    /* TCD Source Address */
#define EDMA_0_TCD_TCD15_ATTR EDMA_0_TCD.TCD15_ATTR.R      /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD15_SOFF EDMA_0_TCD.TCD15_SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD15_NBYTES_MLOFFNO EDMA_0_TCD.NBYTES15.TCD15_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD15_NBYTES_MLOFFYES EDMA_0_TCD.NBYTES15.TCD15_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD15_SLAST_SDA EDMA_0_TCD.TCD15_SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD15_DADDR EDMA_0_TCD.TCD15_DADDR.R    /* TCD Destination Address */
#define EDMA_0_TCD_TCD15_CITER_ELINKNO EDMA_0_TCD.CITER15.TCD15_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD15_CITER_ELINKYES EDMA_0_TCD.CITER15.TCD15_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD15_DOFF EDMA_0_TCD.TCD15_DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD15_DLAST_SGA EDMA_0_TCD.TCD15_DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD15_BITER_ELINKNO EDMA_0_TCD.BITER15.TCD15_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD15_BITER_ELINKYES EDMA_0_TCD.BITER15.TCD15_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD15_CSR EDMA_0_TCD.TCD15_CSR.R        /* TCD Control and Status */
#define EDMA_0_TCD_CH16_CSR  EDMA_0_TCD.CH16_CSR.R         /* Channel Control and Status */
#define EDMA_0_TCD_CH16_ES   EDMA_0_TCD.CH16_ES.R          /* Channel Error Status */
#define EDMA_0_TCD_CH16_INT  EDMA_0_TCD.CH16_INT.R         /* Channel Interrupt Status */
#define EDMA_0_TCD_CH16_SBR  EDMA_0_TCD.CH16_SBR.R         /* Channel System Bus */
#define EDMA_0_TCD_CH16_PRI  EDMA_0_TCD.CH16_PRI.R         /* Channel Priority */
#define EDMA_0_TCD_TCD16_SADDR EDMA_0_TCD.TCD16_SADDR.R    /* TCD Source Address */
#define EDMA_0_TCD_TCD16_ATTR EDMA_0_TCD.TCD16_ATTR.R      /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD16_SOFF EDMA_0_TCD.TCD16_SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD16_NBYTES_MLOFFNO EDMA_0_TCD.NBYTES16.TCD16_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD16_NBYTES_MLOFFYES EDMA_0_TCD.NBYTES16.TCD16_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD16_SLAST_SDA EDMA_0_TCD.TCD16_SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD16_DADDR EDMA_0_TCD.TCD16_DADDR.R    /* TCD Destination Address */
#define EDMA_0_TCD_TCD16_CITER_ELINKNO EDMA_0_TCD.CITER16.TCD16_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD16_CITER_ELINKYES EDMA_0_TCD.CITER16.TCD16_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD16_DOFF EDMA_0_TCD.TCD16_DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD16_DLAST_SGA EDMA_0_TCD.TCD16_DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD16_BITER_ELINKNO EDMA_0_TCD.BITER16.TCD16_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD16_BITER_ELINKYES EDMA_0_TCD.BITER16.TCD16_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD16_CSR EDMA_0_TCD.TCD16_CSR.R        /* TCD Control and Status */
#define EDMA_0_TCD_CH17_CSR  EDMA_0_TCD.CH17_CSR.R         /* Channel Control and Status */
#define EDMA_0_TCD_CH17_ES   EDMA_0_TCD.CH17_ES.R          /* Channel Error Status */
#define EDMA_0_TCD_CH17_INT  EDMA_0_TCD.CH17_INT.R         /* Channel Interrupt Status */
#define EDMA_0_TCD_CH17_SBR  EDMA_0_TCD.CH17_SBR.R         /* Channel System Bus */
#define EDMA_0_TCD_CH17_PRI  EDMA_0_TCD.CH17_PRI.R         /* Channel Priority */
#define EDMA_0_TCD_TCD17_SADDR EDMA_0_TCD.TCD17_SADDR.R    /* TCD Source Address */
#define EDMA_0_TCD_TCD17_ATTR EDMA_0_TCD.TCD17_ATTR.R      /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD17_SOFF EDMA_0_TCD.TCD17_SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD17_NBYTES_MLOFFNO EDMA_0_TCD.NBYTES17.TCD17_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD17_NBYTES_MLOFFYES EDMA_0_TCD.NBYTES17.TCD17_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD17_SLAST_SDA EDMA_0_TCD.TCD17_SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD17_DADDR EDMA_0_TCD.TCD17_DADDR.R    /* TCD Destination Address */
#define EDMA_0_TCD_TCD17_CITER_ELINKNO EDMA_0_TCD.CITER17.TCD17_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD17_CITER_ELINKYES EDMA_0_TCD.CITER17.TCD17_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD17_DOFF EDMA_0_TCD.TCD17_DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD17_DLAST_SGA EDMA_0_TCD.TCD17_DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD17_BITER_ELINKNO EDMA_0_TCD.BITER17.TCD17_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD17_BITER_ELINKYES EDMA_0_TCD.BITER17.TCD17_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD17_CSR EDMA_0_TCD.TCD17_CSR.R        /* TCD Control and Status */
#define EDMA_0_TCD_CH18_CSR  EDMA_0_TCD.CH18_CSR.R         /* Channel Control and Status */
#define EDMA_0_TCD_CH18_ES   EDMA_0_TCD.CH18_ES.R          /* Channel Error Status */
#define EDMA_0_TCD_CH18_INT  EDMA_0_TCD.CH18_INT.R         /* Channel Interrupt Status */
#define EDMA_0_TCD_CH18_SBR  EDMA_0_TCD.CH18_SBR.R         /* Channel System Bus */
#define EDMA_0_TCD_CH18_PRI  EDMA_0_TCD.CH18_PRI.R         /* Channel Priority */
#define EDMA_0_TCD_TCD18_SADDR EDMA_0_TCD.TCD18_SADDR.R    /* TCD Source Address */
#define EDMA_0_TCD_TCD18_ATTR EDMA_0_TCD.TCD18_ATTR.R      /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD18_SOFF EDMA_0_TCD.TCD18_SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD18_NBYTES_MLOFFNO EDMA_0_TCD.NBYTES18.TCD18_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD18_NBYTES_MLOFFYES EDMA_0_TCD.NBYTES18.TCD18_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD18_SLAST_SDA EDMA_0_TCD.TCD18_SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD18_DADDR EDMA_0_TCD.TCD18_DADDR.R    /* TCD Destination Address */
#define EDMA_0_TCD_TCD18_CITER_ELINKNO EDMA_0_TCD.CITER18.TCD18_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD18_CITER_ELINKYES EDMA_0_TCD.CITER18.TCD18_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD18_DOFF EDMA_0_TCD.TCD18_DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD18_DLAST_SGA EDMA_0_TCD.TCD18_DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD18_BITER_ELINKNO EDMA_0_TCD.BITER18.TCD18_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD18_BITER_ELINKYES EDMA_0_TCD.BITER18.TCD18_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD18_CSR EDMA_0_TCD.TCD18_CSR.R        /* TCD Control and Status */
#define EDMA_0_TCD_CH19_CSR  EDMA_0_TCD.CH19_CSR.R         /* Channel Control and Status */
#define EDMA_0_TCD_CH19_ES   EDMA_0_TCD.CH19_ES.R          /* Channel Error Status */
#define EDMA_0_TCD_CH19_INT  EDMA_0_TCD.CH19_INT.R         /* Channel Interrupt Status */
#define EDMA_0_TCD_CH19_SBR  EDMA_0_TCD.CH19_SBR.R         /* Channel System Bus */
#define EDMA_0_TCD_CH19_PRI  EDMA_0_TCD.CH19_PRI.R         /* Channel Priority */
#define EDMA_0_TCD_TCD19_SADDR EDMA_0_TCD.TCD19_SADDR.R    /* TCD Source Address */
#define EDMA_0_TCD_TCD19_ATTR EDMA_0_TCD.TCD19_ATTR.R      /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD19_SOFF EDMA_0_TCD.TCD19_SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD19_NBYTES_MLOFFNO EDMA_0_TCD.NBYTES19.TCD19_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD19_NBYTES_MLOFFYES EDMA_0_TCD.NBYTES19.TCD19_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD19_SLAST_SDA EDMA_0_TCD.TCD19_SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD19_DADDR EDMA_0_TCD.TCD19_DADDR.R    /* TCD Destination Address */
#define EDMA_0_TCD_TCD19_CITER_ELINKNO EDMA_0_TCD.CITER19.TCD19_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD19_CITER_ELINKYES EDMA_0_TCD.CITER19.TCD19_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD19_DOFF EDMA_0_TCD.TCD19_DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD19_DLAST_SGA EDMA_0_TCD.TCD19_DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD19_BITER_ELINKNO EDMA_0_TCD.BITER19.TCD19_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD19_BITER_ELINKYES EDMA_0_TCD.BITER19.TCD19_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD19_CSR EDMA_0_TCD.TCD19_CSR.R        /* TCD Control and Status */
#define EDMA_0_TCD_CH20_CSR  EDMA_0_TCD.CH20_CSR.R         /* Channel Control and Status */
#define EDMA_0_TCD_CH20_ES   EDMA_0_TCD.CH20_ES.R          /* Channel Error Status */
#define EDMA_0_TCD_CH20_INT  EDMA_0_TCD.CH20_INT.R         /* Channel Interrupt Status */
#define EDMA_0_TCD_CH20_SBR  EDMA_0_TCD.CH20_SBR.R         /* Channel System Bus */
#define EDMA_0_TCD_CH20_PRI  EDMA_0_TCD.CH20_PRI.R         /* Channel Priority */
#define EDMA_0_TCD_TCD20_SADDR EDMA_0_TCD.TCD20_SADDR.R    /* TCD Source Address */
#define EDMA_0_TCD_TCD20_ATTR EDMA_0_TCD.TCD20_ATTR.R      /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD20_SOFF EDMA_0_TCD.TCD20_SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD20_NBYTES_MLOFFNO EDMA_0_TCD.NBYTES20.TCD20_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD20_NBYTES_MLOFFYES EDMA_0_TCD.NBYTES20.TCD20_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD20_SLAST_SDA EDMA_0_TCD.TCD20_SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD20_DADDR EDMA_0_TCD.TCD20_DADDR.R    /* TCD Destination Address */
#define EDMA_0_TCD_TCD20_CITER_ELINKNO EDMA_0_TCD.CITER20.TCD20_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD20_CITER_ELINKYES EDMA_0_TCD.CITER20.TCD20_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD20_DOFF EDMA_0_TCD.TCD20_DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD20_DLAST_SGA EDMA_0_TCD.TCD20_DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD20_BITER_ELINKNO EDMA_0_TCD.BITER20.TCD20_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD20_BITER_ELINKYES EDMA_0_TCD.BITER20.TCD20_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD20_CSR EDMA_0_TCD.TCD20_CSR.R        /* TCD Control and Status */
#define EDMA_0_TCD_CH21_CSR  EDMA_0_TCD.CH21_CSR.R         /* Channel Control and Status */
#define EDMA_0_TCD_CH21_ES   EDMA_0_TCD.CH21_ES.R          /* Channel Error Status */
#define EDMA_0_TCD_CH21_INT  EDMA_0_TCD.CH21_INT.R         /* Channel Interrupt Status */
#define EDMA_0_TCD_CH21_SBR  EDMA_0_TCD.CH21_SBR.R         /* Channel System Bus */
#define EDMA_0_TCD_CH21_PRI  EDMA_0_TCD.CH21_PRI.R         /* Channel Priority */
#define EDMA_0_TCD_TCD21_SADDR EDMA_0_TCD.TCD21_SADDR.R    /* TCD Source Address */
#define EDMA_0_TCD_TCD21_ATTR EDMA_0_TCD.TCD21_ATTR.R      /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD21_SOFF EDMA_0_TCD.TCD21_SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD21_NBYTES_MLOFFNO EDMA_0_TCD.NBYTES21.TCD21_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD21_NBYTES_MLOFFYES EDMA_0_TCD.NBYTES21.TCD21_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD21_SLAST_SDA EDMA_0_TCD.TCD21_SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD21_DADDR EDMA_0_TCD.TCD21_DADDR.R    /* TCD Destination Address */
#define EDMA_0_TCD_TCD21_CITER_ELINKNO EDMA_0_TCD.CITER21.TCD21_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD21_CITER_ELINKYES EDMA_0_TCD.CITER21.TCD21_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD21_DOFF EDMA_0_TCD.TCD21_DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD21_DLAST_SGA EDMA_0_TCD.TCD21_DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD21_BITER_ELINKNO EDMA_0_TCD.BITER21.TCD21_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD21_BITER_ELINKYES EDMA_0_TCD.BITER21.TCD21_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD21_CSR EDMA_0_TCD.TCD21_CSR.R        /* TCD Control and Status */
#define EDMA_0_TCD_CH22_CSR  EDMA_0_TCD.CH22_CSR.R         /* Channel Control and Status */
#define EDMA_0_TCD_CH22_ES   EDMA_0_TCD.CH22_ES.R          /* Channel Error Status */
#define EDMA_0_TCD_CH22_INT  EDMA_0_TCD.CH22_INT.R         /* Channel Interrupt Status */
#define EDMA_0_TCD_CH22_SBR  EDMA_0_TCD.CH22_SBR.R         /* Channel System Bus */
#define EDMA_0_TCD_CH22_PRI  EDMA_0_TCD.CH22_PRI.R         /* Channel Priority */
#define EDMA_0_TCD_TCD22_SADDR EDMA_0_TCD.TCD22_SADDR.R    /* TCD Source Address */
#define EDMA_0_TCD_TCD22_ATTR EDMA_0_TCD.TCD22_ATTR.R      /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD22_SOFF EDMA_0_TCD.TCD22_SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD22_NBYTES_MLOFFNO EDMA_0_TCD.NBYTES22.TCD22_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD22_NBYTES_MLOFFYES EDMA_0_TCD.NBYTES22.TCD22_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD22_SLAST_SDA EDMA_0_TCD.TCD22_SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD22_DADDR EDMA_0_TCD.TCD22_DADDR.R    /* TCD Destination Address */
#define EDMA_0_TCD_TCD22_CITER_ELINKNO EDMA_0_TCD.CITER22.TCD22_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD22_CITER_ELINKYES EDMA_0_TCD.CITER22.TCD22_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD22_DOFF EDMA_0_TCD.TCD22_DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD22_DLAST_SGA EDMA_0_TCD.TCD22_DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD22_BITER_ELINKNO EDMA_0_TCD.BITER22.TCD22_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD22_BITER_ELINKYES EDMA_0_TCD.BITER22.TCD22_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD22_CSR EDMA_0_TCD.TCD22_CSR.R        /* TCD Control and Status */
#define EDMA_0_TCD_CH23_CSR  EDMA_0_TCD.CH23_CSR.R         /* Channel Control and Status */
#define EDMA_0_TCD_CH23_ES   EDMA_0_TCD.CH23_ES.R          /* Channel Error Status */
#define EDMA_0_TCD_CH23_INT  EDMA_0_TCD.CH23_INT.R         /* Channel Interrupt Status */
#define EDMA_0_TCD_CH23_SBR  EDMA_0_TCD.CH23_SBR.R         /* Channel System Bus */
#define EDMA_0_TCD_CH23_PRI  EDMA_0_TCD.CH23_PRI.R         /* Channel Priority */
#define EDMA_0_TCD_TCD23_SADDR EDMA_0_TCD.TCD23_SADDR.R    /* TCD Source Address */
#define EDMA_0_TCD_TCD23_ATTR EDMA_0_TCD.TCD23_ATTR.R      /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD23_SOFF EDMA_0_TCD.TCD23_SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD23_NBYTES_MLOFFNO EDMA_0_TCD.NBYTES23.TCD23_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD23_NBYTES_MLOFFYES EDMA_0_TCD.NBYTES23.TCD23_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD23_SLAST_SDA EDMA_0_TCD.TCD23_SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD23_DADDR EDMA_0_TCD.TCD23_DADDR.R    /* TCD Destination Address */
#define EDMA_0_TCD_TCD23_CITER_ELINKNO EDMA_0_TCD.CITER23.TCD23_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD23_CITER_ELINKYES EDMA_0_TCD.CITER23.TCD23_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD23_DOFF EDMA_0_TCD.TCD23_DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD23_DLAST_SGA EDMA_0_TCD.TCD23_DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD23_BITER_ELINKNO EDMA_0_TCD.BITER23.TCD23_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD23_BITER_ELINKYES EDMA_0_TCD.BITER23.TCD23_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD23_CSR EDMA_0_TCD.TCD23_CSR.R        /* TCD Control and Status */
#define EDMA_0_TCD_CH24_CSR  EDMA_0_TCD.CH24_CSR.R         /* Channel Control and Status */
#define EDMA_0_TCD_CH24_ES   EDMA_0_TCD.CH24_ES.R          /* Channel Error Status */
#define EDMA_0_TCD_CH24_INT  EDMA_0_TCD.CH24_INT.R         /* Channel Interrupt Status */
#define EDMA_0_TCD_CH24_SBR  EDMA_0_TCD.CH24_SBR.R         /* Channel System Bus */
#define EDMA_0_TCD_CH24_PRI  EDMA_0_TCD.CH24_PRI.R         /* Channel Priority */
#define EDMA_0_TCD_TCD24_SADDR EDMA_0_TCD.TCD24_SADDR.R    /* TCD Source Address */
#define EDMA_0_TCD_TCD24_ATTR EDMA_0_TCD.TCD24_ATTR.R      /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD24_SOFF EDMA_0_TCD.TCD24_SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD24_NBYTES_MLOFFNO EDMA_0_TCD.NBYTES24.TCD24_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD24_NBYTES_MLOFFYES EDMA_0_TCD.NBYTES24.TCD24_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD24_SLAST_SDA EDMA_0_TCD.TCD24_SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD24_DADDR EDMA_0_TCD.TCD24_DADDR.R    /* TCD Destination Address */
#define EDMA_0_TCD_TCD24_CITER_ELINKNO EDMA_0_TCD.CITER24.TCD24_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD24_CITER_ELINKYES EDMA_0_TCD.CITER24.TCD24_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD24_DOFF EDMA_0_TCD.TCD24_DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD24_DLAST_SGA EDMA_0_TCD.TCD24_DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD24_BITER_ELINKNO EDMA_0_TCD.BITER24.TCD24_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD24_BITER_ELINKYES EDMA_0_TCD.BITER24.TCD24_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD24_CSR EDMA_0_TCD.TCD24_CSR.R        /* TCD Control and Status */
#define EDMA_0_TCD_CH25_CSR  EDMA_0_TCD.CH25_CSR.R         /* Channel Control and Status */
#define EDMA_0_TCD_CH25_ES   EDMA_0_TCD.CH25_ES.R          /* Channel Error Status */
#define EDMA_0_TCD_CH25_INT  EDMA_0_TCD.CH25_INT.R         /* Channel Interrupt Status */
#define EDMA_0_TCD_CH25_SBR  EDMA_0_TCD.CH25_SBR.R         /* Channel System Bus */
#define EDMA_0_TCD_CH25_PRI  EDMA_0_TCD.CH25_PRI.R         /* Channel Priority */
#define EDMA_0_TCD_TCD25_SADDR EDMA_0_TCD.TCD25_SADDR.R    /* TCD Source Address */
#define EDMA_0_TCD_TCD25_ATTR EDMA_0_TCD.TCD25_ATTR.R      /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD25_SOFF EDMA_0_TCD.TCD25_SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD25_NBYTES_MLOFFNO EDMA_0_TCD.NBYTES25.TCD25_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD25_NBYTES_MLOFFYES EDMA_0_TCD.NBYTES25.TCD25_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD25_SLAST_SDA EDMA_0_TCD.TCD25_SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD25_DADDR EDMA_0_TCD.TCD25_DADDR.R    /* TCD Destination Address */
#define EDMA_0_TCD_TCD25_CITER_ELINKNO EDMA_0_TCD.CITER25.TCD25_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD25_CITER_ELINKYES EDMA_0_TCD.CITER25.TCD25_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD25_DOFF EDMA_0_TCD.TCD25_DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD25_DLAST_SGA EDMA_0_TCD.TCD25_DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD25_BITER_ELINKNO EDMA_0_TCD.BITER25.TCD25_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD25_BITER_ELINKYES EDMA_0_TCD.BITER25.TCD25_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD25_CSR EDMA_0_TCD.TCD25_CSR.R        /* TCD Control and Status */
#define EDMA_0_TCD_CH26_CSR  EDMA_0_TCD.CH26_CSR.R         /* Channel Control and Status */
#define EDMA_0_TCD_CH26_ES   EDMA_0_TCD.CH26_ES.R          /* Channel Error Status */
#define EDMA_0_TCD_CH26_INT  EDMA_0_TCD.CH26_INT.R         /* Channel Interrupt Status */
#define EDMA_0_TCD_CH26_SBR  EDMA_0_TCD.CH26_SBR.R         /* Channel System Bus */
#define EDMA_0_TCD_CH26_PRI  EDMA_0_TCD.CH26_PRI.R         /* Channel Priority */
#define EDMA_0_TCD_TCD26_SADDR EDMA_0_TCD.TCD26_SADDR.R    /* TCD Source Address */
#define EDMA_0_TCD_TCD26_ATTR EDMA_0_TCD.TCD26_ATTR.R      /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD26_SOFF EDMA_0_TCD.TCD26_SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD26_NBYTES_MLOFFNO EDMA_0_TCD.NBYTES26.TCD26_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD26_NBYTES_MLOFFYES EDMA_0_TCD.NBYTES26.TCD26_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD26_SLAST_SDA EDMA_0_TCD.TCD26_SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD26_DADDR EDMA_0_TCD.TCD26_DADDR.R    /* TCD Destination Address */
#define EDMA_0_TCD_TCD26_CITER_ELINKNO EDMA_0_TCD.CITER26.TCD26_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD26_CITER_ELINKYES EDMA_0_TCD.CITER26.TCD26_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD26_DOFF EDMA_0_TCD.TCD26_DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD26_DLAST_SGA EDMA_0_TCD.TCD26_DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD26_BITER_ELINKNO EDMA_0_TCD.BITER26.TCD26_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD26_BITER_ELINKYES EDMA_0_TCD.BITER26.TCD26_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD26_CSR EDMA_0_TCD.TCD26_CSR.R        /* TCD Control and Status */
#define EDMA_0_TCD_CH27_CSR  EDMA_0_TCD.CH27_CSR.R         /* Channel Control and Status */
#define EDMA_0_TCD_CH27_ES   EDMA_0_TCD.CH27_ES.R          /* Channel Error Status */
#define EDMA_0_TCD_CH27_INT  EDMA_0_TCD.CH27_INT.R         /* Channel Interrupt Status */
#define EDMA_0_TCD_CH27_SBR  EDMA_0_TCD.CH27_SBR.R         /* Channel System Bus */
#define EDMA_0_TCD_CH27_PRI  EDMA_0_TCD.CH27_PRI.R         /* Channel Priority */
#define EDMA_0_TCD_TCD27_SADDR EDMA_0_TCD.TCD27_SADDR.R    /* TCD Source Address */
#define EDMA_0_TCD_TCD27_ATTR EDMA_0_TCD.TCD27_ATTR.R      /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD27_SOFF EDMA_0_TCD.TCD27_SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD27_NBYTES_MLOFFNO EDMA_0_TCD.NBYTES27.TCD27_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD27_NBYTES_MLOFFYES EDMA_0_TCD.NBYTES27.TCD27_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD27_SLAST_SDA EDMA_0_TCD.TCD27_SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD27_DADDR EDMA_0_TCD.TCD27_DADDR.R    /* TCD Destination Address */
#define EDMA_0_TCD_TCD27_CITER_ELINKNO EDMA_0_TCD.CITER27.TCD27_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD27_CITER_ELINKYES EDMA_0_TCD.CITER27.TCD27_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD27_DOFF EDMA_0_TCD.TCD27_DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD27_DLAST_SGA EDMA_0_TCD.TCD27_DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD27_BITER_ELINKNO EDMA_0_TCD.BITER27.TCD27_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD27_BITER_ELINKYES EDMA_0_TCD.BITER27.TCD27_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD27_CSR EDMA_0_TCD.TCD27_CSR.R        /* TCD Control and Status */
#define EDMA_0_TCD_CH28_CSR  EDMA_0_TCD.CH28_CSR.R         /* Channel Control and Status */
#define EDMA_0_TCD_CH28_ES   EDMA_0_TCD.CH28_ES.R          /* Channel Error Status */
#define EDMA_0_TCD_CH28_INT  EDMA_0_TCD.CH28_INT.R         /* Channel Interrupt Status */
#define EDMA_0_TCD_CH28_SBR  EDMA_0_TCD.CH28_SBR.R         /* Channel System Bus */
#define EDMA_0_TCD_CH28_PRI  EDMA_0_TCD.CH28_PRI.R         /* Channel Priority */
#define EDMA_0_TCD_TCD28_SADDR EDMA_0_TCD.TCD28_SADDR.R    /* TCD Source Address */
#define EDMA_0_TCD_TCD28_ATTR EDMA_0_TCD.TCD28_ATTR.R      /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD28_SOFF EDMA_0_TCD.TCD28_SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD28_NBYTES_MLOFFNO EDMA_0_TCD.NBYTES28.TCD28_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD28_NBYTES_MLOFFYES EDMA_0_TCD.NBYTES28.TCD28_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD28_SLAST_SDA EDMA_0_TCD.TCD28_SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD28_DADDR EDMA_0_TCD.TCD28_DADDR.R    /* TCD Destination Address */
#define EDMA_0_TCD_TCD28_CITER_ELINKNO EDMA_0_TCD.CITER28.TCD28_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD28_CITER_ELINKYES EDMA_0_TCD.CITER28.TCD28_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD28_DOFF EDMA_0_TCD.TCD28_DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD28_DLAST_SGA EDMA_0_TCD.TCD28_DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD28_BITER_ELINKNO EDMA_0_TCD.BITER28.TCD28_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD28_BITER_ELINKYES EDMA_0_TCD.BITER28.TCD28_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD28_CSR EDMA_0_TCD.TCD28_CSR.R        /* TCD Control and Status */
#define EDMA_0_TCD_CH29_CSR  EDMA_0_TCD.CH29_CSR.R         /* Channel Control and Status */
#define EDMA_0_TCD_CH29_ES   EDMA_0_TCD.CH29_ES.R          /* Channel Error Status */
#define EDMA_0_TCD_CH29_INT  EDMA_0_TCD.CH29_INT.R         /* Channel Interrupt Status */
#define EDMA_0_TCD_CH29_SBR  EDMA_0_TCD.CH29_SBR.R         /* Channel System Bus */
#define EDMA_0_TCD_CH29_PRI  EDMA_0_TCD.CH29_PRI.R         /* Channel Priority */
#define EDMA_0_TCD_TCD29_SADDR EDMA_0_TCD.TCD29_SADDR.R    /* TCD Source Address */
#define EDMA_0_TCD_TCD29_ATTR EDMA_0_TCD.TCD29_ATTR.R      /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD29_SOFF EDMA_0_TCD.TCD29_SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD29_NBYTES_MLOFFNO EDMA_0_TCD.NBYTES29.TCD29_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD29_NBYTES_MLOFFYES EDMA_0_TCD.NBYTES29.TCD29_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD29_SLAST_SDA EDMA_0_TCD.TCD29_SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD29_DADDR EDMA_0_TCD.TCD29_DADDR.R    /* TCD Destination Address */
#define EDMA_0_TCD_TCD29_CITER_ELINKNO EDMA_0_TCD.CITER29.TCD29_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD29_CITER_ELINKYES EDMA_0_TCD.CITER29.TCD29_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD29_DOFF EDMA_0_TCD.TCD29_DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD29_DLAST_SGA EDMA_0_TCD.TCD29_DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD29_BITER_ELINKNO EDMA_0_TCD.BITER29.TCD29_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD29_BITER_ELINKYES EDMA_0_TCD.BITER29.TCD29_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD29_CSR EDMA_0_TCD.TCD29_CSR.R        /* TCD Control and Status */
#define EDMA_0_TCD_CH30_CSR  EDMA_0_TCD.CH30_CSR.R         /* Channel Control and Status */
#define EDMA_0_TCD_CH30_ES   EDMA_0_TCD.CH30_ES.R          /* Channel Error Status */
#define EDMA_0_TCD_CH30_INT  EDMA_0_TCD.CH30_INT.R         /* Channel Interrupt Status */
#define EDMA_0_TCD_CH30_SBR  EDMA_0_TCD.CH30_SBR.R         /* Channel System Bus */
#define EDMA_0_TCD_CH30_PRI  EDMA_0_TCD.CH30_PRI.R         /* Channel Priority */
#define EDMA_0_TCD_TCD30_SADDR EDMA_0_TCD.TCD30_SADDR.R    /* TCD Source Address */
#define EDMA_0_TCD_TCD30_ATTR EDMA_0_TCD.TCD30_ATTR.R      /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD30_SOFF EDMA_0_TCD.TCD30_SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD30_NBYTES_MLOFFNO EDMA_0_TCD.NBYTES30.TCD30_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD30_NBYTES_MLOFFYES EDMA_0_TCD.NBYTES30.TCD30_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD30_SLAST_SDA EDMA_0_TCD.TCD30_SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD30_DADDR EDMA_0_TCD.TCD30_DADDR.R    /* TCD Destination Address */
#define EDMA_0_TCD_TCD30_CITER_ELINKNO EDMA_0_TCD.CITER30.TCD30_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD30_CITER_ELINKYES EDMA_0_TCD.CITER30.TCD30_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD30_DOFF EDMA_0_TCD.TCD30_DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD30_DLAST_SGA EDMA_0_TCD.TCD30_DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD30_BITER_ELINKNO EDMA_0_TCD.BITER30.TCD30_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD30_BITER_ELINKYES EDMA_0_TCD.BITER30.TCD30_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD30_CSR EDMA_0_TCD.TCD30_CSR.R        /* TCD Control and Status */
#define EDMA_0_TCD_CH31_CSR  EDMA_0_TCD.CH31_CSR.R         /* Channel Control and Status */
#define EDMA_0_TCD_CH31_ES   EDMA_0_TCD.CH31_ES.R          /* Channel Error Status */
#define EDMA_0_TCD_CH31_INT  EDMA_0_TCD.CH31_INT.R         /* Channel Interrupt Status */
#define EDMA_0_TCD_CH31_SBR  EDMA_0_TCD.CH31_SBR.R         /* Channel System Bus */
#define EDMA_0_TCD_CH31_PRI  EDMA_0_TCD.CH31_PRI.R         /* Channel Priority */
#define EDMA_0_TCD_TCD31_SADDR EDMA_0_TCD.TCD31_SADDR.R    /* TCD Source Address */
#define EDMA_0_TCD_TCD31_ATTR EDMA_0_TCD.TCD31_ATTR.R      /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD31_SOFF EDMA_0_TCD.TCD31_SOFF.R      /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD31_NBYTES_MLOFFNO EDMA_0_TCD.NBYTES31.TCD31_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD31_NBYTES_MLOFFYES EDMA_0_TCD.NBYTES31.TCD31_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD31_SLAST_SDA EDMA_0_TCD.TCD31_SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD31_DADDR EDMA_0_TCD.TCD31_DADDR.R    /* TCD Destination Address */
#define EDMA_0_TCD_TCD31_CITER_ELINKNO EDMA_0_TCD.CITER31.TCD31_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD31_CITER_ELINKYES EDMA_0_TCD.CITER31.TCD31_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD31_DOFF EDMA_0_TCD.TCD31_DOFF.R      /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD31_DLAST_SGA EDMA_0_TCD.TCD31_DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD31_BITER_ELINKNO EDMA_0_TCD.BITER31.TCD31_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD31_BITER_ELINKYES EDMA_0_TCD.BITER31.TCD31_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD31_CSR EDMA_0_TCD.TCD31_CSR.R        /* TCD Control and Status */
#define EDMA_0_TCD_CH0_CSR   EDMA_0_TCD.CH0_CSR.R          /* Channel Control and Status */
#define EDMA_0_TCD_CH0_ES    EDMA_0_TCD.CH0_ES.R           /* Channel Error Status */
#define EDMA_0_TCD_CH0_INT   EDMA_0_TCD.CH0_INT.R          /* Channel Interrupt Status */
#define EDMA_0_TCD_CH0_SBR   EDMA_0_TCD.CH0_SBR.R          /* Channel System Bus */
#define EDMA_0_TCD_CH0_PRI   EDMA_0_TCD.CH0_PRI.R          /* Channel Priority */
#define EDMA_0_TCD_TCD0_SADDR EDMA_0_TCD.TCD0_SADDR.R      /* TCD Source Address */
#define EDMA_0_TCD_TCD0_ATTR EDMA_0_TCD.TCD0_ATTR.R        /* TCD Transfer Attributes */
#define EDMA_0_TCD_TCD0_SOFF EDMA_0_TCD.TCD0_SOFF.R        /* TCD Signed Source Address Offset */
#define EDMA_0_TCD_TCD0_NBYTES_MLOFFNO EDMA_0_TCD.NBYTES0.TCD0_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define EDMA_0_TCD_TCD0_NBYTES_MLOFFYES EDMA_0_TCD.NBYTES0.TCD0_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define EDMA_0_TCD_TCD0_SLAST_SDA EDMA_0_TCD.TCD0_SLAST_SDA.R /* TCD Last Source Address Adjustment / Store DADDR Address */
#define EDMA_0_TCD_TCD0_DADDR EDMA_0_TCD.TCD0_DADDR.R      /* TCD Destination Address */
#define EDMA_0_TCD_TCD0_CITER_ELINKNO EDMA_0_TCD.CITER0.TCD0_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD0_CITER_ELINKYES EDMA_0_TCD.CITER0.TCD0_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD0_DOFF EDMA_0_TCD.TCD0_DOFF.R        /* TCD Signed Destination Address Offset */
#define EDMA_0_TCD_TCD0_DLAST_SGA EDMA_0_TCD.TCD0_DLAST_SGA.R /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define EDMA_0_TCD_TCD0_BITER_ELINKNO EDMA_0_TCD.BITER0.TCD0_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define EDMA_0_TCD_TCD0_BITER_ELINKYES EDMA_0_TCD.BITER0.TCD0_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define EDMA_0_TCD_TCD0_CSR  EDMA_0_TCD.TCD0_CSR.R         /* TCD Control and Status */

#ifdef __MWERKS__
#pragma pop
#endif
#ifdef __ghs__
#pragma ghs endnowarning
#endif
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif
#ifdef  __cplusplus
}
#endif
#endif /* ifdef _S32R294_H */
